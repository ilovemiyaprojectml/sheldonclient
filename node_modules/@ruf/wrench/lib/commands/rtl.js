let { parse, stringify } = require('scss-parser');
const glob = require('glob');
const fs = require('fs');
const scssfmt = require('scssfmt');
let { flipProperty, FLIPPROPERTIES } = require('./lib/flipProperty');
const { FLIPVALUES } = require('./lib/flipValueOf');

function flip(css) {
  if (css.value && Array.isArray(css.value)) {
    css.value.forEach(declaration => {
      if (declaration.type === 'declaration') {
        const property = declaration.value[0];
        if (property.type === 'property') {
          const propertyName = property.value[0].value;
          // Flip property
          // ex: margin-left => margin-right
          if (FLIPPROPERTIES[propertyName]) {
            // This is readonly object hence make it writeable first.
            property.value[0] = { ...property.value[0] };
            property.value[0].value = flipProperty(property.value[0].value);
          }
          // Flip values
          // 2px 3px 4px 5px => 2px 5px 4px 3px
          if (FLIPVALUES[propertyName]) {
            const propertyValue = declaration.value[2];
            FLIPVALUES[propertyName](propertyValue);
          }
        }
      } else {
        flip(declaration);
      }
    });
  }

  return css;
}

function flipSCSS(scss) {
  // Create an AST
  let ast = parse(scss);
  const rtlSCSS = stringify(flip(ast));
  return rtlSCSS;
}

exports.execute = options => {
  // It would be executed as ruf-wrench generate-rtl-styles --path
  const path = options.flags.path;
  let srcPath = path ? path : `${process.cwd()}/**/*.scss`;
  if (srcPath) {
    glob(srcPath, (error, files) => {
      if (error) throw error;
      if (files && files.length === 0) {
        throw new Error(`No file found at given path ${srcPath}`);
      }
      for (const filename of files) {
        console.info(`Processing file ${filename}`);
        const content = fs.readFileSync(filename).toString();
        if (content !== null && content !== undefined && content.length > 0) {
          let rtlContent = flipSCSS(content);
          rtlContent = `
                  ${content}
  
  
                  [dir='rtl'] {
                      ${rtlContent}
                  }
                  `;
          fs.writeFileSync(filename, scssfmt(rtlContent));
        }
      }
    });
  }
};
