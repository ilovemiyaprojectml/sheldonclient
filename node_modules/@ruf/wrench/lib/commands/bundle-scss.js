'use strict';

// Const childProc = require("child_process");
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const Bundler = require('scss-bundle').Bundler;

exports.execute = function(options, context) {
  // eslint-disable-line
  // The logic is as follows
  // It would b executed as ruf-wrench bundle-scss --projectRoot=libs/mybu/lib2 --projectName=mybu-lib2
  const projectName = options.flags.projectName;
  const projectRoot = options.flags.projectRoot;
  const libName = options.flags.libName;

  // Check if tha app or lib exits. Show error message and exit if not.
  if (!context.ngCliJson.projects[projectName]) {
    console.log(
      `Application or library ${chalk.bold.red(
        projectName
      )} does not exist in the workspace.`
    );
    process.exit(0);
  }

  const destScss = `./dist/${projectRoot}/_${libName}-theme.scss`;
  const destFilePath = path.join(process.cwd(), destScss);
  const bundler = new Bundler(undefined, process.cwd());

  bundler.bundle(`./${projectRoot}/src/lib/_${libName}-theme.scss`).then(result => {
    let destFileContents = result.bundledContent;
    // Remove the external node_modules/* imports like @angular/material from the final bundle.
    const importRegEx = new RegExp(`(@import 'node_modules).*[\r\n|\n]`, 'g');
    const regEx = new RegExp(
      `(/\\*\\*\\* IMPORTED FILE NOT FOUND \\*\\*\\*/)[\r\n|\n]`,
      'g'
    );
    destFileContents = destFileContents.replace(regEx, '');
    destFileContents = destFileContents.replace(importRegEx, '');

    fs.writeFileSync(destFilePath, destFileContents, 'utf8');
    console.log(chalk.green(`Bundled theme ${path.resolve(destScss)}`));
  });
};
