/* eslint-disable no-case-declarations */
'use strict';
const path = require('path');
const fs = require('fs');
const chalk = require('chalk');
const scssCommand = require('./commands/bundle-scss');
const rtlCommand = require('./commands/rtl');
const gatherStatsCommand = require('./commands/gather-stats');
const rufStorePackager = require('@ruf/store-packager');
const rufNavigationAccelerator = require('@ruf/navigation-accelerator');

exports.main = function(options) {
  // The ruf-wrench is always run in the context of a workspace
  // verify that that's the case by checking for .angular-cli.json file in the process.cwd()
  let ngCliJson;
  try {
    ngCliJson = require(path.join(process.cwd(), 'angular.json'));
  } catch (e) {
    /* Ignore silently and exit the process */
    process.exit(0);
  }
  // Create context
  const context = {
    ngCliJson
  };

  /* Usage
   * options.input[0] corresponds to the command. For example -
   *  ruf-wrench bundleScss --app=mylib (options.input[0] === 'bundleScss')
   */
  const command = options.input[0] || '';
  switch (command.toLowerCase()) {
    case 'bundle-scss':
      /* Remove the first command
       * so for the invocation like - ruf-wrench bundleScss --app=mylib
       * options.input in handler function will be []
       */
      options.input.splice(0, 1);
      scssCommand.execute(options, context);
      break;
    case 'generate-package-metadata':
      const packageMetadata = rufStorePackager.execute(options);
      const dest = options.flags.dest || 'dist';
      packageMetadata.then(metadata => {
        fs.writeFileSync(
          `${dest}/packageMetadata.json`,
          JSON.stringify(metadata, null, ' '),
          'utf8'
        );
        console.log(chalk.green('Package metadata file created in ', dest));
      });
      break;
    case 'generate-rtl-styles':
      options.input.splice(0, 1);
      rtlCommand.execute(options);
      break;
    case 'migrate-navigation':
      rufNavigationAccelerator.execute(options);
      break;
    default:
      gatherStatsCommand.execute(options, context);
  }
};
