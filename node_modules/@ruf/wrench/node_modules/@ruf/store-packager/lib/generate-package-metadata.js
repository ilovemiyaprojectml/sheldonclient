"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const project_scanner_1 = require("@ruf/project-scanner");
const bundler_1 = require("@ruf/bundler");
const _ = require("lodash");
function generatePackageMetadata(options) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('RUF Store Packager Invoked!!!', options.flags);
        const storeMetadata = {
            htmldocs: '',
            contents: [],
            examples: [],
            logo: '',
            screenshots: '',
            sections: ''
        };
        const rootDir = path_1.dirname(options.flags.root);
        const examples = yield extractExamples(rootDir);
        storeMetadata.examples = examples;
        const readmes = yield extractReadmes(rootDir, rootDir);
        storeMetadata.readmes = readmes;
        const expaths = examples.map((ex) => Object.keys(ex));
        const readmePaths = Object.keys(readmes);
        project_scanner_1.traverseAngularProgram([path_1.join(process.cwd(), options.flags.root)], (entry) => {
            const compEntry = populateMetadata(entry, rootDir);
            if (compEntry.type === 'Directive' ||
                compEntry.type === 'Component' ||
                compEntry.type === 'Pipe') {
                compEntry.examples = getCompPaths(expaths && expaths.length > 0 ? expaths[0] : [], `${path_1.dirname(compEntry.path)}/examples`);
            }
            compEntry.readme = getCompPaths(readmePaths, path_1.dirname(compEntry.path))[0];
            storeMetadata.contents.push(compEntry);
        });
        return storeMetadata;
    });
}
exports.generatePackageMetadata = generatePackageMetadata;
function getCompPaths(paths, compDir) {
    const filteredPaths = paths.filter(eachPath => path_1.dirname(eachPath) === compDir);
    if (filteredPaths && filteredPaths.length > 0) {
        return filteredPaths;
    }
    return [];
}
function populateMetadata(entry, projectRoot) {
    return {
        type: entry.type,
        name: entry.name,
        path: getRelativePath(entry.filePath, path_1.join(process.cwd(), projectRoot).replace(/\\/g, '/')),
        jsDoc: entry.jsDoc,
        settings: entry.settings
    };
}
function getRelativePath(fromPath = '', toPath = '') {
    return fromPath.substr(toPath.length);
}
function extractExamples(projectRoot) {
    return __awaiter(this, void 0, void 0, function* () {
        const resultObj = [];
        const exObj = {};
        yield bundler_1.findExamples({ cwd: projectRoot }, (ex, info) => {
            const fullPath = info.dir.replace(/\\/g, '/');
            const examplePath = fullPath.substr(projectRoot.length);
            exObj[examplePath] = ex;
        });
        if (!_.isEmpty(exObj)) {
            resultObj.push(exObj);
        }
        return resultObj;
    });
}
function extractReadmes(pathStr, projectRoot) {
    return __awaiter(this, void 0, void 0, function* () {
        const resultObj = {};
        yield bundler_1.findReadmes({ cwd: pathStr }, (readmeFile) => {
            const readmePath = readmeFile.prop
                .replace(/\\/g, '/')
                .substr(projectRoot.length);
            resultObj[readmePath] = readmeFile.data;
        });
        return resultObj;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtcGFja2FnZS1tZXRhZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmF0ZS1wYWNrYWdlLW1ldGFkYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwrQkFBcUM7QUFDckMsMERBQTRFO0FBQzVFLDBDQU1zQjtBQUV0Qiw0QkFBNEI7QUFzQjVCLGlDQUNFLE9BQVk7O1FBRVosT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsTUFBTSxhQUFhLEdBQWtCO1lBQ25DLFFBQVEsRUFBRSxFQUFFO1lBQ1osUUFBUSxFQUFFLEVBQUU7WUFDWixRQUFRLEVBQUUsRUFBRTtZQUNaLElBQUksRUFBRSxFQUFFO1lBQ1IsV0FBVyxFQUFFLEVBQUU7WUFDZixRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUM7UUFFRixNQUFNLE9BQU8sR0FBRyxjQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUc1QyxNQUFNLFFBQVEsR0FBRyxNQUFNLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRCxhQUFhLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUdsQyxNQUFNLE9BQU8sR0FBRyxNQUFNLGNBQWMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkQsYUFBYSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFaEMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQThCLEVBQUUsRUFBRSxDQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUNoQixDQUFDO1FBQ0YsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV6Qyx3Q0FBc0IsQ0FDcEIsQ0FBQyxXQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDekMsQ0FBQyxLQUFtQixFQUFFLEVBQUU7WUFDdEIsTUFBTSxTQUFTLEdBQW9CLGdCQUFnQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVwRSxJQUNFLFNBQVMsQ0FBQyxJQUFJLEtBQUssV0FBVztnQkFDOUIsU0FBUyxDQUFDLElBQUksS0FBSyxXQUFXO2dCQUM5QixTQUFTLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFDekI7Z0JBQ0EsU0FBUyxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQy9CLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQy9DLEdBQUcsY0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFLLENBQUMsV0FBVyxDQUN2QyxDQUFDO2FBQ0g7WUFDRCxTQUFTLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsY0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFFLGFBQWEsQ0FBQyxRQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FDRixDQUFDO1FBRUYsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztDQUFBO0FBakRELDBEQWlEQztBQUVELHNCQUFzQixLQUFlLEVBQUUsT0FBZTtJQUNwRCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsY0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDO0lBQzlFLElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzdDLE9BQU8sYUFBYSxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBRUQsMEJBQ0UsS0FBbUIsRUFDbkIsV0FBbUI7SUFFbkIsT0FBTztRQUNMLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7UUFDaEIsSUFBSSxFQUFFLGVBQWUsQ0FDbkIsS0FBSyxDQUFDLFFBQVEsRUFDZCxXQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQ3JEO1FBQ0QsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtLQUN6QixDQUFDO0FBQ0osQ0FBQztBQUVELHlCQUF5QixXQUFtQixFQUFFLEVBQUUsU0FBaUIsRUFBRTtJQUNqRSxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCx5QkFBK0IsV0FBbUI7O1FBQ2hELE1BQU0sU0FBUyxHQUFpQyxFQUFFLENBQUM7UUFDbkQsTUFBTSxLQUFLLEdBQStCLEVBQUUsQ0FBQztRQUM3QyxNQUFNLHNCQUFZLENBQUMsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFXLEVBQUUsSUFBaUIsRUFBRSxFQUFFO1lBQzFFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM5QyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckIsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2QjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FBQTtBQUVELHdCQUE4QixPQUFlLEVBQUUsV0FBbUI7O1FBQ2hFLE1BQU0sU0FBUyxHQUE4QixFQUFFLENBQUM7UUFDaEQsTUFBTSxxQkFBVyxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsVUFBcUIsRUFBRSxFQUFFO1lBRTVELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxJQUFJO2lCQUMvQixPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQztpQkFDbkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5QixTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FBQSJ9