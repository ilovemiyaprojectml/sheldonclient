"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const name_utils_1 = require("@nrwl/workspace/src/utils/name-utils");
const cli_config_utils_1 = require("@nrwl/workspace/src/utils/cli-config-utils");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const fileutils_1 = require("@nrwl/workspace/src/utils/fileutils");
function default_1(schema) {
    return (host, context) => {
        // for an invocation like ng g lib lib1 --directory mybu
        // schema = { publishable: true, directory: 'mybu', name: 'lib1', prefix: undefined}
        // options = { publishable: true, directory: 'mybu', name: 'lib1', prefix: 'micro',projectName: 'mybu-lib1', projectRoot: 'libs/mybu/lib1', projectDirectory: 'mybu/lib1' }
        const options = normalizeOptions(host, schema);
        // copy welcome component and routing module
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template({
                tmpl: '',
                name: options.name,
                directory: options.directory
            })
        ]);
        return schematics_1.chain([
            schematics_1.externalSchematic('@nrwl/schematics', 'lib', Object.assign({}, schema, { framework: 'angular' })),
            schematics_1.branchAndMerge(schematics_1.chain([schematics_1.mergeWith(templateSource)])),
            prefixThemeScss(options),
            addBuildScriptToWsPkg(options)
        ])(host, context);
    };
}
exports.default = default_1;
function normalizeOptions(host, options) {
    const projectDirectory = options.directory
        ? `${name_utils_1.toFileName(options.directory)}/${name_utils_1.toFileName(options.name)}`
        : name_utils_1.toFileName(options.name);
    const projectRoot = `libs/${projectDirectory}`;
    const projectName = projectDirectory.replace(new RegExp('/', 'g'), '-');
    const defaultPrefix = cli_config_utils_1.getNpmScope(host);
    return Object.assign({}, options, { prefix: options.prefix ? options.prefix : defaultPrefix, projectName,
        projectRoot,
        projectDirectory });
}
function addBuildScriptToWsPkg(options) {
    return (host) => {
        // read workspace package.json and add the following scripts to the scripts section
        // "pkg:${projectName}": "ng-packagr -p libs/${name}/package.json"
        // "postpkg:${projectName}": "ruf-wrench bundle-scss --projectRoot=${options.projectRoot} --projectName={options.projectName} --libName=${options.name}"
        if (options.publishable) {
            const pkg = ast_utils_1.readJsonInTree(host, 'package.json');
            pkg.scripts[`pkg:${options.projectName}`] = `ng build --project ${options.projectName}`;
            pkg.scripts[`postpkg:${options.projectName}`] = `./node_modules/.bin/ruf-wrench bundle-scss --projectRoot=${options.projectRoot} --projectName=${options.projectName} --libName=${options.name}`;
            host.overwrite('package.json', fileutils_1.serializeJson(pkg));
        }
        return host;
    };
}
function prefixThemeScss(options) {
    return (host) => {
        const name = options.name;
        host.rename(`${options.projectRoot}/src/lib/${name}-theme.scss`, `${options.projectRoot}/src/lib/_${name}-theme.scss`);
        return host;
    };
}
//# sourceMappingURL=index.js.map