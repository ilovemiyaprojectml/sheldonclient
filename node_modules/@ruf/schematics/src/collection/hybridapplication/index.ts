import { toFileName } from '@nrwl/workspace/src/utils/name-utils';
import { serializeJson } from '@nrwl/workspace/src/utils/fileutils';
import { getNpmScope } from '@nrwl/workspace/src/utils/cli-config-utils';
import { readJsonInTree } from '@nrwl/workspace/src/utils/ast-utils';
import { Tree, Rule, externalSchematic, chain, apply, url, template, branchAndMerge, mergeWith, SchematicContext } from '@angular-devkit/schematics';
import { Schema } from './schema';
import * as cheerio from 'cheerio';
import { join } from 'path';
const lodashTmpl = require('lodash.template');
import { readFileSync } from 'fs';
import * as sortKeys from 'sort-keys';

interface NormalizedSchema extends Schema {
  // for invocation with --directory (such as ng g app app1 --directory mybu), it will be apps/mybu/app1
  // for invocation without --directory, it will be apps/app1
  appProjectRoot: string;
  // for invocation like ng g app app1 --directory mybu, appProjectName will be 'mybu-app1' and that's the project name in angular.json
  appProjectName: string;
}

export default function (schema: Schema): Rule {
  return (host: Tree, context: SchematicContext) => {
    const options = normalizeOptions(host, schema);

    // copy welcome component and routing module
    const templateSource = apply(url('./files'), [
      template({
        tmpl: '',
        name: options.name,
        directory: options.directory
      })
    ]);

    return chain([
      externalSchematic('@nrwl/schematics', 'app', {
        ...schema,
        style: 'scss',
        routing: false,
        framework: 'angular'
      }),
      branchAndMerge(chain([mergeWith(templateSource)])),
      updateStylesScss(options),
      updateIndexHtml(options),
      updateAppComponentFiles(options),
      updateAppModuleTs(options),
      updateMainTs(options),
      replaceFavicon(options),
      updateCliJson(options),
      updatePackageJson(),
      updateAppConfigTs(options),
      updateE2eTestFiles(options),
    ])(host, context);
  };
}

function normalizeOptions(host: Tree, options: Schema): NormalizedSchema {
  const appDirectory = options.directory
    ? `${toFileName(options.directory)}/${toFileName(options.name)}`
    : toFileName(options.name);

  const appProjectRoot = `apps/${appDirectory}`;

  const appProjectName = appDirectory.replace(new RegExp('/', 'g'), '-');

  const defaultPrefix = getNpmScope(host);
  return {
    ...options,
    appProjectRoot,
    prefix: options.prefix ? options.prefix : defaultPrefix,
    appProjectName,
  };
}

function updateStylesScss(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const stylesScssTmpl = lodashTmpl(stylesScss);
    host.overwrite(`${options.appProjectRoot}/src/styles.scss`, stylesScssTmpl({ name: options.name }));
    return host;
  }
}

function updateIndexHtml(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const indexHtml = host.read(`${options.appProjectRoot}/src/index.html`)!.toString('utf-8');
    const $ = cheerio.load(indexHtml);
    const selector = options.prefix ? `${options.prefix}-root` : 'app-root';
    $(`${selector}`).append('<ruf-loading-screen></ruf-loading-screen>');
    host.overwrite(`${options.appProjectRoot}/src/index.html`, $.html());

    return host;
  }
}

function updateAppComponentFiles(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    host.overwrite(`${options.appProjectRoot}/src/app/app.component.html`, appComponentHtml);
    if (!options.skipTests && options.unitTestRunner !== "none") {
      const appComponentSpecTmpl = lodashTmpl(getAppComponentSpecTs());
      host.overwrite(`${options.appProjectRoot}/src/app/app.component.spec.ts`, appComponentSpecTmpl({ name: options.name }));
    }
    const appCompTmpl = lodashTmpl(appComponentTs);
    host.overwrite(`${options.appProjectRoot}/src/app/app.component.ts`, appCompTmpl({ name: options.name, prefix: options.prefix }));

    return host;
  }
}

function updateAppModuleTs(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const appModuleTmpl = lodashTmpl(appModuleTs);
    host.overwrite(`${options.appProjectRoot}/src/app/app.module.ts`, appModuleTmpl({ name: options.name }));
  }
}
function updateMainTs(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    host.overwrite(`${options.appProjectRoot}/src/main.ts`, mainTs);
  }
}
function replaceFavicon(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    host.overwrite(`${options.appProjectRoot}/src/favicon.ico`, readFileSync(join(__dirname, 'favicon.ico')));
    return host;
  }
}

function updateCliJson(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const cliJson = readJsonInTree(host, 'angular.json');
    // find the current app in the projects array
    const app = cliJson.projects[options.appProjectName];
    if (app) {
      // add required .css files to styles array
      if (app.architect.build.options.styles) {
        app.architect.build.options.styles.push('./node_modules/@ruf/fis-ux-assets/styles/icon_font.css');
        app.architect.build.options.styles.push('./node_modules/@ruf/shell/styles/loading-screen.css');
        app.architect.build.options.styles.push('./node_modules/@ruf/fis-theme-plateau/dist/kendo-hybrid.css');
        app.architect.build.options.styles.push('./node_modules/@ruf/fis-theme-plateau/dist/style-hybrid.css');
      }
      if (app.architect.test.options.styles) {
        app.architect.test.options.styles.push('./node_modules/@ruf/fis-ux-assets/styles/icon_font.css');
        app.architect.test.options.styles.push('./node_modules/@ruf/shell/styles/loading-screen.css');
        app.architect.test.options.styles.push('./node_modules/@ruf/fis-theme-plateau/dist/kendo-hybrid.css');
        app.architect.test.options.styles.push('./node_modules/@ruf/fis-theme-plateau/dist/style-hybrid.css');
      }
      // add required scripts
      if (app.architect.build.options.scripts) {
        app.architect.build.options.scripts.push('node_modules/jquery/dist/jquery.js');
        app.architect.build.options.scripts.push('node_modules/angular/angular.js');
        app.architect.build.options.scripts.push('node_modules/underscore/underscore.js');
        app.architect.build.options.scripts.push('node_modules/keymaster/keymaster.js');
      }

      if (app.architect.test.options.scripts) {
        app.architect.test.options.scripts.push('node_modules/jquery/dist/jquery.js');
        app.architect.test.options.scripts.push('node_modules/angular/angular.js');
        app.architect.test.options.scripts.push('node_modules/underscore/underscore.js');
        app.architect.test.options.scripts.push('node_modules/keymaster/keymaster.js');
      }
      // update assets
      if (app.architect.build.options.assets) {
        app.architect.build.options.assets.push(`${options.appProjectRoot}/src/api`)
        app.architect.build.options.assets.push(`${options.appProjectRoot}/src/views`)
      }

    }
    host.overwrite('angular.json', serializeJson(cliJson));
    return host;
  }
}

function updateE2eTestFiles(options: NormalizedSchema): Rule {
  /*
    For cypress
    <app-name>-e2e/src/support/app.po.ts -> replace 'h1' with 'ruf-page-header-title'

    <app-name>-e2e/src/integration/app.spec.ts
      -> replace 'Hello Nx' with app name
      -> replace 'Welcome to <app-name>!' with 'Welcome to RUF!'


    For Protractor
    <app-name>-e2e/src/app.po.ts -> replace '<prefix>-root h1' with 'ruf-page-header-title'

    <app-name>-e2e/src/app.e2e-spec.ts
      -> replace 'workspace-project App' with app name
      -> replace 'Welcome to <app-name>!' with 'Welcome To RUF!'
  */
  return (host: Tree) => {
    if (options.skipTests || options.e2eTestRunner === "none") {
      return;
    }

    const isCypress = options.e2eTestRunner === 'cypress';
    let appPoTsFilePath;
    let appSpecTsFilePath;
    let appPoTsFileSearchPatterns = [];
    let appSpecTsFileSearchPatterns = [];

    if (isCypress) {
      appPoTsFilePath = `${options.appProjectRoot}-e2e/src/support/app.po.ts`;
      appSpecTsFilePath = `${options.appProjectRoot}-e2e/src/integration/app.spec.ts`;

      appPoTsFileSearchPatterns.push({ lookFor: 'h1', replaceWith: 'ruf-page-header-title' });

      appSpecTsFileSearchPatterns.push({ lookFor: 'Hello Nx', replaceWith: `${options.appProjectName}` });
      appSpecTsFileSearchPatterns.push({ lookFor: `Welcome to ${options.appProjectName}!`, replaceWith: 'Welcome to RUF!' });
    } else {
      appPoTsFilePath = `${options.appProjectRoot}-e2e/src/app.po.ts`;
      appSpecTsFilePath = `${options.appProjectRoot}-e2e/src/app.e2e-spec.ts`;

      appPoTsFileSearchPatterns.push({ lookFor: `${options.prefix}-root h1`, replaceWith: 'ruf-page-header-title' });

      appSpecTsFileSearchPatterns.push({ lookFor: 'workspace-project App', replaceWith: `${options.appProjectName}` });
      appSpecTsFileSearchPatterns.push({ lookFor: `Welcome to ${options.appProjectName}!`, replaceWith: 'Welcome To RUF!' });
    }

    const replacerFn = (acc: string, pattern: { [key: string]: any }) => {
      return acc.replace(pattern.lookFor, pattern.replaceWith);
    };

    const appPoTsFile = host.read(appPoTsFilePath)!.toString('utf-8');
    if (appPoTsFile) {
      host.overwrite(appPoTsFilePath, appPoTsFileSearchPatterns.reduce(replacerFn, appPoTsFile));
    }

    const appSpecTsFile = host.read(appSpecTsFilePath)!.toString('utf-8');
    if (appSpecTsFile) {
      host.overwrite(appSpecTsFilePath, appSpecTsFileSearchPatterns.reduce(replacerFn, appSpecTsFile));
    }
  }
}

function updatePackageJson(): Rule {
  return (host: Tree) => {
    const hybridDependencies = {
      "@angular/upgrade": "~8.0.0",
      "@ngx-translate/core": "~11.0.0",
      "@ngx-translate/http-loader": "~4.0.0",
      "@ruf/fis-theme-plateau": "~4.5.0",
      "@ruf/fis-widgets": "~4.5.0",
      "@ruf/upgrade": "^3.0.0",
      "angular": "~1.7.2",
    };

    const hybridDevDependencies = {
      "@types/angular": "^1.6.51",
    };

    const pkg = readJsonInTree(host, 'package.json');
    pkg.dependencies = sortKeys({
      ...pkg.dependencies,
      ...hybridDependencies
    });

    pkg.devDependencies = sortKeys({
      ...pkg.devDependencies,
      ...hybridDevDependencies
    });

    host.overwrite('package.json', serializeJson(pkg));
    return host;
  }
}

function updateAppConfigTs(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const appConfigTmpl = lodashTmpl(appConfigTs);
    host.create(`${options.appProjectRoot}/src/app/app.config.ts`, appConfigTmpl({ name: options.name }));
  }
}

const appConfigTs = `
  import { InjectionToken } from '@angular/core';

  export function configToken() {
    return new InjectionToken('RUF_CONFIG');
  }
  export const RUF_CONFIG = configToken;

  export const rufConfig = {
    windowTitle: '<%= name%>',
    appId: '<%= name%>',
    appTitle: '<%= name%>',
    locale: 'en',
    endpoints: {
      navigation: 'api/navigation/message',
      i18n: 'api/i18n/messages'
    }
  };

`

/* Files that need to be overwritten have their content defined as template strings to help in testing */
const appComponentHtml = `
<div fxLayout="column" [style.height]="'100vh'">
  <ruf-banner color="primary">
    <ruf-banner-brand [title]="title"></ruf-banner-brand>
    <ruf-banner-row fxHide.xs>
      <ruf-navbar color="default">
        <ruf-menubar [selectedPath]="selectedPath" (select)="open($event.path)" rufMarginLeft="none">
          <a rufMenubarItem path="ruf/welcome">Welcome</a>
          <a rufMenubarItem path="/classic/form">Form</a>
        </ruf-menubar>
      </ruf-navbar>
    </ruf-banner-row>
  </ruf-banner>
  <ruf-app-canvas fxFlex [style.overflow-y]="'auto'">
    <router-outlet></router-outlet>
    <div class="ng-view"></div>
  </ruf-app-canvas>
  <ruf-footer>
    &copy; 2017 FIS
  </ruf-footer>
</div>
`;

function getAppComponentSpecTs() {
  return `
import { TestBed, async } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { MatIconModule } from '@angular/material';
import {
  RufAppCanvasModule,
  RufBannerModule,
  RufFooterModule,
  RufIconModule,
  RufMenubarModule,
  RufNavbarModule,
  RufPageHeaderModule
} from '@ruf/shell';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
        MatIconModule,
        RouterTestingModule,
        RufAppCanvasModule,
        RufBannerModule,
        RufFooterModule,
        RufIconModule,
        RufMenubarModule,
        RufNavbarModule,
        RufPageHeaderModule,
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  }));
  const title = '<%= name %>';
  it('should create the app', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app).toBeTruthy();
  }));

  it('should have proper title', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app.title).toEqual(title);
  }));

  it('should render title in a h1 tag', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.debugElement.nativeElement;
    expect(compiled.querySelector('h1').textContent).toContain(title);
  }));
});
`;
}

const appComponentTs = `
  import { Component, Inject, LOCALE_ID, OnInit } from '@angular/core';
  import { Location } from '@angular/common';
  import { TranslateService } from '@ngx-translate/core';
  import { RUFUpgradeHelper } from '@ruf/upgrade';
  import { RUF_CONFIG } from './app.config';

  @Component({
    selector: '<%= prefix %>-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.scss']
  })
  export class AppComponent {
    title = '<%= name %>';

    constructor(
      @Inject(LOCALE_ID) private localeid,
      private location: Location,
      private translate: TranslateService,
      @Inject(RUF_CONFIG) public CONFIG,
      private upgrade: RUFUpgradeHelper
    ) {
      translate.use('en');
    }

    ngOnInit() {
      this.title = this.CONFIG.windowTitle;
      this.upgrade.initRoute(this.location.path());
    }

    get selectedPath() {
      return this.location.path();
    }

    open(path: string) {
      this.upgrade.openView(path);
    }
  }

`;

const appModuleTs = `
  import { BrowserModule } from '@angular/platform-browser';
  import { NgModule } from '@angular/core';
  import { FormsModule } from '@angular/forms';
  import { HttpClientModule, HttpClient } from '@angular/common/http';
  import { UrlHandlingStrategy } from '@angular/router';
  import { MatCardModule, MatIconModule } from '@angular/material';
  import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
  import { TranslateHttpLoader } from '@ngx-translate/http-loader';
  import { RufShellModule } from '@ruf/shell';
  import { RufupgradeModule, HybridUrlHandlingStrategy } from '@ruf/upgrade';
  
  import { AppRoutingModule } from './app-routing.module';
  import { AppComponent } from './app.component';
  import { WelcomeComponent } from './welcome/welcome.component';
  import { rufConfig, RUF_CONFIG } from './app.config';
  
  export class <%= name%>UrlHandlingStrategy extends HybridUrlHandlingStrategy {
    get urlPattern(): string {
      // Ignore routes starting with 'classic/' or '/classic/'
      return '^(?!(classic\/|\/classic\/))';
    }
  }
  
  @NgModule({
    declarations: [
      AppComponent,
      WelcomeComponent
    ],
    imports: [
      BrowserModule,
      FormsModule,
      HttpClientModule,
      AppRoutingModule,
      MatCardModule,
      MatIconModule,
      TranslateModule.forRoot({
        loader: {
          provide: TranslateLoader,
          useFactory: translateHttpLoaderFactory,
          deps: [HttpClient]
        }
      }),
      RufupgradeModule,
      RufShellModule
    ],
    providers: [
      { provide: UrlHandlingStrategy, useClass: <%= name%>UrlHandlingStrategy },
      { provide: RUF_CONFIG, useValue: rufConfig }
    ],
    bootstrap: [AppComponent]
  })
  export class AppModule { }
  
  export function translateHttpLoaderFactory(http: HttpClient) {
    return new TranslateHttpLoader(http, 'api/i18n/messages/', '');
  }
  

`;


const stylesScss = `
/* You can add global styles to this file, and also import other style files */
@import './<%= name %>-theme.scss';
`;

const mainTs = `
  import { enableProdMode } from '@angular/core';
  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
  import { UpgradeModule } from '@angular/upgrade/static';
  import { RUFCoreModule, RUFUpgradeHelper } from '@ruf/upgrade';
  import { ClassicModule } from './app/classic.module';

  import { AppModule } from './app/app.module';
  import { environment } from './environments/environment';

  if (environment.production) {
    enableProdMode();
  }

  platformBrowserDynamic().bootstrapModule(AppModule).then(ref => {
    const upgrade = ref.injector.get(UpgradeModule) as UpgradeModule;
    // bootstrap RUF Classic module
    upgrade.bootstrap(document.body, [ClassicModule.name, RUFCoreModule.name]);
    const upgradeHelper = ref.injector.get(RUFUpgradeHelper) as RUFUpgradeHelper;
    upgradeHelper.afterModuleBootstrap(upgrade);
  });

`
