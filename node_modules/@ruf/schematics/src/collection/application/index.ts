import { toFileName } from '@nrwl/workspace/src/utils/name-utils';
import { serializeJson } from '@nrwl/workspace/src/utils/fileutils';
import { getNpmScope } from '@nrwl/workspace/src/utils/cli-config-utils';
import { readJsonInTree } from '@nrwl/workspace/src/utils/ast-utils';
import { Tree, Rule, externalSchematic, chain, apply, url, template, branchAndMerge, mergeWith, SchematicContext } from '@angular-devkit/schematics';
import { Schema } from './schema';
import * as cheerio from 'cheerio';
import { join } from 'path';
const lodashTmpl = require('lodash.template');
import { readFileSync } from 'fs';

interface NormalizedSchema extends Schema {
  // for invocation with --directory (such as ng g app app1 --directory mybu), it will be apps/mybu/app1
  // for invocation without --directory, it will be apps/app1
  appProjectRoot: string;
  // for invocation like ng g app app1 --directory mybu, appProjectName will be 'mybu-app1' and that's the project name in angular.json
  appProjectName: string;
}

export default function (schema: Schema): Rule {
  return (host: Tree, context: SchematicContext) => {
    const options = normalizeOptions(host, schema);

    // copy welcome component and routing module
    const templateSource = apply(url('./files'), [
      template({
        tmpl: '',
        name: options.name,
        directory: options.directory
      })
    ]);

    return chain([
      externalSchematic('@nrwl/schematics', 'app', {
        ...schema,
        style: 'scss',
        routing: false,
        framework: 'angular'
      }),
      branchAndMerge(chain([mergeWith(templateSource)])),
      updateStylesScss(options),
      updateIndexHtml(options),
      updateAppComponentFiles(options),
      replaceFavicon(options),
      updateCliJson(options),
      updateE2eTestFiles(options),
    ])(host, context);
  };
}

function normalizeOptions(host: Tree, options: Schema): NormalizedSchema {
  const appDirectory = options.directory
    ? `${toFileName(options.directory)}/${toFileName(options.name)}`
    : toFileName(options.name);

  const appProjectRoot = `apps/${appDirectory}`;

  const appProjectName = appDirectory.replace(new RegExp('/', 'g'), '-');

  const defaultPrefix = getNpmScope(host);
  return {
    ...options,
    appProjectRoot,
    prefix: options.prefix ? options.prefix : defaultPrefix,
    appProjectName,
  };
}

function updateStylesScss(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const stylesScssTmpl = lodashTmpl(stylesScss);
    host.overwrite(`${options.appProjectRoot}/src/styles.scss`, stylesScssTmpl({ name: options.name }));
    return host;
  }
}

function updateIndexHtml(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const indexHtml = host.read(`${options.appProjectRoot}/src/index.html`)!.toString('utf-8');
    const $ = cheerio.load(indexHtml);
    const selector = options.prefix ? `${options.prefix}-root` : 'app-root';
    $(`${selector}`).append('<ruf-loading-screen></ruf-loading-screen>');
    host.overwrite(`${options.appProjectRoot}/src/index.html`, $.html());

    return host;
  }
}

function updateAppComponentFiles(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    host.overwrite(`${options.appProjectRoot}/src/app/app.component.html`, appComponentHtml);
    if (!options.skipTests && options.unitTestRunner !== "none") {
      const appComponentSpecTmpl = lodashTmpl(getAppComponentSpecTs());
      host.overwrite(`${options.appProjectRoot}/src/app/app.component.spec.ts`, appComponentSpecTmpl({ name: options.name }));
    }
    const appCompTmpl = lodashTmpl(appComponentTs);
    host.overwrite(`${options.appProjectRoot}/src/app/app.component.ts`, appCompTmpl({ name: options.name, prefix: options.prefix }));
    host.overwrite(`${options.appProjectRoot}/src/app/app.module.ts`, getAppModuleTs());

    return host;
  }
}

function replaceFavicon(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    host.overwrite(`${options.appProjectRoot}/src/favicon.ico`, readFileSync(join(__dirname, 'favicon.ico')));
    return host;
  }
}

function updateCliJson(options: NormalizedSchema): Rule {
  return (host: Tree) => {
    const cliJson = readJsonInTree(host, 'angular.json');
    // find the current app in the projects array
    const app = cliJson.projects[options.appProjectName];
    if (app) {
      // Add "../../../node_modules/@ruf/fis-ux-assets/icon_font.css" to styles array
      if (app.architect.build.options.styles) {
        app.architect.build.options.styles.unshift('./node_modules/@ruf/fis-ux-assets/styles/icon_font.css');
      }
      if (app.architect.test.options.styles) {
        app.architect.test.options.styles.unshift('./node_modules/@ruf/fis-ux-assets/styles/icon_font.css');
      }
    }
    host.overwrite('angular.json', serializeJson(cliJson));
    return host;
  }
}

function updateE2eTestFiles(options: NormalizedSchema): Rule {
  /*
    For cypress
    <app-name>-e2e/src/support/app.po.ts -> replace 'h1' with 'ruf-page-header-title'

    <app-name>-e2e/src/integration/app.spec.ts
      -> replace 'Hello Nx' with app name
      -> replace 'Welcome to <app-name>!' with 'Welcome to RUF!'


    For Protractor
    <app-name>-e2e/src/app.po.ts -> replace '<prefix>-root h1' with 'ruf-page-header-title'

    <app-name>-e2e/src/app.e2e-spec.ts
      -> replace 'workspace-project App' with app name
      -> replace 'Welcome to <app-name>!' with 'Welcome To RUF!'
  */
  return (host: Tree) => {
    if (options.skipTests || options.e2eTestRunner === "none") {
      return;
    }

    const isCypress = options.e2eTestRunner === 'cypress';
    let appPoTsFilePath;
    let appSpecTsFilePath;
    let appPoTsFileSearchPatterns = [];
    let appSpecTsFileSearchPatterns = [];

    if (isCypress) {
      appPoTsFilePath = `${options.appProjectRoot}-e2e/src/support/app.po.ts`;
      appSpecTsFilePath = `${options.appProjectRoot}-e2e/src/integration/app.spec.ts`;

      appPoTsFileSearchPatterns.push({ lookFor: 'h1', replaceWith: 'ruf-page-header-title' });

      appSpecTsFileSearchPatterns.push({ lookFor: 'Hello Nx', replaceWith: `${options.appProjectName}` });
      appSpecTsFileSearchPatterns.push({ lookFor: `Welcome to ${options.appProjectName}!`, replaceWith: 'Welcome to RUF!' });
    } else {
      appPoTsFilePath = `${options.appProjectRoot}-e2e/src/app.po.ts`;
      appSpecTsFilePath = `${options.appProjectRoot}-e2e/src/app.e2e-spec.ts`;

      appPoTsFileSearchPatterns.push({ lookFor: `${options.prefix}-root h1`, replaceWith: 'ruf-page-header-title' });

      appSpecTsFileSearchPatterns.push({ lookFor: 'workspace-project App', replaceWith: `${options.appProjectName}` });
      appSpecTsFileSearchPatterns.push({ lookFor: `Welcome to ${options.appProjectName}!`, replaceWith: 'Welcome To RUF!' });
    }

    const replacerFn = (acc: string, pattern: { [key: string]: any }) => {
      return acc.replace(pattern.lookFor, pattern.replaceWith);
    };

    const appPoTsFile = host.read(appPoTsFilePath)!.toString('utf-8');
    if (appPoTsFile) {
      host.overwrite(appPoTsFilePath, appPoTsFileSearchPatterns.reduce(replacerFn, appPoTsFile));
    }

    const appSpecTsFile = host.read(appSpecTsFilePath)!.toString('utf-8');
    if (appSpecTsFile) {
      host.overwrite(appSpecTsFilePath, appSpecTsFileSearchPatterns.reduce(replacerFn, appSpecTsFile));
    }
  }
}

/* Files that need to be overwritten have their content defined as template strings to help in testing */
const appComponentHtml = `
<div fxLayout="column" [style.height]="'100vh'">
  <ruf-banner color="primary">
    <ruf-banner-brand [title]="title"></ruf-banner-brand>
    <ruf-banner-row fxHide.xs>
      <ruf-navbar color="default">
        <ruf-menubar rufMarginLeft="none">
          <a rufMenubarItem routerLink="welcome" routerLinkActive="ruf-menubar-item-active">Welcome</a>
        </ruf-menubar>
      </ruf-navbar>
    </ruf-banner-row>
  </ruf-banner>
  <ruf-app-canvas fxFlex [style.overflow-y]="'auto'">
    <router-outlet></router-outlet>
  </ruf-app-canvas>
  <ruf-footer>
    &copy; 2018 FIS
  </ruf-footer>
</div>
`;

function getAppComponentSpecTs() {
  return `
import { TestBed, async } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { MatIconModule } from '@angular/material';
import {
  RufAppCanvasModule,
  RufBannerModule,
  RufFooterModule,
  RufIconModule,
  RufMenubarModule,
  RufNavbarModule,
  RufPageHeaderModule
} from '@ruf/shell';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
        MatIconModule,
        RouterTestingModule,
        RufAppCanvasModule,
        RufBannerModule,
        RufFooterModule,
        RufIconModule,
        RufMenubarModule,
        RufNavbarModule,
        RufPageHeaderModule,
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  }));
  const title = '<%= name %>';
  it('should create the app', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app).toBeTruthy();
  }));

  it('should have proper title', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app.title).toEqual(title);
  }));

  it('should render title in a h1 tag', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.debugElement.nativeElement;
    expect(compiled.querySelector('h1').textContent).toContain(title);
  }));
});
`;
}

const appComponentTs = `
import { Component } from '@angular/core';

@Component({
  selector: '<%= prefix %>-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = '<%= name %>';
}

`;

function getAppModuleTs() {
  return `
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations'; // Don't like animations? Replace this with NoopAnimationsModule
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { MatIconModule } from '@angular/material';
import { FlexLayoutModule } from '@angular/flex-layout';

import {
  RufAppCanvasModule,
  RufLayoutModule,
  RufBannerModule,
  RufFooterModule,
  RufIconModule,
  RufMenubarModule,
  RufNavbarModule,
  RufPageHeaderModule
} from '@ruf/shell';

import { AppComponent } from './app.component';
import { WelcomeComponent } from './welcome/welcome.component';

@NgModule({
  declarations: [AppComponent, WelcomeComponent],
  imports: [
    BrowserModule,
    FlexLayoutModule,
    MatIconModule,
    BrowserAnimationsModule,
    RouterModule.forRoot([
      {
        path: '',
        children: [
          { path: 'welcome', component: WelcomeComponent },
          {
            path: '',
            redirectTo: '/welcome',
            pathMatch: 'full'
          }
        ]
      }
    ], { initialNavigation: 'enabled' }),
    RufAppCanvasModule,
    RufLayoutModule,
    RufBannerModule,
    RufFooterModule,
    RufIconModule,
    RufMenubarModule,
    RufNavbarModule,
    RufPageHeaderModule
  ],
  entryComponents: [],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}

`;
}

const stylesScss = `
/* You can add global styles to this file, and also import other style files */
@import './<%= name %>-theme.scss';
`;
