{"version":3,"sources":["fis-core-components:///fis-core-components.min.js","fis-core-components:///webpack/bootstrap 92d8bbdfc222239413f0","fis-core-components:///./index.js","webpack:///./index.js?2645","fis-core-components:///external \"angular\"","fis-core-components:///external \"'ngAnimate'\"","fis-core-components:///./data/constraints-factory.provider.js","webpack:///./data/constraints-factory.provider.js?7f83","fis-core-components:///./data/criteria-service.provider.js","webpack:///./data/criteria-service.provider.js?873d","fis-core-components:///./data/data-var.directive.js","webpack:///./data/data-var.directive.js?2e2e","fis-core-components:///./data/data.directive.js","webpack:///./data/data.directive.js?535b","fis-core-components:///./data/index.js","webpack:///./data/index.js?c50e","fis-core-components:///./data/resource-service.provider.js","webpack:///./data/resource-service.provider.js?02e5","fis-core-components:///./data/type-based-constraints.value.js","webpack:///./data/type-based-constraints.value.js?bca5","fis-core-components:///./directives/dragdrop/draggable.directive.js","webpack:///./directives/dragdrop/draggable.directive.js?7423","fis-core-components:///./directives/dragdrop/drop-target.directive.js","webpack:///./directives/dragdrop/drop-target.directive.js?8c10","fis-core-components:///./directives/dragdrop/index.js","webpack:///./directives/dragdrop/index.js?39c6","fis-core-components:///./directives/index.js","webpack:///./directives/index.js?4c47","fis-core-components:///./directives/utils/apply-class-directive.directive.js","webpack:///./directives/utils/apply-class-directive.directive.js?f742","fis-core-components:///./directives/utils/element-utils.factory.js","webpack:///./directives/utils/element-utils.factory.js?0561","fis-core-components:///./directives/utils/field-directive-factory.factory.js","webpack:///./directives/utils/field-directive-factory.factory.js?6c56","fis-core-components:///./directives/utils/index.js","webpack:///./directives/utils/index.js?48c6","fis-core-components:///./directives/utils/input.directive.js","webpack:///./directives/utils/input.directive.js?8d9a","fis-core-components:///./directives/utils/scope-utils.factory.js","webpack:///./directives/utils/scope-utils.factory.js?95c0","fis-core-components:///./directives/utils/trigger-directives.directive.js","webpack:///./directives/utils/trigger-directives.directive.js?c78a","fis-core-components:///./directives/utils/unique-id-service.factory.js","webpack:///./directives/utils/unique-id-service.factory.js?d7e8","fis-core-components:///./directives/utils/unique-id.directive.js","webpack:///./directives/utils/unique-id.directive.js?ba6e","fis-core-components:///./filters/index.js","webpack:///./filters/index.js?717e","fis-core-components:///./filters/interpolate.filter.js","webpack:///./filters/interpolate.filter.js?4756","fis-core-components:///./filters/search.filter.js","webpack:///./filters/search.filter.js?5c5c","fis-core-components:///./filters/uncamelcase.filter.js","webpack:///./filters/uncamelcase.filter.js?675b","fis-core-components:///./fis-angular-decorators.js","webpack:///./fis-angular-decorators.js?776f","fis-core-components:///./fis.js","webpack:///./fis.js?7908","fis-core-components:///./hook/hook-list.directive.js","webpack:///./hook/hook-list.directive.js?5089","fis-core-components:///./hook/hook.directive.js","webpack:///./hook/hook.directive.js?d674","fis-core-components:///./hook/index.js","webpack:///./hook/index.js?47f3","fis-core-components:///./i18n/i18n-service.provider.js","webpack:///./i18n/i18n-service.provider.js?b8aa","fis-core-components:///./i18n/i18n.directive.js","webpack:///./i18n/i18n.directive.js?d1a5","fis-core-components:///./i18n/i18n.filter.js","webpack:///./i18n/i18n.filter.js?83d4","fis-core-components:///./i18n/index.js","webpack:///./i18n/index.js?92d0","fis-core-components:///./i18n/translate.directive.js","webpack:///./i18n/translate.directive.js?015f","fis-core-components:///./i18n/translate.filter.js","webpack:///./i18n/translate.filter.js?7496","fis-core-components:///./i18n/translate.provider.js","webpack:///./i18n/translate.provider.js?4c1f","fis-core-components:///./pubsub/index.js","webpack:///./pubsub/index.js?5502","fis-core-components:///./pubsub/pubsub.directive.js","webpack:///./pubsub/pubsub.directive.js?d48a","fis-core-components:///./pubsub/pubsub.service.js","webpack:///./pubsub/pubsub.service.js?3732","fis-core-components:///./services/client-storage-service.provider.js","webpack:///./services/client-storage-service.provider.js?234a","fis-core-components:///./services/conditional-loader-service.factory.js","webpack:///./services/conditional-loader-service.factory.js?172f","fis-core-components:///./services/config-service.provider.js","webpack:///./services/config-service.provider.js?90e5","fis-core-components:///./services/exception-handler.decorator.js","webpack:///./services/exception-handler.decorator.js?6e85","fis-core-components:///./services/http-error-interceptor.config.js","webpack:///./services/http-error-interceptor.config.js?7a6a","fis-core-components:///./services/http-error-interceptor.provider.js","webpack:///./services/http-error-interceptor.provider.js?fc6c","fis-core-components:///./services/index.js","webpack:///./services/index.js?28a0","fis-core-components:///./services/template-cache-service.provider.js","webpack:///./services/template-cache-service.provider.js?6dfe","fis-core-components:///./services/user-context-service.provider.js","webpack:///./services/user-context-service.provider.js?3801","fis-core-components:///./utils/index.js","webpack:///./utils/index.js?0c7b","fis-core-components:///./utils/memory-util-service.provider.js","webpack:///./utils/memory-util-service.provider.js?d63b","fis-core-components:///./utils/util-service.provider.js","webpack:///./utils/util-service.provider.js?a5b6","fis-core-components:///./views/element.directive.js","webpack:///./views/element.directive.js?7dc6","fis-core-components:///./views/index.js","webpack:///./views/index.js?0acf","fis-core-components:///./views/navigation-service.provider.js","webpack:///./views/navigation-service.provider.js?df11","fis-core-components:///./views/view-panel-service.provider.js","webpack:///./views/view-panel-service.provider.js?0c2a","fis-core-components:///./views/view-service.provider.js","webpack:///./views/view-service.provider.js?dddb","fis-core-components:///./views/views.config.js","webpack:///./views/views.config.js?fc21","fis-core-components:///./views/views.directive.js","webpack:///./views/views.directive.js?928d","fis-core-components:///external \"'ngResource'\"","fis-core-components:///external \"'ngRoute'\"","fis-core-components:///external \"'ngSanitize'\"","fis-core-components:///external \"_\"","fis-core-components:///external \"jQuery\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_angularSanitize","_angularSanitize2","_angularResource","_angularResource2","_angularAnimate","_angularAnimate2","_hook","_hook2","_data","_data2","_directives","_directives2","_filters","_filters2","_i18n","_i18n2","_pubsub","_pubsub2","_services","_services2","_utils","_utils2","_views","_views2","ngModule","angular","ngAnimate","ngSanitize","ngResource","hook","data","directives","filters","i18n","pubsub","services","utils","views","name","decorator","$delegate","$$addScopeInfo","$element","scope","isolated","noTemplate","dataName","run","$rootScope","controllersArr","$sniffer","msie","parseInt","exec","navigator","userAgent","toLowerCase","_hasEvent","hasEvent","event","this","Object","defineProperty","value","self","$get","typeBasedConstraints","constraintsFactory","getConstraintsByType","type","result","isDefined","string","toInt","str","parseISODate","match","R_ISO8601_STR","date","Date","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","h","s","ms","Math","round","parseFloat","Criteria","operator","isString","service","operators","AND","operands","isObject","jsonObj","currentOperator","indexOf","Error","newCrit","newCriteria","isArray","completeCriteriaFromOperands","inputoperands","origCrit","i","length","operand","add","Criterion","property","constraint","skipValidation","isNumber","isNaN","isFinite","isValidValue","isUndefined","constraintsWithoutValue","toISOString","e","Boolean","isDate","constraints","EQ","marshallValue","substring","parse","toString","replace","OR","CONTAINS","NE","GT","GE","LT","LE","STARTS_WITH","ENDS_WITH","IS_NULL","NOT_CONTAINS","NOT_ENDS_WITH","NOT_NULL","IN_REL_RANGE","NOT_IN_REL_RANGE","IN_FUTURE","IN_PAST","BETWEEN","NOT_BETWEEN","IN","NOT_IN","IS_EMPTY","NOT_EMPTY","NOT_STARTS_WITH","prototype","setOperator","validate","push","setOperands","isValid","isChild","j","nextOperand","validateWithoutError","console","warn","crit","getAsString","finalCrit","next","setProperty","setValue","setConstraint","$parse","$timeout","fisMemoryUtilService","restrict","require","link","elem","attrs","fisData","fisDataVar","fisDataVarAttr","loadData","defaultPrevented","timeout1","promise","fetchData","then","dataVar","assign","cancelTimeoutOnDestroy","fisRefresh","$on","dataChangeListener","addDataChangedListener","fisResourceService","$q","fisCriteriaService","fisElementUtils","$interpolate","fisUtilService","fisConfig","fisScopeUtils","queryParameterPrefix","priority","compile","_paramVariables","copyProperties","controller","$attrs","$scope","isAlwaysFetch","fisFetchVisibleOnly","retrieveDataFromSchemaData","resultData","results","schema","forEach","item","normalizeData","extend","extractData","total","invokeListeners","listeners","listener","getDataFromResource","params","instance","deferred","defer","odataV3Adaptor","$filter","offset","$skip","limit","$top","sort","$orderby","$format","Resource","getData","resolve","afterFetchListeners","d","reject","determineResource","val","functionExpression","fixedResourceUrl","fisAdaptor","dataSourceAdaptor","watchFn","allowFetch","is","lastParams","undefined","postDigest","arrayExpression","objectExpression","beforeFetchListeners","dataChangedListeners","fisSchemaData","fisSchemaTotal","fisDataChangeWatch","$watch","newVal","oldVal","fireDataChanged","getSchema","fisSort","sortExpressionArray","sortExpr","sortDefs","split","sortDef","parts","field","dir","sortedParam","newDeferred","fisCriteria","mergedCriteria","mergedOperands","concat","hasOwnProperty","key","interpolatedValue","getter","when","isFunction","scoped","idx","splice","addBeforeFetchListener","addAfterFetchListener","_angular","_angular2","_dataVar","_dataVar2","_resourceService","_resourceService2","_criteriaService","_criteriaService2","_constraintsFactory","_constraintsFactory2","_typeBasedConstraints","_typeBasedConstraints2","directive","provider","resourceService","criteriaService","$resource","url","paramDefaults","actions","localResource","success","failure","ret","get","headers","res","query","basicConstraints","label","numberConstraints","defaultConstraints","integer","currency","percentage","number","double","datetime","time","defaultType","boolean","fisPubSubService","element","draggable","fisDraggable","attr","dragStartEvent","fisDragDropType","dragEvent","dragEndEvent","addEventListener","publish","preventDefault","dragEnterEvent","dragLeaveEvent","dropEvent","_draggable","_draggable2","_dropTarget","_dropTarget2","dropTarget","_dragdrop","_dragdrop2","dragdrop","$compile","terminal","addClass","$eval","fisApplyClassDirective","sourceObject","prefix","targetObject","propertyNames","keys","filter","propertyName","truncatedName","substr","invokeAndObserve","fn","$observe","_","fisUniqueIdService","fieldValueFn","models","$modelValue","moveAssignAttributesToInputs","tplElement","inputs","findInputs","labels","findLabel","moveAttributesToInputs","assignAttributesToInputs","moveAttributesToLabel","linkWrapper","linkFn","valueFn","ctrls","fisLabel","required","find","editModelName","generateUniqueId","fisFieldValueFn","rootElement","rootAttrs","inputAttrs","getAttributesForInput","omit","denormalized","$attr","labelAttrs","getAttributesForLabel","root","endsWith","re","RegExp","attrName","parent","nodeList","querySelectorAll","each","index","n","fieldTemplate","FieldController","$transclude","$parent","fisEditMode","watch","fisDisabled","disabled","fisRequired","removeClass","editMode","registeredInputs","registerInput","ngModel","fisProperty","unregisterInput","fieldValue","FieldDirective","options","transclude","editTemplate","viewTemplate","compiledTemplate","template","context","fisSize","markup","noop","replaceWith","create","_FieldController","_elementUtils","_elementUtils2","_fieldDirectiveFactory","_fieldDirectiveFactory2","_scopeUtils","_scopeUtils2","_uniqueIdService","_uniqueIdService2","_input","_input2","_applyClassDirective","_applyClassDirective2","_triggerDirectives","_triggerDirectives2","_uniqueId","_uniqueId2","factory","elementUtils","fieldDirective","scopeUtils","uniqueIdService","input","applyClassDirective","uniqueId","extractProperty","path","sep","$ctrl","constructor","join","fisInput","fisName","on","watched","cb","def","callback","apply","unregister","timeout","current","previous","$apply","cancel","trigger","$broadcast","oldValue","replaceNonAlphaNumeric","spacesOnly","pattern","appendOrReplace","base","attributes","idBase","allowOverride","seed","generateIdWithStaticSeed","fis","initParams","appStage","generateUniqueIdForce","idCounter","initialized","$root","nonGenId","returnValue","ngClick","fisI18n","childIdBase","staticId","idPrefix","fisUniqueIdSeed","fisSeed","charAt","seedArr","parents","fisIdNoIncrement","fisUniqueId","_interpolate","_interpolate2","_search","_search2","_uncamelcase","_uncamelcase2","interpolate","search","uncamelcase","_typeof","Symbol","iterator","text","String","itm","list","queryObj","requiredObj","queryKeys","some","currentItemMatchesQueryObj","every","queryKey","toUpperCase","window","sg","__angularModule","__controllers","deps","origCtrlFn","entry","arguments","document","o1","o2","findRootElement","querySelector","findInjector","injector","cacheQuery","version","cacheVersion","paths","shim","opts","getRequestParam","baseElement","log","getCacheQuery","cacheQueryParameter","args","prefixContext","pathObj","modifiedPaths","getLocationPath","arrContext","arrContextLength","prop","location","pathname","packages","arr","main","bootstrapAngular","depModules","getInjector","bootstrap","start","configEndpoint","ready","encodeURIComponent","decodeURIComponent","getYear","buildHookListElement","buffer","hookListConfig","configItem","enabled","buildHookElement","hooks","hookId","newTemplate","hookList","append","$templateCache","fisTemplateCacheService","addController","startDiv","ngController","endDiv","setHookData","fisHookData","templateName","getTemplate","_hookList","_hookList2","hookDirective","hookListDirective","NOT_FOUND","defaultLocale","setDefaultLocale","locale","$http","$location","conf","$translate","processLocaleConfiguration","defaultLang","initLang","lang","serv","supportedLanguages","foundLang","language","equals","standardLangCode","defaults","common","use","supportedLanguagesDeferred","fetchLocale","findBestDefaultLanguage","fetchLocaleFromConfig","preferredLocale","languages","userLanguage","getTranslatedValues","keysToTranslate","translations","translation","trim","getKeysToTranslate","ns","copy","shift","cancelTranslateLoadingSuccess","proposedLanguage","isTranslationReady","isReady","getTranslationTable","translate","instant","translateAsync","asyncTranslation","cancelTranslateChangeSuccess","html","fisI18nService","fisViewPanelService","DefalutValue","view","activeViewPanel","_translate","_translate2","_i18nService","_i18nService2","_translate3","_translate4","_i18n3","_i18n4","_translate5","_translate6","i18nService","translateProvider","i18nDirective","translateDirective","defaultValue","dummy","warningPrinted","preferredLanguage","translationId","interpolateParams","interpolationId","defaultTranslationText","_pubsub3","_pubsub4","pubsubService","unsubs","subscribe","topic","unsubscribe","payload","$$phase","pop","addListener","sticky","count","_sticky","_lastPayload","retPromises","l","all","retVals","handle","$window","fisUserContextService","createStorageKey","userKey","userId","appId","separator","inited","init","setItem","storageKey","sessionStorage","localStorage","storageType","toJson","getItem","fromJson","removeItem","$injector","publishEvent","conditionalLoader","constantName","urlTemplate","urlParams","eventName","has","httpResponse","defaultFactory","config","cfg","loader","configPromise","err","status","doc","interceptors","ANY","handler","exception","cause","intercept","message","$httpProvider","loginStatuses","setLoginRequiredStatus","httpStatuses","successFn","response","rejectNoRetry","responseError","_exceptionHandler","_exceptionHandler2","_clientStorageService","_clientStorageService2","_conditionalLoaderService","_conditionalLoaderService2","_configServiceProvider","_configServiceProvider2","_httpErrorInterceptorProvider","_httpErrorInterceptorProvider2","_templateCacheServiceProvider","_templateCacheServiceProvider2","_userContextServiceProvider","_userContextServiceProvider2","_httpErrorInterceptorConfig","_httpErrorInterceptorConfig2","exceptionHandler","clientStorage","configService","httpErrorInterceptor","templateCacheService","userContextService","conditionalLoaderService","httpErrorInterceptorConfig","addTemplate","put","removeTemplate","remove","userInContext","user","clonedUser","_memoryUtilService","_memoryUtilService2","_utilService","_utilService2","memoryUtilService","utilService","logging","callCleanAll","node","removeListeners","destroyNode","domNode","$","children","child","$destroy","unbind","destroyAllChildNodes","parentNode","cancelTimeoutOnComponentCtrlDestroy","compCtrl","$onDestroy","cancelWatchOnDestroy","destroyScopeAndData","removeData","destroyKendoWidgets","widgets","destroy","purgeAttributes","elements","removeAttr","a","removeAttribute","queryStringToObject","queryString","queryPairs","queryElem","elemParts","objectToQueryString","object","slice","calculateContainerWidth","component","width","appendQueryParameters","pathString","anchorString","queryObject","mergedQueryString","appendCacheQueryParameter","customVersion","cacheQueryObject","temp","tokens","t","isTokenArrayAccess","extractValue","test","booleanCheck","actualValue","lowercase","Number","fisElement","_angularRoute","_angularRoute2","_element","_element2","_views3","_views4","_viewPanelService","_viewPanelService2","_viewService","_viewService2","_navigationService","_navigationService2","ngRoute","elementDirective","viewsDirective","viewPanelService","viewService","navigationService","navigation","nav","setNavigation","getNavigation","DEFAULT_OPEN_STRAT","CUSTOM_OPEN_STRAT","openStratStr","customStrategyFn","preventBrowserNavigation","setViewOpeningStrategy","getViewOpeningStrategy","setPreventBrowserNavigation","getPreventBrowserNavigation","ViewPanel","viewDef","navItem","title","setTitle","stringOrObject","customTitle","tl","suffix","setIcon","cssClass","customIcon","resetIcon","getTitle","getIcon","icon","resetTitle","fisViewService","$route","$routeParams","$controller","startAvailableStrategies","loadKeepTabsOpenVariable","setupTabsAfterNavReady","setupPreventBrowserNavigation","setupLocaleChangeHandle","refreshInterval","setInterval","publishNavComplete","keepTabsOpenVariableLoaded","tabsAfterNavReadySet","preventBrowserNavigationSet","clearInterval","strategies","mdi","mdiFunction","browser","browserFunction","isDuplicatePath","items","keepSameTabsOpenOnReload","fisTabsBar","tabs","tabItem","findNavItem","newTabs","getNewTabs","newTab","newStaticPage","resetSelectedPanelPath","isValidTab","hasNonCloseableFlag","hasDropdownSecondaryMenu","closeable","secondaryNav","selectedPanelPath","selectedPanelUnresolvedPath","selectedPanelParams","onLocationChangeStart","onLocationChangeStartNavigate","shellReady","navigationUnderWay","changeLocationNavigationUnderway","open","newPath","oldPath","newUrl","getUrlWithoutHash","oldUrl","activePanel","load","getItemFromPath2Item","checkAndSetForSecondaryNavItem","navParent","getSecondaryNavThroughPaths","paramsToUse","tabAlreadyPresent","tab","parentTitle","parentIcon","newNavItem","openSecNavItem","unresolvedPath","getSecondaryNavParent","publishViewPanelChange","previousViewPanel","decodedParams","addDecodedParams","before","after","currentNavItem","paramValue","callRelevantStrategy","localEvent","parameters","openInNewTab","openInSameTab","openingStrategy","stratFn","validateNavItem","navPath","setPathNotFoundError","setPartialNotFoundError","throwNoItemDefinedError","hasNoItemButTabs","userMessage","hasTabsButNoPartial","throwNoPartialFoundError","partial","action","substituteParams","localParams","getReplacedPath","removeExtraParamsFromLocalParams","localParamsToKeep","paramStr","param","hasSpecialCharacter","paramVal","remainingStr","paramValueOrig","updateTabsArray","tempPath","navItemParent","itemWithSecNav","getItemParentRefIfValid","lastIndexOf","getNavItemFromViewPanel","getParamsOrNavItemParams","substitutedNavItem","getSubstitutedUrlIfContainsParams","openTestingByGroupOpened","isValidSecondaryMenuItem","getChildrenFromNavItem","updateAllChildren","setParamsAcessedBySecondaryMenu","getNewNavItem","isTrue","isSecNavItemGroupOpen","isPartOfSecondaryNav","containsNavItem","childNavItem","updateChildData","isStatic","secNavItemGroupPresent","secondaryNavParent","isTabPathValid","tabPathHasNavItemParams","navPathUptoResolvedParam","continueLooping","navPathUptoResolvedParamTokens","getTokensFromNavPath","tabPathTokens","navPathContainsTabPath","isFalse","isAlreadyInTabs","addNewTab","setPathAndNavigateTo","publishViewPanelOpened","getLastTab","viewPanel","getFirstTab","hasItemButNoTabsOrEvent","hasItemAndTabs","shouldOpenInSameTab","hasItemButNoTabs","isOpeningAction","isActiveAndNonCloseable","shouldReplaceViewPanel","isNonCloseable","findCurrentlyOpenedTab","activeViewPanelIndex","navItemInTabs","isNavItemInTabs","replaceViewPanel","publishViewPanelReplaceIntent","onViewPanelReplaceIntentSuccess","publishViewReplaced","navigateTo","iPound","iSlash","noHash","reload","ctrlKey","metaKey","resetLocationHash","hash","getDefaultIfNoPath","normalizeOpenArguments","getValidatedEvent","isStrategyOverride","isEvent","target","checkIfTabIsAlreadyPresent","tabFound","tryOpenViewBasedOnDefaultParams","isNavPathNotDefined","openDefaultView","isRelativePath","openRelativeView","isSecondaryNavigation","openSecondaryView","isNavItemDefined","navItemTemp","getNavItemForRelativePath","newItem","relativeData","extractRelativeUrlData","findNavItemIfNotDefined","tempNavPath","parsedData","hasMoreTokens","hasPathToParse","tempNavItem","parsedDataCopy","findMatchedChildThroughNavPath","noMoreItems","findMatchedNoChild","resolvedPath","navItemIdTokens","hasSomeEquivalentParam","childPath","childPathWithoutParam","withoutParamWord","originalWord","getChildTokens","getChildDataFromPath","tokensLength","childData","childTokens","itemTokens","paramName","getParameterValue","spliceChildTokens","defaultData","cont","parseChildDataFrom","_navItem","paramNameString","navigationPanelParamValue","createUrlFillingParams","findParamName","proceed","getParametersIfUndefined","mergeParametersIfRequired","getNavItemCopyIfParams","getPanelPath","panelPath","forceSelectionOfLastPanel","force","hasNoSelectedPanelPathButTabs","createParamsIfNotDefined","isSecondaryNavItemReplacingPrimary","primaryItem","stillOpenPrimaryItem","viewPanels","panel","getDefaultViewPanelIfNotDefined","getDefaultNavPathIfNotDefined","getDataFromNavPath","tabIndexToRemove","closeViewPanel","tabToFocus","$isClosing","publishViewPanelCloseIntent","getTabFocusFromNavPath","getTabIndexToRemove","removeTabByIndex","finally","openDefaultEmptyView","openLastTab","removeViewPanel","openViewAfterClose","copyClosingPanel","viewPanelCopy","publishViewPanelClosed","findFirstChildWithPartial","findScopeForEvaluation","findElementFromEvent","processActionView","locals","destroyScope","evalScope","actionController","$new","$event","_getSecondaryNavParent","_openInNewTab","_openInSameTab","_extractRelativeUrlData","_navPath","normalized","presentData","navItemExist","shiftKey","openFirstChildIfEmpty","firstChildWithPartial","viewPanelByPath","reloadActiveViewPanel","viewPanelParams","selectedViewPanelPath","resetSelectedViewPanelPath","close","navPathData","openView","rootNav","itemToAdd","openItemAfterAdd","openParams","tabToClose","itemToRemove","openParentNode","activePanelPath","secondaryNavParentForActiveTab","parentItem","addFilter","removeFilter","remote","staticViews","setViews","defaultEndpoint","endpoint","ep","$routeProvider","$log","fisNavigationService","applyFilters","model","traverse","quickLinks","normalizeLabel","updatePath2Item","path2Item","updateId2Item","isAlreadyIncluded","id2Item","normalizeModel","navItems","resolvedLabel","resolvedTitle","createRoutes","templateUrl","createResolveProperty","ctrl","createResolveValue","toResolve","invoke","processMenu","fetchNavigation","finalResult","resolveViews","getItemFromId2Item","idArr","navPathArr","paramArr","matchTokens","getNavPathEnd","size","isItemAlreadyPresentInParent","updateModel","itemToLookup","getIndexOfChild","childItem","endpoints","loadOnNavChange","fromPath","pathTokenLength","navPathTokenLength","addDynamicItem","addNavItem","parentItemId","addAfterItemId","jQuery","isEmptyObject","siblingItem","siblingIndex","matchedItem","removeNavItem","itemToRemoveId","parentPath","itmToRemIndex","$locationProvider","fisViewServiceProvider","hashPrefix","$anchorScroll","$animate","makeFreezable","$$frozen","$freeze","$$fisGC","freeze","$$childHead","$$childTail","fisStacked","matchingPathParams","currentParams","panelParams","updatePanel","lastSelectedPanel","$template","pathParams","originalPath","$$route","clearContent","enter","contents","repeatScope","viewArgs","$emit","onloadExp","targetScope","$$url","msg","alert","update","getSelectedPanel","saveState","updateTimeout","removeElementRef","leave","selectedIndex","panels","getDefaultPanel","defaultPanel","getElementsByClassName","fisOnLoad","fisViews","fisSelectedIndex","$watchCollection"],"mappings":"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","file":"fis-core-components.min.js","sourcesContent":["/*!\n * \n * @ruf/fis-core-components\n * Version: 4.5.1\n * \n * © 2018\n * Fidelity National Information Services, Inc. and/or its subsidiaries - All Rights Reserved worldwide.\n * This document is protected under the trade secret and copyright laws as the property of Fidelity National Information Services, Inc. and/or its subsidiaries.\n * Copying, reproduction or distribution should be limited and only to employees with a “need to know” to do their job. Any disclosure of this document to third parties is strictly prohibited.\n * \n */\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t__webpack_require__(65);\n\t\n\t__webpack_require__(1);\n\t\n\tvar _angularSanitize = __webpack_require__(63);\n\t\n\tvar _angularSanitize2 = _interopRequireDefault(_angularSanitize);\n\t\n\tvar _angularResource = __webpack_require__(61);\n\t\n\tvar _angularResource2 = _interopRequireDefault(_angularResource);\n\t\n\tvar _angularAnimate = __webpack_require__(2);\n\t\n\tvar _angularAnimate2 = _interopRequireDefault(_angularAnimate);\n\t\n\t__webpack_require__(28);\n\t\n\t__webpack_require__(27);\n\t\n\tvar _hook = __webpack_require__(31);\n\t\n\tvar _hook2 = _interopRequireDefault(_hook);\n\t\n\tvar _data = __webpack_require__(7);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _directives = __webpack_require__(13);\n\t\n\tvar _directives2 = _interopRequireDefault(_directives);\n\t\n\tvar _filters = __webpack_require__(23);\n\t\n\tvar _filters2 = _interopRequireDefault(_filters);\n\t\n\tvar _i18n = __webpack_require__(35);\n\t\n\tvar _i18n2 = _interopRequireDefault(_i18n);\n\t\n\tvar _pubsub = __webpack_require__(39);\n\t\n\tvar _pubsub2 = _interopRequireDefault(_pubsub);\n\t\n\tvar _services = __webpack_require__(48);\n\t\n\tvar _services2 = _interopRequireDefault(_services);\n\t\n\tvar _utils = __webpack_require__(51);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tvar _views = __webpack_require__(55);\n\t\n\tvar _views2 = _interopRequireDefault(_views);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = angular.module('fis.core', [_angularAnimate2.default, _angularSanitize2.default, _angularResource2.default, _hook2.default, _data2.default, _directives2.default, _filters2.default, _i18n2.default, _pubsub2.default, _services2.default, _utils2.default, _views2.default]);\n\t\n\t// for backward compatibility\n\t// making sure jquery gets loaded before angular\n\tangular.module('fisComponents', [ngModule.name]);\n\t\n\tif (false) {\n\t  // eslint-disable-line\n\t  require('jasmine-jquery');\n\t  require('jasmine-ajax');\n\t  require('angular-mocks');\n\t  require('@ruf/fis-mocks');\n\t}\n\t\n\t// SDHTML-14222: provide ability to disable angular's debug info while preserving the element.scope function.\n\t// Code taken from angular's source\n\tngModule.decorator('$compile', ['$delegate', function ($delegate) {\n\t  $delegate.$$addScopeInfo = function $$addScopeInfo($element, scope, isolated, noTemplate) {\n\t    var dataName = isolated ? noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope' : '$scope';\n\t    $element.data(dataName, scope);\n\t  };\n\t\n\t  return $delegate;\n\t}]);\n\t\n\t// create an empty controllerArr here, so that any module that has to register a controller can push it to this array\n\t// TODO: find where this is needed and move this code there.\n\tngModule.run(['$rootScope', function ($rootScope) {\n\t  $rootScope.controllersArr = [];\n\t}]);\n\t\n\t/**\r\n\t * This fix moved from fisInput to prevent multiple invocations of this fix - shown cause memory leak otherwise.\r\n\t *\r\n\t * IE specific fix, IE triggering validation on Focus of inputs\r\n\t * If a placeholder is defined on an input element IE10 fires this event when\r\n\t * the placeholder is set during DOM loading and when it is removed when the user clicks into the input field so that error messages\r\n\t * which depend on the pristine condition are displayed although the user has not yet modified the input's value.\r\n\t */\n\tngModule.run(['$sniffer', function ($sniffer) {\n\t  var msie = parseInt((/msie (\\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1], 10);\n\t  var _hasEvent = $sniffer.hasEvent;\n\t  $sniffer.hasEvent = function (event) {\n\t    if (event === 'input' && msie === 10) {\n\t      return false;\n\t    }\n\t    return _hasEvent.call(this, event);\n\t  };\n\t}]);\n\t\n\tmodule.exports = ngModule.name;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = angular;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = 'ngAnimate';\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var self = this;\n\t\n\t  self.$get = ['typeBasedConstraints', function (typeBasedConstraints) {\n\t    var constraintsFactory = {};\n\t\n\t    constraintsFactory.getConstraintsByType = function (type) {\n\t      var result = typeBasedConstraints[type];\n\t      if (angular.isDefined(result)) {\n\t        return result;\n\t      }\n\t      return typeBasedConstraints.string;\n\t    };\n\t\n\t    return constraintsFactory;\n\t  }];\n\t};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  function toInt(str) {\n\t    return parseInt(str, 10);\n\t  }\n\t\n\t  function parseISODate(value) {\n\t    var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n\t    var match;\n\t    if (match = value.match(R_ISO8601_STR)) {\n\t      var date = new Date(0);\n\t      var tzHour = 0;\n\t      var tzMin = 0;\n\t      var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n\t      var timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\t\n\t      if (match[9]) {\n\t        tzHour = toInt(match[9] + match[10]);\n\t        tzMin = toInt(match[9] + match[11]);\n\t      }\n\t      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n\t      var h = toInt(match[4] || 0) - tzHour;\n\t      var m = toInt(match[5] || 0) - tzMin;\n\t      var s = toInt(match[6] || 0);\n\t      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n\t      timeSetter.call(date, h, m, s, ms);\n\t      return date;\n\t    }\n\t    return value;\n\t  }\n\t\n\t  var self = this;\n\t\n\t  self.$get = [function () {\n\t    var service = {};\n\t\n\t    service.operators = ['and', 'or'];\n\t    service.operators.AND = service.operators[0];\n\t    service.operators.OR = service.operators[1];\n\t\n\t    service.constraints = ['eq', 'contains', 'ne', 'gt', 'ge', 'lt', 'le', 'startswith', 'endswith', 'is_null', 'not_contains', 'not_endswith', 'not_null', 'in_rel_range', 'not_in_rel_range', 'in_future', 'in_past', 'is_between', 'not_is_between', 'in', 'not_in', 'is_empty', 'not_empty', 'not_startswith'];\n\t    service.constraints.EQ = service.constraints[0];\n\t    service.constraints.CONTAINS = service.constraints[1];\n\t    service.constraints.NE = service.constraints[2];\n\t    service.constraints.GT = service.constraints[3];\n\t    service.constraints.GE = service.constraints[4];\n\t    service.constraints.LT = service.constraints[5];\n\t    service.constraints.LE = service.constraints[6];\n\t    service.constraints.STARTS_WITH = service.constraints[7];\n\t    service.constraints.ENDS_WITH = service.constraints[8];\n\t    service.constraints.IS_NULL = service.constraints[9];\n\t    service.constraints.NOT_CONTAINS = service.constraints[10];\n\t    service.constraints.NOT_ENDS_WITH = service.constraints[11];\n\t    service.constraints.NOT_NULL = service.constraints[12];\n\t    service.constraints.IN_REL_RANGE = service.constraints[13];\n\t    service.constraints.NOT_IN_REL_RANGE = service.constraints[14];\n\t    service.constraints.IN_FUTURE = service.constraints[15];\n\t    service.constraints.IN_PAST = service.constraints[16];\n\t    service.constraints.BETWEEN = service.constraints[17];\n\t    service.constraints.NOT_BETWEEN = service.constraints[18];\n\t    service.constraints.IN = service.constraints[19];\n\t    service.constraints.NOT_IN = service.constraints[20];\n\t    service.constraints.IS_EMPTY = service.constraints[21];\n\t    service.constraints.NOT_EMPTY = service.constraints[22];\n\t    service.constraints.NOT_STARTS_WITH = service.constraints[23];\n\t\n\t    var constraintsWithoutValue = [service.constraints.IS_EMPTY, service.constraints.NOT_EMPTY, service.constraints.IS_NULL, service.constraints.NOT_NULL];\n\t\n\t    function Criteria(operator) {\n\t      if (angular.isString(operator)) {\n\t        this.operator = operator || service.operators.AND;\n\t        this.operands = [];\n\t      } else if (angular.isObject(operator)) {\n\t        var jsonObj = operator;\n\t        var currentOperator = service.operators.AND;\n\t        if (jsonObj.operator) {\n\t          currentOperator = jsonObj.operator;\n\t        }\n\t        if (service.operators.indexOf(currentOperator) === -1) {\n\t          throw new Error('Invalid operator : ' + currentOperator);\n\t        }\n\t\n\t        var newCrit = service.newCriteria(currentOperator);\n\t\n\t        if (angular.isArray(jsonObj.operands)) {\n\t          completeCriteriaFromOperands(jsonObj.operands, newCrit);\n\t        }\n\t\n\t        return newCrit;\n\t      }\n\t    }\n\t\n\t    function completeCriteriaFromOperands(inputoperands, origCrit) {\n\t      for (var i = 0; i < inputoperands.length; i++) {\n\t        var operand = inputoperands[i];\n\t        if (operand.operator) {\n\t          var newCrit = service.newCriteria(operand.operator);\n\t          if (operand.operands) {\n\t            completeCriteriaFromOperands(operand.operands, newCrit);\n\t            origCrit.add(newCrit);\n\t          }\n\t        } else {\n\t          origCrit.add(new service.Criterion(operand.property, operand.value, operand.constraint, operand.type, operand.skipValidation));\n\t        }\n\t      }\n\t    }\n\t\n\t    Criteria.prototype.setOperator = function (operator) {\n\t      if (service.operators.indexOf(operator) === -1) {\n\t        throw new Error('Invalid operator : ' + operator);\n\t      }\n\t      this.operator = operator;\n\t      return this;\n\t    };\n\t\n\t    Criteria.prototype.add = function (operand) {\n\t      operand.validate();\n\t      this.operands.push(operand);\n\t      return this;\n\t    };\n\t\n\t    Criteria.prototype.setOperands = function (operands) {\n\t      this.operands = operands;\n\t      return this;\n\t    };\n\t\n\t    Criteria.prototype.isValid = function (isChild) {\n\t      if (service.operators.indexOf(this.operator) === -1) {\n\t        return false;\n\t      }\n\t      if (isChild && this.operands.length === 0) {\n\t        return false;\n\t      }\n\t      for (var i = 0; i < this.operands.length; i++) {\n\t        var operand = this.operands[i];\n\t        if (!angular.isUndefined(operand.skipValidation) && !operand.skipValidation && !operand.isValid(true)) {\n\t          return false;\n\t        }\n\t        var j = i + 1;\n\t        var nextOperand = this.operands[j];\n\t        if (nextOperand) {\n\t          if (!angular.isUndefined(nextOperand.skipValidation) && !nextOperand.skipValidation && !nextOperand.isValid(true)) {\n\t            return false;\n\t          }\n\t          if (service.operators.indexOf(this.operator) === -1) {\n\t            return false;\n\t          }\n\t        }\n\t      }\n\t      return true;\n\t    };\n\t\n\t    Criteria.prototype.validate = function () {\n\t      if (!this.isValid()) {\n\t        throw new Error('Invalid Criteria: ' + this);\n\t      }\n\t    };\n\t\n\t    Criteria.prototype.validateWithoutError = function () {\n\t      console.warn('DEPRECATED: Criteria.validateWithoutError. Use Criteria.isValid.');\n\t      return this.isValid();\n\t    };\n\t\n\t    Criteria.prototype.toString = function () {\n\t      var crit = this.getAsString();\n\t      var finalCrit = '';\n\t      if (crit) {\n\t        finalCrit = crit.substring(1);\n\t        finalCrit = finalCrit.substring(0, finalCrit.length - 1);\n\t      }\n\t      return finalCrit;\n\t    };\n\t\n\t    Criteria.prototype.getAsString = function () {\n\t      var crit = '(';\n\t      for (var i = 0; i < this.operands.length; i++) {\n\t        var operand = this.operands[i];\n\t        crit += operand.getAsString();\n\t        var j = i + 1;\n\t        var next = this.operands[j];\n\t        if (next) {\n\t          crit += ' ';\n\t          crit += this.operator;\n\t          crit += ' ';\n\t        }\n\t      }\n\t      crit += ')';\n\t\n\t      return crit;\n\t    };\n\t\n\t    function isNumber(value) {\n\t      return !isNaN(parseFloat(value)) && isFinite(value);\n\t    }\n\t\n\t    function isValidValue(value, constraint, type) {\n\t      if ((angular.isUndefined(value) || value === '') && value !== 0) {\n\t        if (constraintsWithoutValue.indexOf(constraint) === -1) {\n\t          return false;\n\t        }\n\t        return true;\n\t      } else if (constraintsWithoutValue.indexOf(constraint) > -1) {\n\t        return false;\n\t      }\n\t\n\t      if ((type === 'integer' || type === 'number' || type === 'double') && !isNumber(value)) {\n\t        return false;\n\t      }\n\t      if (type === 'date' || type === 'datetime' || type === 'time') {\n\t        if (!value.toISOString) {\n\t          try {\n\t            new Date(value).toISOString();\n\t          } catch (e) {\n\t            // SDHTML-13812 - IE javascript engine cannot parse date in '2016-06-06T00:16:07+0000' format\n\t            value = parseISODate(value);\n\t            if (!angular.isUndefined(value)) {\n\t              try {\n\t                return Boolean(angular.isDate(value) ? value.toISOString() : new Date(value).toISOString());\n\t              } catch (e) {\n\t                return false;\n\t              }\n\t            }\n\t            return false;\n\t          }\n\t        }\n\t      }\n\t      if (type === 'boolean') {\n\t        if (typeof value !== 'boolean' && value !== 'true' && value !== 'false') {\n\t          return false;\n\t        }\n\t      }\n\t      return true;\n\t    }\n\t\n\t    // criterion object\n\t    function Criterion(property, value, constraint, type, skipValidation) {\n\t      this.property = property || null;\n\t      this.value = angular.isUndefined(value) ? '' : value;\n\t      this.constraint = constraint || service.constraints.EQ;\n\t      this.type = type;\n\t      this.skipValidation = skipValidation;\n\t    }\n\t\n\t    function marshallValue(value, type) {\n\t      if (type === 'integer' || type === 'boolean' || type && type.substring(0, 6) === 'double' || type === 'number') {\n\t        return value;\n\t      }\n\t      if (type === 'date' || type === 'datetime' || type === 'time') {\n\t        if (!value.toISOString) {\n\t          /* eslint-disable no-negated-condition */\n\t          if (!isNaN(Date.parse(value))) {\n\t            value = new Date(value);\n\t          } else {\n\t            // SDHTML-13812 - IE javascript engine cannot parse date in '2016-06-06T00:16:07+0000' format\n\t            value = parseISODate(value);\n\t          }\n\t          /* eslint-enable no-negated-condition */\n\t        }\n\t        return 'datetime\\'' + value.toISOString() + '\\'';\n\t      }\n\t      return '\\'' + value.toString().replace(/'/g, '\\'\\'') + '\\'';\n\t    }\n\t\n\t    Criterion.prototype.getAsString = function () {\n\t      // var spaceWithStarIfCaseInsensitive = this.ignoreCase ? '' : '*';\n\t      var result = '';\n\t      switch (this.constraint) {\n\t        case 'startswith':\n\t        case 'endswith':\n\t          result = this.constraint + '(' + this.property + ',' + marshallValue(this.value, this.type) + ')';\n\t          break;\n\t        case 'not_startswith':\n\t        case 'not_endswith':\n\t          result = 'not ' + this.constraint.substring(this.constraint.indexOf('_') + 1) + '(' + this.property + ',' + marshallValue(this.value, this.type) + ')';\n\t          break;\n\t        case 'contains':\n\t          result = 'substringof(' + marshallValue(this.value, this.type) + ',' + this.property + ') eq true';\n\t          break;\n\t        case 'not_contains':\n\t          result = 'substringof(' + marshallValue(this.value, this.type) + ',' + this.property + ') eq false';\n\t          break;\n\t        case 'is_null':\n\t          result = this.property + ' eq null';\n\t          break;\n\t        case 'not_null':\n\t          result = this.property + ' ne null';\n\t          break;\n\t        case 'is_empty':\n\t          result = this.property + ' eq \\'\\'';\n\t          break;\n\t        case 'not_empty':\n\t          result = this.property + ' ne \\'\\'';\n\t          break;\n\t        default:\n\t          if (this.skipValidation || service.constraints.indexOf(this.constraint) < 0) {\n\t            result = this.property + ' ' + this.constraint + ' ' + this.value;\n\t          } else {\n\t            result = this.property + ' ' + this.constraint + ' ' + marshallValue(this.value, this.type);\n\t          }\n\t      }\n\t      return result;\n\t    };\n\t\n\t    Criterion.prototype.isValid = function () {\n\t      if (!this.property || service.constraints.indexOf(this.constraint) === -1 || !isValidValue(this.value, this.constraint, this.type)) {\n\t        return false;\n\t      }\n\t      return true;\n\t    };\n\t\n\t    Criterion.prototype.validate = function () {\n\t      if (!angular.isUndefined(this.skipValidation) && !this.skipValidation && !this.isValid()) {\n\t        throw new Error('Invalid Criterion: ' + this);\n\t      }\n\t    };\n\t\n\t    Criterion.prototype.validateWithoutError = function () {\n\t      console.warn('DEPRECATED: Criterion.validateWithoutError. Use Criterion.isValid.');\n\t      return this.isValid();\n\t    };\n\t\n\t    Criterion.prototype.setProperty = function (property) {\n\t      if (!property) {\n\t        throw new Error('Invalid property');\n\t      }\n\t      this.property = property;\n\t      return this;\n\t    };\n\t\n\t    Criterion.prototype.setValue = function (value) {\n\t      this.value = value;\n\t      return this;\n\t    };\n\t\n\t    Criterion.prototype.setConstraint = function (constraint) {\n\t      if (service.constraints.indexOf(constraint) === -1) {\n\t        throw new Error('Invalid constraint : ' + constraint);\n\t      }\n\t      this.constraint = constraint;\n\t      return this;\n\t    };\n\t\n\t    service.newCriteria = function (operator) {\n\t      if (!operator) {\n\t        operator = service.operators.AND;\n\t      }\n\t      if (angular.isString(operator)) {\n\t        if (service.operators.indexOf(operator) === -1) {\n\t          throw new Error('Invalid operator : ' + operator);\n\t        }\n\t      }\n\t      return new Criteria(operator);\n\t    };\n\t\n\t    service.Criteria = Criteria;\n\t    service.Criterion = Criterion;\n\t\n\t    return service;\n\t  }];\n\t};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$parse\", \"$timeout\", \"fisMemoryUtilService\", function ($parse, $timeout, fisMemoryUtilService) {\n\t  'ngInject';\n\t\n\t  return {\n\t    restrict: 'A',\n\t    require: 'fisData',\n\t    link: function link(scope, elem, attrs, fisData) {\n\t      if (angular.isUndefined(attrs.fisDataVar) || attrs.fisDataVar.length === 0) {\n\t        throw new Error('The fisDataVar attribute must have a value.');\n\t      }\n\t\n\t      var fisDataVarAttr = attrs.fisDataVar;\n\t\n\t      var loadData = function loadData(event) {\n\t        // do not execute the event if event.preventDefault() has been called before\n\t        if (event && event.defaultPrevented) {\n\t          return;\n\t        }\n\t        var timeout1 = $timeout(function () {\n\t          var promise = fisData.fetchData();\n\t          promise.then(function (result) {\n\t            var dataVar = $parse(fisDataVarAttr);\n\t            dataVar.assign(scope, result.data);\n\t          }, function (result) {\n\t            console.warn('Problem loading data: ' + result);\n\t          });\n\t        });\n\t        fisMemoryUtilService.cancelTimeoutOnDestroy(scope, timeout1, $timeout);\n\t      };\n\t\n\t      // Refresh Event\n\t      if (angular.isDefined(attrs.fisRefresh)) {\n\t        scope.$on('fisRefresh', loadData);\n\t      }\n\t\n\t      // Adding listener on fisData, so that data is reloaded when fisData's endPoint changes\n\t      var dataChangeListener = function dataChangeListener() {\n\t        loadData();\n\t      };\n\t      fisData.addDataChangedListener(dataChangeListener);\n\t\n\t      // Does initial call to get data\n\t      loadData();\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"fisResourceService\", \"$q\", \"$parse\", \"fisCriteriaService\", \"fisElementUtils\", \"$interpolate\", \"$timeout\", \"fisUtilService\", \"fisConfig\", \"fisScopeUtils\", function (fisResourceService, $q, $parse, fisCriteriaService, fisElementUtils, $interpolate, $timeout, fisUtilService, fisConfig, fisScopeUtils) {\n\t  'ngInject';\n\t\n\t  var queryParameterPrefix = 'fisParam';\n\t\n\t  return {\n\t    restrict: 'A',\n\t    priority: 600,\n\t    compile: function compile(elem, attrs) {\n\t      // Save the original parameter expressions for later if required.\n\t      // We will need them for interpolating the variable values if we're running in an isolated scope.\n\t      attrs._paramVariables = fisElementUtils.copyProperties(attrs, queryParameterPrefix, {});\n\t\n\t      return function () {};\n\t    },\n\t    controller: ['$attrs', '$scope', '$element', function ($attrs, $scope, $element) {\n\t      var self = this;\n\t\n\t      var odataV3Adaptor = $attrs.fisAdaptor === 'odatav3' || fisConfig.dataSourceAdaptor === 'odatav3';\n\t      function isAlwaysFetch() {\n\t        return angular.isUndefined($attrs.fisFetchVisibleOnly) || !$attrs.fisFetchVisibleOnly;\n\t      }\n\t\n\t      // Only add the visibility watch when the fetching should depend on the visibility of the component\n\t      if (!isAlwaysFetch()) {\n\t        /*\r\n\t        Adds a watch to the visibility state of the element.\r\n\t        If the element is made visible and there was a call to fetchData while it was invisible,\r\n\t        the fetch is executed now.\r\n\t          scope.allowFetch is used again in fetchData below\r\n\t          */\n\t        var watchFn = function watchFn() {\n\t          $scope.allowFetch = $element.is(':visible');\n\t\n\t          if ($scope.allowFetch) {\n\t            if ($scope.deferred) {\n\t              $scope.deferred.resolve(self.fetchData($scope.lastParams));\n\t              $scope.deferred = undefined;\n\t              $scope.lastParams = undefined;\n\t            }\n\t          }\n\t        };\n\t        fisScopeUtils.postDigest($scope, function () {\n\t          return $element.is(':visible');\n\t        }, watchFn, $timeout, true);\n\t      }\n\t\n\t      if (!$attrs.fisData) {\n\t        throw new Error('You must provide a value to the fis-data attribute');\n\t      }\n\t\n\t      var functionExpression = $attrs.fisData.indexOf('(') !== -1;\n\t      var arrayExpression = $attrs.fisData.indexOf('[') !== -1;\n\t      var objectExpression = $attrs.fisData.indexOf('{') !== -1;\n\t      var fixedResourceUrl = !functionExpression && !arrayExpression && !objectExpression && $attrs.fisData.indexOf('/') !== -1;\n\t      var beforeFetchListeners = [];\n\t      var afterFetchListeners = [];\n\t      var dataChangedListeners = [];\n\t\n\t      var schema = {\n\t        // the JSON element that contains the array of data items\n\t        data: $parse($attrs.fisSchemaData)($scope) !== undefined ? $parse($attrs.fisSchemaData)($scope) : $attrs.fisSchemaData, // eslint-disable-line\n\t        // the JSON element that contains the total number of records in the entire dataset (useful for widgets that support some kind of pagination)\n\t        total: $attrs.fisSchemaTotal\n\t      };\n\t\n\t      var Resource;\n\t\n\t      // TODO: add fisSharedCriteria to allow providing a criteria that multiple widgets can share.\n\t      //       It will be merged with the Criteria created by the grid (translated from kendo filters)\n\t      //       before being sent to fetchData in the params: {crit: mergedCriteria}\n\t      //       This is needed to be able to provide complex search outside of the grid.\n\t\n\t      if (!fixedResourceUrl && !functionExpression) {\n\t        // watch to see if the provided fisData value changes (checking references, not equality).\n\t        // this is to determine if the fisData will be handling RESTful fetching\n\t        var fisDataChangeWatch = $scope.$watch($attrs.fisData, function (newVal, oldVal) {\n\t          if (!newVal) {\n\t            // $attrs.fisData doesn't resolve to a value. We keep resource as-is.\n\t            return;\n\t          }\n\t          // when the watch is initialized, this function is called with identical newVal and oldVal\n\t          if (newVal !== oldVal) {\n\t            // if a String value, the user may have changed the endpoint of the resource\n\t            Resource = determineResource($attrs, newVal);\n\t\n\t            self.fireDataChanged(newVal);\n\t          }\n\t        });\n\t        $scope.$on('$destroy', function () {\n\t          if (fisDataChangeWatch) {\n\t            fisDataChangeWatch();\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\r\n\t       * @return Returns the schema object to be used\r\n\t       */\n\t      self.getSchema = function () {\n\t        return schema;\n\t      };\n\t\n\t      /**\r\n\t       * Can be used by a widget directive to tell that the data has changed and that the underlying dom widget (kendo or other)\r\n\t       * can be notified of that change and be refreshed accordingly (by invoking fetchData again).\r\n\t       * Note that fisData will already invoke this if it detects that the reference to the model has changed.\r\n\t       */\n\t      self.fireDataChanged = function (data) {\n\t        invokeListeners(dataChangedListeners, data);\n\t      };\n\t\n\t      /**\r\n\t       * @returns a promise that will resolve into an object with two properties:\r\n\t       * The data property will contain an array of objects and the total property will contain the total number\r\n\t       * of records available in the dataset, if this information is available. This total is used for pagination, so that\r\n\t       * widgets can calculate the total number of pages.\r\n\t       */\n\t      self.fetchData = function (params) {\n\t        if ($attrs.fisSort) {\n\t          // check if the attribute specified in fis-sort is assignable (scope object)\n\t          var fisSort = $parse($attrs.fisSort);\n\t          if (fisSort.assign && params) {\n\t            // add params to check to prevent widgets with fis-sort breaking if no params defined for assignable expression\n\t            // if fis-sort expression is assignable, update the expression whenever user interacts with the grid\n\t            // (manual sorting by clicking on column headers)\n\t            var sortExpressionArray = [];\n\t            if (odataV3Adaptor) {\n\t              var sortExpr = params.sort;\n\t              if (sortExpr) {\n\t                var sortDefs = sortExpr.split(',');\n\t                angular.forEach(sortDefs, function (sortDef) {\n\t                  var parts = sortDef.split(' ');\n\t                  if (parts.length === 2) {\n\t                    sortExpressionArray.push({ field: parts[0], dir: parts[1] });\n\t                  }\n\t                });\n\t              }\n\t            } else {\n\t              angular.forEach(params.sort, function (sortedParam) {\n\t                // here the param.sort received is in the format [\"fieldName,sortOrder\",\"fieldName,sortOrder\",..]\n\t                // Convert it to [{field:fieldName, dir:sortOrder},{field:fieldName, dir:sortOrder}..] format\n\t                var parts = sortedParam.split(',');\n\t                sortExpressionArray.push({ field: parts[0], dir: parts[1] });\n\t              });\n\t            }\n\t            // Update the fis-sort assignable expression to the changed value\n\t            fisSort.assign($scope, sortExpressionArray.length === 1 ? sortExpressionArray[0] : sortExpressionArray);\n\t          }\n\t        }\n\t\n\t        // If not explicitely set to just fetch when visible the fetch function is always called\n\t        if (!isAlwaysFetch()) {\n\t          /*\r\n\t          Only fetch the data when the fetching is allowed (since the element is visible) - otherwise\r\n\t          enter this if and return just a promise that will be resolved once.\r\n\t            */\n\t          if (!$scope.allowFetch) {\n\t            // Store any provided parameters for later execution\n\t            $scope.lastParams = params;\n\t            if ($scope.deferred) {\n\t              // There is already a deferred execution of fetchData - return a new promise here as the resolution\n\t              var newDeferred = $q.defer();\n\t              $scope.deferred.resolve(newDeferred.promise);\n\t              $scope.deferred = newDeferred;\n\t            } else {\n\t              // This is the first call to fetchData since the element is invisible\n\t              $scope.deferred = $q.defer();\n\t            }\n\t\n\t            // Return just a promise for now - the watch on the visibility will resolve it later\n\t            return $scope.deferred.promise;\n\t          }\n\t        }\n\t\n\t        if ($attrs.fisCriteria) {\n\t          var mergedCriteria;\n\t          var mergedOperands;\n\t          var fisCriteria = fisCriteriaService.newCriteria($parse($attrs.fisCriteria)($scope));\n\t\n\t          if (params.crit) {\n\t            mergedOperands = [];\n\t            fisCriteria.operands.concat(params.crit.operands).forEach(function (operand) {\n\t              if (mergedOperands.indexOf(operand) === -1) {\n\t                mergedOperands.push(operand);\n\t              }\n\t            });\n\t            mergedCriteria = angular.extend(fisCriteria, params.crit);\n\t            mergedCriteria.operands = mergedOperands;\n\t          } else {\n\t            mergedCriteria = fisCriteria;\n\t          }\n\t          params.crit = mergedCriteria.toString();\n\t        }\n\t\n\t        Resource = determineResource($attrs);\n\t        invokeListeners(beforeFetchListeners, params);\n\t\n\t        params = fisElementUtils.copyProperties($attrs, queryParameterPrefix, params);\n\t\n\t        // When running in isolated scope, e.g. in fisGrid, we don't have access to the outer scope.\n\t        // Someone using a parameter like fis-param-foo=\"{{foo}}\" would need to use {{$parent.foo}}\n\t        // to escape the isolated scope of fisGrid. To avoid that, we reevaluate the fis-param-*\n\t        // expressions against the parent scope. This way, the use doesn't need to care whether\n\t        // the directive uses isolated scope or not.\n\t        if ($scope.hasOwnProperty('$$isolateBindings') && $scope) {\n\t          // Loop over the parameter expressions that we saved in the compile function.\n\t          // The variables are not interpolated at this stage.\n\t          angular.forEach($attrs._paramVariables, function (val, key) {\n\t            // Interpolate the variable ourselves using the $interpolate service\n\t            // We use the parent scope to resolve the variables.\n\t            var interpolatedValue = $interpolate(val)($scope);\n\t\n\t            // Assign the variable to the respective entry in the params object,\n\t            // overwriting any value that was previously there.\n\t            params[key] = interpolatedValue;\n\t          });\n\t        }\n\t\n\t        if (Resource) {\n\t          return getDataFromResource(params);\n\t        }\n\t        // data retrieval is managed externally (could still come from a server)\n\t        var getter = $parse($attrs.fisData);\n\t        var promise;\n\t\n\t        if (functionExpression) {\n\t          // function expression\n\t          // wrap in a promise, chain promises if function also returns a promise\n\t          promise = $q.when(getter($scope, { params: params })).then(function (data) {\n\t            var resultData = invokeListeners(afterFetchListeners, normalizeData(data));\n\t            if (angular.isFunction(schema.data)) {\n\t              resultData.data = retrieveDataFromSchemaData(data);\n\t            }\n\t            return resultData;\n\t          }, function () {\n\t            // TODO: define exceptions\n\t            throw new Error('fisData could not get data from ' + $attrs.fisData);\n\t          });\n\t        } else {\n\t          var scoped = getter($scope);\n\t          if (angular.isFunction(scoped)) {\n\t            var result = scoped(params);\n\t            promise = $q.when(result).then(function (data) {\n\t              var resultData = invokeListeners(afterFetchListeners, normalizeData(data));\n\t              if (angular.isFunction(schema.data)) {\n\t                resultData.data = retrieveDataFromSchemaData(data);\n\t              }\n\t              return resultData;\n\t            }, function () {\n\t              throw new Error('fisData could not get data from ' + $attrs.fisData);\n\t            });\n\t          } else {\n\t            var deferred = $q.defer();\n\t            var resultData = invokeListeners(afterFetchListeners, normalizeData(scoped));\n\t            if (angular.isFunction(schema.data)) {\n\t              resultData.data = retrieveDataFromSchemaData(scoped);\n\t            }\n\t            deferred.resolve(resultData);\n\t            promise = deferred.promise;\n\t          }\n\t        }\n\t\n\t        return promise;\n\t      };\n\t\n\t      function retrieveDataFromSchemaData(data) {\n\t        var resultData = [];\n\t        var results = schema.data(data);\n\t        angular.forEach(results, function (item) {\n\t          resultData.push(item);\n\t        });\n\t        return resultData;\n\t      }\n\t\n\t      self.addDataChangedListener = function (listener) {\n\t        if (dataChangedListeners.indexOf(listener) === -1) {\n\t          dataChangedListeners.push(listener);\n\t        }\n\t        return function () {\n\t          var idx = dataChangedListeners.indexOf(listener);\n\t          if (idx !== -1) {\n\t            dataChangedListeners.splice(idx, 1);\n\t          }\n\t        };\n\t      };\n\t\n\t      self.addBeforeFetchListener = function (listener) {\n\t        if (beforeFetchListeners.indexOf(listener) === -1) {\n\t          beforeFetchListeners.push(listener);\n\t        }\n\t        return function () {\n\t          var idx = beforeFetchListeners.indexOf(listener);\n\t          if (idx !== -1) {\n\t            beforeFetchListeners.splice(idx, 1);\n\t          }\n\t        };\n\t      };\n\t\n\t      self.addAfterFetchListener = function (listener) {\n\t        if (afterFetchListeners.indexOf(listener) === -1) {\n\t          afterFetchListeners.push(listener);\n\t        }\n\t        return function () {\n\t          var idx = afterFetchListeners.indexOf(listener);\n\t          if (idx !== -1) {\n\t            afterFetchListeners.splice(idx, 1);\n\t          }\n\t        };\n\t      };\n\t\n\t      function normalizeData(data) {\n\t        if (data.data) {\n\t          return data;\n\t        }\n\t\n\t        if (angular.isArray(data)) {\n\t          if (data.length > 1) {\n\t            return {\n\t              data: data\n\t            };\n\t          } else if (data.length === 1) {\n\t            return {\n\t              data: data,\n\t              obj: data[0]\n\t            };\n\t          }\n\t        }\n\t        if (angular.isArray(data)) {\n\t          return {\n\t            data: data\n\t          };\n\t        }\n\t        if (schema && schema.data) {\n\t          var resultData = {\n\t            data: []\n\t          };\n\t          angular.extend(resultData, data);\n\t          if (schema.data !== 'data') {\n\t            var results;\n\t            if (angular.isString(schema.data)) {\n\t              results = fisUtilService.extractData(schema.data, data);\n\t            }\n\t            angular.forEach(results, function (item) {\n\t              resultData.data.push(item);\n\t            });\n\t          }\n\t\n\t          if (schema.total) {\n\t            resultData.total = data[schema.total];\n\t          }\n\t          if (schema.data !== 'data') {\n\t            delete resultData[schema.data];\n\t          }\n\t          if (schema.total !== 'total') {\n\t            delete resultData[schema.total];\n\t          }\n\t          return resultData;\n\t        }\n\t        return {\n\t          data: [data]\n\t        };\n\t      }\n\t\n\t      function invokeListeners(listeners, data) {\n\t        angular.forEach(listeners, function (listener) {\n\t          // invoke the listener and make sure it's returned data is normalized so that all listeners can expect the same format.\n\t          data = normalizeData(listener(data) || data);\n\t        });\n\t        return data;\n\t      }\n\t\n\t      function getDataFromResource(params) {\n\t        var instance;\n\t        var deferred = $q.defer();\n\t        var promise;\n\t\n\t        // here you can receive params that are objects but that you may not want to transform to JSON\n\t        // to pass as query parameters. Make sure they are marshalled to a string that is appropriate\n\t        // to the backend.\n\t        // TODO: provide a hook to marshall special objects (decorate params). For now, only translating Criteria to its string form\n\t        if (params.crit) {\n\t          params.crit = params.crit.toString();\n\t        }\n\t        if (odataV3Adaptor) {\n\t          if (params.crit) {\n\t            params.$filter = params.crit.toString();\n\t            delete params.crit;\n\t          }\n\t\n\t          if (angular.isNumber(params.offset)) {\n\t            params.$skip = params.offset;\n\t            delete params.offset;\n\t          }\n\t\n\t          if (angular.isNumber(params.limit)) {\n\t            params.$top = params.limit;\n\t            delete params.limit;\n\t          }\n\t\n\t          if (params.sort) {\n\t            params.$orderby = params.sort;\n\t            delete params.sort;\n\t          }\n\t          // TODO add $inlinecount only when schema.total is defined\n\t          // params.$inlinecount = 'allpages'; // ask for the total in the response\n\t          params.$format = 'json';\n\t        }\n\t        instance = Resource.getData(params, function () {\n\t          // don't return just instance.data, send back everything\n\t          deferred.resolve(invokeListeners(afterFetchListeners, instance));\n\t        }, function (d) {\n\t          // TODO: define exceptions (fisException service?)\n\t          deferred.reject(invokeListeners(afterFetchListeners, d));\n\t        });\n\t        promise = deferred.promise;\n\t        promise.data = instance.data;\n\t        return promise;\n\t      }\n\t\n\t      function determineResource(attrs, val) {\n\t        if (functionExpression) {\n\t          // fisData will not handle invoking the rest resource and will delegate to the function expression\n\t          return null;\n\t        }\n\t        val = val || fixedResourceUrl && attrs.fisData || $parse(attrs.fisData)($scope);\n\t\n\t        if (angular.isString(val)) {\n\t          // the value refers to a $resource URL\n\t          // fisData will handle RESTful fetching\n\t          return fisResourceService(val, null, null, schema);\n\t        } else if (!val) {\n\t          // $attrs.fisData is not empty but doesn't resolve to a scoped value, consider the string in $attrs.fisData as a $resource URL\n\t          // fisData will handle RESTful fetching\n\t          return fisResourceService(attrs.fisData, null, null, schema);\n\t        }\n\t        // fisData will not handle RESTful fetching\n\t        return null;\n\t      }\n\t    }]\n\t\n\t  };\n\t}];\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _data = __webpack_require__(6);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _dataVar = __webpack_require__(5);\n\t\n\tvar _dataVar2 = _interopRequireDefault(_dataVar);\n\t\n\tvar _resourceService = __webpack_require__(8);\n\t\n\tvar _resourceService2 = _interopRequireDefault(_resourceService);\n\t\n\tvar _criteriaService = __webpack_require__(4);\n\t\n\tvar _criteriaService2 = _interopRequireDefault(_criteriaService);\n\t\n\tvar _constraintsFactory = __webpack_require__(3);\n\t\n\tvar _constraintsFactory2 = _interopRequireDefault(_constraintsFactory);\n\t\n\tvar _typeBasedConstraints = __webpack_require__(9);\n\t\n\tvar _typeBasedConstraints2 = _interopRequireDefault(_typeBasedConstraints);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.data', []);\n\t\n\tngModule.directive('fisData', _data2.default);\n\tngModule.directive('fisDataVar', _dataVar2.default);\n\t\n\tngModule.provider('fisResourceService', _resourceService2.default);\n\tngModule.provider('fisCriteriaService', _criteriaService2.default);\n\tngModule.provider('fisConstraintsFactory', _constraintsFactory2.default);\n\t\n\tngModule.value('typeBasedConstraints', _typeBasedConstraints2.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  var self = this;\n\t\n\t  self.$get = ['$resource', 'fisUtilService', function ($resource, fisUtilService) {\n\t    return function (url, paramDefaults, actions, schema) {\n\t      var localResource = $resource(url, paramDefaults, actions);\n\t      localResource.getData = function (params, success, failure) {\n\t        var ret = {\n\t          data: []\n\t        };\n\t        if (schema && schema.data) {\n\t          localResource.get(params, function (d, headers) {\n\t            ret.data.length = 0;\n\t            angular.extend(ret, d);\n\t\n\t            if (schema.data !== 'data') {\n\t              if (schema.data === 'none') {\n\t                var res = {};\n\t                angular.forEach(d, function (key, val) {\n\t                  if (val.toString().indexOf('$') !== 0) {\n\t                    res[val] = key;\n\t                  }\n\t                });\n\t                ret.data.push(res);\n\t              } else {\n\t                var results;\n\t                if (angular.isString(schema.data)) {\n\t                  results = fisUtilService.extractData(schema.data, d);\n\t                } else if (angular.isFunction(schema.data)) {\n\t                  results = schema.data(d);\n\t                }\n\t                angular.forEach(results, function (item) {\n\t                  ret.data.push(item);\n\t                });\n\t              }\n\t            }\n\t\n\t            if (schema.total) {\n\t              ret.total = d[schema.total];\n\t            }\n\t            if (schema.data !== 'data' && schema.data !== 'none') {\n\t              delete ret[schema.data];\n\t            }\n\t            if (schema.total !== 'total') {\n\t              delete ret[schema.total];\n\t            }\n\t            success(ret, headers);\n\t          }, failure);\n\t        } else {\n\t          ret.data = localResource.query(params, function (d, headers) {\n\t            // send normalized data structure to success callback\n\t            success(ret, headers);\n\t          }, failure);\n\t        }\n\t        // always returns an object with an empty data array that gets filled when request is successful\n\t        return ret;\n\t      };\n\t\n\t      return localResource;\n\t    };\n\t  }];\n\t};\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\tvar basicConstraints = [{ value: 'eq', label: 'is' }, { value: 'ne', label: 'is not' }, { value: 'is_null', label: 'is null' }, { value: 'not_null', label: 'is not null' }];\n\t\n\tvar numberConstraints = basicConstraints.concat([{ value: 'gt', label: 'greater than' }, { value: 'ge', label: 'greater than or equal to' }, { value: 'lt', label: 'less than' }, { value: 'le', label: 'less than or equal to' }]);\n\t\n\tvar defaultConstraints = basicConstraints.concat([{ value: 'contains', label: 'contains' }, { value: 'not_contains', label: 'not contains' }, { value: 'is_empty', label: 'is empty' }, { value: 'not_empty', label: 'is not empty' }, { value: 'startswith', label: 'starts with' }, { value: 'not_startswith', label: 'not starts with' }, { value: 'endswith', label: 'ends with' }, { value: 'not_endswith', label: 'not ends with' }]);\n\t\n\texports.default = {\n\t    string: defaultConstraints,\n\t    integer: numberConstraints,\n\t    currency: numberConstraints,\n\t    percentage: numberConstraints,\n\t    number: numberConstraints,\n\t    double: numberConstraints,\n\t    date: numberConstraints,\n\t    datetime: numberConstraints,\n\t    time: numberConstraints,\n\t    defaultType: defaultConstraints,\n\t    boolean: basicConstraints\n\t};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"fisPubSubService\", function (fisPubSubService) {\n\t  'ngInject';\n\t\n\t  return {\n\t    restrict: 'A',\n\t    link: function link(scope, element, attrs) {\n\t      var draggable = attrs.fisDraggable === true || attrs.fisDraggable === 'true';\n\t      element.attr('draggable', draggable);\n\t\n\t      var dragStartEvent = 'fisOnDragStart.' + attrs.fisDragDropType;\n\t      var dragEvent = 'fisOnDrag.' + attrs.fisDragDropType;\n\t      var dragEndEvent = 'fisOnDragEnd.' + attrs.fisDragDropType;\n\t\n\t      element.get(0).addEventListener('dragstart', function (e) {\n\t        fisPubSubService.publish(dragStartEvent, { event: e });\n\t      });\n\t\n\t      element.get(0).addEventListener('dragover', function (e) {\n\t        e.preventDefault();\n\t      });\n\t\n\t      element.get(0).addEventListener('drag', function (e) {\n\t        fisPubSubService.publish(dragEvent, { event: e });\n\t      });\n\t\n\t      element.get(0).addEventListener('dragend', function (e) {\n\t        fisPubSubService.publish(dragEndEvent, { event: e });\n\t      });\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"fisPubSubService\", function (fisPubSubService) {\n\t  'ngInject';\n\t\n\t  return {\n\t    restrict: 'A',\n\t    link: function link(scope, element, attrs) {\n\t      var dragEnterEvent = 'fisOnDragEnter.' + attrs.fisDragDropType;\n\t      var dragLeaveEvent = 'fisOnDragLeave.' + attrs.fisDragDropType;\n\t      var dropEvent = 'fisOnDrop.' + attrs.fisDragDropType;\n\t\n\t      element.get(0).addEventListener('dragover', function (e) {\n\t        e.preventDefault();\n\t      });\n\t\n\t      element.get(0).addEventListener('dragenter', function (e) {\n\t        fisPubSubService.publish(dragEnterEvent, { event: e });\n\t      });\n\t\n\t      element.get(0).addEventListener('dragleave', function (e) {\n\t        fisPubSubService.publish(dragLeaveEvent, { event: e });\n\t      });\n\t\n\t      element.get(0).addEventListener('drop', function (e) {\n\t        e.preventDefault();\n\t        fisPubSubService.publish(dropEvent, { event: e });\n\t      });\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _draggable = __webpack_require__(10);\n\t\n\tvar _draggable2 = _interopRequireDefault(_draggable);\n\t\n\tvar _dropTarget = __webpack_require__(11);\n\t\n\tvar _dropTarget2 = _interopRequireDefault(_dropTarget);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.directives.dragdrop', []);\n\t\n\tngModule.directive('fisDraggable', _draggable2.default);\n\tngModule.directive('fisDropTarget', _dropTarget2.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _utils = __webpack_require__(17);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tvar _dragdrop = __webpack_require__(12);\n\t\n\tvar _dragdrop2 = _interopRequireDefault(_dragdrop);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.directives', [_utils2.default, _dragdrop2.default]);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$compile\", function ($compile) {\n\t  'ngInject';\n\t\n\t  return {\n\t    restrict: 'A',\n\t    priority: 590,\n\t    terminal: true,\n\t    compile: function compile() {\n\t      return function postLink(scope, element, attrs) {\n\t        element.addClass(scope.$eval(attrs.fisApplyClassDirective));\n\t\n\t        $compile(element, null, 590)(scope);\n\t      };\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'ngInject';\n\t\n\t  var service = {};\n\t\n\t  /**\r\n\t   * @description Allows filtering properties of a provided source object to set them without the provided prefix\r\n\t   * on a target object.\r\n\t   * @param {Object} sourceObject The object from which the properties should be taken.\r\n\t   * @param {String} prefix The not empty prefix applied to filter the properties of the source object.\r\n\t   * @param {Object} targetObject The optional target object on which to set the properties. If not provided, a new object is created.\r\n\t   */\n\t  service.copyProperties = function (sourceObject, prefix, targetObject) {\n\t    if (sourceObject === undefined) {\n\t      throw 'sourceObject must be provided'; // eslint-disable-line\n\t    }\n\t\n\t    if (prefix === undefined || typeof prefix !== 'string' || prefix.length < 1) {\n\t      throw 'no not empty string prefix provided. Got ' + prefix; // eslint-disable-line\n\t    }\n\t\n\t    if (targetObject === undefined) {\n\t      targetObject = {};\n\t    }\n\t\n\t    // Filter all object properties for the prefix\n\t    var propertyNames = Object.keys(sourceObject).filter(function (property) {\n\t      return property.substring(0, prefix.length) === prefix;\n\t    });\n\t\n\t    // Add the property values to the target object\n\t    if (propertyNames !== undefined) {\n\t      angular.forEach(propertyNames, function (propertyName) {\n\t        // truncate the name, throw away the prefix\n\t        var truncatedName = propertyName.substr(prefix.length);\n\t\n\t        // Adjust the first letter to be lowerCase\n\t        truncatedName = truncatedName.substring(0, 1).toLowerCase() + truncatedName.substring(1);\n\t\n\t        targetObject[truncatedName] = sourceObject[propertyName];\n\t      });\n\t    }\n\t\n\t    return targetObject;\n\t  };\n\t\n\t  /**\r\n\t   * Helps in migrating attrs.$observe invocations from AngularJS 1.2.x to 1.3+.\r\n\t   * 1.2 used to invoke the listener function once if the attribute is undefined.\r\n\t   * IT IS PREFERABLE TO REFACTOR YOUR CODE THAN TO USE THIS FUNCTION.\r\n\t   */\n\t  service.invokeAndObserve = function (attrs, key, fn) {\n\t    // if attribute is present, no need to invoke since observe will.\n\t    if (!angular.isDefined(attrs[key])) {\n\t      fn(undefined);\n\t    }\n\t    attrs.$observe(key, fn);\n\t  };\n\t\n\t  return service;\n\t};\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_) {'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"fisUniqueIdService\", \"fisScopeUtils\", function (fisUniqueIdService, fisScopeUtils) {\n\t  'ngInject';\n\t\n\t  var fieldTemplate = '<div class=\"fis-field control-group\">\\n                <%var isExpVal=false;if (field.attrs.fisLabel  || field.attrs.required !== undefined) {if(field.attrs.fisLabel && field.attrs.fisLabel.indexOf(\"\\'\") > -1){field.attrs.fisLabel = field.attrs.fisLabel.replace(/\\'/g,\\'\"\\');}if(field.attrs.fisLabel && field.attrs.fisLabel.indexOf(\"{{\") > -1){field.attrs.fisLabel = field.attrs.fisLabel.replace(/{|}/g,\"\");isExpVal=true;}%><label class=\"control-label\"><span><span class=\"fis-req\">*</span><%if(isExpVal){%><span ng-bind-html=\"<%- field.attrs.fisLabel %>\"></span><%} else{%><span ng-bind-html=\"\\'<%- field.attrs.fisLabel %>\\'\"></span><%}%></span></label><%}%>\\n                <div class=\"controls\">\\n                    <div ng-show=\"fisEditMode\" class=\"wrap fis-inputs\" fis-unique-id=\"edit_mode\">\\n                    <%= field.editTemplate %>\\n                    </div>\\n                    <div ng-show=\"!fisEditMode\" class=\"wrap fis-view-value control-label-view\" fis-unique-id=\"not_edit_mode\">\\n                    <%= field.viewTemplate %>\\n                    </div>\\n                    <% if (field.attrs.fisInstruct){ %><span ng-show=\"fisEditMode\" class=\"fis-instruct-message\"><%- field.attrs.fisInstruct %></span> <% } %>\\n                    <span ng-show=\"fisEditMode\" fis-field-message></span>\\n                </div>\\n            </div>';\n\t\n\t  var FieldController = function FieldController($scope, $element, $attrs, $transclude, $parse) {\n\t    if ($scope.$parent.fisEditMode !== true && $scope.$parent.fisEditMode !== false) {\n\t      // set fisEditMode on the parent if it is not already set.\n\t      // this takes care of fields that are outside of an fisFields directive.\n\t      $scope.$parent.fisEditMode = true;\n\t    }\n\t\n\t    fisScopeUtils.watch($scope.$parent, $attrs.fisDisabled, function (disabled) {\n\t      $scope.fisDisabled = disabled;\n\t\n\t      var required = $parse($attrs.fisRequired)($scope);\n\t\n\t      if (required === true) {\n\t        if (disabled === true) {\n\t          // Was required, is now disabled, so remove the required flag\n\t          $scope.fisRequired = false;\n\t          $element.removeClass('fis-required');\n\t        } else {\n\t          // Was required, the flag might have been removed earlier, so re-add it\n\t          $scope.fisRequired = true;\n\t          $element.addClass('fis-required');\n\t        }\n\t      }\n\t    });\n\t\n\t    fisScopeUtils.watch($scope.$parent, $attrs.fisRequired, function (required) {\n\t      $scope.fisRequired = required;\n\t\n\t      if (required) {\n\t        $element.addClass('fis-required');\n\t      } else if ($attrs.required == null) {\n\t        // eslint-disable-line\n\t        $element.removeClass('fis-required');\n\t      }\n\t    });\n\t\n\t    fisScopeUtils.watch($scope.$parent, $attrs.fisEditMode, function (editMode) {\n\t      $scope.fisEditMode = editMode;\n\t    });\n\t\n\t    /**\r\n\t     * @name registeredInputs\r\n\t     * @description Hash of model property to ngModel.\r\n\t     * Used by fisFieldMessage to dispatch valid state to ngModel\r\n\t     * @methodOf FieldController\r\n\t     */\n\t    $scope.registeredInputs = {};\n\t\n\t    var models = [];\n\t\n\t    /**\r\n\t     * @name registerInput\r\n\t     * @description Registers a ngModel controller. Invoked by fisInput controller\r\n\t     * @methodOf FieldController\r\n\t     */\n\t    $scope.registerInput = function (ngModel) {\n\t      if (ngModel.fisProperty) {\n\t        $scope.registeredInputs[ngModel.fisProperty] = ngModel;\n\t        models.push(ngModel);\n\t      }\n\t    };\n\t\n\t    $scope.unregisterInput = function (ngModel) {\n\t      if (ngModel.fisProperty && $scope.registeredInputs[ngModel.fisProperty] === ngModel) {\n\t        delete $scope.registeredInputs[ngModel.fisProperty];\n\t\n\t        var idx = models.indexOf(ngModel);\n\t        if (idx > -1) {\n\t          delete models[idx];\n\t        }\n\t      }\n\t    };\n\t\n\t    $scope.fieldValue = function () {\n\t      // TODO: provide access to fis-input element(s) inside transclusion\n\t      // scope.fisFieldValueFn is the callback that is provided by the linkWrapper\n\t      return $scope.fisFieldValueFn($scope, $element, $attrs, models);\n\t    };\n\t  };\n\t\n\t  // default function used by scope.fieldValue which only takes care of single input fields (single ngModel per field)\n\t  // the models passed to it will be decorated with fisLabel, fisProperty and fisInput properties (this is done in fisInput directive)\n\t  function fieldValueFn(scope, element, attrs, models) {\n\t    return models[0] && models[0].$modelValue || '';\n\t  }\n\t\n\t  /**\r\n\t   * @name FieldDirective\r\n\t   * @methodOf fis.fis.core.forms\r\n\t   */\n\t  var FieldDirective = function FieldDirective(options) {\n\t    var self = this;\n\t    options = options || {};\n\t\n\t    // Using default priority of 0, just like any other directive does\n\t    self.priority = 0;\n\t\n\t    // Overwrite it with whatever the user has specified.\n\t    // Don't use the || approach since it doesn't handle 0 gracefully.\n\t    if (options.priority !== undefined) {\n\t      self.priority = options.priority;\n\t    }\n\t\n\t    self.restrict = options.restrict || 'ACE';\n\t    self.require = options.require; // should merge with this and only return array of required to outside link fn\n\t    self.transclude = options.transclude || false;\n\t    self.scope = true;\n\t    self.editTemplate = options.editTemplate || '';\n\t    self.viewTemplate = options.viewTemplate || '{{fieldValue()}}';\n\t    self.fieldValue = options.fieldValue || fieldValueFn;\n\t\n\t    self.compiledTemplate = _.template(fieldTemplate);\n\t\n\t    self.controller = options.controller || ['$scope', '$element', '$attrs', '$transclude', '$parse', FieldController];\n\t\n\t    self.compile = function (element, attrs, transclude) {\n\t      var context = {\n\t        editTemplate: self.editTemplate,\n\t        viewTemplate: self.viewTemplate,\n\t        attrs: attrs\n\t      };\n\t\n\t      attrs.fisSize = attrs.fisSize || 'large';\n\t\n\t      // attaching the editTemplate and viewTemplate to the main fieldTemplate\n\t      var markup = self.compiledTemplate({ field: context });\n\t\n\t      if (markup.indexOf('<%') !== -1) {\n\t        markup = _.template(markup)({ field: context });\n\t      }\n\t\n\t      var tplElement = angular.element(markup);\n\t\n\t      /* Call moveAssignAttributesToInputs to move and assign attributes to inputs element\r\n\t        * - If elements have compile function with transclusion then input element added after compilation,\r\n\t        *  so in this case move and assign attributes after compilation done.\r\n\t        * - If input elements have link function then input element already added,\r\n\t        *  so in this case first move and assign attributes to input element and then call link function.\r\n\t        */\n\t      var result;\n\t\n\t      if (options.compile) {\n\t        // if the FieldDirective was provided with a compile function, invoke it.\n\t        // We pass it the tplElement we just created but also the original element to allow\n\t        // inspecting it in a provided compile function before it gets replaced below.\n\t        result = linkWrapper(options.compile(tplElement, attrs, transclude, element), self.fieldValue);\n\t        moveAssignAttributesToInputs(attrs, tplElement);\n\t      } else {\n\t        moveAssignAttributesToInputs(attrs, tplElement);\n\t        // return the link function\n\t        result = linkWrapper(options.link || angular.noop, self.fieldValue);\n\t      }\n\t\n\t      // replace the provided element with the newly constructed one.\n\t      element.replaceWith(tplElement);\n\t\n\t      return result;\n\t    };\n\t    return self;\n\t  };\n\t\n\t  // Function mo ves and assign attributes to input element\n\t  function moveAssignAttributesToInputs(attrs, tplElement) {\n\t    // find the input elements in the assembled template element\n\t    var inputs = findInputs(tplElement);\n\t\n\t    // find the label element in the assembled template element\n\t    var labels = findLabel(tplElement);\n\t\n\t    // move attributes from the template's root element to each input element found, following naming convention\n\t    moveAttributesToInputs(attrs, tplElement, inputs);\n\t\n\t    // assign additional attributes to inputs (e.g. ng-disabled)\n\t    assignAttributesToInputs(attrs, tplElement, inputs);\n\t\n\t    // move attributes from the template's root element to each label element found, following naming convention\n\t    moveAttributesToLabel(attrs, tplElement, labels);\n\t  }\n\t\n\t  function linkWrapper(linkFn, valueFn) {\n\t    return function (scope, element, attrs, ctrls) {\n\t      if (attrs.fisLabel === undefined) {\n\t        if (attrs.required != null) {\n\t          // eslint-disable-line\n\t          element.find('.control-label').addClass('without-fis-label');\n\t        }\n\t        element.find('.controls').addClass('without-fis-label');\n\t      }\n\t\n\t      attrs.$observe('ngRequiredInput', function (value) {\n\t        if (value === 'true') {\n\t          element.addClass('fis-required');\n\t        }\n\t      });\n\t\n\t      var editModelName = element.find('input').attr('ng-model');\n\t\n\t      if (!editModelName) {\n\t        editModelName = element.find('select').attr('ng-model');\n\t      }\n\t\n\t      fisUniqueIdService.generateUniqueId(scope, element.find('.fis-view-value'), attrs, 'view_' + editModelName);\n\t\n\t      scope.fisFieldValueFn = valueFn;\n\t      if (linkFn) {\n\t        linkFn(scope, element, attrs, ctrls);\n\t      }\n\t    };\n\t  }\n\t\n\t  /*\r\n\t    * @name moveAttributes\r\n\t    * @param attrs The angular Attributes object for the directive\r\n\t    * @param rootElement The angular decorated root element of the directive\r\n\t    * @param inputs A hash of input element name to decorate element.\r\n\t    * @private\r\n\t    */\n\t  function moveAttributesToInputs(attrs, rootElement, inputs) {\n\t    var rootAttrs = attrs;\n\t\n\t    // move attributes for each input found\n\t    angular.forEach(inputs, function (elem, name) {\n\t      var inputAttrs = getAttributesForInput(attrs, name);\n\t      // remove the attributes found from the rootAttrs\n\t      rootAttrs = _.omit(rootAttrs, _.keys(inputAttrs));\n\t      // Object.keys(inputAttrs).forEach(function (inputAttr){\n\t      //    rootAttrs[inputAttr] = undefined;\n\t      // });\n\t      // copy the attributes minus the ending part (i.e. ng-model-input becomes ng-model for the element marked as 'input')\n\t      angular.forEach(inputAttrs, function (attr) {\n\t        elem.attr(attr.name, attr.val);\n\t      });\n\t    });\n\t\n\t    // rootAttrs now contains only the attributes that were not assigned to inputs\n\t    // add them to the root element of the directive\n\t    angular.forEach(rootAttrs, function (val, key) {\n\t      if (key === 'class') {\n\t        rootElement.addClass(val);\n\t      } else {\n\t        var denormalized = attrs.$attr[key];\n\t        if (denormalized) {\n\t          rootElement.attr(denormalized, val);\n\t        }\n\t      }\n\t    });\n\t  }\n\t\n\t  /*\r\n\t    * @name moveAttributesToLabel\r\n\t    * @param attrs The angular Attributes object for the directive\r\n\t    * @param rootElement The angular decorated root element of the directive\r\n\t    * @param label A hash of label element name to decorate element.\r\n\t    * @private\r\n\t    */\n\t  function moveAttributesToLabel(attrs, rootElement, label) {\n\t    var rootAttrs = attrs;\n\t\n\t    // move attributes for each label found\n\t    angular.forEach(label, function (elem, name) {\n\t      var labelAttrs = getAttributesForLabel(attrs, name);\n\t\n\t      // remove the attributes found from the rootAttrs\n\t      rootAttrs = _.omit(rootAttrs, _.keys(labelAttrs));\n\t      // Object.keys(labelAttrs).forEach(function (labelAttr){\n\t      //    rootAttrs[labelAttr] = undefined;\n\t      // });\n\t\n\t      // copy the attributes minus the ending part (i.e. class-label becomes class for the element marked as 'label')\n\t      angular.forEach(labelAttrs, function (attr) {\n\t        if (attr.name === 'class') {\n\t          elem.addClass(attr.val);\n\t        } else {\n\t          elem.attr(attr.name, attr.val);\n\t        }\n\t      });\n\t    });\n\t\n\t    // rootAttrs now contains only the attributes that were not assigned to inputs\n\t    // add them to the root element of the directive\n\t    angular.forEach(rootAttrs, function (val, key) {\n\t      if (key === 'class') {\n\t        rootElement.addClass(val);\n\t      } else {\n\t        var denormalized = attrs.$attr[key];\n\t\n\t        if (denormalized) {\n\t          rootElement.attr(denormalized, val);\n\t        }\n\t      }\n\t    });\n\t  }\n\t\n\t  /*\r\n\t    * @description This function will make sure the template elements to be compiled follow our form field conventions\r\n\t    * so that widget developers and page developers don't have to know about them.\r\n\t    * @param {Object} attrs Angular Attributes object for the root element\r\n\t    * @param {Object} root The template's root element\r\n\t    * @param {Object} inputs The array of input elements\r\n\t    * @private\r\n\t    */\n\t  function assignAttributesToInputs(attrs, root, inputs) {\n\t    // TODO: if any of the input is marked required by a ng-required-value for example, put fis-required class on root element\n\t    angular.forEach(inputs, function (elem) {\n\t      elem.attr('ng-disabled', 'fisDisabled');\n\t      elem.attr('fis-unique-id', '');\n\t\n\t      if (attrs.required != null) {\n\t        // eslint-disable-line\n\t        // let's empty string (\"\") through, DON'T CHANGE TO !== ELSE THINGS BREAK\n\t        elem.attr('required', true);\n\t      } else {\n\t        elem.attr('ng-required', 'fisRequired');\n\t      }\n\t    });\n\t\n\t    if (attrs.required != null) {\n\t      // eslint-disable-line\n\t      // DON'T CHANGE TO !== ELSE THINGS BREAK\n\t      root.addClass('fis-required');\n\t    }\n\t  }\n\t\n\t  function getAttributesForInput(attrs, name) {\n\t    var ret = {};\n\t    var endsWith = '-' + name;\n\t    var re = new RegExp(endsWith + '$');\n\t\n\t    angular.forEach(attrs, function (val, key) {\n\t      var denormalized = attrs.$attr[key];\n\t\n\t      if (denormalized && denormalized.match(re)) {\n\t        // remove the last part of the attribute name\n\t        var attrName = denormalized.substring(0, denormalized.length - endsWith.length);\n\t        ret[key] = { name: attrName, val: val };\n\t      }\n\t    });\n\t\n\t    return ret;\n\t  }\n\t\n\t  function getAttributesForLabel(attrs, name) {\n\t    var ret = {};\n\t    var endsWith = '-' + name;\n\t    var re = new RegExp(endsWith + '$');\n\t\n\t    angular.forEach(attrs, function (val, key) {\n\t      var denormalized = attrs.$attr[key];\n\t\n\t      if (denormalized && denormalized.match(re)) {\n\t        // remove the last part of the attribute name\n\t        if (denormalized !== 'fis-label') {\n\t          var attrName = denormalized.substring(0, denormalized.length - endsWith.length);\n\t          ret[key] = { name: attrName, val: val };\n\t        }\n\t      }\n\t    });\n\t\n\t    return ret;\n\t  }\n\t\n\t  function findInputs(parent) {\n\t    var ret = {};\n\t\n\t    var nodeList = parent[0].querySelectorAll('[fis-input]');\n\t    for (var i = 0; i < nodeList.length; ++i) {\n\t      var elem = angular.element(nodeList[i]);\n\t      ret[elem.attr('fis-input') || 'input'] = elem;\n\t    }\n\t\n\t    return ret;\n\t  }\n\t\n\t  function findLabel(parent) {\n\t    var ret = {};\n\t\n\t    parent.find('label').each(function (index, n) {\n\t      var elem = angular.element(n);\n\t      ret[elem.attr('fis-label') || 'label'] = elem;\n\t    });\n\t\n\t    return ret;\n\t  }\n\t\n\t  return {\n\t\n\t    create: function create(options) {\n\t      return new FieldDirective(options);\n\t    },\n\t\n\t    // TODO: remove this when we have removed requireJS, only needed for tests to be able to access\n\t    _FieldController: FieldController\n\t\n\t  };\n\t}];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(64)))\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _elementUtils = __webpack_require__(15);\n\t\n\tvar _elementUtils2 = _interopRequireDefault(_elementUtils);\n\t\n\tvar _fieldDirectiveFactory = __webpack_require__(16);\n\t\n\tvar _fieldDirectiveFactory2 = _interopRequireDefault(_fieldDirectiveFactory);\n\t\n\tvar _scopeUtils = __webpack_require__(19);\n\t\n\tvar _scopeUtils2 = _interopRequireDefault(_scopeUtils);\n\t\n\tvar _uniqueIdService = __webpack_require__(21);\n\t\n\tvar _uniqueIdService2 = _interopRequireDefault(_uniqueIdService);\n\t\n\tvar _input = __webpack_require__(18);\n\t\n\tvar _input2 = _interopRequireDefault(_input);\n\t\n\tvar _applyClassDirective = __webpack_require__(14);\n\t\n\tvar _applyClassDirective2 = _interopRequireDefault(_applyClassDirective);\n\t\n\tvar _triggerDirectives = __webpack_require__(20);\n\t\n\tvar _triggerDirectives2 = _interopRequireDefault(_triggerDirectives);\n\t\n\tvar _uniqueId = __webpack_require__(22);\n\t\n\tvar _uniqueId2 = _interopRequireDefault(_uniqueId);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// Utilities for component/directive authoring\n\t\n\tvar ngModule = _angular2.default.module('fis.core.directives.utils', []);\n\t\n\tngModule.factory('fisElementUtils', _elementUtils2.default);\n\tngModule.factory('fisFieldDirectiveFactory', _fieldDirectiveFactory2.default);\n\tngModule.factory('fisScopeUtils', _scopeUtils2.default);\n\tngModule.factory('fisUniqueIdService', _uniqueIdService2.default);\n\t\n\tngModule.directive('fisInput', _input2.default);\n\tngModule.directive('fisApplyClassDirective', _applyClassDirective2.default);\n\tngModule.directive('fisUniqueId', _uniqueId2.default);\n\t\n\t['fisReinit', 'fisRefresh'].forEach(function (directive) {\n\t  ngModule.directive(directive, (0, _triggerDirectives2.default)(directive));\n\t});\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  function extractProperty(path, sep, $scope) {\n\t    var parts = path.split('.');\n\t\n\t    // To handle component case where user provide ng-model like '$ctrl.user.name'\n\t    if (parts.length > 1 && $scope && $scope.$ctrl && $scope.$ctrl.constructor.name !== 'AppComponentController') {\n\t      parts.splice(0, 1);\n\t    }\n\t\n\t    if (parts.length > 1) {\n\t      parts.splice(0, 1);\n\t    }\n\t\n\t    var result;\n\t    if (sep) {\n\t      result = parts.join(sep).replace(/[[\\]]+/g, sep);\n\t    } else {\n\t      result = parts.join('.');\n\t    }\n\t    return result;\n\t  }\n\t\n\t  return {\n\t    restrict: 'AC',\n\t    priority: 400,\n\t    require: 'ngModel',\n\t    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n\t      // before the ngModel controller is loaded (directive priority is higher),\n\t      // make sure there's a name assigned to the input so that the ngModel controller\n\t      // can register itself to the form with that name.\n\t      if (!$attrs.name && $attrs.ngModel) {\n\t        $attrs.name = extractProperty($attrs.ngModel, '_', $scope);\n\t      }\n\t    }],\n\t    link: function link(scope, element, attrs, ngModel) {\n\t      element.addClass('fis-input');\n\t\n\t      if (scope.registerInput) {\n\t        ngModel.fisProperty = extractProperty(attrs.ngModel, undefined, scope);\n\t        // useful when passed to FieldDirective's fieldValueFn.\n\t        ngModel.fisInput = attrs.fisInput || 'input';\n\t        ngModel.fisLabel = attrs.fisLabel;\n\t        if (attrs.name) {\n\t          ngModel.fisName = attrs.name;\n\t        }\n\t        scope.registerInput(ngModel);\n\t        element.on('$destroy', function () {\n\t          scope.unregisterInput(ngModel);\n\t        });\n\t      }\n\t    }\n\t  };\n\t};\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var service = {};\n\t\n\t  /**\r\n\t   * @description Allows setting a watch on a specified scope and invoke a callback with the watched value as an argument\r\n\t   * It also treats 'true'/'false' as hardcoded values and will not put a watch in these cases. This is useful when you are watching a directive attribute.\r\n\t   * @param {Object} scope The scope on witch to put a watch.\r\n\t   * @param {String} watched The scoped model to watch. If 'true' or 'false', the value is converted to a boolean and passed directly to the callback.\r\n\t   * @param {function} cb Callback to be invoked when the value changes. Can be invoked many times in the same $digest. Should be idempotent.\r\n\t   * @param {Object|String} def If provided, def will be passed to the callback if watched is falsy.\r\n\t   */\n\t  service.watch = function (scope, watched, cb, def) {\n\t    if (!cb) {\n\t      throw new Error('No callback provided!');\n\t    }\n\t\n\t    if (!watched) {\n\t      // check for null and undefined. DON'T CHANGE TO !== ELSE THINGS BREAK.\n\t      if (def != null) {\n\t        // eslint-disable-line\n\t        cb(def);\n\t      }\n\t      return;\n\t    }\n\t\n\t    if (watched === 'true') {\n\t      cb(true);\n\t    } else if (watched === 'false') {\n\t      cb(false);\n\t    } else {\n\t      scope.$watch(watched, function (value) {\n\t        cb(value);\n\t      });\n\t    }\n\t  };\n\t\n\t  /**\r\n\t   * Trigger a watch function once after a digest cycle competed\r\n\t   * @param scope scope to create the $watch at\r\n\t   * @param listener function returning the property to watch for (similarly to the first parameter you pass to regular scope.$watch)\r\n\t   * @param callback function ti be executed after the digest cycle completed\r\n\t   * @param $timeout reference to angular $timeout service\r\n\t   * @param apply boolean, true if the callback should be wrapped in scope.$apply, false to execute without wrapping\r\n\t   */\n\t  service.postDigest = function (scope, listener, callback, $timeout, apply) {\n\t    return function () {\n\t      var unregister;\n\t      var previous;\n\t      var timeout;\n\t\n\t      // Register some cleanup methods at the scope\n\t      scope.$on('$destroy', function () {\n\t        if (timeout) {\n\t          $timeout.cancel(timeout);\n\t        }\n\t        if (unregister) {\n\t          unregister();\n\t        }\n\t      });\n\t\n\t      function postDigest(callback) {\n\t        // Register a $watch with custom function as watchExpression.\n\t        // A watchExpression will be executed in every digest cycle\n\t        unregister = scope.$watch(function () {\n\t          // In the first digest cycle unregister this watch again\n\t          // to avoid creating multiple timeouts (infinity loop)\n\t          unregister();\n\t          // Create a timeout, this timeout will be executed after the digest cycle finished\n\t          timeout = $timeout(function () {\n\t            var current = listener();\n\t            // Check whether our listener changed\n\t            if (current !== previous) {\n\t              if (apply) {\n\t                // Execute callback in $scope.$apply phase\n\t                (function (current, previous) {\n\t                  scope.$apply(function () {\n\t                    callback(current, previous);\n\t                  });\n\t                })(current, previous);\n\t              } else {\n\t                callback(current, previous);\n\t              }\n\t              previous = current;\n\t            }\n\t            // Recursive call to register for the next digest cycle\n\t            postDigest(callback);\n\t          }, 0, false);\n\t        });\n\t      }\n\t\n\t      // Start postDigest Cycle\n\t      postDigest(callback);\n\t    }();\n\t  };\n\t\n\t  return service;\n\t};\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function (directive) {\n\t  return function () {\n\t    return {\n\t      restrict: 'A',\n\t      controller: ['$scope', '$attrs', function ($scope, $attrs) {\n\t        var self = this;\n\t\n\t        // put a watch on the attribute's expression and invoke the controller's trigger function\n\t        $scope.$watch($attrs[directive], function (newVal, oldVal) {\n\t          if (newVal !== oldVal) {\n\t            self.trigger($scope, newVal, oldVal);\n\t          }\n\t        }, true); // uses angular.equals\n\t\n\t        // default trigger function $broadcasts an event with the same name as the directive.\n\t        // Directives that require this directive can override this function and provide their own.\n\t        // Like this: triggerCtrl.trigger = function(scope, newVal, oldVal) {...}\n\t        self.trigger = function (scope, newVal, oldVal) {\n\t          scope.$broadcast(directive, { value: newVal, oldValue: oldVal });\n\t        };\n\t      }]\n\t    };\n\t  };\n\t};\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  /**\r\n\t   * Replace all non alphanumeric characters by an underscore\r\n\t   * @param value which should be cleaned up\r\n\t   * @param spacesOnly boolean, whether only spaces should be replaced or all non alphanumeric characters\r\n\t   * @returns {String}\r\n\t   */\n\t  function replaceNonAlphaNumeric(value, spacesOnly) {\n\t    var pattern = /[^\\w_\\-]+/g;\n\t    if (spacesOnly) {\n\t      pattern = /[^\\w]+/g;\n\t    }\n\t    return value.replace(pattern, '_');\n\t  }\n\t\n\t  /**\r\n\t   * Append extend to base, separated by an underscore if base is a string of non-zero length\r\n\t   * Otherwise extend gets returned\r\n\t   * @param base\r\n\t   * @param extend\r\n\t   * @returns {String} concatenation of base and extend, separated by underscore\r\n\t   */\n\t  function appendOrReplace(base, extend) {\n\t    var ret = base;\n\t    if (angular.isString(extend)) {\n\t      if (angular.isString(base) && base.length > 0) {\n\t        ret = base + '_' + extend;\n\t      } else {\n\t        ret = extend;\n\t      }\n\t    }\n\t    return ret;\n\t  }\n\t\n\t  var service = {\n\t\n\t    generateUniqueId: function () {\n\t      return function (scope, element, attributes, idBase, allowOverride, seed) {\n\t        if (angular.isString(idBase) && idBase.indexOf(' ') !== -1) {\n\t          return service.generateIdWithStaticSeed(scope, element, attributes, undefined, undefined, replaceNonAlphaNumeric(idBase, true), seed);\n\t        }\n\t\n\t        if (fis.initParams().appStage === 'T' || fis.initParams().appStage === 'D') {\n\t          // test appStage\n\t          return service.generateUniqueIdForce(scope, element, attributes, idBase, allowOverride, seed);\n\t        }\n\t      };\n\t    }(),\n\t\n\t    generateUniqueIdForce: function () {\n\t      var idCounter = {};\n\t      var initialized = false;\n\t\n\t      return function (scope, element, attributes, idBase, allowOverride, seed) {\n\t        if (!initialized) {\n\t          scope.$root.$on('$routeChangeStart', function () {\n\t            idCounter = {};\n\t          });\n\t          initialized = true;\n\t        }\n\t\n\t        // if the element already has an fisid we do not want to change it.\n\t        if (!allowOverride && element && angular.isDefined(element.attr('fisid'))) {\n\t          var nonGenId = element.attr('fisid');\n\t          return nonGenId;\n\t        }\n\t\n\t        var returnValue = idBase || '';\n\t\n\t        if (!returnValue) {\n\t          if (attributes.ngModel) {\n\t            returnValue = attributes.ngModel;\n\t          } else if (attributes.ngClick) {\n\t            if (scope.item && scope.item.path) {\n\t              returnValue = scope.item.path;\n\t            } else {\n\t              returnValue = attributes.ngClick;\n\t            }\n\t          } else if (attributes.fisI18n) {\n\t            returnValue = attributes.fisI18n;\n\t          }\n\t        }\n\t\n\t        if (seed === undefined) {\n\t          seed = '';\n\t        }\n\t\n\t        returnValue = replaceNonAlphaNumeric(returnValue) + seed;\n\t\n\t        if (idCounter[returnValue]) {\n\t          idCounter[returnValue] += 1;\n\t        } else {\n\t          idCounter[returnValue] = 1;\n\t        }\n\t        returnValue = returnValue + '_' + idCounter[returnValue];\n\t\n\t        if (element && (allowOverride || !element.attr('fisid'))) {\n\t          element.attr('fisid', returnValue);\n\t        }\n\t\n\t        return returnValue;\n\t      };\n\t    }(),\n\t\n\t    generateIdWithStaticSeed: function () {\n\t      return function (scope, element, attributes, idBase, childIdBase, staticId, seed) {\n\t        var idPrefix = attributes.fisUniqueIdSeed || idBase || '';\n\t\n\t        if (childIdBase) {\n\t          idPrefix += childIdBase;\n\t        }\n\t\n\t        idPrefix = appendOrReplace(idPrefix, angular.isArray(staticId) ? staticId.join('_') : staticId);\n\t\n\t        idPrefix = replaceNonAlphaNumeric(idPrefix);\n\t\n\t        if (seed === undefined) {\n\t          seed = '';\n\t        }\n\t        idPrefix += seed;\n\t\n\t        if (element && !element.attr('fisid')) {\n\t          element.attr('fisid', idPrefix);\n\t        }\n\t\n\t        return idPrefix;\n\t      };\n\t    }()\n\t\n\t  };\n\t\n\t  return service;\n\t};\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"fisUniqueIdService\", function (fisUniqueIdService) {\n\t  'ngInject';\n\t\n\t  return {\n\t    restrict: 'A',\n\t    link: function link(scope, element, attributes) {\n\t      var seed = attributes.fisSeed;\n\t      if (seed === undefined) {\n\t        seed = '';\n\t      }\n\t      // if test mode, then we build up seeds for unique id's based on parents that contain fis-seed attributes\n\t      if (fis.initParams().appStage === 'T' || fis.initParams().appStage === 'D') {\n\t        if (seed.length > 0 && seed.charAt(0) !== '_') {\n\t          seed = '_' + seed;\n\t        }\n\t        var seedArr = element.parents('[fis-seed]');\n\t        if (seedArr.length > 0) {\n\t          for (var i = 0; i < seedArr.length; i++) {\n\t            var elem = angular.element(seedArr[i]);\n\t            seed = seed + '_' + elem.attr('fis-seed');\n\t            elem = undefined;\n\t          }\n\t        }\n\t      }\n\t      if (angular.isDefined(attributes.fisIdNoIncrement) && attributes.fisIdNoIncrement) {\n\t        fisUniqueIdService.generateIdWithStaticSeed(scope, element, attributes, undefined, undefined, attributes.fisUniqueId, seed);\n\t      } else if (attributes.fisIdNoIncrement !== '' && attributes.fisIdNoIncrement !== null) {\n\t        fisUniqueIdService.generateUniqueId(scope, element, attributes, attributes.fisUniqueId, undefined, seed);\n\t      } else {\n\t        fisUniqueIdService.generateUniqueId(scope, element, attributes, undefined, undefined, seed);\n\t      }\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _interpolate = __webpack_require__(24);\n\t\n\tvar _interpolate2 = _interopRequireDefault(_interpolate);\n\t\n\tvar _search = __webpack_require__(25);\n\t\n\tvar _search2 = _interopRequireDefault(_search);\n\t\n\tvar _uncamelcase = __webpack_require__(26);\n\t\n\tvar _uncamelcase2 = _interopRequireDefault(_uncamelcase);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.filters', []);\n\t\n\tngModule.filter('interpolate', _interpolate2.default);\n\tngModule.filter('search', _search2.default);\n\tngModule.filter('uncamelcase', _uncamelcase2.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\r\n\t                                                                                                                                                                                                                                                                               * @name interpolate\r\n\t                                                                                                                                                                                                                                                                               * @description This filter allows replacing markers in a string with values.\r\n\t                                                                                                                                                                                                                                                                               * You can give it an array of string values, a string or an object hash to map a string value to a name.</p>\r\n\t                                                                                                                                                                                                                                                                               * <p>For an array or a string, the interpolation markers need to contain the index:</p>\r\n\t                                                                                                                                                                                                                                                                               * <pre>'Hello {0}' | interpolate ['World'] => 'Hello World'\r\n\t                                                                                                                                                                                                                                                                               * 'Hello {0} | interpolate 'Pierre' => 'Hello Pierre'</pre>\r\n\t                                                                                                                                                                                                                                                                               * <p>For an object hash, the interpolation markers need to contain the hash keys:</p>\r\n\t                                                                                                                                                                                                                                                                               * <pre>'Hello {firstName} {lastName} | interpolate {firstName: 'Pierre', lastName: 'Asselin'} => Hello Pierre Asselin</pre>\r\n\t                                                                                                                                                                                                                                                                               * <p>You can also use this filter inside a service or a controller by injecting the $filter service:</p>\r\n\t                                                                                                                                                                                                                                                                               * <pre>$filter('interpolate')('Hello {0}')</pre>\r\n\t                                                                                                                                                                                                                                                                               * @param {String} text The text to interpolate the values with\r\n\t                                                                                                                                                                                                                                                                               * @param {Object|String[]|String} val The value(s) to use for interpolation\r\n\t                                                                                                                                                                                                                                                                               * @methodOf fis.core.filters\r\n\t                                                                                                                                                                                                                                                                               */\n\t\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  return function (text, val) {\n\t    if (text) {\n\t      var str = String(text);\n\t\n\t      if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object' && typeof val !== 'array') {\n\t        // eslint-disable-line\n\t        val = [val];\n\t      }\n\t      for (var itm in val) {\n\t        if (itm) {\n\t          var re = new RegExp('\\\\{' + itm + '\\\\}', 'mg');\n\t          str = str.replace(re, val[itm]);\n\t        }\n\t      }\n\t      return str;\n\t    }\n\t\n\t    return '';\n\t  };\n\t};\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  return function (list, queryObj, property) {\n\t    var requiredObj;\n\t    var queryKeys = queryObj ? Object.keys(queryObj) : [];\n\t    list.some(function (item) {\n\t      var currentItemMatchesQueryObj = queryKeys.every(function (queryKey) {\n\t        return queryObj[queryKey] === item[queryKey];\n\t      });\n\t      if (currentItemMatchesQueryObj) {\n\t        requiredObj = item;\n\t        return true;\n\t      }\n\t      return false;\n\t    });\n\t    if (requiredObj) {\n\t      if (property) {\n\t        return requiredObj[property] || '';\n\t      }\n\t      return requiredObj;\n\t    }\n\t    return '';\n\t  };\n\t};\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  return function (text) {\n\t    if (text) {\n\t      return text\n\t      // insert a space between lower & upper\n\t      .replace(/([a-z])([A-Z])/g, '$1 $2')\n\t      // space before last upper in a sequence followed by lower\n\t      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\n\t      // uppercase the first character\n\t      .replace(/^\\w/, function (str) {\n\t        return str.toUpperCase();\n\t      });\n\t    }\n\t    return '';\n\t  };\n\t};\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tvar fis = window.fis = window.sg = window.fis || window.sg || {};\n\t\n\tfis.__angularModule = angular.module;\n\t\n\tfis.__controllers = {};\n\t\n\tangular.module = function (name, deps) {\n\t  'use strict';\n\t\n\t  var module = fis.__angularModule(name, deps);\n\t  var origCtrlFn = module.controller;\n\t\n\t  module.controller = function (name, constructor) {\n\t    var entry = constructor;\n\t\n\t    if (angular.isArray(constructor)) {\n\t      entry = constructor[constructor.length - 1];\n\t    }\n\t    fis.__controllers[name] = entry;\n\t\n\t    return origCtrlFn.apply(this, arguments);\n\t  };\n\t  return module;\n\t};\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t(function (fis, document) {\n\t  'use strict';\n\t\n\t  var params = null;\n\t  var cacheQuery = {};\n\t  var injector = null;\n\t\n\t  angular.extend(fis, {\n\t    // adding version this way so that grunt-bump can automatically update the version\n\t    version: '4.5.1'\n\t  });\n\t\n\t  // this can be replaced by using applications to change the cache string sent in requests\n\t  fis.cacheVersion = fis.version;\n\t\n\t  /**\r\n\t   * @name extend\r\n\t   * @description Copies properties of the second object into the first\r\n\t   * @param o1 Object to 'extend'. (Target)\r\n\t   * @param o2 Object to copy properties from. (Source)\r\n\t   * @returns The extended object.\r\n\t   */\n\t  function extend(o1, o2) {\n\t    for (var itm in o2) {\n\t      if (itm) {\n\t        o1[itm] = o2[itm];\n\t      }\n\t    }\n\t    return o1;\n\t  }\n\t\n\t  fis.paths = function () {\n\t    return {};\n\t  };\n\t  fis.shim = function () {\n\t    return {};\n\t  };\n\t\n\t  /**\r\n\t   * @class\r\n\t   * @name fis.initParams\r\n\t   * @description Get/Set accessor function for initParameters. Would normally be invoked by app-setup.js\r\n\t   * @param [opts] String\r\n\t   * @returns initParams object populated with appStage, configEndpoint, baseElement, modules etc.\r\n\t   * @namespace fis.initParams\r\n\t   */\n\t  fis.initParams = function (opts) {\n\t    if (opts || params === null) {\n\t      if (opts) {\n\t        // Use this syntax over the object notation, otherwise grunt-bump will try to update the object and\n\t        // destroy the file.\n\t        cacheQuery = {};\n\t        cacheQuery.version = fis.cacheVersion;\n\t        cacheQuery.appStage = opts.appStage;\n\t      }\n\t\n\t      params = extend(params || {\n\t        appStage: fis.utils.getRequestParam('appStage') || 'P',\n\t        baseElement: document,\n\t        modules: []\n\t      }, opts || {});\n\t\n\t      if (params.appStage === 'D') {\n\t        console.log('- Development mode.');\n\t      }\n\t    }\n\t\n\t    return params;\n\t  };\n\t\n\t  fis.getCacheQuery = function () {\n\t    return cacheQuery;\n\t  };\n\t\n\t  // Keep the String Parameter function for backward compatibility\n\t  fis.cacheQueryParameter = function (args) {\n\t    console.warn('Please use fisUtilService appendCacheQueryParameter() function for adding cache query parameters to url');\n\t    var version = cacheQuery.version;\n\t    if (args) {\n\t      version = args;\n\t    }\n\t    return 'version=' + version + '&appStage=' + cacheQuery.appStage;\n\t    // 'version=' + version + '&appStage=' + cacheQuery.appStage + '';\n\t  };\n\t\n\t  fis.prefixContext = function (pathObj) {\n\t    var modifiedPaths = extend({}, pathObj);\n\t    var context = fis.getLocationPath();\n\t    // context === / means no context root else context root like /myapp/\n\t    if (context !== '/') {\n\t      // check if it ends in resource extension like test.html, test.htm etc. Drop it if that's the case\n\t      var arrContext = context.split('/');\n\t      var arrContextLength = arrContext.length;\n\t      if (arrContext[arrContextLength - 1].indexOf('.') !== -1) {\n\t        // resource extension present\n\t        arrContext.splice(arrContextLength - 1, 1); // drop the last part\n\t      }\n\t      context = arrContext.join('/');\n\t\n\t      // remove the trailing / if it ends with one\n\t      if (context.match(/\\/$/)) {\n\t        context = context.substr(0, context.length - 1);\n\t      }\n\t      for (var prop in modifiedPaths) {\n\t        if (modifiedPaths[prop].indexOf('/') === 0) {\n\t          modifiedPaths[prop] = context + modifiedPaths[prop];\n\t        }\n\t      }\n\t    }\n\t    return modifiedPaths;\n\t  };\n\t\n\t  // Extracting location path logic into separate method for testability\n\t  fis.getLocationPath = function () {\n\t    return window.location.pathname;\n\t  };\n\t\n\t  fis.packages = function (arr) {\n\t    var i;\n\t    var n = arr.length;\n\t    var packages = [];\n\t\n\t    if (params.appStage !== 'D') {\n\t      return arr;\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t      packages.push({ name: arr[i], main: 'dev' });\n\t    }\n\t\n\t    return packages;\n\t  };\n\t\n\t  fis.bootstrapAngular = function (depModules) {\n\t    // only bootstrap if it wasn't already done by ng-app\n\t    if (!fis.utils.getInjector()) {\n\t      injector = angular.bootstrap(document, depModules);\n\t    }\n\t  };\n\t  /**\r\n\t   * @class\r\n\t   * @name fis.start\r\n\t   * @description Boot starting the framework. Loading the required or necessary script files through this.\r\n\t   * @param [init]\r\n\t   * @namespace fis.start\r\n\t   */\n\t  fis.start = function (initParams) {\n\t    if (angular.isObject(initParams)) {\n\t      initParams = fis.initParams(initParams);\n\t    } else {\n\t      initParams = fis.initParams();\n\t    }\n\t\n\t    if (!angular.isObject(initParams)) {\n\t      throw new Error('Init params need to be provided to fis.start.');\n\t    }\n\t\n\t    if (!angular.isArray(initParams.modules)) {\n\t      throw new Error('Modules needs to be defined in init parameters.');\n\t    }\n\t\n\t    // apps that are using ng-app will not have a configEndpoint and would use the newer\n\t    // fisConfig constant approach. For apps using fis.start, keep the old behavior of\n\t    // providing a default configEndpoint\n\t    if (!initParams.configEndpoint) {\n\t      initParams.configEndpoint = 'api/config';\n\t    }\n\t\n\t    angular.element(document).ready(function () {\n\t      // only bootstrap if it wasn't already done by ng-app\n\t      fis.bootstrapAngular(initParams.modules);\n\t    });\n\t  };\n\t\n\t  /**\r\n\t   * @namespace fis.utils\r\n\t   */\n\t  fis.utils = {};\n\t\n\t  /**\r\n\t   * @name getRequestParam\r\n\t   * @description Returns a single request parameter for the provided name\r\n\t   * @param name The name of the request parameter you are looking for\r\n\t   * @returns The value of the parameter if it is present only once or an array of values if it is present multiple times. Null is not found.\r\n\t   * @memberOf fis.utils\r\n\t   */\n\t  fis.utils.getRequestParam = function (name) {\n\t    var isString = function isString(value) {\n\t      return typeof value === 'string' || value instanceof String;\n\t    };\n\t    var re = new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)', 'g');\n\t    var res = [];\n\t    var search = isString(this) ? this : window.location.search;\n\t    var match = re.exec(search);\n\t\n\t    while (match) {\n\t      res.push(decodeURIComponent(match[1]));\n\t      match = re.exec(search);\n\t    }\n\t\n\t    if (res.length === 0) {\n\t      return null;\n\t    } else if (res.length === 1) {\n\t      return res[0];\n\t    }\n\t\n\t    return res;\n\t  };\n\t\n\t  fis.utils.getInjector = function () {\n\t    return injector;\n\t  };\n\t\n\t  function findRootElement() {\n\t    var rootElement = document.querySelector && document.querySelector('[ng-app]');\n\t    if (rootElement) {\n\t      return angular.element(rootElement);\n\t    }\n\t    return null;\n\t  }\n\t\n\t  function findInjector() {\n\t    var root = findRootElement();\n\t    if (root) {\n\t      return root.injector();\n\t    }\n\t    return null;\n\t  }\n\t\n\t  angular.element(document).ready(function () {\n\t    angular.element(document).find('body').removeClass('fis-loading-indicator');\n\t    injector = findInjector();\n\t  });\n\t\n\t  console.log('  ____  _   _ _____\\n' + ' |  _ \\\\| | | |  ___|\\n' + ' | |_) | | | | |_\\n' + ' |  _ <| |_| |  _|\\n' + ' |_| \\\\_\\\\\\\\___/|_|\\n' + ' FIS Responsive UI Framework\\n' + ' Version: ' + fis.version + '\\n © 2012-' + (new Date().getYear() + 1900) + ', all rights reserved.\\n');\n\t})(window.fis = window.sg = window.fis || window.sg || {}, document);\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$compile\", \"fisConfig\", function ($compile, fisConfig) {\n\t  'ngInject';\n\t\n\t  return {\n\t    restrict: 'E',\n\t    replace: 'true',\n\t    template: '<div class=\"hookList\" />',\n\t    link: function link(scope, elem, attrs) {\n\t      var newTemplate = buildHookListElement(attrs);\n\t      var hookList = angular.element(newTemplate);\n\t      elem.append(hookList);\n\t      $compile(hookList)(scope);\n\t    }\n\t  };\n\t\n\t  function buildHookListElement(attrs) {\n\t    var buffer = [];\n\t    if (fisConfig && fisConfig.hookListConfig) {\n\t      buffer.push('<div>');\n\t\n\t      fisConfig.hookListConfig.forEach(function (configItem) {\n\t        if (configItem.enabled === 'true') {\n\t          if (configItem.id === attrs.id) {\n\t            buffer.push(buildHookElement(configItem));\n\t          }\n\t        }\n\t      });\n\t      buffer.push('</div>');\n\t    }\n\t    return buffer.join('');\n\t  }\n\t\n\t  function buildHookElement(item) {\n\t    var hooks = item.hooks;\n\t    var buffer = ['<div'];\n\t    hooks.forEach(function (hookId) {\n\t      buffer.push('<div>');\n\t      buffer.push('<fis-hook id=\"');\n\t      buffer.push(hookId);\n\t      buffer.push('\"');\n\t      buffer.push(' />');\n\t      buffer.push('</div>');\n\t    });\n\t    buffer.push('</div>');\n\t    return buffer.join('');\n\t  }\n\t}];\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$compile\", \"fisConfig\", \"$templateCache\", \"$parse\", \"fisTemplateCacheService\", function ($compile, fisConfig, $templateCache, $parse, fisTemplateCacheService) {\n\t  'ngInject';\n\t\n\t  return {\n\t    restrict: 'E',\n\t    replace: 'true',\n\t    scope: true,\n\t    template: '<div class=\"hook\"></div>',\n\t    link: function link(scope, elem, attrs) {\n\t      var setHookData = function setHookData() {\n\t        var fisHookData = $parse(attrs.fisHookData);\n\t        scope.fisHookData = fisHookData(scope);\n\t      };\n\t\n\t      if (attrs.fisHookData) {\n\t        setHookData();\n\t        attrs.$observe('fisHookData', function () {\n\t          setHookData();\n\t        });\n\t      }\n\t\n\t      if (attrs.id) {\n\t        var templateName = attrs.id;\n\t        var template = fisTemplateCacheService.getTemplate(templateName);\n\t\n\t        if (angular.isDefined(template)) {\n\t          if (attrs.ngController) {\n\t            template = addController(template, attrs);\n\t          }\n\t          var hook = angular.element(template);\n\t          elem.append(hook);\n\t          $compile(hook)(scope);\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t  function addController(template, attrs) {\n\t    var startDiv = '<div ng-controller=\"' + attrs.ngController + '\">';\n\t    var endDiv = '</div>';\n\t    return startDiv + template + endDiv;\n\t  }\n\t}];\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _hook = __webpack_require__(30);\n\t\n\tvar _hook2 = _interopRequireDefault(_hook);\n\t\n\tvar _hookList = __webpack_require__(29);\n\t\n\tvar _hookList2 = _interopRequireDefault(_hookList);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.hook', []);\n\t\n\tngModule.directive('fisHook', _hook2.default);\n\tngModule.directive('fisHookList', _hookList2.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  var self = this;\n\t  var NOT_FOUND = '__NOT_FOUND__';\n\t\n\t  var defaultLocale = 'en';\n\t  self.setDefaultLocale = function (locale) {\n\t    defaultLocale = locale;\n\t  };\n\t\n\t  self.$get = ['$rootScope', '$http', '$q', '$location', 'fisPubSubService', 'fisConfig', '$translate', function ($rootScope, $http, $q, $location, fisPubSubService, conf, $translate) {\n\t    var serv = {};\n\t\n\t    var supportedLanguagesDeferred = $q.defer();\n\t    serv.supportedLanguages = supportedLanguagesDeferred.promise;\n\t\n\t    /**\r\n\t     * @name defaultLocale\r\n\t     * @description Getter function to access the framework default locale\r\n\t     * @return the default framework locale\r\n\t     * @methodOf angular.module('fis.core').fisI18nService\r\n\t     */\n\t    serv.defaultLocale = function () {\n\t      return defaultLocale;\n\t    };\n\t\n\t    var cancelTranslateLoadingSuccess = $rootScope.$on('$translateLoadingSuccess', function () {\n\t      fisPubSubService.publish('shell.i18nReady');\n\t      cancelTranslateLoadingSuccess();\n\t    });\n\t\n\t    /**\r\n\t     * @name locale\r\n\t     * @description Getter/setter function to access the current locale\r\n\t     *  @param [locale] The locale string to be set (optional).\r\n\t     *  @return the current locale\r\n\t     *  @methodOf angular.module('fis.core').fisI18nService\r\n\t     */\n\t    serv.locale = function (locale) {\n\t      if (locale) {\n\t        // only way to only request a single language is to\n\t        $translate.use(locale);\n\t        $http.defaults.headers.common['Accept-Language'] = locale;\n\t        fisPubSubService.publish('fisLocaleChanged', locale);\n\t      }\n\t\n\t      return locale || $translate.proposedLanguage();\n\t    };\n\t\n\t    serv.isTranslationReady = function () {\n\t      if ($translate.isReady() && $translate.getTranslationTable($translate.proposedLanguage()) !== null) {\n\t        return true;\n\t      }\n\t      return false;\n\t    };\n\t\n\t    function processLocaleConfiguration(defaultLang) {\n\t      var initLang = $location.search().lang || serv.defaultLocale();\n\t      if (initLang !== defaultLang && conf.supportedLanguages) {\n\t        // First check for actual language code like \"de-CH\" from supported language list\n\t        var foundLang;\n\t        conf.supportedLanguages.some(function (language) {\n\t          if (angular.equals(language.value, defaultLang)) {\n\t            foundLang = language;\n\t            return true;\n\t          }\n\t          return false;\n\t        });\n\t        // if not found then check for a fallback standard language code\n\t        // like \"de\" from supported language list\n\t        if (angular.isUndefined(foundLang)) {\n\t          var standardLangCode = defaultLang.split('-');\n\t          conf.supportedLanguages.some(function (language) {\n\t            if (angular.equals(language.value, standardLangCode[0])) {\n\t              foundLang = language;\n\t              return true;\n\t            }\n\t            return false;\n\t          });\n\t        }\n\t        if (angular.isDefined(foundLang)) {\n\t          initLang = foundLang.value ? foundLang.value : initLang;\n\t        }\n\t      }\n\t\n\t      $http.defaults.headers.common['Accept-Language'] = initLang;\n\t\n\t      $translate.use(initLang);\n\t\n\t      // only invoked once on load of the page (once config is loaded)\n\t      fisPubSubService.publish('fisLocaleSet', initLang);\n\t\n\t      supportedLanguagesDeferred.resolve(conf.supportedLanguages);\n\t      // Put the $location in the rootScope so that we can watch it\n\t      $rootScope.location = $location;\n\t\n\t      // put a watch on the lang request parameter and change the locale according to that parameter\n\t      $rootScope.$watch('location.search().lang', function (lang) {\n\t        if (lang && lang !== serv.locale()) {\n\t          serv.locale(lang);\n\t          // FIXME: removing the lang param because it screws up routes.\n\t          $rootScope.location.search('lang', null);\n\t        }\n\t      });\n\t    }\n\t    processLocaleConfiguration(fetchLocaleFromConfig());\n\t    // return config locale or fetch locale from browser\n\t    function fetchLocale() {\n\t      if (angular.isDefined(conf.locale)) {\n\t        return conf.locale;\n\t      }\n\t      return findBestDefaultLanguage();\n\t    }\n\t\n\t    // Retrieve locale as per configuration provided by user\n\t    function fetchLocaleFromConfig() {\n\t      var defaultLang = serv.defaultLocale();\n\t      if (angular.isDefined(conf.preferredLocale)) {\n\t        if (conf.preferredLocale === 'browser') {\n\t          defaultLang = findBestDefaultLanguage();\n\t        } else {\n\t          defaultLang = fetchLocale();\n\t        }\n\t      } else {\n\t        defaultLang = fetchLocale();\n\t      }\n\t      return defaultLang;\n\t    }\n\t\n\t    // find the closest language we can from what is sent through the \"Accept-Language\" header.\n\t    // After invocation of processLocaleConfiguration, we set the Accept-Language headers.\n\t    // Therefore, the config service's request is made using the browser's Accept-Language so the\n\t    // server can also return the language it receives.\n\t    function findBestDefaultLanguage() {\n\t      // Chrome and Firefox return the Accept-Language languages with navigator.languages.\n\t      // Not supported in other browsers\n\t      if (window.navigator.languages) {\n\t        return window.navigator.languages[0];\n\t      }\n\t\n\t      // Most supported. Returns Accept-Language on older firefox and OS language on IE 11\n\t      if (window.navigator.language) {\n\t        return window.navigator.language;\n\t      }\n\t\n\t      // IE specific property. Returns the operating system's natural language setting.\n\t      // http://msdn.microsoft.com/en-us/library/ie/ms535867(v=vs.85).aspx\n\t      if (window.navigator.userLanguage) {\n\t        return window.navigator.userLanguage;\n\t      }\n\t\n\t      // all supported browsers should have returned already\n\t      return 'en';\n\t    }\n\t\n\t    // This function is used to get the translated values for the specified keys\n\t    function getTranslatedValues(keysToTranslate, def, key, translations, translation) {\n\t      for (var i = 0; i < keysToTranslate.length; i++) {\n\t        // $translate.instant removes white spaces from string so compare trimmed value here as well\n\t        if (translations[keysToTranslate[i]] !== keysToTranslate[i].trim()) {\n\t          translation = translations[keysToTranslate[i]];\n\t          break;\n\t        }\n\t      }\n\t      return translation === NOT_FOUND ? (def === null || def === undefined) && key.join('.') || def : translation;\n\t    }\n\t\n\t    // This function returns the keysToTranslate array\n\t    function getKeysToTranslate(key) {\n\t      if (angular.isArray(key)) {\n\t        var ns = angular.copy(key);\n\t        var keysToTranslate = [];\n\t        while (ns.length > 0) {\n\t          if (ns[0]) {\n\t            keysToTranslate.push(ns.join('.'));\n\t          }\n\t          ns.shift();\n\t        }\n\t        return keysToTranslate;\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * @name translate\r\n\t     * @description provides a translation for the provided key\r\n\t     * @param {string|string[]} key The key to be translated. If an array, the service will try from the most significant (all elements joined to form a key) to the least significant (only the last element is used as the key)\r\n\t     * @param {string} [def] The default string to use if no translations are available\r\n\t     * @return The translated text if found, the default string provided or the key itself if nothing else can be returned\r\n\t     * @methodOf angular.module('fis.core').fisI18nService\r\n\t     */\n\t\n\t    // using $translate.instant\n\t    serv.translate = function (key, def) {\n\t      var translation = NOT_FOUND;\n\t      if (angular.isString(key)) {\n\t        key = key.split('.');\n\t      }\n\t      if (angular.isArray(key)) {\n\t        var keysToTranslate = getKeysToTranslate(key);\n\t        var translations = $translate.instant(keysToTranslate);\n\t        return getTranslatedValues(keysToTranslate, def, key, translations, translation);\n\t      }\n\t      return def || key;\n\t    };\n\t\n\t    /**\r\n\t     * @name translateAsync\r\n\t     * @description provides a translation for the provided key when translation data is not yet loaded\r\n\t     * @param {string|string[]} key The key to be translated. If an array, the service will try from the most significant (all elements joined to form a key) to the least significant (only the last element is used as the key)\r\n\t     * @param {string} [def] The default string to use if no translations are available\r\n\t     * @return Promise which will get resolved to the translated text if found, the default string provided or the key itself if nothing else can be returned\r\n\t     * @methodOf angular.module('fis.core').fisI18nService\r\n\t     */\n\t    serv.translateAsync = function (key, def) {\n\t      var translation = NOT_FOUND;\n\t      var translations;\n\t      var asyncTranslation = $q.defer();\n\t      if (angular.isString(key)) {\n\t        key = key.split('.');\n\t      }\n\t      var keysToTranslate = getKeysToTranslate(key);\n\t      // We have subscribed to '$translateChangeSuccess' event published by angular.translate module.\n\t      // Once the translation object is available, we will resolve the promise for UI translation of data.\n\t      var cancelTranslateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function () {\n\t        translations = $translate.instant(keysToTranslate);\n\t        var result = getTranslatedValues(keysToTranslate, def, key, translations, translation);\n\t        asyncTranslation.resolve(result);\n\t        // un-registering '$translateChangeSuccess' event handler\n\t        cancelTranslateChangeSuccess();\n\t      });\n\t      return asyncTranslation.promise;\n\t    };\n\t    return serv;\n\t  }];\n\t};\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  return {\n\t    restrict: 'A',\n\t    link: function link(scope, element, attrs) {\n\t      if (!attrs.fisI18n) {\n\t        throw new Error('Should provide a value for the fis-i18n attribute');\n\t      }\n\t      element.html(scope.i18n(attrs.fisI18n, element.html() || undefined));\n\t    }\n\t  };\n\t};\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"fisI18nService\", \"fisViewPanelService\", function (fisI18nService, fisViewPanelService) {\n\t  'ngInject';\n\t\n\t  return function (key, DefalutValue) {\n\t    if (angular.isDefined(key)) {\n\t      if (key.indexOf('.') === -1) {\n\t        var view = fisViewPanelService.activeViewPanel();\n\t        if (view) {\n\t          key = [view.module, view.id, key];\n\t        }\n\t      }\n\t      return fisI18nService.translate(key, DefalutValue);\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _translate = __webpack_require__(37);\n\t\n\tvar _translate2 = _interopRequireDefault(_translate);\n\t\n\tvar _i18n = __webpack_require__(34);\n\t\n\tvar _i18n2 = _interopRequireDefault(_i18n);\n\t\n\tvar _i18nService = __webpack_require__(32);\n\t\n\tvar _i18nService2 = _interopRequireDefault(_i18nService);\n\t\n\tvar _translate3 = __webpack_require__(38);\n\t\n\tvar _translate4 = _interopRequireDefault(_translate3);\n\t\n\tvar _i18n3 = __webpack_require__(33);\n\t\n\tvar _i18n4 = _interopRequireDefault(_i18n3);\n\t\n\tvar _translate5 = __webpack_require__(36);\n\t\n\tvar _translate6 = _interopRequireDefault(_translate5);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.i18n', []);\n\t\n\tngModule.filter('translate', _translate2.default);\n\tngModule.filter('i18n', _i18n2.default);\n\t\n\tngModule.provider('fisI18nService', _i18nService2.default);\n\tngModule.provider('$translate', _translate4.default);\n\t\n\tngModule.directive('fisI18n', _i18n4.default);\n\tngModule.directive('translate', _translate6.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  return {\n\t    restrict: 'AE',\n\t    link: function link(scope, element, attrs) {\n\t      console.warn('You are using dummy translate directive. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\n\t      if (attrs.translate) {\n\t        element.html(attrs.translate);\n\t      } else {\n\t        element.html(element.text());\n\t      }\n\t    }\n\t  };\n\t};\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$translate\", function ($translate) {\n\t  'ngInject';\n\t\n\t  return function (key, defaultValue) {\n\t    console.warn('You are using dummy translate filter. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\n\t    return $translate.instant(key, defaultValue);\n\t  };\n\t}];\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var self = this;\n\t\n\t  var warningPrinted = false;\n\t  function dummy() {\n\t    if (!warningPrinted) {\n\t      warningPrinted = true;\n\t      console.warn('You are using dummy angular-translate APIs. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\n\t    }\n\t  }\n\t\n\t  self.preferredLanguage = self.use = self.translations = dummy;\n\t\n\t  self.$get = ['$q', function ($q) {\n\t    var lang = '';\n\t    var $translate = function $translate(translationId, interpolateParams, interpolationId, defaultTranslationText /* , forceLanguage*/) {\n\t      dummy();\n\t      var deferred = $q.defer();\n\t      if (defaultTranslationText) {\n\t        deferred.resolve(defaultTranslationText);\n\t      } else {\n\t        deferred.resolve($translate.instant(translationId));\n\t      }\n\t      return deferred.promise;\n\t    };\n\t\n\t    $translate.instant = function (translationId /* , interpolateParams, interpolationId , forceLanguage*/) {\n\t      dummy();\n\t      var result = '';\n\t      if (angular.isArray(translationId) && translationId.length > 0) {\n\t        result = {};\n\t        translationId.forEach(function (key) {\n\t          result[key] = key;\n\t        });\n\t      } else {\n\t        result = translationId;\n\t      }\n\t      return result;\n\t    };\n\t\n\t    $translate.use = function (language) {\n\t      lang = language;\n\t      dummy();\n\t    };\n\t\n\t    $translate.proposedLanguage = function () {\n\t      dummy();\n\t      return lang;\n\t    };\n\t\n\t    return $translate;\n\t  }];\n\t};\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _pubsub = __webpack_require__(40);\n\t\n\tvar _pubsub2 = _interopRequireDefault(_pubsub);\n\t\n\tvar _pubsub3 = __webpack_require__(41);\n\t\n\tvar _pubsub4 = _interopRequireDefault(_pubsub3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.pubsub', []);\n\t\n\tngModule.directive('fisPubSub', _pubsub2.default);\n\tngModule.service('fisPubSubService', _pubsub4.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\r\n\t                                                                                                                                                                                                                                                                               * @name fisPubSub\r\n\t                                                                                                                                                                                                                                                                               * @description event handling service for the framework\r\n\t                                                                                                                                                                                                                                                                               *\r\n\t                                                                                                                                                                                                                                                                               */\n\t\n\t\n\texports.default = function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: ['$scope', 'fisPubSubService', function ($scope, fisPubSubService) {\n\t      var unsubs = [];\n\t      $scope.subscribe = function (topic, cb) {\n\t        var unsubscribe = fisPubSubService.subscribe(topic, cb);\n\t        unsubs.push(unsubscribe);\n\t        return unsubscribe;\n\t      };\n\t\n\t      $scope.publish = function (topic, payload) {\n\t        if ((typeof payload === 'undefined' ? 'undefined' : _typeof(payload)) === 'object') {\n\t          payload.$scope = $scope;\n\t        }\n\t\n\t        if ($scope.$root.$$phase === '$apply' || $scope.$root.$$phase === '$digest') {\n\t          return fisPubSubService.publish(topic, payload);\n\t        }\n\t\n\t        $scope.$apply(function () {\n\t          return fisPubSubService.publish(topic, payload);\n\t        });\n\t      };\n\t\n\t      // unsubscribe events when scope is destroyed\n\t      $scope.$on('$destroy', function () {\n\t        while (unsubs.length > 0) {\n\t          unsubs.pop()(); // pop the unsubscribe function and invoke it.\n\t        }\n\t      });\n\t    }]\n\t  };\n\t};\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$q\", function ($q) {\n\t  'ngInject';\n\t\n\t  var listeners = {};\n\t  var count = 0;\n\t\n\t  function addListener(topic, callback, sticky) {\n\t    var id = count++;\n\t    if (!callback || !topic) {\n\t      return;\n\t    }\n\t    listeners[topic] = listeners[topic] || {};\n\t    listeners[topic]._sticky = sticky || listeners[topic]._sticky;\n\t    listeners[topic][id] = callback;\n\t\n\t    if (sticky && listeners[topic]._lastPayload !== undefined) {\n\t      // invoke callback immediately with the last payload\n\t      callback.call(listeners[topic]._lastPayload, listeners[topic]._lastPayload, topic);\n\t    }\n\t    var ret = function ret() {\n\t      // handle allows removing the listener\n\t      if (listeners[topic] && listeners[topic][id]) {\n\t        delete listeners[topic][id];\n\t      }\n\t    };\n\t    // add properties to function to allow inspecting the topic it is attached to.\n\t    ret.topic = topic;\n\t    ret.id = id;\n\t    return ret;\n\t  }\n\t\n\t  /**\r\n\t   * @name publish\r\n\t   * @description Publish to a topic\r\n\t   * @param [topic, payload] Passing the topic information and payload information.\r\n\t   */\n\t  this.publish = function (topic, payload) {\n\t    var deferred = $q.defer();\n\t    var retPromises = [];\n\t    var l = listeners[topic] || {};\n\t\n\t    if (l._sticky) {\n\t      l._lastPayload = payload;\n\t    }\n\t    for (var i in l) {\n\t      if (i.indexOf('_') !== 0) {\n\t        // Wrap every returned value into a promise. Non-promise return values will be resolved\n\t        // immediately.\n\t        retPromises.push($q.when(l[i].call(payload, payload, topic)));\n\t      }\n\t    }\n\t\n\t    $q.all(retPromises).then(function (retVals) {\n\t      if (retVals.indexOf(false) > -1) {\n\t        deferred.reject();\n\t      } else {\n\t        deferred.resolve(retVals);\n\t      }\n\t    }, function () {\n\t      deferred.reject();\n\t    });\n\t\n\t    return deferred.promise;\n\t  };\n\t\n\t  /**\r\n\t   * @name subscribe\r\n\t   * @description Subscribe to a topic\r\n\t   * @param [topic, callback, sticky]\r\n\t   * @memberOf sungard.event\r\n\t   * @returns Adds the listener and passes the handle.\r\n\t   */\n\t  this.subscribe = function (topic, callback, sticky) {\n\t    return addListener(topic, callback, sticky);\n\t  };\n\t\n\t  /**\r\n\t   * @name unsubscribe\r\n\t   * @description Unsubscribe to a topic\r\n\t   * @param [handle] Passing the handle to find out the topic information from the handle.\r\n\t   * @memberOf sungard.event\r\n\t   */\n\t  this.unsubscribe = function (handle) {\n\t    if (typeof handle === 'function') {\n\t      handle();\n\t    } else if (listeners[handle.topic] && listeners[handle.topic][handle.id]) {\n\t      delete listeners[handle.topic][handle.id];\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var self = this;\n\t\n\t  self.$get = ['$window', 'fisUserContextService', function ($window, fisUserContextService) {\n\t    var service = {};\n\t    var separator = '_';\n\t    var inited = false;\n\t    var appId;\n\t\n\t    service.init = function (id) {\n\t      appId = id;\n\t      inited = true;\n\t    };\n\t\n\t    function createStorageKey(key) {\n\t      var userKey = fisUserContextService.context() ? fisUserContextService.context().userId : null;\n\t      if (appId) {\n\t        if (userKey) {\n\t          return appId + separator + userKey + separator + key;\n\t        }\n\t        return appId + separator + key;\n\t      } else if (userKey) {\n\t        return userKey + separator + key;\n\t      }\n\t      return key;\n\t    }\n\t\n\t    /**\r\n\t     * method to persist data in client storage\r\n\t     * @param {String} key    key\r\n\t     * @param {Object} val    Object to be stored in client storage\r\n\t     * @param {Object|String} opts Optional additional attributes like scope (app or user) and storageType (session or default) | storageType\r\n\t     */\n\t    service.setItem = function (key, val, opts) {\n\t      if (!inited) {\n\t        throw new Error('Service not initialized with appId');\n\t      }\n\t      var storageKey = createStorageKey(key);\n\t      if ($window.sessionStorage && $window.localStorage) {\n\t        if (opts && (opts === 'session' || opts.storageType === 'session')) {\n\t          // options present, work with it\n\t          $window.sessionStorage.setItem(storageKey, angular.toJson(val));\n\t        } else {\n\t          // Add to localStorage\n\t          $window.localStorage.setItem(storageKey, angular.toJson(val));\n\t        }\n\t      } else {\n\t        throw new Error('localStorage/sessionStorage not supported by browser');\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * Method to get item from Client Storage\r\n\t     * @param  {String} key   Key\r\n\t     * @return {Object}       Object stored in Client storage\r\n\t     */\n\t    service.getItem = function (key) {\n\t      if (!inited) {\n\t        throw new Error('Service not initialized with appId');\n\t      }\n\t      if ($window.sessionStorage && $window.localStorage) {\n\t        var storageKey = createStorageKey(key);\n\t        return angular.fromJson($window.localStorage.getItem(storageKey)) || angular.fromJson($window.sessionStorage.getItem(storageKey));\n\t      }\n\t      throw new Error('localStorage/sessionStorage not supported by browser');\n\t    };\n\t\n\t    /**\r\n\t     * Method to remove item from Client Storage\r\n\t     * @param  {String} key   Key of the item to be removed\r\n\t     */\n\t    service.removeItem = function (key) {\n\t      if (!inited) {\n\t        throw new Error('Service not initialized with appId');\n\t      }\n\t      if ($window.sessionStorage && $window.localStorage) {\n\t        var storageKey = createStorageKey(key);\n\t        $window.localStorage.removeItem(storageKey);\n\t        $window.sessionStorage.removeItem(storageKey);\n\t      } else {\n\t        throw new Error('localStorage/sessionStorage not supported by browser');\n\t      }\n\t    };\n\t\n\t    return service;\n\t  }];\n\t};\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$resource\", \"$q\", \"fisPubSubService\", \"$injector\", function ($resource, $q, fisPubSubService, $injector) {\n\t  'ngInject';\n\t\n\t  function publishEvent(name, value) {\n\t    if (name) {\n\t      fisPubSubService.publish(name, value);\n\t    }\n\t  }\n\t\n\t  function conditionalLoader(constantName, urlTemplate, urlParams, eventName) {\n\t    var deferred;\n\t    var event = eventName || constantName && constantName + '.loaded';\n\t    var value;\n\t\n\t    if ($injector.has(constantName)) {\n\t      value = $injector.get(constantName);\n\t      publishEvent(event, value);\n\t      value.then = function syncThen(cb) {\n\t        return cb(value);\n\t      };\n\t      return value;\n\t    }\n\t    // return an aync promise\n\t    deferred = $q.defer();\n\t\n\t    if (!urlTemplate) {\n\t      deferred.reject('No ' + constantName + ' constant found and no URL to GET.');\n\t      return deferred.promise;\n\t    }\n\t\n\t    $resource(urlTemplate).get(urlParams || {}, function loadSuccess(value) {\n\t      var prop;\n\t\n\t      deferred.resolve(value);\n\t      publishEvent(event, value);\n\t\n\t      for (prop in value) {\n\t        if (value.hasOwnProperty(prop)) {\n\t          deferred.promise[prop] = value[prop];\n\t        }\n\t      }\n\t    }, function loadFailure(httpResponse) {\n\t      deferred.reject(httpResponse);\n\t    });\n\t    return deferred.promise;\n\t  }\n\t\n\t  return conditionalLoader;\n\t}];\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  var provider = this;\n\t  var eventName = 'shell.configReady';\n\t  var defaultFactory;\n\t\n\t  provider.config = function setConfig(cfg) {\n\t    if (angular.isObject(cfg)) {\n\t      cfg.then = function (cb) {\n\t        return cb(cfg);\n\t      };\n\t      provider.$get = function () {\n\t        return cfg;\n\t      };\n\t    } else {\n\t      provider.$get = defaultFactory;\n\t    }\n\t  };\n\t\n\t  defaultFactory = provider.$get = ['$resource', '$q', 'fisPubSubService', '$injector', 'fisConditionalLoaderService', function ($resource, $q, fisPubSubService, $injector, loader) {\n\t    var configPromise;\n\t\n\t    if (!$injector.has('fisConfig')) {\n\t      console.warn('DEPRECATED. Use a fisConfig constant instead to improve load speed.', 'https://www.csa.sungard.com/wiki/x/ggfNAg');\n\t    }\n\t\n\t    configPromise = loader('fisConfig', fis.initParams().configEndpoint, {}, eventName);\n\t\n\t    configPromise.then(function success() {\n\t      console.log('- Framework config loaded.');\n\t    }, function failure(err) {\n\t      // If err is a http response object, throw an error to notify developer the\n\t      // config endpoint used is not working.\n\t      // If not a response object, it means the developer intentionally left the configEnpoint empty\n\t      // and does not use the config service. This is not possible when using fis.start.\n\t      if (err.status) {\n\t        throw new Error('Framework config is required!');\n\t      }\n\t    });\n\t\n\t    return configPromise;\n\t  }];\n\t};\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$delegate\", function ($delegate) {\n\t  'ngInject';\n\t\n\t  var doc = '\\nSee https://www.csa.sungard.com/wiki/x/9xVMB';\n\t  var interceptors = {};\n\t  var ANY = '_any';\n\t\n\t  var handler = function exceptionHandler(exception, cause) {\n\t    var prop;\n\t    for (prop in interceptors) {\n\t      if (prop === ANY || exception.hasOwnProperty(prop)) {\n\t        interceptors[prop](exception, cause);\n\t      }\n\t    }\n\t\n\t    $delegate(exception, cause);\n\t  };\n\t\n\t  handler.intercept = function intercept(property, cb) {\n\t    if (!property) {\n\t      delete interceptors[ANY];\n\t      return;\n\t    }\n\t\n\t    if (angular.isFunction(property)) {\n\t      cb = property;\n\t      property = ANY;\n\t    }\n\t\n\t    if (angular.isString(property)) {\n\t      if (angular.isFunction(cb)) {\n\t        interceptors[property] = cb;\n\t      } else {\n\t        delete interceptors[property];\n\t      }\n\t    }\n\t  };\n\t\n\t  handler.intercept('userMessage', function (exception) {\n\t    exception.message += doc;\n\t  });\n\t\n\t  return handler;\n\t}];\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$httpProvider\", function ($httpProvider) {\n\t  'ngInject';\n\t\n\t  $httpProvider.interceptors.push('fisHttpErrorInterceptor');\n\t}];\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var provider = this;\n\t\n\t  // default HTTP status for firing fisLoginRequired: 403 Forbidden\n\t  var loginStatuses = [403];\n\t\n\t  provider.setLoginRequiredStatus = function (httpStatuses) {\n\t    var i;\n\t    loginStatuses = [];\n\t    if (angular.isNumber(httpStatuses)) {\n\t      loginStatuses = [httpStatuses];\n\t    } else if (angular.isArray(httpStatuses)) {\n\t      for (i = 0; i < httpStatuses.length; i++) {\n\t        if (angular.isNumber(httpStatuses[i])) {\n\t          loginStatuses.push(httpStatuses[i]);\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t  provider.$get = ['$rootScope', '$q', 'fisPubSubService', function ($rootScope, $q, fisPubSubService) {\n\t    var successFn = function success(response) {\n\t      return response;\n\t    };\n\t\n\t    // default strategy is to reject but fire events.\n\t    // Another strategy could be to allow trying requests again after app confirms login (https://github.com/witoldsz/angular-http-auth)\n\t    var rejectNoRetry = function error(response) {\n\t      // check if the received error is in the HTTP statuses configured to $broadcast a fisLoginRequired event\n\t      if (loginStatuses.indexOf(response.status) !== -1) {\n\t        $rootScope.$broadcast('fisLoginRequired', response);\n\t      }\n\t\n\t      // publish response to the fisHTTPError topic\n\t      if (response.status >= 400 || response.status === 0) {\n\t        fisPubSubService.publish('fisHTTPError', response);\n\t      }\n\t      // 3xx range statuses are also going through this error callback but are not errors\n\t      // A strategy could try to load the location received in the response headers before rejecting the promise.\n\t\n\t      // reject the response and continue in chain\n\t      return $q.reject(response);\n\t    };\n\t\n\t    return {\n\t      response: successFn,\n\t      responseError: rejectNoRetry\n\t    };\n\t  }];\n\t};\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _exceptionHandler = __webpack_require__(45);\n\t\n\tvar _exceptionHandler2 = _interopRequireDefault(_exceptionHandler);\n\t\n\tvar _clientStorageService = __webpack_require__(42);\n\t\n\tvar _clientStorageService2 = _interopRequireDefault(_clientStorageService);\n\t\n\tvar _conditionalLoaderService = __webpack_require__(43);\n\t\n\tvar _conditionalLoaderService2 = _interopRequireDefault(_conditionalLoaderService);\n\t\n\tvar _configServiceProvider = __webpack_require__(44);\n\t\n\tvar _configServiceProvider2 = _interopRequireDefault(_configServiceProvider);\n\t\n\tvar _httpErrorInterceptorProvider = __webpack_require__(47);\n\t\n\tvar _httpErrorInterceptorProvider2 = _interopRequireDefault(_httpErrorInterceptorProvider);\n\t\n\tvar _templateCacheServiceProvider = __webpack_require__(49);\n\t\n\tvar _templateCacheServiceProvider2 = _interopRequireDefault(_templateCacheServiceProvider);\n\t\n\tvar _userContextServiceProvider = __webpack_require__(50);\n\t\n\tvar _userContextServiceProvider2 = _interopRequireDefault(_userContextServiceProvider);\n\t\n\tvar _httpErrorInterceptorConfig = __webpack_require__(46);\n\t\n\tvar _httpErrorInterceptorConfig2 = _interopRequireDefault(_httpErrorInterceptorConfig);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.services', []);\n\t\n\tngModule.decorator('$exceptionHandler', _exceptionHandler2.default);\n\t\n\tngModule.provider('fisClientStorageService', _clientStorageService2.default);\n\tngModule.provider('fisConfigService', _configServiceProvider2.default);\n\tngModule.provider('fisHttpErrorInterceptor', _httpErrorInterceptorProvider2.default);\n\tngModule.provider('fisTemplateCacheService', _templateCacheServiceProvider2.default);\n\tngModule.provider('fisUserContextService', _userContextServiceProvider2.default);\n\t\n\tngModule.factory('fisConditionalLoaderService', _conditionalLoaderService2.default);\n\t\n\tngModule.config(_httpErrorInterceptorConfig2.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  /**\r\n\t  * @private\r\n\t  */\n\t  var self = this;\n\t\n\t  /**\r\n\t  * @name $get\r\n\t  * @methodOf fisTemplateCacheService\r\n\t  * @description <p>Factory method to create instance of fisTemplateCacheService.</p>\r\n\t  */\n\t  self.$get = ['$templateCache', function ($templateCache) {\n\t    var service = {};\n\t\n\t    service.getTemplate = function (templateName) {\n\t      return $templateCache.get(templateName);\n\t    };\n\t\n\t    service.addTemplate = function (templateName, template) {\n\t      $templateCache.put(templateName, template);\n\t    };\n\t\n\t    service.removeTemplate = function (templateName) {\n\t      $templateCache.remove(templateName);\n\t    };\n\t\n\t    return service;\n\t  }];\n\t};\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var self = this;\n\t\n\t  self.$get = [function () {\n\t    var serv = {};\n\t\n\t    var userInContext;\n\t\n\t    serv.context = function (user) {\n\t      if (arguments.length === 1) {\n\t        userInContext = user;\n\t      } else {\n\t        var clonedUser = angular.copy(userInContext);\n\t        return clonedUser;\n\t      }\n\t    };\n\t    return serv;\n\t  }];\n\t};\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _memoryUtilService = __webpack_require__(52);\n\t\n\tvar _memoryUtilService2 = _interopRequireDefault(_memoryUtilService);\n\t\n\tvar _utilService = __webpack_require__(53);\n\t\n\tvar _utilService2 = _interopRequireDefault(_utilService);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.utils', []);\n\t\n\tngModule.provider('fisMemoryUtilService', _memoryUtilService2.default);\n\tngModule.provider('fisUtilService', _utilService2.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var self = this;\n\t\n\t  self.$get = [function () {\n\t    var service = {};\n\t\n\t    service.enabled = true;\n\t    service.logging = false;\n\t\n\t    if (!service.enabled) {\n\t      console.warn('fisMemoryUtilService has been disabled!');\n\t    }\n\t\n\t    /**\r\n\t     * Convenience method attempty to clean off all references to enable garbage collection\r\n\t     * @param node -  the element to be cleaned\r\n\t     */\n\t    service.callCleanAll = function (node) {\n\t      service.removeListeners(node);\n\t      service.destroyNode(node);\n\t    };\n\t\n\t    /**\r\n\t     * Attempts to remove all listeners from node.\r\n\t     * @param domNode\r\n\t     */\n\t    service.removeListeners = function (domNode) {\n\t      if (angular.isDefined(domNode)) {\n\t        var node = $(domNode);\n\t        if (node.length === 1) {\n\t          var children = node.children();\n\t          if (angular.isDefined(children) && children.length > 0) {\n\t            children.get().forEach(function (child) {\n\t              service.removeListeners(child);\n\t            });\n\t          }\n\t        }\n\t        if (node.length > 1) {\n\t          // node is a \"jQuery\" object\n\t          node.get().forEach(function (child) {\n\t            service.removeListeners(child);\n\t          });\n\t        } else {\n\t          if (node.scope()) {\n\t            node.scope().$destroy(); // in case this is implemented in scope.\n\t          }\n\t          node.unbind();\n\t        }\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * Utility method to destroy node (html elements like dom nodes)\r\n\t     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild\r\n\t     * @param node to be destroyed.\r\n\t     */\n\t    service.destroyNode = function (node) {\n\t      if (node) {\n\t        service.destroyAllChildNodes(node);\n\t        if (node.parent) {\n\t          var parent = node.parent();\n\t          service.destroyAllChildNodes(parent);\n\t        }\n\t        node = null;\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * Utility method to destroy All Children Nodes (html elements like dom nodes)\r\n\t     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild\r\n\t     * @param parentNode to be destroyed.\r\n\t     */\n\t    service.destroyAllChildNodes = function (parentNode) {\n\t      if (angular.isUndefined(parentNode)) {\n\t        return;\n\t      }\n\t      if (parentNode.length && parentNode.length === 1) {\n\t        if (angular.isDefined(parentNode.children()) && parentNode.children().length > 0) {\n\t          var child = parentNode.children();\n\t          child.remove();\n\t          child = null;\n\t        }\n\t      }\n\t      if (parentNode.length && parentNode.length > 1) {\n\t        angular.forEach(parentNode, function (child) {\n\t          service.destroyAllChildNodes(child);\n\t        });\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * Utility to cancel timeout\r\n\t     * @param scope\r\n\t     * @param timeout\r\n\t     * @param $timeout\r\n\t     */\n\t    service.cancelTimeoutOnDestroy = function (scope, timeout, $timeout) {\n\t      if (angular.isDefined(scope)) {\n\t        scope.$on('$destroy', function () {\n\t          if (timeout) {\n\t            $timeout.cancel(timeout);\n\t          }\n\t        });\n\t      } else {\n\t        console.warn('Memory cleanup failed scope is undefined');\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * Utility to cancel timeout\r\n\t     * @param compCtrl - the component controller instance\r\n\t     * @param timeout\r\n\t     * @param $timeout\r\n\t     */\n\t    service.cancelTimeoutOnComponentCtrlDestroy = function (compCtrl, timeout, $timeout) {\n\t      if (compCtrl) {\n\t        compCtrl.$onDestroy = function () {\n\t          if (timeout) {\n\t            $timeout.cancel(timeout);\n\t          }\n\t        };\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * Utility to cancel timeout\r\n\t     * @param scope\r\n\t     * @param watch\r\n\t     */\n\t    service.cancelWatchOnDestroy = function (scope, watch) {\n\t      scope.$on('$destroy', function () {\n\t        if (watch) {\n\t          watch(); // unbinds watch\n\t        }\n\t      });\n\t    };\n\t\n\t    /**\r\n\t     * Utility to destroy scope and data\r\n\t     * @param scope\r\n\t     * @param element\r\n\t     */\n\t    service.destroyScopeAndData = function (scope, element) {\n\t      if (scope) {\n\t        scope.$destroy();\n\t      }\n\t      if (element) {\n\t        $(element).removeData('$scope').removeData('$isolateScope').removeData('$isolateScopeNoTemplate').removeClass('ng-scope');\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * Utility to destroy kendo widgets\r\n\t     * @param widgets - kendo widgets to destroy\r\n\t     * @param element\r\n\t     */\n\t    // https://github.com/telerik/kendo-ui-core/issues/99\n\t    // https://github.com/kendo-labs/knockout-kendo/issues/140\n\t    service.destroyKendoWidgets = function (widgets) {\n\t      if (widgets) {\n\t        try {\n\t          widgets.destroy();\n\t          widgets = null;\n\t        } catch (e) {}\n\t      }\n\t    };\n\t\n\t    service.purgeAttributes = function (elements) {\n\t      if (elements !== undefined && elements.length > 0) {\n\t        for (var e = 0; e < elements.length; e++) {\n\t          var element = elements[e];\n\t          angular.element(element).removeData().removeAttr(); // try clear jqlite / jquery cache\n\t          if (element.attributes !== undefined && element.attributes.length > 0) {\n\t            for (var a = element.attributes.length - 1; a >= 0; a--) {\n\t              if (element.attributes[a].name !== 'class') {\n\t                // so kendo doesnt break, we leave the classlist in\n\t                element.removeAttribute(element.attributes[a].name);\n\t              }\n\t            }\n\t          }\n\t          if (element.children !== undefined && element.children.length > 0) {\n\t            service.purgeAttributes(element.children);\n\t          }\n\t          a = undefined; // eslint-disable-line\n\t        }\n\t      }\n\t    };\n\t\n\t    return service;\n\t  }];\n\t};\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var self = this;\n\t\n\t  self.$get = [function () {\n\t    var service = {};\n\t\n\t    /**\r\n\t     *@name calculateContainerWidth\r\n\t     *@param {Object} currentTabstrip.\r\n\t     *\r\n\t     *@description Returns the width of the Div containing the tabstrip.\r\n\t     * The extra width ensures there is always some space on the tabstrip.\r\n\t     * This method is in fisUtilService because it breaks the unit tests - uses jQuery to calculate the width of component on screen\r\n\t     * which is a problem for phantomJS which is headless\r\n\t     *\r\n\t     */\n\t    service.calculateContainerWidth = function (component) {\n\t      return parseFloat(component.width());\n\t    };\n\t\n\t    function queryStringToObject(queryString) {\n\t      var ret = {};\n\t      var queryPairs;\n\t\n\t      if (angular.isString(queryString)) {\n\t        queryPairs = queryString.split('&');\n\t      } else if (angular.isObject(queryPairs)) {\n\t        queryPairs = queryString;\n\t      }\n\t\n\t      queryPairs.forEach(function (queryElem) {\n\t        var elemParts = queryElem.split('=');\n\t        ret[elemParts[0]] = elemParts[1];\n\t      });\n\t      return ret;\n\t    }\n\t\n\t    function objectToQueryString(object) {\n\t      var str = '';\n\t      Object.keys(object).forEach(function (key) {\n\t        var val = object[key];\n\t        if (val !== null) {\n\t          str += key + '=';\n\t          if (angular.isDefined(val)) {\n\t            str += val;\n\t          }\n\t          str += '&';\n\t        }\n\t      });\n\t      return str.slice(0, -1);\n\t    }\n\t\n\t    /**\r\n\t     * Append custom parameters to a given URL. Already existing parameters will be overridden.\r\n\t     * Set the value of key to null to remove it from the url. Keeps existing anchors in the URL.\r\n\t     * @param url {String} The URL the parameters should be appended to.\r\n\t     * @param params {string|object} Object holding key-value pairs of parameters or query string in format \"key=value\" separated by &\r\n\t     * @returns {String} url enhanced by the parameters\r\n\t     */\n\t    service.appendQueryParameters = function (url, params) {\n\t      var pathString = url.match(/^([^?#]*)/i);\n\t      var queryString = url.match(/\\?([^#]*)/i);\n\t      var anchorString = url.match(/(#.*)$/i);\n\t\n\t      // Set to empty String of no matches found, otherwise use the first (and hopefully only) match\n\t      pathString = pathString === null ? '' : pathString[1];\n\t      anchorString = anchorString === null ? '' : anchorString[1];\n\t\n\t      var queryObject = {};\n\t\n\t      if (queryString !== null) {\n\t        queryObject = queryStringToObject(queryString[1]);\n\t      }\n\t      if (angular.isString(params)) {\n\t        params = queryStringToObject(params);\n\t      }\n\t      var mergedQueryString = objectToQueryString(angular.extend(queryObject, params));\n\t      if (mergedQueryString !== '') {\n\t        pathString += '?';\n\t      }\n\t      return pathString + mergedQueryString + anchorString;\n\t    };\n\t\n\t    /**\r\n\t     * Append version and appStage parameters to a given URL\r\n\t     * @param url The URL the parameters should be appended to\r\n\t     * @param customVersion {String} optional Override the version value\r\n\t     * @returns {String} url with the cache query parameters added\r\n\t     */\n\t    service.appendCacheQueryParameter = function (url, customVersion) {\n\t      var cacheQueryObject = fis.getCacheQuery();\n\t      if (angular.isDefined(customVersion)) {\n\t        // Clone the object to not change the version setting\n\t        cacheQueryObject = angular.extend({}, cacheQueryObject);\n\t        cacheQueryObject.version = customVersion;\n\t      }\n\t      return service.appendQueryParameters(url, cacheQueryObject);\n\t    };\n\t\n\t    /**\r\n\t     * Extract data from complex JSON for nested path (multi level)\r\n\t     * @param schema JSON path\r\n\t     * @param data JSON response\r\n\t     * @returns extracted data from JSON response\r\n\t     */\n\t    service.extractData = function (schema, data) {\n\t      var results;\n\t      var temp = angular.copy(data);\n\t      var tokens = schema.split(/\\.|(\\(\\))|(\\[\\d+?])/).filter(function (t) {\n\t        return t;\n\t      });\n\t      if (tokens.length === 1) {\n\t        results = temp[schema];\n\t      } else {\n\t        var isTokenArrayAccess = /^\\[\\d+\\]$/;\n\t        for (var i = 0; i < tokens.length; i++) {\n\t          var extractValue;\n\t          if (isTokenArrayAccess.test(tokens[i])) {\n\t            extractValue = temp[parseInt(tokens[i].substr(1), 10)];\n\t          } else {\n\t            extractValue = temp[tokens[i]];\n\t          }\n\t          if (angular.isDefined(extractValue)) {\n\t            temp = extractValue;\n\t            results = temp;\n\t          }\n\t        }\n\t      }\n\t      return results;\n\t    };\n\t\n\t    /*\r\n\t    * This function does a proper boolean check and is necessary anywhere\r\n\t    * that an angular directive is pulling in an attribute that is meant\r\n\t    * to be a boolean. Sometimes the value coming in will be a string,\r\n\t    * so the shortcut ways of checking boolean state don't work.\r\n\t    */\n\t    service.booleanCheck = function (actualValue, defaultValue) {\n\t      if (actualValue === undefined || actualValue === null) {\n\t        // no value specified, so resort to default value\n\t        return defaultValue;\n\t      } else if (typeof actualValue === 'boolean') {\n\t        // specific check to make sure its boolean\n\t        return actualValue;\n\t      }\n\t      var lowercase = actualValue.toLowerCase();\n\t      // we have to be specific here, otherwise use the default\n\t      if (lowercase === 'true') {\n\t        return true;\n\t      } else if (lowercase === 'false') {\n\t        return false;\n\t      }\n\t      return defaultValue;\n\t    };\n\t\n\t    /**\r\n\t     * Checks whether a given value is NaN.\r\n\t     * This is not the same as the native isNaN function, which will\r\n\t     * also return true for many other not-number values, such as undefined.\r\n\t     *\r\n\t     * @param value\r\n\t     * @returns {boolean}\r\n\t     */\n\t    service.isNaN = function (value) {\n\t      return toString.call(value) === '[object Number]' && value !== Number(value);\n\t    };\n\t\n\t    return service;\n\t  }];\n\t};\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  return function (scope, element, attrs) {\n\t    if (attrs.fisElement) {\n\t      var obj = scope[attrs.fisElement];\n\t      obj.$element = element;\n\t    }\n\t  };\n\t};\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _angularAnimate = __webpack_require__(2);\n\t\n\tvar _angularAnimate2 = _interopRequireDefault(_angularAnimate);\n\t\n\tvar _angularRoute = __webpack_require__(62);\n\t\n\tvar _angularRoute2 = _interopRequireDefault(_angularRoute);\n\t\n\tvar _views = __webpack_require__(59);\n\t\n\tvar _views2 = _interopRequireDefault(_views);\n\t\n\tvar _element = __webpack_require__(54);\n\t\n\tvar _element2 = _interopRequireDefault(_element);\n\t\n\tvar _views3 = __webpack_require__(60);\n\t\n\tvar _views4 = _interopRequireDefault(_views3);\n\t\n\tvar _viewPanelService = __webpack_require__(57);\n\t\n\tvar _viewPanelService2 = _interopRequireDefault(_viewPanelService);\n\t\n\tvar _viewService = __webpack_require__(58);\n\t\n\tvar _viewService2 = _interopRequireDefault(_viewService);\n\t\n\tvar _navigationService = __webpack_require__(56);\n\t\n\tvar _navigationService2 = _interopRequireDefault(_navigationService);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ngModule = _angular2.default.module('fis.core.views', [_angularAnimate2.default, _angularRoute2.default]);\n\t\n\tngModule.config(_views2.default);\n\t\n\tngModule.directive('fisElement', _element2.default);\n\tngModule.directive('fisViews', _views4.default);\n\t\n\tngModule.provider('fisViewPanelService', _viewPanelService2.default);\n\tngModule.provider('fisViewService', _viewService2.default);\n\tngModule.provider('fisNavigationService', _navigationService2.default);\n\t\n\texports.default = ngModule.name;\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  var self = this;\n\t\n\t  self.$get = ['fisPubSubService', '$q', function (fisPubSubService, $q) {\n\t    var service = {};\n\t    var navigation;\n\t    var deferred = $q.defer();\n\t\n\t    /**\r\n\t     * since the 'shell.navReady' is fired before this directive is instantiated,\r\n\t     * this method is only used when the navigation is updated.\r\n\t     * @param nav\r\n\t     */\n\t    fisPubSubService.subscribe('shell.navReady', function (nav) {\n\t      if (angular.isDefined(nav)) {\n\t        navigation = nav;\n\t        deferred.resolve(navigation);\n\t      }\n\t    });\n\t\n\t    /**\r\n\t     * Setter for the Navigation - used to set navigaiton from the View Service.\r\n\t     * @param nav\r\n\t     */\n\t    service.setNavigation = function (nav) {\n\t      navigation = nav;\n\t      deferred.resolve(navigation);\n\t    };\n\t\n\t    /**\r\n\t     * Accessor for the navigation\r\n\t     * @returns {*}\r\n\t     */\n\t    service.getNavigation = function () {\n\t      return deferred.promise;\n\t    };\n\t\n\t    return service;\n\t  }];\n\t};\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /* jshint maxparams:12 */\n\t/**\r\n\t * @class\r\n\t * @name fisViewPanelService\r\n\t * @requires $locatio* @requires $timeout\r\n\t * @requires fisViewService\r\n\t * @description\r\n\t <p>Provides ViewPanel management functionality to the application.<p>\r\n\t <p>This service subscribes to <em>shell.navReady</em> event to get a list of\r\n\t top-level Navigation Items with partials configured and opens up non-closeable ViewPanels for these\r\n\t as the landing view for a user.</p>\r\n\t <p>The provider for this service, <em>fisViewPanelServiceProvider</em>, can be configured with View opening\r\n\t strategy during the module configuration phase. This can be a function or string. Possible value for string argument\r\n\t is <em>mdi</em> at the moment, while <em>sdi</em> and <em>hybrid</em> options would be made available in future.</p>\r\n\t */\n\t\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  var DEFAULT_OPEN_STRAT = 'mdi';\n\t  var CUSTOM_OPEN_STRAT = 'custom function';\n\t\n\t  var provider = this;\n\t  var openStratStr = null;\n\t  var customStrategyFn = null;\n\t  var preventBrowserNavigation = true;\n\t\n\t  /**\r\n\t   * @name setViewOpeningStrategy\r\n\t   * @methodOf fisViewPanelServiceProvider\r\n\t   * @param {String | Function} Function reference of custom view opening strategy or string from enum (only 'mdi' and 'browser' at this point in time)\r\n\t   * @description\r\n\t   * <p>Configures the provider with a View Panel Opening strategy that is then used by the <em>fisViewPanelService</em> to open\r\n\t   * View Panels.</p>\r\n\t   */\n\t  this.setViewOpeningStrategy = function (fn) {\n\t    if (angular.isFunction(fn)) {\n\t      openStratStr = CUSTOM_OPEN_STRAT;\n\t      customStrategyFn = fn;\n\t    } else if (angular.isString(fn)) {\n\t      openStratStr = fn;\n\t    } else {\n\t      openStratStr = DEFAULT_OPEN_STRAT;\n\t    }\n\t  };\n\t\n\t  /**\r\n\t   * @name getViewOpeningStrategy\r\n\t   * @methodOf fisViewPanelServiceProvider\r\n\t   * @description\r\n\t   * <p>Get the view opening strategy string reference or custom function if one was set.</p>\r\n\t   */\n\t  this.getViewOpeningStrategy = function () {\n\t    if (openStratStr === null) {\n\t      return DEFAULT_OPEN_STRAT;\n\t    } else if (openStratStr === CUSTOM_OPEN_STRAT) {\n\t      return customStrategyFn;\n\t    }\n\t    return openStratStr;\n\t  };\n\t\n\t  /**\r\n\t   * @name setPreventBrowserNavigation\r\n\t   * @methodOf fisViewPanelServiceProvider\r\n\t   * @param {Boolean} True for preventing browser reloading while navigating\r\n\t   * @description\r\n\t   * <p>Set a flag to prevent browser default navigation while using <em>fisViewPanelService</em>.</p>\r\n\t   */\n\t  this.setPreventBrowserNavigation = function (val) {\n\t    preventBrowserNavigation = Boolean(val);\n\t  };\n\t\n\t  /**\r\n\t   * @name getPreventBrowserNavigation\r\n\t   * @methodOf fisViewPanelServiceProvider\r\n\t   * @description\r\n\t   * <p>Get if the view panel should prevent the default browser navigation.</p>\r\n\t   */\n\t  this.getPreventBrowserNavigation = function () {\n\t    return preventBrowserNavigation;\n\t  };\n\t\n\t  /**\r\n\t   * @name ViewPanel\r\n\t   * @methodOf fisViewPanelService\r\n\t   * @param {viewDef} navigation Item\r\n\t   * @description extends and decorates the nav item with a label and ability to change this via method call.\r\n\t   */\n\t  var ViewPanel = function ViewPanel(viewDef, $filter) {\n\t    angular.extend(this, viewDef);\n\t\n\t    this.$filter = $filter;\n\t    this.navItem = angular.copy(viewDef);\n\t    this.title = viewDef.label;\n\t  };\n\t\n\t  ViewPanel.prototype.setTitle = function (stringOrObject) {\n\t    if ((typeof stringOrObject === 'undefined' ? 'undefined' : _typeof(stringOrObject)) !== 'object') {\n\t      // eslint-disable-line\n\t      this.navItem.customTitle = stringOrObject;\n\t    } else {\n\t      var tl = '';\n\t      var sep = '|';\n\t\n\t      if (stringOrObject.sep) {\n\t        sep = stringOrObject.sep;\n\t      }\n\t\n\t      if (stringOrObject.prefix) {\n\t        tl = stringOrObject.prefix;\n\t        tl += sep;\n\t      }\n\t\n\t      tl += this.$filter('interpolate')(this.navItem.label, stringOrObject);\n\t\n\t      if (stringOrObject.suffix) {\n\t        tl += sep;\n\t        tl += stringOrObject.suffix;\n\t      }\n\t\n\t      this.navItem.customTitle = tl;\n\t    }\n\t  };\n\t\n\t  ViewPanel.prototype.setIcon = function (cssClass) {\n\t    this.navItem.customIcon = cssClass;\n\t  };\n\t\n\t  ViewPanel.prototype.resetIcon = function () {\n\t    this.navItem.customIcon = undefined;\n\t  };\n\t\n\t  // Returns the title the view want's to be shown in the tab.\n\t  // (fisTabsBar may display parentTitle due to config if no customTitle supplied)\n\t  ViewPanel.prototype.getTitle = function () {\n\t    if (this.navItem && this.navItem.customTitle) {\n\t      return this.navItem.customTitle;\n\t    }\n\t\n\t    return this.title;\n\t  };\n\t\n\t  // Returns the icon the view want's to be shown in the tab.\n\t  // (fisTabsBar may display parentIcon due to config if no customIcon supplied)\n\t  ViewPanel.prototype.getIcon = function () {\n\t    if (this.navItem && this.navItem.customIcon) {\n\t      return this.navItem.customIcon;\n\t    }\n\t\n\t    return this.icon;\n\t  };\n\t\n\t  // we merge properties from the routeParams with the already manually set params.\n\t  // jQuery.extend(this.params, $routeParams);\n\t  ViewPanel.prototype.resetTitle = function () {\n\t    this.navItem.customTitle = undefined;\n\t  };\n\t\n\t  this.ViewPanel = ViewPanel;\n\t\n\t  /**\r\n\t   * @name $get\r\n\t   * @methodOf fisViewPanelServiceProvider\r\n\t   * @description\r\n\t   * <p>Factory method to create instance of fisViewPanelService.</p>\r\n\t   */\n\t  this.$get = ['$location', '$timeout', 'fisViewService', 'fisConfig', '$filter', '$route', 'fisPubSubService', 'fisI18nService', '$routeParams', '$rootScope', '$q', '$controller', function ($location, $timeout, fisViewService, fisConfig, $filter, $route, fisPubSubService, fisI18nService, $routeParams, $rootScope, $q, $controller) {\n\t    var service = {};\n\t    var selectedPanelPath;\n\t    var selectedPanelUnresolvedPath;\n\t    var selectedPanelParams;\n\t    var tabs = [];\n\t    var navigationUnderWay = false;\n\t    var changeLocationNavigationUnderway = false;\n\t    var strategies = {};\n\t    var keepSameTabsOpenOnReload;\n\t    var keepTabsOpenVariableLoaded;\n\t    var tabsAfterNavReadySet;\n\t    var preventBrowserNavigationSet;\n\t    var refreshInterval;\n\t\n\t    function init() {\n\t      startAvailableStrategies();\n\t\n\t      loadKeepTabsOpenVariable(); // sets keepSameTabsOpenOnReload variable\n\t\n\t      setupTabsAfterNavReady();\n\t\n\t      setupPreventBrowserNavigation();\n\t\n\t      setupLocaleChangeHandle();\n\t\n\t      refreshInterval = setInterval(publishNavComplete, 100);\n\t    }\n\t\n\t    function publishNavComplete() {\n\t      if (keepTabsOpenVariableLoaded && tabsAfterNavReadySet && preventBrowserNavigationSet) {\n\t        // publish event navigation done...\n\t        clearInterval(refreshInterval);\n\t        fisPubSubService.publish('shell.viewPanelReady');\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Setup the initially available opening strategies\r\n\t     * by placing them in the private strategies object\r\n\t     */\n\t    function startAvailableStrategies() {\n\t      strategies = {\n\t        mdi: mdiFunction,\n\t        browser: browserFunction\n\t      };\n\t    }\n\t\n\t    function isDuplicatePath(path, items) {\n\t      return items.some(function (item) {\n\t        return path === item.path;\n\t      });\n\t    }\n\t\n\t    function loadKeepTabsOpenVariable() {\n\t      if (angular.isUndefined(keepSameTabsOpenOnReload)) {\n\t        if (fisConfig.widgets && fisConfig.widgets.fisTabsBar && angular.isDefined(fisConfig.widgets.fisTabsBar.keepSameTabsOpenOnReload)) {\n\t          keepSameTabsOpenOnReload = fisConfig.widgets.fisTabsBar.keepSameTabsOpenOnReload;\n\t        } else {\n\t          keepSameTabsOpenOnReload = false;\n\t        }\n\t        keepTabsOpenVariableLoaded = true;\n\t        return keepSameTabsOpenOnReload;\n\t      }\n\t\n\t      keepTabsOpenVariableLoaded = true;\n\t      return keepSameTabsOpenOnReload;\n\t    }\n\t\n\t    function setupTabsAfterNavReady() {\n\t      fisPubSubService.subscribe('shell.navReady', function (nav) {\n\t        if (keepSameTabsOpenOnReload) {\n\t          // Clearing all tabs not in new nav structure\n\t          if (tabs.length > 0) {\n\t            for (var i = tabs.length; i-- > 0;) {\n\t              var tabItem = tabs[i];\n\t              var item = fisViewService.findNavItem(tabItem.path);\n\t\n\t              // remove tab not in new nav structure but do not remove untitled tab (':vmcount')\n\t              if (!item && tabItem.id !== ':vmCount') {\n\t                tabs.splice(i, 1);\n\t              }\n\t            }\n\t          }\n\t        } else {\n\t          tabs = [];\n\t        }\n\t\n\t        // Get static tabs from nav structure\n\t        var newTabs = getNewTabs(nav.main);\n\t\n\t        // Checks to see which static pages need to be added or which static pages already in tabs\n\t        newTabs.forEach(function (newTab, index) {\n\t          // Checks to see if newTab exists in current or new nav structure\n\t          var item = fisViewService.findNavItem(newTab.path);\n\t\n\t          // it exists in nav structure\n\t          if (item) {\n\t            // Checking if newTab already in tabs\n\t            if (!isDuplicatePath(item.path, tabs)) {\n\t              // Adds static page to tabs\n\t              var newStaticPage = new provider.ViewPanel(item, $filter);\n\t              tabs.splice(index, 0, newStaticPage);\n\t            }\n\t          }\n\t        });\n\t\n\t        resetSelectedPanelPath();\n\t        tabsAfterNavReadySet = true;\n\t      }, true);\n\t    }\n\t\n\t    function getNewTabs(items) {\n\t      var tabs = [];\n\t      var count = 0;\n\t\n\t      items.forEach(function (item) {\n\t        item.location = 'main';\n\t        if (isValidTab(item)) {\n\t          tabs[count++] = new provider.ViewPanel(item, $filter);\n\t        }\n\t      });\n\t\n\t      return tabs;\n\t    }\n\t\n\t    function isValidTab(item) {\n\t      return hasNonCloseableFlag(item) || hasDropdownSecondaryMenu(item);\n\t    }\n\t\n\t    function hasNonCloseableFlag(item) {\n\t      return angular.isDefined(item.closeable) && !item.closeable;\n\t    }\n\t\n\t    function hasDropdownSecondaryMenu(item) {\n\t      return item.secondaryNav === 'dropdown';\n\t    }\n\t\n\t    function resetSelectedPanelPath() {\n\t      // This is important when reloading navigation at runtime.\n\t      selectedPanelPath = undefined;\n\t      selectedPanelUnresolvedPath = undefined;\n\t      selectedPanelParams = undefined;\n\t    }\n\t\n\t    function setupPreventBrowserNavigation() {\n\t      if (provider.getPreventBrowserNavigation()) {\n\t        $rootScope.$on('$locationChangeStart', onLocationChangeStart);\n\t      } else {\n\t        $rootScope.$on('$locationChangeStart', onLocationChangeStartNavigate);\n\t      }\n\t    }\n\t\n\t    var shellReady = false;\n\t\n\t    function onLocationChangeStartNavigate() {\n\t      fisPubSubService.subscribe('shell.navReady', function () {\n\t        shellReady = true;\n\t      });\n\t\n\t      if (!navigationUnderWay && shellReady) {\n\t        changeLocationNavigationUnderway = true;\n\t        service.open($location.path());\n\t      }\n\t\n\t      navigationUnderWay = false;\n\t\n\t      preventBrowserNavigationSet = true;\n\t    }\n\t\n\t    function onLocationChangeStart(event, newPath, oldPath) {\n\t      if (!navigationUnderWay) {\n\t        // eslint-disable-line\n\t        var newUrl = getUrlWithoutHash(newPath);\n\t        var oldUrl = getUrlWithoutHash(oldPath);\n\t\n\t        if (newUrl !== oldUrl) {\n\t          // Old and new path are not the same, which means that someone is trying to navigate away from the current page.\n\t          // prevent the location change (this will revert the url in the address bar to what it was\n\t          event.preventDefault();\n\t        }\n\t      } else {\n\t        navigationUnderWay = false;\n\t      }\n\t\n\t      preventBrowserNavigationSet = true;\n\t    }\n\t\n\t    function setupLocaleChangeHandle() {\n\t      fisPubSubService.subscribe('fisLocaleChanged', function () {\n\t        // Reload the navigation if the locale setting changed\n\t        var activePanel = service.activeViewPanel();\n\t        fisViewService.load().then(function () {\n\t          $timeout(function () {\n\t            if (activePanel) {\n\t              // get the path the to take care of unicode path\n\t              var item = fisViewService.getItemFromPath2Item(activePanel.path);\n\t              if (item) {\n\t                service.open(item.path, null, activePanel.params); // Open active one last.\n\t              } else {\n\t                // untitled tab\n\t                service.open(activePanel.path, null, activePanel.params); // Open active one last.\n\t              }\n\t            }\n\t          }, 0);\n\t        });\n\t      });\n\t    }\n\t\n\t    function checkAndSetForSecondaryNavItem(navItem, event, params) {\n\t      var navParent = getSecondaryNavThroughPaths(navItem);\n\t\n\t      if (navParent) {\n\t        // set the parent title for display\n\t        var paramsToUse = params ? params : navParent.params;\n\t\n\t        // check if tab is already present - if it is, do not update parentTitle, as it can mess up with tab title\n\t        var tabAlreadyPresent = false;\n\t\n\t        tabs.forEach(function (tab) {\n\t          if (tab.path === navItem.path) {\n\t            tabAlreadyPresent = true;\n\t          }\n\t        });\n\t\n\t        // change parent title only if tab is not already present and there are parameters\n\t        if (!tabAlreadyPresent && paramsToUse) {\n\t          navItem.parentTitle = $filter('interpolate')(navParent.label, paramsToUse);\n\t        } else if (!tabAlreadyPresent && !paramsToUse && navParent.label && navParent.label.indexOf('{') < 0 && navParent.label.indexOf('}') < 0) {\n\t          navItem.parentTitle = navParent.label;\n\t        }\n\t\n\t        navItem.parentIcon = navParent.icon ? navParent.icon : null;\n\t        var newNavItem = openSecNavItem(navItem, event, params);\n\t        if (newNavItem) {\n\t          navItem = newNavItem;\n\t        }\n\t      }\n\t    }\n\t\n\t    function getSecondaryNavThroughPaths(navItem) {\n\t      var navParent = null;\n\t\n\t      if (navItem !== undefined && navItem !== null) {\n\t        if (navItem.unresolvedPath) {\n\t          navParent = getSecondaryNavParent(navItem.unresolvedPath);\n\t        }\n\t\n\t        if (navParent === null) {\n\t          navParent = getSecondaryNavParent(navItem.path);\n\t        }\n\t      }\n\t      return navParent;\n\t    }\n\t\n\t    function publishViewPanelChange(navItem, previousViewPanel, event) {\n\t      if (navItem && navItem.params) {\n\t        navItem.decodedParams = addDecodedParams(navItem.params);\n\t      }\n\t\n\t      fisPubSubService.publish('fisActiveViewPanelChanged', {\n\t        before: previousViewPanel,\n\t        after: selectedPanelPath,\n\t        currentNavItem: navItem,\n\t        event: event\n\t      });\n\t    }\n\t\n\t    function addDecodedParams(params) {\n\t      var decodedParams = {};\n\t      if (params) {\n\t        for (var key in params) {\n\t          if (params.hasOwnProperty(key)) {\n\t            var paramValue = params[key];\n\t            // decode only if url contains : or / characters\n\t            if (paramValue && typeof paramValue === 'string' && (paramValue.indexOf('%2F') > -1 || paramValue.indexOf('%3A') > -1)) {\n\t              decodedParams[key] = decodeURIComponent(paramValue);\n\t            }\n\t          }\n\t        }\n\t      }\n\t      return decodedParams;\n\t    }\n\t\n\t    /**\r\n\t     * Call the appropriate opening strategy which decides whether to open\r\n\t     * a new tab or reuse the current one\r\n\t     * @param navItem object containing information about the view to be opened\r\n\t     * @param localEvent\r\n\t     */\n\t    function callRelevantStrategy(navItem, localEvent, parameters) {\n\t      // Check for boolean values as localEvent to override strategy\n\t      if (typeof localEvent === 'boolean') {\n\t        if (localEvent) {\n\t          openInNewTab(navItem, null, parameters);\n\t        } else {\n\t          openInSameTab(navItem, null, parameters);\n\t        }\n\t      } else {\n\t        // No overriding, continue as usual\n\t        var openingStrategy = provider.getViewOpeningStrategy();\n\t\n\t        if (angular.isFunction(customStrategyFn) && openStratStr === CUSTOM_OPEN_STRAT) {\n\t          // We've got a custom strategy and should use it\n\t          customStrategyFn.call(service, navItem, localEvent, parameters);\n\t        } else {\n\t          // Use one of the framework pre-implemented strategies\n\t          var stratFn = strategies[openingStrategy];\n\t\n\t          if (angular.isFunction(stratFn)) {\n\t            stratFn.call(service, navItem, localEvent, parameters);\n\t          } else {\n\t            // Framework default/Fallback if we do not have a strategy function\n\t            // matching this name or one at all\n\t            strategies[DEFAULT_OPEN_STRAT].call(service, navItem, localEvent, parameters);\n\t            console.warn('Unable to find opening strategy ' + openingStrategy + ', will use default ' + DEFAULT_OPEN_STRAT);\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    function validateNavItem(navItem, navPath) {\n\t      setPathNotFoundError(navItem, navPath);\n\t\n\t      setPartialNotFoundError(navItem);\n\t    }\n\t\n\t    function setPathNotFoundError(navItem, navPath) {\n\t      // if (hasNoItemButTabs(navItem)) {\n\t      // we need to display path-not-found error even if there are no tabs open\n\t      if (!navItem && navPath !== '' && navPath !== '/') {\n\t        throwNoItemDefinedError(fisI18nService.translate('error-path-not-found', ''));\n\t      }\n\t    }\n\t\n\t    function hasNoItemButTabs(navItem) {\n\t      return !navItem && tabs.length > 0;\n\t    }\n\t\n\t    function throwNoItemDefinedError(userMessage) {\n\t      // TODO: replace with a fisMessageCenterService\n\t      var err = new Error('No nav item defined for this path');\n\t      err.userMessage = userMessage;\n\t      throw err;\n\t    }\n\t\n\t    function setPartialNotFoundError(navItem) {\n\t      if (hasTabsButNoPartial(navItem)) {\n\t        throwNoPartialFoundError(navItem, fisI18nService.translate('error-partial-not-found', ''));\n\t      }\n\t    }\n\t\n\t    function hasTabsButNoPartial(navItem) {\n\t      return navItem && // item exists\n\t      !navItem.partial && // but no partial\n\t      !navItem.secondaryNav && // neither secondary nav\n\t      !navItem.action && // or action\n\t      tabs.length > 0; // and the service has tabs\n\t    }\n\t\n\t    function throwNoPartialFoundError(navItem, userMessage) {\n\t      // TODO: replace with a fisMessageCenterService\n\t      var err = new Error('Nav item \"' + navItem.label + '\" does not have a partial to load');\n\t      err.userMessage = userMessage;\n\t      throw err;\n\t    }\n\t\n\t    function substituteParams(path, localParams) {\n\t      while (path.indexOf(':') > -1) {\n\t        path = getReplacedPath(path, localParams);\n\t      }\n\t\n\t      return path;\n\t    }\n\t\n\t    function removeExtraParamsFromLocalParams(path, localParams) {\n\t      var localParamsToKeep = {};\n\t      while (path.indexOf(':') > -1) {\n\t        var paramStr = path.substring(path.indexOf(':') + 1);\n\t        var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\n\t        localParamsToKeep[param] = localParams[param];\n\t        path = path.substring(path.indexOf(':' + paramStr) + 1);\n\t      }\n\t      return localParamsToKeep;\n\t    }\n\t\n\t    function hasSpecialCharacter(paramVal) {\n\t      return !/^[a-zA-Z0-9-% ]*$/.test(paramVal);\n\t    }\n\t\n\t    function getReplacedPath(path, localParams) {\n\t      var paramStr = path.substring(path.indexOf(':') + 1);\n\t      var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\n\t      var remainingStr = paramStr.substring(param.length);\n\t\n\t      var paramValue;\n\t      var paramValueOrig = localParams[param];\n\t      if (paramValueOrig && (paramValueOrig.toString().indexOf('/') > -1 || paramValueOrig.toString().indexOf(':') > -1)) {\n\t        paramValue = encodeURIComponent(paramValueOrig);\n\t      } else if (hasSpecialCharacter(paramValueOrig)) {\n\t        paramValue = encodeURIComponent(paramValueOrig);\n\t        paramValue = decodeURIComponent(paramValue);\n\t      } else {\n\t        paramValue = decodeURIComponent(paramValueOrig);\n\t      }\n\t\n\t      if (localParams[param] !== paramValue) {\n\t        // This Is a reload\n\t        localParams[param] = paramValue; // Set Local param to decoded value so it can found\n\t      }\n\t      return path.substring(0, path.indexOf(':')) + paramValue + remainingStr;\n\t    }\n\t\n\t    // Updating tabs[] array with the data received from the translation object\n\t    // This is required to update the tab title correctly in case translation data is loading asynchronously\n\t    function updateTabsArray(path, navItem) {\n\t      if (tabs) {\n\t        for (var count = 0; count < tabs.length; count++) {\n\t          if (tabs[count].path === path) {\n\t            if (navItem && navItem.label) {\n\t              tabs[count].label = navItem.label;\n\t              tabs[count].title = navItem.label;\n\t            }\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    function getSecondaryNavParent(navPath) {\n\t      var tempPath = navPath;\n\t      var navItemParent = null;\n\t      var itemWithSecNav = null;\n\t\n\t      while (!itemWithSecNav) {\n\t        if (tempPath) {\n\t          navItemParent = fisViewService.findNavItem(tempPath);\n\t          updateTabsArray(tempPath, navItemParent);\n\t          itemWithSecNav = getItemParentRefIfValid(navItemParent);\n\t          tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t\n\t      // clear params from the item, since it may contain stale value\n\t      if (itemWithSecNav) {\n\t        itemWithSecNav.params = null;\n\t      }\n\t      return itemWithSecNav;\n\t    }\n\t\n\t    // Expose getSecondaryNavParent functionality required by breadcrumbs container to check for a tab\n\t    // whether its a secondary navigation tab or not\n\t    service._getSecondaryNavParent = getSecondaryNavParent;\n\t\n\t    function getItemParentRefIfValid(navItemParent) {\n\t      var value = null;\n\t      if (navItemParent && (navItemParent.secondaryNav === 'menubar' || navItemParent.secondaryNav === 'dropdown')) {\n\t        value = navItemParent;\n\t      }\n\t      return value;\n\t    }\n\t\n\t    function openSecNavItem(item, event, params) {\n\t      var navItem = getNavItemFromViewPanel(item);\n\t      var parameters = getParamsOrNavItemParams(params, navItem);\n\t      var substitutedNavItem = getSubstitutedUrlIfContainsParams(parameters, navItem);\n\t\n\t      openTestingByGroupOpened(substitutedNavItem, event, parameters);\n\t\n\t      if (isValidSecondaryMenuItem(navItem)) {\n\t        var itemWithSecNav = getSecondaryNavThroughPaths(navItem);\n\t        var children = getChildrenFromNavItem(navItem, itemWithSecNav);\n\t        var newNavItem = null;\n\t\n\t        updateAllChildren(itemWithSecNav);\n\t\n\t        setParamsAcessedBySecondaryMenu(itemWithSecNav, substitutedNavItem);\n\t\n\t        newNavItem = getNewNavItem(navItem, itemWithSecNav, children);\n\t\n\t        fisPubSubService.publish('fisSecondaryMenuClicked', itemWithSecNav);\n\t\n\t        return newNavItem;\n\t      }\n\t    }\n\t\n\t    function getNavItemFromViewPanel(item) {\n\t      var navItem = item;\n\t\n\t      if (navItem instanceof provider.ViewPanel) {\n\t        navItem = navItem.navItem;\n\t        if (navItem.params && navItem.unresolvedPath) {\n\t          navItem.path = navItem.unresolvedPath;\n\t        }\n\t      }\n\t\n\t      return navItem;\n\t    }\n\t\n\t    function getParamsOrNavItemParams(params, navItem) {\n\t      var parameters = params;\n\t\n\t      if (!parameters && navItem.params !== null) {\n\t        parameters = navItem.params;\n\t      }\n\t\n\t      return parameters;\n\t    }\n\t\n\t    function getSubstitutedUrlIfContainsParams(parameters, navItem) {\n\t      var substitutedNavItem = angular.copy(navItem);\n\t\n\t      if (parameters && navItem) {\n\t        // set the original parameterized path\n\t        if (!substitutedNavItem.unresolvedPath) {\n\t          substitutedNavItem.unresolvedPath = navItem.path;\n\t        }\n\t        substitutedNavItem.path = substituteParams(navItem.path, parameters);\n\t        substitutedNavItem.label = $filter('interpolate')(navItem.label, parameters);\n\t        substitutedNavItem.params = parameters;\n\t      }\n\t\n\t      return substitutedNavItem;\n\t    }\n\t\n\t    function openTestingByGroupOpened(substitutedNavItem, event, parameters) {\n\t      if ((isTrue(event) || angular.isUndefined(event) || angular.isObject(event)) && !isSecNavItemGroupOpen(substitutedNavItem) && !isPartOfSecondaryNav(getSecondaryNavParent(substitutedNavItem.path), service.activeViewPanel())) {\n\t        openInNewTab(substitutedNavItem, event);\n\t      } else {\n\t        openInSameTab(substitutedNavItem, event, parameters);\n\t      }\n\t    }\n\t\n\t    function isPartOfSecondaryNav(navItem, currentNavItem) {\n\t      var containsNavItem = false;\n\t      if (navItem !== null && currentNavItem !== null) {\n\t        if (navItem.id === currentNavItem.id) {\n\t          return true;\n\t        } else if (angular.isDefined(navItem.children) && angular.isArray(navItem.children)) {\n\t          navItem.children.forEach(function (childNavItem) {\n\t            if (containsNavItem !== true) {\n\t              containsNavItem = isPartOfSecondaryNav(childNavItem, currentNavItem);\n\t            }\n\t          });\n\t        } else {\n\t          return false;\n\t        }\n\t      }\n\t      return containsNavItem;\n\t    }\n\t\n\t    function isValidSecondaryMenuItem(navItem) {\n\t      return navItem && (navItem.secondaryNav || getSecondaryNavParent(navItem.path) || getSecondaryNavParent(navItem.unresolvedPath));\n\t    }\n\t\n\t    function getChildrenFromNavItem(navItem, itemWithSecNav) {\n\t      var children = null;\n\t\n\t      if (navItem.secondaryNav) {\n\t        children = navItem.children;\n\t      } else if (itemWithSecNav) {\n\t        children = itemWithSecNav.children;\n\t      }\n\t\n\t      return children;\n\t    }\n\t\n\t    function setParamsAcessedBySecondaryMenu(itemWithSecNav, substitutedNavItem) {\n\t      if (itemWithSecNav) {\n\t        itemWithSecNav.params = substitutedNavItem.params;\n\t      }\n\t    }\n\t\n\t    function getNewNavItem(navItem, itemWithSecNav, children) {\n\t      var newNavItem = angular.extend({}, navItem);\n\t      newNavItem.children = children;\n\t      newNavItem.secondaryNav = itemWithSecNav.secondaryNav;\n\t\n\t      return newNavItem;\n\t    }\n\t\n\t    function updateAllChildren(navItem) {\n\t      if (navItem && navItem.children) {\n\t        navItem.children.forEach(function (child) {\n\t          updateChildData(child);\n\t\n\t          updateAllChildren(child);\n\t        });\n\t      }\n\t    }\n\t\n\t    function updateChildData(child) {\n\t      if (child.partial) {\n\t        child.isStatic = true;\n\t      }\n\t\n\t      child.text = child.label;\n\t      child.items = child.children;\n\t\n\t      if (child.partial) {\n\t        child.url = child.path;\n\t      }\n\t    }\n\t\n\t    function isSecNavItemGroupOpen(navItem) {\n\t      var itemWithSecNav = getSecondaryNavThroughPaths(navItem);\n\t      var secNavItemGroupPresent = false;\n\t\n\t      if (itemWithSecNav !== null) {\n\t        // attach a property secondaryNavParent to the navItem in case the parent secondary navigation item has secondaryNav as dropdown\n\t        if (hasDropdownSecondaryMenu(itemWithSecNav)) {\n\t          navItem.secondaryNavParent = itemWithSecNav;\n\t        }\n\t\n\t        for (var i = 0; i < tabs.length; i++) {\n\t          if (isTabPathValid(tabs[i], navItem, itemWithSecNav)) {\n\t            secNavItemGroupPresent = true;\n\t            selectedPanelPath = tabs[i].path;\n\t            selectedPanelUnresolvedPath = tabs[i].unresolvedPath;\n\t            selectedPanelParams = tabs[i].params;\n\t\n\t            return secNavItemGroupPresent;\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    function isTabPathValid(tab, navItem, itemWithSecNav) {\n\t      if (navItem.unresolvedPath) {\n\t        return tabPathHasNavItemParams(tab, navItem, itemWithSecNav);\n\t      }\n\t      return tab.path.indexOf(itemWithSecNav.path) > -1;\n\t    }\n\t\n\t    function tabPathHasNavItemParams(tab, navItem /* , itemWithSecNav*/) {\n\t      var continueLooping = true;\n\t      var unresolvedPath = navItem.unresolvedPath;\n\t      var navPathUptoResolvedParam;\n\t      var paramValue;\n\t\n\t      while (continueLooping) {\n\t        var paramStr = unresolvedPath.substring(unresolvedPath.indexOf(':') + 1);\n\t        var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\n\t        var remainingStr = paramStr.substring(param.length);\n\t        paramValue = navItem.params[param];\n\t        navPathUptoResolvedParam = unresolvedPath.substring(0, unresolvedPath.indexOf(':')) + paramValue;\n\t        if (remainingStr.indexOf(':') > -1) {\n\t          unresolvedPath = unresolvedPath.substring(0, unresolvedPath.indexOf(':')) + paramValue + remainingStr;\n\t        } else {\n\t          continueLooping = false;\n\t        }\n\t      }\n\t\n\t      // check for the token length of navPathUptoResolvedParam and tab.path\n\t      // if the length of tokens of navPathUptoResolvedParam is greater than tab.path length and navPathUptoResolvedParam begins with tab.path,\n\t      // it means the current nav item to open is a child of the existing tab),\n\t      // If the length of tokens is same, it means the current nav item to open is not a child of the existing tab\n\t      // This check is needed for cases where the name of the new tab to open contains the name of the already open tab, for example Bank_of_Pune and Bank_of_Pune1\n\t      var navPathUptoResolvedParamTokens = getTokensFromNavPath(navPathUptoResolvedParam);\n\t      var tabPathTokens = getTokensFromNavPath(tab.path);\n\t      var navPathContainsTabPath = false;\n\t      if (navPathUptoResolvedParamTokens.length > tabPathTokens.length && navPathUptoResolvedParam.indexOf(tab.path) > -1) {\n\t        navPathContainsTabPath = true;\n\t      }\n\t\n\t      return tab.path.indexOf(navPathUptoResolvedParam) > -1 && paramValue === tab.label || navPathContainsTabPath;\n\t    }\n\t\n\t    function openInNewTab(navItem, event, parameters) {\n\t      if (isFalse(event)) {\n\t        openInSameTab(navItem, event, parameters);\n\t      }\n\t\n\t      if (navItem) {\n\t        if (!isAlreadyInTabs(navItem)) {\n\t          addNewTab(navItem);\n\t        }\n\t\n\t        setPathAndNavigateTo(navItem);\n\t      }\n\t    }\n\t    // Expose opening in a new tab functionality so custom opening strategies may use it\n\t    /**\r\n\t     * @name _openInNewTab\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @param {Object} Navigation Item to be opened\r\n\t     * @param\r\n\t     * @description\r\n\t     * <p>Configures the provider with a View Panel Opening strategy that is then used by the <em>fisViewPanelService</em> to open\r\n\t     * View Panels.</p>\r\n\t     */\n\t    service._openInNewTab = openInNewTab;\n\t\n\t    function isAlreadyInTabs(navItem) {\n\t      return tabs.some(function (tab) {\n\t        return tab.path === navItem.path;\n\t      });\n\t    }\n\t\n\t    function addNewTab(navItem) {\n\t      tabs.push(new provider.ViewPanel(navItem, $filter));\n\t      publishViewPanelOpened(navItem, getLastTab());\n\t    }\n\t\n\t    function publishViewPanelOpened(navItem, tab) {\n\t      fisPubSubService.publish('fisViewPanelOpened', {\n\t        path: navItem.path,\n\t        viewPanel: tab\n\t      });\n\t    }\n\t\n\t    function getFirstTab() {\n\t      return tabs[0];\n\t    }\n\t\n\t    function getLastTab() {\n\t      return tabs[tabs.length - 1];\n\t    }\n\t\n\t    function openInSameTab(navItem, event, parameters) {\n\t      if (!isSecNavItemGroupOpen(navItem) && hasItemButNoTabsOrEvent(navItem, event)) {\n\t        openInNewTab(navItem, event, parameters);\n\t      } else if (hasItemAndTabs(navItem)) {\n\t        if (!shouldOpenInSameTab(navItem)) {\n\t          setPathAndNavigateTo(navItem, parameters);\n\t        }\n\t      }\n\t    }\n\t    // Expose opening in same tab functionality so custom opening strategies may use it\n\t    service._openInSameTab = openInSameTab;\n\t\n\t    function hasItemButNoTabsOrEvent(navItem, event) {\n\t      return hasItemButNoTabs(navItem) || isTrue(event);\n\t    }\n\t\n\t    function hasItemButNoTabs(navItem) {\n\t      return navItem && tabs.length === 0;\n\t    }\n\t\n\t    function hasItemAndTabs(navItem) {\n\t      return navItem && tabs.length > 0;\n\t    }\n\t\n\t    function shouldOpenInSameTab(navItem, parameters) {\n\t      var activeViewPanel = service.activeViewPanel();\n\t      var isOpeningAction = false;\n\t\n\t      if (isActiveAndNonCloseable(activeViewPanel, navItem)) {\n\t        openInNewTab(navItem, parameters);\n\t        isOpeningAction = true;\n\t      } else if (shouldReplaceViewPanel(activeViewPanel, navItem, parameters)) {\n\t        isOpeningAction = true;\n\t      }\n\t\n\t      return isOpeningAction;\n\t    }\n\t\n\t    function isActiveAndNonCloseable(activeViewPanel, navItem) {\n\t      return activeViewPanel && service.isNonCloseable(activeViewPanel) && !getSecondaryNavParent(navItem.path);\n\t    }\n\t\n\t    function findCurrentlyOpenedTab(activeViewPanel) {\n\t      if (!activeViewPanel) {\n\t        return null;\n\t      }\n\t\n\t      var activeViewPanelIndex = null;\n\t\n\t      tabs.forEach(function (tab, index) {\n\t        if (activeViewPanel.path === tab.path) {\n\t          activeViewPanelIndex = index;\n\t        }\n\t      });\n\t\n\t      return activeViewPanelIndex;\n\t    }\n\t\n\t    function shouldReplaceViewPanel(activeViewPanel, navItem, parameters) {\n\t      var navItemInTabs = isNavItemInTabs(navItem);\n\t      var activeViewPanelIndex = findCurrentlyOpenedTab(activeViewPanel);\n\t\n\t      if (activeViewPanel && !navItemInTabs) {\n\t        replaceViewPanel(activeViewPanel, navItem, parameters, activeViewPanelIndex);\n\t\n\t        return true;\n\t      }\n\t      return false;\n\t    }\n\t\n\t    function isNavItemInTabs(navItem) {\n\t      return tabs.some(function (tab) {\n\t        return tab.path === navItem.path;\n\t      });\n\t    }\n\t\n\t    function replaceViewPanel(activeViewPanel, navItem, parameters, index) {\n\t      var promise = publishViewPanelReplaceIntent(navItem, activeViewPanel);\n\t      promise.then(function () {\n\t        onViewPanelReplaceIntentSuccess(navItem, parameters, index);\n\t      }, function () {\n\t        // publish an event if view panel replacement has been vetoed.\n\t        fisPubSubService.publish('fisViewPanelReplaceVetoed', {\n\t          navItem: navItem,\n\t          viewPanel: activeViewPanel\n\t        });\n\t      });\n\t    }\n\t\n\t    function publishViewPanelReplaceIntent(navItem, activeViewPanel) {\n\t      return fisPubSubService.publish('fisViewPanelReplaceIntent', {\n\t        path: navItem.path,\n\t        viewPanel: activeViewPanel\n\t      });\n\t    }\n\t\n\t    function onViewPanelReplaceIntentSuccess(navItem, parameters, index) {\n\t      var tab = tabs[index] = new provider.ViewPanel(navItem, $filter);\n\t\n\t      publishViewPanelOpened(navItem.path, tab);\n\t      publishViewReplaced(navItem);\n\t\n\t      setPathAndNavigateTo(navItem);\n\t    }\n\t\n\t    function setPathAndNavigateTo(navItem) {\n\t      selectedPanelPath = navItem.path;\n\t      selectedPanelUnresolvedPath = navItem.unresolvedPath;\n\t      selectedPanelParams = navItem.params;\n\t      navigateTo(navItem);\n\t    }\n\t\n\t    function publishViewReplaced(navItem) {\n\t      fisPubSubService.publish('fisViewPanelReplaced', { path: navItem.path });\n\t    }\n\t\n\t    function getUrlWithoutHash(url) {\n\t      // Use the provided URL as the default value,\n\t      // this will ensure a correct return value even\n\t      // if it doesn't contain a trailing hash (anchor)\n\t      var iPound = url.lastIndexOf('#');\n\t      var iSlash = url.lastIndexOf('/');\n\t      var noHash = url;\n\t\n\t      // Only cut off the hash if the hash sign was\n\t      // found after the last slash in the path.\n\t      if (iPound > iSlash) {\n\t        // Take everything before the hash sign\n\t        noHash = url.substring(0, iPound);\n\t      }\n\t\n\t      return noHash;\n\t    }\n\t\n\t    function navigateTo(navItem) {\n\t      // Give time to angular to complete it's $apply cycle and then update path\n\t      // Reference - https://groups.google.com/d/msg/angular/FJwxJ-XbJaE/584zbwBjbU8J\n\t      $timeout(function () {\n\t        // Route change only occurs when $location.path changes\n\t        // In some cases, we want the route to be refreshed even if the path doesn't change:\n\t        // 1. The user clicks on a bookmark containing #/welcome for example. In this case,\n\t        //    open is called with #/welcome but $location.path() is already #/welcome\n\t        // 2. The navigation structure is changed with fisViewService.load and the current path is\n\t        //    #/welcome and the new path to open is also #/welcome. In this case, the paths may be the\n\t        //    same but they are referring to different views so we need to reload.\n\t        // Note that fisViews will not drop the current view panel and reload the route's template:\n\t        // it will notice the view panel is for the same route and will not do anything\n\t        // since it only means the user is navigating to the same page again, in which case we don't\n\t        // want the view to be reloaded.\n\t        if ($location.path() === navItem.path) {\n\t          $route.reload();\n\t        } else {\n\t          $location.path(navItem.path);\n\t        }\n\t\n\t        if (!changeLocationNavigationUnderway) {\n\t          // eslint-disable-line\n\t          /*\r\n\t              This variable is explicitly set to true because it is checked while updating the view\r\n\t              The '$locationChangeStart' event handler checks for this flag to be set to true, else it will\r\n\t              prevent the location change.\r\n\t              Since this function is called by the open method of framework, we want the $location to change\r\n\t          */\n\t          navigationUnderWay = true;\n\t        } else {\n\t          changeLocationNavigationUnderway = false;\n\t        }\n\t      }, 0);\n\t    }\n\t\n\t    function mdiFunction(navItem, event, parameters) {\n\t      if (isFalse(event)) {\n\t        openInSameTab(navItem, event, parameters);\n\t      } else {\n\t        openInNewTab(navItem, event, parameters);\n\t      }\n\t    }\n\t\n\t    function browserFunction(navItem, event, parameters) {\n\t      if (!event || event && !event.ctrlKey && !event.metaKey) {\n\t        // to open child page in the current tab.\n\t        openInSameTab(navItem, null, parameters);\n\t      } else {\n\t        // to open child page in new tab.\n\t        openInNewTab(navItem, null, parameters);\n\t      }\n\t    }\n\t\n\t    function isTrue(e) {\n\t      return e === true || e === 'true';\n\t    }\n\t\n\t    function isFalse(e) {\n\t      return e === false || e === 'false';\n\t    }\n\t\n\t    function resetLocationHash() {\n\t      // This is done to avoid carrying over the anchor\n\t      // location (hash, e.g. \"#toc_3\") to the new tab.\n\t\n\t      // We might have to revisit this if we want to\n\t      // support opening tabs and jumping to a\n\t      // specific location at the same time.\n\t      $location.hash('');\n\t    }\n\t\n\t    function getDefaultIfNoPath(navPath) {\n\t      if (navPath === undefined) {\n\t        return '';\n\t      }\n\t      return navPath;\n\t    }\n\t\n\t    function normalizeOpenArguments(args, event, params) {\n\t      var localEvent = null;\n\t      var localParams = {};\n\t\n\t      if (args.length === 2) {\n\t        localEvent = getValidatedEvent(args[1]);\n\t\n\t        if (isStrategyOverride(event)) {\n\t          localEvent = event;\n\t        } else {\n\t          // it's a params object, set it to localParams\n\t          localParams = args[1];\n\t        }\n\t      } else if (args.length === 3) {\n\t        localEvent = event;\n\t        localParams = params;\n\t      }\n\t\n\t      return {\n\t        localEvent: localEvent,\n\t        localParams: localParams\n\t      };\n\t    }\n\t\n\t    function getValidatedEvent(value) {\n\t      if (isEvent(value)) {\n\t        return value;\n\t      }\n\t      return null;\n\t    }\n\t\n\t    function isEvent(value) {\n\t      return value && value.target;\n\t    }\n\t\n\t    function isStrategyOverride(value) {\n\t      return value === 'true' || value === 'false' || value === true || value === false;\n\t    }\n\t\n\t    function checkIfTabIsAlreadyPresent(navPath, event, params) {\n\t      var navItem = null;\n\t      var tabFound = false;\n\t\n\t      tabs.forEach(function (tab) {\n\t        if (tab.path === navPath) {\n\t          tabFound = true;\n\t          navItem = tab;\n\t          checkAndSetForSecondaryNavItem(tab, event, params);\n\t        }\n\t      });\n\t\n\t      return {\n\t        navItem: navItem,\n\t        tabFound: tabFound\n\t      };\n\t    }\n\t\n\t    function tryOpenViewBasedOnDefaultParams(navItem, navPath, tabFound, event, params, localParams) {\n\t      if (isNavPathNotDefined(navPath, tabFound)) {\n\t        navItem = openDefaultView(event, params);\n\t      } else if (isRelativePath(navPath, tabFound)) {\n\t        navItem = openRelativeView(navPath, event, params, localParams);\n\t        if (navItem) {\n\t          navPath = navItem.path;\n\t        }\n\t      } else if (isSecondaryNavigation(navPath, tabFound)) {\n\t        navItem = openSecondaryView(navPath, event, params);\n\t      }\n\t\n\t      // When navItem has parameterized url, a copy of the navItem is created and processed. Hence, the\n\t      // isStatic property is not set even if secondary navigation is present.\n\t      // Hence, setting this property after all the processing is done\n\t      if (navItem && getSecondaryNavParent(navItem.path) && navItem.partial) {\n\t        navItem.isStatic = true;\n\t      }\n\t\n\t      return navItem;\n\t    }\n\t\n\t    function openDefaultView(event, params) {\n\t      // TODO: default if no root tab.\n\t      // Provide a way to configure default and open tabs if necessary?\n\t\n\t      var navItem = getFirstTab();\n\t\n\t      if (isNavItemDefined(navItem)) {\n\t        checkAndSetForSecondaryNavItem(navItem, event, params);\n\t        return navItem;\n\t      }\n\t      return null;\n\t    }\n\t\n\t    function isNavPathNotDefined(navPath, tabFound) {\n\t      return !navPath && tabFound === false;\n\t    }\n\t\n\t    function isNavItemDefined(navItem) {\n\t      return navItem && navItem.path;\n\t    }\n\t\n\t    function isRelativePath(navPath, tabFound) {\n\t      return navPath && navPath.indexOf('/') !== 0 && tabFound === false;\n\t    }\n\t\n\t    function openRelativeView(navPath, event, params, localParams) {\n\t      var navItemTemp = fisViewService.findNavItem(navPath, selectedPanelPath);\n\t      var key;\n\t\n\t      // if navItemTemp not found, look it up using selectedPanelUnresolvedPath\n\t      if (!navItemTemp) {\n\t        navItemTemp = fisViewService.findNavItem(navPath, selectedPanelUnresolvedPath);\n\t\n\t        // add the selectedPanelParams to localParams for substitution.\n\t        for (key in selectedPanelParams) {\n\t          if (selectedPanelParams.hasOwnProperty(key)) {\n\t            localParams[key] = selectedPanelParams[key];\n\t          }\n\t        }\n\t      }\n\t\n\t      // Add the selectedPanelParams to localParams for substitution in case navItemTemp is found.\n\t      // In this case add the param only if localParams does not have the key\n\t      if (navItemTemp) {\n\t        for (key in selectedPanelParams) {\n\t          if (selectedPanelParams.hasOwnProperty(key) && !localParams.hasOwnProperty(key)) {\n\t            localParams[key] = selectedPanelParams[key];\n\t          }\n\t        }\n\t      }\n\t\n\t      if (navItemTemp && navItemTemp.params && Object.keys(localParams).length === 0) {\n\t        localParams = navItemTemp.params;\n\t      }\n\t\n\t      // if no local params are defined, try to use params from the active view panel in this case; since the view to be opened is a relative view.\n\t      if (angular.isUndefined(localParams) || localParams === null || Object.keys(localParams).length === 0) {\n\t        if (service.activeViewPanel()) {\n\t          localParams = service.activeViewPanel().params;\n\t        }\n\t      }\n\t\n\t      // when a parent page is called from child page without giving any parameters, child page params are also added in localParams\n\t      // we need to remove such extra params from localParams\n\t      var navItem = null;\n\t      if (navItemTemp) {\n\t        localParams = removeExtraParamsFromLocalParams(navItemTemp.path, localParams);\n\t\n\t        var path = substituteParams(navItemTemp.path, localParams);\n\t\n\t        navItem = getNavItemForRelativePath(navItemTemp, path, localParams);\n\t        navItem.unresolvedPath = navItemTemp.path;\n\t\n\t        checkAndSetForSecondaryNavItem(navItem, event, params);\n\t      }\n\t\n\t      return navItem;\n\t    }\n\t\n\t    function getNavItemForRelativePath(navItem, path, localParams) {\n\t      var newItem = {};\n\t\n\t      angular.copy(navItem, newItem);\n\t\n\t      newItem.path = path;\n\t      newItem.label = $filter('interpolate')(newItem.label, localParams);\n\t      newItem.params = localParams;\n\t\n\t      return newItem;\n\t    }\n\t\n\t    function isSecondaryNavigation(navPath, tabFound) {\n\t      return getSecondaryNavParent(navPath) && tabFound === false;\n\t    }\n\t\n\t    function openSecondaryView(navPath, event, params) {\n\t      var navItem = fisViewService.findNavItem(navPath);\n\t\n\t      // case of handling parameterized navigation item with secondary menu\n\t      if (!navItem) {\n\t        var relativeData = extractRelativeUrlData(navItem, navPath);\n\t        params = relativeData.params;\n\t        navItem = relativeData.navItem;\n\t      }\n\t      checkAndSetForSecondaryNavItem(navItem, event, params);\n\t      if (navItem) {\n\t        navItem.params = params;\n\t      }\n\t      return navItem;\n\t    }\n\t\n\t    function findNavItemIfNotDefined(navItem, navPath) {\n\t      // TODO: should it instead just call navigation.navigate(navPath) and have tabs handled in view service?\n\t\n\t      if (!isNavItemDefined(navItem)) {\n\t        navItem = fisViewService.findNavItem(navPath, selectedPanelPath);\n\t      }\n\t\n\t      return navItem;\n\t    }\n\t\n\t    function extractRelativeUrlData(navItem, navPath) {\n\t      var tempPath = navPath;\n\t      var tokens = getTokensFromNavPath(navPath);\n\t      var parameters = {};\n\t      var tempNavPath = navPath;\n\t      var parsedData = null;\n\t      var hasMoreTokens = true;\n\t\n\t      while (hasMoreTokens) {\n\t        if (!hasPathToParse(tempNavPath)) {\n\t          break;\n\t        }\n\t\n\t        tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\n\t        if (tempPath.length === 0) {\n\t          break;\n\t        }\n\t        var tempNavItem = fisViewService.findNavItem(tempPath);\n\t\n\t        if (tempNavItem) {\n\t          var parsedDataCopy = angular.copy(parsedData);\n\t\n\t          parsedData = findMatchedChildThroughNavPath({\n\t            navItem: navItem,\n\t            tokens: tokens,\n\t            tempPath: tempPath,\n\t            tempNavPath: tempNavPath,\n\t            tempNavItem: tempNavItem,\n\t            hasMoreTokens: true,\n\t            parameters: parameters\n\t          });\n\t\n\t          if (parsedData && parsedDataCopy && parsedData.navItem && parsedDataCopy.navItem && parsedData.navItem.id === parsedDataCopy.navItem.id) {\n\t            hasMoreTokens = false;\n\t            return {\n\t              params: null,\n\t              navItem: null\n\t            };\n\t          }\n\t\n\t          navItem = parsedData.navItem;\n\t          tokens = parsedData.tokens;\n\t          tempPath = parsedData.tempPath;\n\t          tempNavPath = parsedData.tempNavPath;\n\t          tempNavItem = parsedData.tempNavItem;\n\t          parameters = parsedData.parameters;\n\t\n\t          if (!parsedData.hasMoreTokens) {\n\t            break;\n\t          }\n\t        } else if (noMoreItems(tempNavItem, tempPath)) {\n\t          parsedData = findMatchedNoChild(navItem, parameters, tempPath, tempNavPath);\n\t\n\t          navItem = parsedData.navItem;\n\t          parameters = parsedData.parameters;\n\t\n\t          break;\n\t        }\n\t      }\n\t\n\t      var resolvedPath;\n\t      // compute resolvedPath only for cases when navPath contains tempPath -- this is needed in case there is a parameterized url,\n\t      // in which case, this navPath will have unresolved path (with ':' character), and tempPath will have resolved path with substituted parameters.\n\t      if (navItem) {\n\t        var navItemIdTokens = getTokensFromNavPath(navItem.id) || [];\n\t        if (navPath.indexOf(tempPath) > -1 && navItemIdTokens.length > 2) {\n\t          resolvedPath = navPath.substring(tempPath.length + 1);\n\t        }\n\t      }\n\t\n\t      return {\n\t        params: parameters,\n\t        navItem: navItem,\n\t        resolvedPath: resolvedPath\n\t      };\n\t    }\n\t\n\t    // exposing this method since it is used internally by breadcrumb widget to extract relative data\n\t    service._extractRelativeUrlData = extractRelativeUrlData;\n\t\n\t    function noMoreItems(tempNavItem, tempPath) {\n\t      return !tempNavItem && tempPath.lastIndexOf('/') === 0;\n\t    }\n\t\n\t    function hasSomeEquivalentParam(child, childPath) {\n\t      var childPathWithoutParam = child.id;\n\t      var withoutParamWord = childPathWithoutParam.substring(0, childPathWithoutParam.indexOf('/'));\n\t      var originalWord = childPath.substring(0, childPath.indexOf('/'));\n\t      return withoutParamWord === originalWord;\n\t    }\n\t\n\t    function getTokensFromNavPath(navPath) {\n\t      var tokens = [];\n\t\n\t      if (navPath && navPath.indexOf('/') > -1) {\n\t        tokens = navPath.split('/');\n\t      }\n\t\n\t      return tokens;\n\t    }\n\t\n\t    function hasPathToParse(path) {\n\t      return path && path.substring(0, path.lastIndexOf('/'));\n\t    }\n\t\n\t    function getChildTokens(childPath) {\n\t      return childPath.split('/');\n\t    }\n\t\n\t    function getChildDataFromPath(child, childPath, tokensLength, tempPath, tempNavPath, hasMoreTokens) {\n\t      var childData = {};\n\t      var childTokens = getChildTokens(childPath);\n\t      var itemTokens = child.path.split('/');\n\t\n\t      childData.paramName = child.id.substring(child.id.indexOf(':') + 1);\n\t      childData.paramVal = getParameterValue(child, childPath, childTokens);\n\t      childData.navItem = angular.copy(child);\n\t\n\t      if (tokensLength === itemTokens.length) {\n\t        childData.hasMoreTokens = false;\n\t        childData.tempPath = tempPath;\n\t        childData.tempNavPath = tempNavPath;\n\t      } else {\n\t        childData.hasMoreTokens = hasMoreTokens;\n\t        // remove tokens already resolved\n\t        spliceChildTokens(child, childTokens);\n\t        // Add to tempPath the resolved tokens and the unresolved tokens and start again :-)\n\t        childData.tempPath = tempPath + '/' + child.id + '/' + childTokens.join('/');\n\t        childData.tempNavPath = childData.tempPath; // start again - but with one token resolved\n\t      }\n\t\n\t      return childData;\n\t    }\n\t\n\t    function spliceChildTokens(child, childTokens) {\n\t      if (child.id.indexOf(':') === 0) {\n\t        childTokens.splice(0, 1);\n\t      } else {\n\t        childTokens.splice(0, 2);\n\t      }\n\t    }\n\t\n\t    function findMatchedChildThroughNavPath(defaultData) {\n\t      var childPath = defaultData.tempNavPath.substring(defaultData.tempPath.length + 1);\n\t      var cont = true;\n\t\n\t      while (cont) {\n\t        if (!defaultData.tempNavItem.children) {\n\t          break;\n\t        }\n\t\n\t        var parsedDataCopy = angular.copy(parsedData); // eslint-disable-line\n\t\n\t        var parsedData = parseChildDataFrom({\n\t          cont: cont,\n\t          navItem: defaultData.navItem,\n\t          childPath: childPath,\n\t          tokens: defaultData.tokens,\n\t          tempPath: defaultData.tempPath,\n\t          tempNavPath: defaultData.tempNavPath,\n\t          tempNavItem: defaultData.tempNavItem,\n\t          hasMoreTokens: defaultData.hasMoreTokens,\n\t          parameters: defaultData.parameters\n\t        });\n\t\n\t        if (parsedData && parsedDataCopy && parsedData.navItem && parsedDataCopy.navItem && parsedData.navItem.id === parsedDataCopy.navItem.id) {\n\t          cont = false;\n\t          return defaultData;\n\t        }\n\t\n\t        cont = parsedData.cont;\n\t        childPath = parsedData.childPath;\n\t        defaultData.navItem = parsedData.navItem;\n\t        defaultData.tokens = parsedData.tokens;\n\t        defaultData.tempPath = parsedData.tempPath;\n\t        defaultData.tempNavPath = parsedData.tempNavPath;\n\t        defaultData.tempNavItem = parsedData.tempNavItem;\n\t        defaultData.hasMoreTokens = parsedData.hasMoreTokens;\n\t        defaultData.parameters = parsedData.parameters;\n\t      }\n\t\n\t      return defaultData;\n\t    }\n\t\n\t    function findMatchedNoChild(_navItem, parameters, tempPath, tempNavPath) {\n\t      var navItem = fisViewService.getItemFromPath2Item(tempPath);\n\t      var navigationPanelParamValue = createUrlFillingParams(tempPath, tempNavPath);\n\t      var paramNameString;\n\t      if (navItem !== null) {\n\t        paramNameString = findParamName(navItem);\n\t      }\n\t\n\t      parameters[paramNameString] = navigationPanelParamValue;\n\t\n\t      return {\n\t        navItem: navItem,\n\t        parameters: parameters\n\t      };\n\t    }\n\t\n\t    function createUrlFillingParams(tempPath, tempNavPath) {\n\t      return tempNavPath.substring(tempPath.length + 1);\n\t    }\n\t\n\t    function findParamName(navItem) {\n\t      return navItem.id.substring(navItem.id.indexOf(':') + 1);\n\t    }\n\t\n\t    function parseChildDataFrom(defaultData) {\n\t      var i = 0;\n\t      var child = null;\n\t      var childData = null;\n\t\n\t      for (i = 0; i < defaultData.tempNavItem.children.length; i++) {\n\t        child = defaultData.tempNavItem.children[i];\n\t\n\t        if (child && child.id.indexOf(':') !== -1) {\n\t          var proceed = child.id.indexOf(':') === 0 ? true : hasSomeEquivalentParam(child, defaultData.childPath);\n\t          if (proceed) {\n\t            childData = getChildDataFromPath(child, defaultData.childPath, defaultData.tokens.length, defaultData.tempPath, defaultData.tempNavPath, defaultData.hasMoreTokens);\n\t\n\t            defaultData.cont = false;\n\t            defaultData.navItem = childData.navItem;\n\t            defaultData.hasMoreTokens = childData.hasMoreTokens;\n\t            defaultData.tempPath = childData.tempPath;\n\t            defaultData.tempNavPath = childData.tempNavPath;\n\t            defaultData.parameters[childData.paramName] = childData.paramVal;\n\t\n\t            break;\n\t          }\n\t        } else {\n\t          for (var j = 0; j < defaultData.tokens.length; j++) {\n\t            if (child.id === defaultData.tokens[j]) {\n\t              var itemTokens = child.path.split('/');\n\t              // commented below line otherwise it continously loops for the case mentioned in SDHTML-5237\n\t              // defaultData.tempPath = defaultData.tempPath + '/' + child.path + '/';\n\t              defaultData.tempNavPath = defaultData.tempPath;\n\t              if (defaultData.tokens.length === itemTokens.length) {\n\t                defaultData.hasMoreTokens = false;\n\t                defaultData.cont = false;\n\t                defaultData.navItem = angular.copy(child);\n\t              }\n\t              break;\n\t            }\n\t          }\n\t          defaultData.cont = false;\n\t        }\n\t      }\n\t      return defaultData;\n\t    }\n\t\n\t    function getParameterValue(child, childPath, childTokens) {\n\t      var paramVal;\n\t\n\t      if (child.id.indexOf(':') === 0) {\n\t        paramVal = childTokens[0];\n\t      } else {\n\t        paramVal = childTokens[1];\n\t      }\n\t\n\t      return paramVal;\n\t    }\n\t\n\t    function getParametersIfUndefined(parameters, params) {\n\t      if (parameters === null && angular.isDefined(params)) {\n\t        parameters = params;\n\t      }\n\t\n\t      return parameters;\n\t    }\n\t\n\t    function mergeParametersIfRequired(parameters, params) {\n\t      if (parameters === null && angular.isDefined(params)) {\n\t        parameters = params;\n\t      } else if (angular.isDefined(params)) {\n\t        $.extend(true, parameters, params);\n\t      }\n\t\n\t      return parameters;\n\t    }\n\t\n\t    function getNavItemCopyIfParams(navItem, parameters, resolvedPath) {\n\t      if (parameters && navItem) {\n\t        if (navItem instanceof provider.ViewPanel) {\n\t          navItem = navItem.navItem;\n\t        }\n\t        // if it is a parameterized URL, substitue the params in the navItem's path\n\t        navItem = angular.copy(navItem);\n\t        if (!navItem.unresolvedPath) {\n\t          navItem.unresolvedPath = navItem.path;\n\t        }\n\t        navItem.path = substituteParams(navItem.path, parameters);\n\t        if (navItem.path && navItem.path.indexOf('/undefined/') > -1 && resolvedPath) {\n\t          navItem = fisViewService.findNavItem(resolvedPath);\n\t          navItem.path = substituteParams(navItem.path, navItem.params);\n\t        }\n\t        navItem.label = $filter('interpolate')(navItem.label, parameters);\n\t        if (!resolvedPath) {\n\t          navItem.params = parameters;\n\t        }\n\t      }\n\t\n\t      return navItem;\n\t    }\n\t\n\t    function getPanelPath(navPath) {\n\t      var panelPath = null;\n\t\n\t      if (angular.isDefined(navPath)) {\n\t        panelPath = navPath;\n\t      } else {\n\t        panelPath = service.activeViewPanel().path;\n\t      }\n\t\n\t      return panelPath;\n\t    }\n\t\n\t    function forceSelectionOfLastPanel(force) {\n\t      if (hasNoSelectedPanelPathButTabs()) {\n\t        if (force === undefined || force) {\n\t          // TODO: is this needed? is it only used when closing a tab? could it be moved there?\n\t          selectedPanelPath = getLastTab().path;\n\t        } else {\n\t          // no opened view panel (tab) available to select and we don't force selection.\n\t          return null;\n\t        }\n\t      }\n\t    }\n\t\n\t    function hasNoSelectedPanelPathButTabs() {\n\t      return !selectedPanelPath && tabs && tabs.length > 0;\n\t    }\n\t\n\t    function createParamsIfNotDefined(activeViewPanel) {\n\t      if (activeViewPanel !== null) {\n\t        if (angular.isUndefined(activeViewPanel.params) || activeViewPanel.params === null) {\n\t          activeViewPanel.params = {}; // we create a new object\n\t        } else if (angular.isUndefined(activeViewPanel.decodedParams) || activeViewPanel.decodedParams === null) {\n\t          activeViewPanel.decodedParams = addDecodedParams(activeViewPanel.params);\n\t        }\n\t      }\n\t    }\n\t\n\t    function isSecondaryNavItemReplacingPrimary(item, isNonCloseable) {\n\t      var primaryItem = getSecondaryNavParent(item.path);\n\t\n\t      if (primaryItem === item) {\n\t        return false;\n\t      }\n\t      if (primaryItem) {\n\t        var stillOpenPrimaryItem = service.viewPanels().filter(function (panel) {\n\t          return panel.path === primaryItem.path;\n\t        });\n\t        if (stillOpenPrimaryItem.length === 0) {\n\t          // The parent is not open in another tab, the closability depends on the parents closability\n\t          return service.isNonCloseable(primaryItem);\n\t        }\n\t        // The parent is open in another tab, thus we now may close this children tab\n\t        return false;\n\t      }\n\t\n\t      return isNonCloseable;\n\t    }\n\t\n\t    function getDefaultViewPanelIfNotDefined(viewPanel, navPath) {\n\t      if (!navPath) {\n\t        viewPanel = service.activeViewPanel();\n\t      }\n\t\n\t      return viewPanel;\n\t    }\n\t\n\t    function getDefaultNavPathIfNotDefined(navPath) {\n\t      if (!navPath) {\n\t        navPath = service.activeViewPanel().path;\n\t      }\n\t\n\t      return navPath;\n\t    }\n\t\n\t    function getDataFromNavPath(viewPanel, navPath) {\n\t      var tabIndexToRemove = null;\n\t\n\t      if (navPath) {\n\t        for (var i = 0; i < tabs.length; i++) {\n\t          if (tabs[i].path === navPath) {\n\t            tabIndexToRemove = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (tabIndexToRemove !== undefined) {\n\t          viewPanel = tabs[tabIndexToRemove];\n\t        }\n\t      }\n\t\n\t      return {\n\t        viewPanel: viewPanel,\n\t        tabIndexToRemove: tabIndexToRemove\n\t      };\n\t    }\n\t\n\t    function closeViewPanel(viewPanel, navPath, tabIndexToRemove) {\n\t      var tabToFocus = null;\n\t      var deferred = $q.defer();\n\t\n\t      if (viewPanel) {\n\t        viewPanel.$isClosing = true;\n\t\n\t        var promise = publishViewPanelCloseIntent(viewPanel, navPath);\n\t\n\t        promise.then(function () {\n\t          // handle the case where another close call has been made before the current one ends\n\t          viewPanel = getDefaultViewPanelIfNotDefined(viewPanel, navPath);\n\t          navPath = getDefaultNavPathIfNotDefined(navPath);\n\t\n\t          tabToFocus = getTabFocusFromNavPath(navPath);\n\t          tabIndexToRemove = getTabIndexToRemove(tabIndexToRemove, navPath);\n\t\n\t          removeTabByIndex(viewPanel, navPath, tabIndexToRemove, tabToFocus);\n\t\n\t          deferred.resolve();\n\t        }, function () {\n\t          deferred.reject('Pos 3');\n\t        }).finally(function () {\n\t          // Had to use $timeout to wrap the publish call. Promises seems to behave in synchronous manner when\n\t          // resolved with non-promise values (returned by $q.when in fisPubSubService.publish code). Therefore\n\t          // when fisViewPanelCloseIntent is published, promise.then and promise.always is called immediately called\n\t          // and the fis-views directive doesn't get a chance to react to viewPanel.$isClosing change and add\n\t          // a loading indicator.\n\t          $timeout(function () {\n\t            viewPanel.$isClosing = false;\n\t          }, 0);\n\t        });\n\t      } else {\n\t        // The navPath was not open or invalid, so resolve it right away - there's nothing to close.\n\t        deferred.resolve();\n\t      }\n\t\n\t      return deferred.promise;\n\t    }\n\t\n\t    function getTabFocusFromNavPath(navPath) {\n\t      var tabToFocus = null;\n\t\n\t      if (navPath !== selectedPanelPath) {\n\t        tabToFocus = selectedPanelPath;\n\t      }\n\t\n\t      return tabToFocus;\n\t    }\n\t\n\t    function getTabIndexToRemove(tabIndexToRemove, navPath) {\n\t      for (var i = 0; i < tabs.length; i++) {\n\t        if (tabs[i].path === navPath) {\n\t          tabIndexToRemove = i;\n\t          break;\n\t        }\n\t      }\n\t\n\t      return tabIndexToRemove;\n\t    }\n\t\n\t    function openDefaultEmptyView() {\n\t      $location.path('');\n\t      navigationUnderWay = true;\n\t    }\n\t\n\t    function openLastTab() {\n\t      // TODO: open last activated from a stack\n\t      var params = getLastTab() ? getLastTab().params : null;\n\t      service.open(getLastTab().path, null, params);\n\t    }\n\t\n\t    function removeViewPanel(tabIndexToRemove) {\n\t      tabs.splice(tabIndexToRemove, 1);\n\t    }\n\t\n\t    function openViewAfterClose(tabToFocus) {\n\t      if (tabs.length === 0) {\n\t        openDefaultEmptyView();\n\t      } else if (tabs.length > 0 && tabToFocus === null) {\n\t        openLastTab();\n\t      }\n\t    }\n\t\n\t    function copyClosingPanel(viewPanel) {\n\t      // create a copy of the closed view panel but without any functions\n\t      // or properties starting with '$' as we do not want the subscriber to modify the\n\t      // closed view panel\n\t      var viewPanelCopy = {};\n\t      Object.keys(viewPanel).forEach(function (key) {\n\t        if (!key.match(/^\\$/)) {\n\t          var value = viewPanel[key];\n\t          if (!angular.isFunction(value)) {\n\t            viewPanelCopy[key] = value;\n\t          }\n\t        }\n\t      });\n\t      return viewPanelCopy;\n\t    }\n\t\n\t    function removeTabByIndex(viewPanel, navPath, tabIndexToRemove, tabToFocus) {\n\t      if (tabIndexToRemove !== null) {\n\t        removeViewPanel(tabIndexToRemove);\n\t\n\t        openViewAfterClose(tabToFocus);\n\t\n\t        viewPanel = copyClosingPanel(viewPanel);\n\t\n\t        publishViewPanelClosed(viewPanel, navPath);\n\t      }\n\t    }\n\t\n\t    function publishViewPanelCloseIntent(viewPanel, navPath) {\n\t      return fisPubSubService.publish('fisViewPanelCloseIntent', {\n\t        path: navPath,\n\t        viewPanel: viewPanel\n\t      });\n\t    }\n\t\n\t    function publishViewPanelClosed(viewPanel, navPath) {\n\t      return fisPubSubService.publish('fisViewPanelClosed', {\n\t        path: navPath,\n\t        viewPanel: viewPanel\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * @name open\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @param {string} navPath Navigation Path to open. Undefined or empty string will load the default view.\r\n\t     * @param {Object} [event] Optional triggering event (For example, click), can be 'true' or 'false' :\r\n\t     *         True means we want to force opening in a new tab (and bypass the strategy) and false means we force opening in the same tab.\r\n\t     * @param {Object} [params] Optional Additional parameters\r\n\t     * @description Opens a ViewPanel using the configured strategy (or framework defaults 'mdi' strategy if none is configured.)\r\n\t     */\n\t    service.open = function (_navPath, event, params) {\n\t      // Hash must be removed when moving between pages (no event is fired when pages are loaded from a bookmark,\n\t      // an event is defined when navigating the menu or moving between tabs.\n\t      if (angular.isDefined(event)) {\n\t        resetLocationHash();\n\t      }\n\t      var relativeData = null;\n\t      var parameters = null;\n\t      var navPath = getDefaultIfNoPath(_navPath);\n\t      var normalized = normalizeOpenArguments(arguments, event, params);\n\t      var localEvent = normalized.localEvent;\n\t      var localParams = normalized.localParams;\n\t      var previousViewPanel = service.activeViewPanel(false);\n\t      var presentData = checkIfTabIsAlreadyPresent(navPath, event, params);\n\t      var navItem = presentData.navItem;\n\t      var tabFound = presentData.tabFound;\n\t      var navItemExist = false;\n\t      navigationUnderWay = true;\n\t      var resolvedPath;\n\t\n\t      navItem = tryOpenViewBasedOnDefaultParams(navItem, navPath, tabFound, event, params, localParams);\n\t\n\t      navItem = findNavItemIfNotDefined(navItem, navPath);\n\t\n\t      if (DEFAULT_OPEN_STRAT === provider.getViewOpeningStrategy() && angular.isDefined(event)) {\n\t        if (event && event.shiftKey && event.shiftKey === true) {\n\t          if (angular.isDefined(navItem)) {\n\t            /* The original code, which only checks whether the \"last\" item in the array matches in the path property:\r\n\t            _.each(tabs,function(tab){\r\n\t                navItemExist = tab.path === navItem.path;\r\n\t            });\r\n\t             During the removal of underscore, the code has been adjusted\r\n\t             */\n\t            navItemExist = tabs.some(function (tab) {\n\t              return tab.path === navItem.path;\n\t            });\n\t            if (navItemExist === false) {\n\t              tabs.push(new provider.ViewPanel(navItem, $filter));\n\t              return;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      // if navItem not found, check for possibility of the navPath having relative url.\n\t      if (hasNoItemButTabs(navItem)) {\n\t        relativeData = extractRelativeUrlData(navItem, navPath);\n\t\n\t        parameters = relativeData.params;\n\t        navItem = relativeData.navItem;\n\t        resolvedPath = relativeData.resolvedPath;\n\t      }\n\t\n\t      parameters = getParametersIfUndefined(parameters, params);\n\t\n\t      navItem = getNavItemCopyIfParams(navItem, parameters, resolvedPath);\n\t\n\t      if (navItem !== undefined && navItem !== null && navItem.parentTitle !== undefined) {\n\t        navItem.isStatic = true;\n\t      }\n\t\n\t      validateNavItem(navItem, navPath);\n\t\n\t      if (angular.isDefined(navItem) && angular.isUndefined(navItem.partial)) {\n\t        if (fisConfig.widgets && fisConfig.widgets.fisTabsBar) {\n\t          var openFirstChildIfEmpty = fisConfig.widgets.fisTabsBar.openFirstChildIfEmpty;\n\t\n\t          if (angular.isUndefined(openFirstChildIfEmpty) || openFirstChildIfEmpty) {\n\t            var firstChildWithPartial = findFirstChildWithPartial(navItem);\n\t\n\t            if (firstChildWithPartial !== null) {\n\t              $timeout(function () {\n\t                service.open(firstChildWithPartial.path, event, params);\n\t                fisPubSubService.publish('fisFirstSecondaryItemOpened');\n\t              });\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      if (!getSecondaryNavParent(navPath)) {\n\t        callRelevantStrategy(navItem, localEvent, localParams);\n\t      }\n\t\n\t      // Passing the event object through here allows listeners of this to determine the origin of the open\n\t      // e.g. was it a mega menu link or a tabbar link?\n\t      publishViewPanelChange(navItem, previousViewPanel, event);\n\t\n\t      if (navItem !== undefined && (navItem.closeable === true || navItem.closeable === 'true' || navItem.closeable === undefined)) {\n\t        // broadcast on the rootscope, so other external modules can listen for this\n\t        $rootScope.$broadcast('fisTabOpened', { path: _navPath });\n\t      }\n\t\n\t      $timeout(function () {\n\t        navigationUnderWay = false;\n\t      });\n\t    };\n\t\n\t    function findFirstChildWithPartial(navItem) {\n\t      if (angular.isDefined(navItem.children) && navItem.children.length > 0) {\n\t        if (angular.isUndefined(navItem.children[0].partial)) {\n\t          return findFirstChildWithPartial(navItem.children[0]);\n\t        }\n\t        return navItem.children[0];\n\t      }\n\t      return null;\n\t    }\n\t\n\t    /**\r\n\t     * @name viewPanels\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @returns {Array} Open ViewPanels\r\n\t     * @description Returns array of open view panels\r\n\t     */\n\t    service.viewPanels = function () {\n\t      return tabs;\n\t    };\n\t\n\t    /**\r\n\t     * @name viewPanelByPath\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @param {String} Navigation Path of the open View Panel\r\n\t     * @returns {Object} View Panel for the navigation path passed in\r\n\t     * @description Returns the view panel corresponding to the given nav path\r\n\t     */\n\t    service.viewPanelByPath = function (navPath) {\n\t      var viewPanel;\n\t\n\t      for (var i = 0; i < tabs.length; i++) {\n\t        if (tabs[i].path === navPath) {\n\t          viewPanel = tabs[i];\n\t\n\t          break;\n\t        }\n\t      }\n\t\n\t      return viewPanel;\n\t    };\n\t\n\t    /**\r\n\t     * @name reloadActiveViewPanel\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @param {String} Navigation Path of the panel that needs to be reloaded - optional, if not provided, then the current active panel is used\r\n\t     * @description Reloads the current active panel\r\n\t     */\n\t    service.reloadActiveViewPanel = function (navPath, params) {\n\t      var panelPath = getPanelPath(navPath);\n\t      var parameters = null;\n\t\n\t      for (var j = 0; j < tabs.length; j++) {\n\t        if (tabs[j].path === panelPath) {\n\t          var navItem = fisViewService.findNavItem(panelPath);\n\t          // handling parameterized navigation item with resolved path\n\t          if (!navItem) {\n\t            var relativeData = extractRelativeUrlData(navItem, panelPath);\n\t            navItem = relativeData.navItem;\n\t            parameters = relativeData.params;\n\t          } else if (angular.isUndefined(params) || params.length === 0) {\n\t            // if params are undefined, try to use params from the active view panel in this case; since the view to be opened is a relative view.\n\t            parameters = service.activeViewPanel().params;\n\t          }\n\t\n\t          parameters = mergeParametersIfRequired(parameters, params);\n\t          navItem = getNavItemCopyIfParams(navItem, parameters);\n\t          // Replace ViewPanel - ng-repeat will detect change and destroy DOM (div and scope)\n\t          tabs[j] = new provider.ViewPanel(navItem, $filter);\n\t\n\t          service.open(panelPath, null, parameters);\n\t\n\t          break;\n\t        }\n\t      }\n\t    };\n\t\n\t    /**\r\n\t     * @name activeViewPanel\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @returns {Object} Active View Panel\r\n\t     * @description Returns the active View Panel. This will always return an activeViewPanel\r\n\t     *      if there are opened view panels because it will select one.\r\n\t     * @param force undefined or a truthy value will force selection of the last tab.\r\n\t     */\n\t    service.activeViewPanel = function (force) {\n\t      var activeViewPanel = null;\n\t\n\t      forceSelectionOfLastPanel(force);\n\t\n\t      for (var i = 0; i < tabs.length; i++) {\n\t        if (tabs[i].path === selectedPanelPath) {\n\t          activeViewPanel = tabs[i];\n\t\n\t          break;\n\t        }\n\t      }\n\t\n\t      createParamsIfNotDefined(activeViewPanel);\n\t\n\t      return activeViewPanel;\n\t    };\n\t\n\t    /**\r\n\t     * @name activeViewPanelIndex\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @returns {int} Active View Panel index\r\n\t     * @description Returns the active View Panel index\r\n\t     */\n\t    service.activeViewPanelIndex = function () {\n\t      for (var i = 0; i < tabs.length; i++) {\n\t        if (tabs[i].path === selectedPanelPath) {\n\t          return i;\n\t        }\n\t      }\n\t\n\t      return -1;\n\t    };\n\t\n\t    /**\r\n\t     * @name viewPanelParams\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @returns {Object} params for active view panel\r\n\t     * @description Returns the params for active View Panel\r\n\t     */\n\t    service.viewPanelParams = function () {\n\t      var params = {};\n\t\n\t      if (service.activeViewPanel()) {\n\t        params = service.activeViewPanel().params;\n\t      }\n\t\n\t      return params;\n\t    };\n\t\n\t    /**\r\n\t     * @name selectedViewPanelPath\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @returns {String} Active View Panel path\r\n\t     * @description Returns the active View Panel path\r\n\t     */\n\t    service.selectedViewPanelPath = function (path) {\n\t      if (arguments.length === 0) {\n\t        return selectedPanelPath;\n\t      }\n\t      service.selectedPanelPath = path;\n\t      service.open(path);\n\t    };\n\t\n\t    /**\r\n\t     * @name resetSelectedViewPanelPath\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @description Removes the selected panel path reference\r\n\t     */\n\t    service.resetSelectedViewPanelPath = function () {\n\t      selectedPanelPath = undefined;\n\t    };\n\t\n\t    /**\r\n\t     * @name isNonCloseable\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @param {Object} item View Panel\r\n\t     * @returns {boolean} true if the View Panel is non-closeable else false\r\n\t     * @description Returns if a View Panel is closeable or not. View Panels corresponding to top level\r\n\t     * Navigation Items that have partials attached to them are considered non-closeable.\r\n\t     */\n\t    service.isNonCloseable = function (item) {\n\t      var isNonCloseable = false;\n\t\n\t      if (isNavItemDefined(item)) {\n\t        if (angular.isDefined(item.closeable)) {\n\t          isNonCloseable = !item.closeable;\n\t        }\n\t\n\t        var parent = getItemParentRefIfValid(item);\n\t\n\t        if (parent !== item) {\n\t          isNonCloseable = isSecondaryNavItemReplacingPrimary(item, isNonCloseable);\n\t        }\n\t\n\t        if (isNavItemDefined(item) && hasDropdownSecondaryMenu(item)) {\n\t          isNonCloseable = true;\n\t        }\n\t      }\n\t\n\t      return isNonCloseable;\n\t    };\n\t\n\t    /**\r\n\t     * @name close\r\n\t     * @methodOf fisViewPanelService\r\n\t     * @param {String} _navPath Path corresponding to a View Panel\r\n\t     * @description Closes a View Panel associated to the nav Path\r\n\t     */\n\t    service.close = function (_navPath) {\n\t      var viewPanel = getDefaultViewPanelIfNotDefined(null, _navPath);\n\t      var navPath = getDefaultNavPathIfNotDefined(_navPath);\n\t      var navPathData = getDataFromNavPath(viewPanel, navPath);\n\t      var tabIndexToRemove = navPathData.tabIndexToRemove;\n\t\n\t      viewPanel = navPathData.viewPanel;\n\t\n\t      // broadcast on the rootscope, so other external modules can listen for this\n\t      $rootScope.$broadcast('fisTabClosed', { path: _navPath });\n\t\n\t      return closeViewPanel(viewPanel, navPath, tabIndexToRemove);\n\t    };\n\t\n\t    function findScopeForEvaluation(context, element) {\n\t      // check if the context is a scope (that's the case when the service function is invoked from an angular expression)\n\t      if (context.$eval) {\n\t        // it quacks like one\n\t        return context;\n\t      }\n\t\n\t      // no luck try with the element, if present\n\t      if (element && element.scope) {\n\t        return element.scope();\n\t      }\n\t\n\t      throw new Error('Cannot find a scope to evaluate expression in.');\n\t    }\n\t\n\t    function findElementFromEvent(event) {\n\t      return angular.isObject(event) && angular.isDefined(event.target) && angular.element(event.target);\n\t    }\n\t\n\t    function processActionView(context, viewDef, event, params) {\n\t      var locals;\n\t      var ret;\n\t      var destroyScope = false;\n\t      var element = findElementFromEvent(event);\n\t      var evalScope = findScopeForEvaluation(context, element);\n\t\n\t      if (angular.isObject(params)) {\n\t        locals = angular.copy(params);\n\t      } else {\n\t        locals = {};\n\t      }\n\t\n\t      locals.view = viewDef;\n\t      locals.$scope = evalScope;\n\t\n\t      if (angular.isString(viewDef.actionController)) {\n\t        // create a new child scope on which to attach the controller\n\t        locals.$scope = evalScope = evalScope.$new();\n\t        locals.$element = element;\n\t        $controller(viewDef.actionController, locals);\n\t        destroyScope = true;\n\t      }\n\t\n\t      // elements can't be referenced in angualr expressions\n\t      delete locals.$element;\n\t      // event put in locals only for the expression evaluation\n\t      locals.$event = event;\n\t\n\t      ret = evalScope.$eval(viewDef.action, locals);\n\t\n\t      if (destroyScope) {\n\t        evalScope.$destroy();\n\t      }\n\t\n\t      return ret;\n\t    }\n\t\n\t    service.openView = function (viewDef, event, params) {\n\t      var context = this;\n\t\n\t      if (viewDef.action) {\n\t        return processActionView(context, viewDef, event, params);\n\t      } else if (viewDef.path) {\n\t        return service.open.call(context, viewDef.path, event, params);\n\t      } else if (angular.isString(viewDef)) {\n\t        return service.open.call(context, viewDef, event, params);\n\t      }\n\t\n\t      throw new Error('Cannot open provided view definition object');\n\t    };\n\t\n\t    /* service.setNavigationComplete = function() {\r\n\t        $timeout (function () {\r\n\t            navigationUnderWay = false;\r\n\t        });\r\n\t    };*/\n\t\n\t    var activePanel;\n\t\n\t    fisPubSubService.subscribe('fisBeforeNavItemAdd', function () {\n\t      activePanel = service.activeViewPanel();\n\t    });\n\t\n\t    fisPubSubService.subscribe('fisAfterNavItemAdd', function (params) {\n\t      if (params.rootNav === 'main' && params.itemToAdd.partial) {\n\t        tabs.push(new provider.ViewPanel(params.itemToAdd, $filter));\n\t      }\n\t      if (params.openItemAfterAdd) {\n\t        service.open(params.itemToAdd.path, null, params.openParams);\n\t      } else {\n\t        service.open(activePanel.path, null, params.openParams);\n\t      }\n\t      fisPubSubService.publish('fisAfterNavItemAdded');\n\t    });\n\t\n\t    fisPubSubService.subscribe('fisBeforeNavItemRemove', function () {\n\t      activePanel = service.activeViewPanel();\n\t    });\n\t\n\t    fisPubSubService.subscribe('fisAfterNavItemRemove', function (params) {\n\t      var tabToClose = null;\n\t      var secondaryNavParent;\n\t\n\t      for (var i = 0; i < tabs.length; i++) {\n\t        if (tabs[i].id === params.itemToRemove.id) {\n\t          tabToClose = tabs[i];\n\t          break;\n\t        }\n\t      }\n\t      if (!params.openParentNode && tabToClose) {\n\t        service.close(tabToClose.path);\n\t      }\n\t\n\t      // see if the item to be removed is part of the currently open secondary menu bar\n\t      // if it is, the secondary menu bar should refresh irrespective of the openParentNode param value\n\t      if (params.itemToRemove.id !== service.activeViewPanel().id && service.activeViewPanel() && (service.activeViewPanel().unresolvedPath || service.activeViewPanel().path)) {\n\t        var activePanelPath = service.activeViewPanel().unresolvedPath ? service.activeViewPanel().unresolvedPath : service.activeViewPanel().path;\n\t        secondaryNavParent = getSecondaryNavParent(params.itemToRemove.path);\n\t        var secondaryNavParentForActiveTab = getSecondaryNavParent(activePanelPath);\n\t        if (secondaryNavParent && secondaryNavParentForActiveTab && secondaryNavParent.path === secondaryNavParentForActiveTab.path) {\n\t          if (tabToClose) {\n\t            service.close(tabToClose.path);\n\t          }\n\t          service.open(service.activeViewPanel().path, null, params.openParams);\n\t        }\n\t      }\n\t\n\t      if (params.openParentNode && params.parentItem && params.parentItem.partial) {\n\t        service.open(params.parentItem.path, null, params.openParams);\n\t      } else if (params.openParentNode && params.parentItem && !params.parentItem.partial) {\n\t        secondaryNavParent = getSecondaryNavParent(params.itemToRemove.path);\n\t        if (secondaryNavParent) {\n\t          service.open(secondaryNavParent.path, null, params.openParams);\n\t        } else if (tabToClose) {\n\t          service.close(tabToClose.path);\n\t        }\n\t      }\n\t\n\t      fisPubSubService.publish('fisAfterNavItemRemoved');\n\t    });\n\t\n\t    init();\n\t\n\t    return service;\n\t  }];\n\t};\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  'use strict';\n\t\n\t  var self = this;\n\t  // filters allow modifying the incoming nav structure before it gets\n\t  // processed. It could be used to define the nav structure on the client\n\t  // instead of on the server.\n\t  // filter signature: function( items, params )\n\t  // item: array of root nav items\n\t  // params: params sent to navigation.refresh method.\n\t  var filters = [];\n\t  self.addFilter = function (filter) {\n\t    return filters.push(filter);\n\t  };\n\t\n\t  self.removeFilter = function (idx) {\n\t    delete filters[idx];\n\t  };\n\t\n\t  // set to false to prevent service from invoking the navigation rest endpoint\n\t  self.remote = true;\n\t\n\t  var staticViews = null;\n\t  self.setViews = function (views) {\n\t    staticViews = views;\n\t  };\n\t\n\t  // the default RESTful resource endpoint\n\t  var defaultEndpoint = 'api/navigation.json';\n\t  var endpoint = null;\n\t  self.endpoint = function (ep) {\n\t    if (ep) {\n\t      endpoint = ep;\n\t    }\n\t    return endpoint;\n\t  };\n\t\n\t  // reference to angular's $routeProvider\n\t  self.$routeProvider = null;\n\t\n\t  self.$get = ['$templateCache', '$resource', '$route', '$rootScope', '$log', 'fisConfig', '$q', 'fisPubSubService', 'fisUtilService', '$injector', 'fisNavigationService', 'fisI18nService', function ($templateCache, $resource, $route, $rootScope, $log, fisConfig, $q, fisPubSubService, fisUtilService, $injector, fisNavigationService, fisI18nService) {\n\t    var nav = null;\n\t    var path2Item = {};\n\t    var id2Item = {};\n\t    var serv = {};\n\t\n\t    /**\r\n\t     * @name applyFilter\r\n\t     * @description Utility function to filter navigation model.\r\n\t     * @param model model to apply filters to\r\n\t     * @param params filter parameters\r\n\t     * @return\r\n\t     * @methodOf fisViewService\r\n\t     * @private\r\n\t     */\n\t    function applyFilters(model, params) {\n\t      for (var i = 0; i < filters.length; i++) {\n\t        filters[i](model, params);\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * @name traverse\r\n\t     * @description Utility function to traverse and process navigation\r\n\t     * structure\r\n\t     * @param items structure to traverse\r\n\t     * @param cb calback to apply during traversal\r\n\t     * @param navPath tracks position in structure.\r\n\t     * @return\r\n\t     * @methodOf fisViewService\r\n\t     * @private\r\n\t     */\n\t    function traverse(items, cb, navPath) {\n\t      var path = navPath || [];\n\t      angular.forEach(items, function (itm /* , key*/) {\n\t        var ret = cb.apply(this, [itm, path]);\n\t        if (ret === false) {\n\t          return false;\n\t        }\n\t        if (itm.children) {\n\t          path.push(itm);\n\t          traverse(itm.children, cb, path);\n\t          path.pop();\n\t        }\n\t        if (itm.quickLinks) {\n\t          angular.forEach(itm.quickLinks, function (quickLinks) {\n\t            path.push(itm);\n\t            path.push(quickLinks); // include quicklinks in path\n\t            traverse(quickLinks.children, cb, path);\n\t            path.pop();\n\t            path.pop();\n\t          });\n\t        }\n\t      }, items);\n\t    }\n\t\n\t    /**\r\n\t     * @name normalizeLabel\r\n\t     * @description Normalises text to acceptable characters\r\n\t     * @param label text to normalise\r\n\t     * @return normalized text\r\n\t     * @methodOf fisViewService\r\n\t     * @private\r\n\t     */\n\t    function normalizeLabel(label) {\n\t      return label.toLowerCase().replace(' ', '-');\n\t    }\n\t\n\t    function updatePath2Item(itm, path) {\n\t      if (!itm.id) {\n\t        itm.id = normalizeLabel(itm.label);\n\t      }\n\t      if (!itm.path) {\n\t        var a = [];\n\t        for (var i = 0; i < path.length; i++) {\n\t          a.push(path[i].id);\n\t        }\n\t        a.push(itm.id);\n\t        itm.path = '/' + a.join('/');\n\t        path2Item[itm.path] = itm;\n\t      }\n\t      // In case, translation data is loading asynchronously, updating the label and title in path2Item[] array\n\t      if (path2Item[itm.path] !== undefined) {\n\t        path2Item[itm.path].label = itm.label;\n\t        path2Item[itm.path].title = itm.title;\n\t      }\n\t    }\n\t\n\t    function updateId2Item(itm) {\n\t      if (itm.id.indexOf('/') > -1) {\n\t        var isAlreadyIncluded = Object.keys(id2Item).some(function (key) {\n\t          return id2Item[key] === itm;\n\t        });\n\t        if (!isAlreadyIncluded) {\n\t          id2Item[itm.id] = itm;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * @name normalizeModel\r\n\t     * @description Normalizes text to acceptable characters for model\r\n\t     * @param model structure with labels to normalize\r\n\t     * @methodOf fisViewService\r\n\t     * @private\r\n\t     */\n\t    function normalizeModel(model) {\n\t      angular.forEach(model, function (navItems /* , key*/) {\n\t        traverse(navItems, function (itm, path) {\n\t          updatePath2Item(itm, path);\n\t          updateId2Item(itm);\n\t\n\t          // i18n support of navigation item's label and title\n\t          if (itm.label && itm.label.indexOf('i18n(') === 0) {\n\t            itm.label = itm.label.substring(itm.label.indexOf('(') + 2, itm.label.indexOf(')') - 1);\n\t            // In case, translations are available for the selected language then we can directly translate label and titles\n\t            if (fisI18nService.isTranslationReady()) {\n\t              itm.label = fisI18nService.translate(itm.label);\n\t              updatePath2Item(itm, path);\n\t              updateId2Item(itm);\n\t            } else {\n\t              // In case, translations are loading asynchronously, we need to use promise api to update\n\t              // labels and titles on receiving data for translation\n\t              fisI18nService.translateAsync(itm.label).then(function (resolvedLabel) {\n\t                itm.label = resolvedLabel;\n\t                updatePath2Item(itm, path);\n\t                updateId2Item(itm);\n\t              });\n\t            }\n\t          }\n\t          if (itm.title && itm.title.indexOf('i18n(') === 0) {\n\t            itm.title = itm.title.substring(itm.title.indexOf('(') + 2, itm.title.indexOf(')') - 1);\n\t            // In case, translations are available for the selected language then we can directly translate label and titles\n\t            if (fisI18nService.isTranslationReady()) {\n\t              itm.title = fisI18nService.translate(itm.title);\n\t              updatePath2Item(itm, path);\n\t              updateId2Item(itm);\n\t            } else {\n\t              // In case, translations are loading asynchronously, we need to use promise api to update\n\t              // labels and titles on receiving data for translation\n\t              fisI18nService.translateAsync(itm.title).then(function (resolvedTitle) {\n\t                itm.title = resolvedTitle;\n\t                updatePath2Item(itm, path);\n\t                updateId2Item(itm);\n\t              });\n\t            }\n\t          }\n\t          // support definitions that only contain a template\n\t          if (itm.template && !itm.partial) {\n\t            itm.partial = itm.path + '.tpl.html';\n\t          }\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * @name createRoutes\r\n\t     * @description Creates angular routes from navigation structure\r\n\t     * @param model navigation structure\r\n\t     * @methodOf fisViewService\r\n\t     * @private\r\n\t     */\n\t    function createRoutes(model) {\n\t      angular.forEach(model, function (navItems /* , key*/) {\n\t        traverse(navItems, function (itm /* , path*/) {\n\t          if (itm.partial) {\n\t            var opts = {\n\t              templateUrl: fisUtilService.appendCacheQueryParameter(itm.partial)\n\t            };\n\t\n\t            if (itm.template) {\n\t              // prefill $templateCache with provided template\n\t              $templateCache.put(itm.partial, itm.template);\n\t            }\n\t\n\t            if (itm.controller) {\n\t              // TODO: Controllers need to be loaded on demand\n\t              opts.controller = itm.controller;\n\t            }\n\t            opts.resolve = createResolveProperty(itm);\n\t            self.$routeProvider.when(itm.path, opts);\n\t          } else if (!itm.children && !itm.action) {\n\t            $log.warn('Leaf nav item without a partial: ' + itm.label);\n\t          }\n\t        });\n\t      });\n\t    }\n\t\n\t    function createResolveProperty(itm) {\n\t      var ret = {};\n\t\n\t      // find the constructor in the registry\n\t      var ctrl = itm.controller && fis.__controllers[itm.controller];\n\t\n\t      angular.forEach(ctrl, function (val, key) {\n\t        if (key.indexOf('$') !== 0) {\n\t          ret[key] = createResolveValue(val, itm.args);\n\t        }\n\t      });\n\t\n\t      if (itm.args) {\n\t        ret.args = function () {\n\t          return itm.args;\n\t        };\n\t      }\n\t\n\t      return ret;\n\t    }\n\t\n\t    function createResolveValue(toResolve, args) {\n\t      if (angular.isFunction(toResolve) || angular.isArray(toResolve) && angular.isFunction(toResolve[toResolve.length - 1])) {\n\t        return function resolveFunction() {\n\t          return $injector.invoke(toResolve, this, { args: args });\n\t        };\n\t      }\n\t      return toResolve; // a simple object/array/native we want to pass\n\t    }\n\t\n\t    /**\r\n\t     * @name processMenu\r\n\t     * @description Process navigation structure for use in shell\r\n\t     * @param model navigation structure\r\n\t     * @param params filter parameters\r\n\t     * @methodOf fisViewService\r\n\t     * @private\r\n\t     */\n\t    function processMenu(model, params) {\n\t      // TODO: execute all into a single traversal for speed.\n\t      // add the default workspace\n\t      applyFilters(model, params);\n\t      normalizeModel(model);\n\t      createRoutes(model);\n\t\n\t      return model;\n\t    }\n\t\n\t    /**\r\n\t     * @name fetchNavigation\r\n\t     * @description Fetches navigation structure from backend and processes it\r\n\t     * @param endpoint Serverside RESTful endpoint that serves navigation structure\r\n\t     * @param params filter parameters\r\n\t     * @methodOf fisViewService\r\n\t     * @private\r\n\t     */\n\t    function fetchNavigation(endpoint, params) {\n\t      var deferred = $q.defer();\n\t      $resource(endpoint).get(params, function (results) {\n\t        var finalResult = {};\n\t        for (var key in results) {\n\t          if (results.hasOwnProperty(key)) {\n\t            var value = results[key];\n\t            if (key.indexOf('$') !== 0) {\n\t              finalResult[key] = value;\n\t            }\n\t          }\n\t        }\n\t        resolveViews(deferred, finalResult, params);\n\t      }, function () {\n\t        deferred.reject('Could not load navigation from ' + endpoint);\n\t      });\n\t      return deferred.promise;\n\t    }\n\t\n\t    function resolveViews(deferred, views, params) {\n\t      // assign the processed views to the internal nav var\n\t      nav = processMenu(views, params);\n\t\n\t      // resolve the deferred object to the processed views\n\t      deferred.resolve(nav);\n\t\n\t      // publish it on the 'shell.navReady' topic so that nav widgets can render the views\n\t      fisPubSubService.publish('shell.navReady', nav);\n\t      fisNavigationService.setNavigation(nav);\n\t      return deferred.promise;\n\t    }\n\t\n\t    /**\r\n\t     * @name load\r\n\t     * @description Loads and initializes navigation\r\n\t     * @param params filter parameters\r\n\t     * @param model existing navigation structure(optional)\r\n\t     * @methodOf fisViewService\r\n\t     */\n\t    serv.load = function (params, model) {\n\t      // TODO: use fisConfig to get default params and extend with received params\n\t      params = params || {};\n\t      path2Item = params.path2Item || {};\n\t\n\t      fisPubSubService.publish('shell.navLoading', true);\n\t      if (model || staticViews) {\n\t        // views provided as an argument or at config time; make it the new nav structure\n\t        return resolveViews($q.defer(), angular.copy(model || staticViews), params);\n\t      } else if (self.endpoint()) {\n\t        // an endpoint was provided at config time, it takes precedence over config service\n\t        return fetchNavigation(self.endpoint(), params);\n\t      }\n\t      return fetchNavigation(fisConfig.endpoints && fisConfig.endpoints.navigation || defaultEndpoint, params);\n\t    };\n\t\n\t    serv.loadOnNavChange = function (params, model) {\n\t      // TODO: use fisConfig to get default params and extend with received params\n\t      params = params || {};\n\t      path2Item = params.path2Item || {};\n\t\n\t      var deferred = $q.defer();\n\t\n\t      // assign the processed views to the internal nav var\n\t      nav = processMenu(angular.copy(model), params);\n\t\n\t      // resolve the deferred object to the processed views\n\t      deferred.resolve(nav);\n\t\n\t      fisPubSubService.publish('shell.navChanged', nav);\n\t\n\t      fisNavigationService.setNavigation(nav);\n\t      return deferred.promise;\n\t    };\n\t\n\t    /**\r\n\t     * @name findNavItem\r\n\t     * @description Retrieves item at specified path.\r\n\t     * @param navPath Navigation Path for required item\r\n\t     * @param fromPath Path to search from if navPath is relative (doesn't start with '/').\r\n\t     *          If not provided and navPath is relative, the function will return undefined.\r\n\t     * @methodOf fisViewService\r\n\t     */\n\t    /* serv.findNavItem = function (navPath, fromPath) {\r\n\t     console.log('Processing for navPath...', navPath);\r\n\t     console.log('fromPath...', fromPath);\r\n\t     fromPath = fromPath || '';\r\n\t     if( navPath && navPath.indexOf('/') !== 0 ) {\r\n\t     // navPath is relative, search from fromPath\r\n\t     var item, idx = fromPath.lastIndexOf('/') + 1;\r\n\t     console.log('index...', idx);\r\n\t     console.log('path2Item...', path2Item);\r\n\t     while(idx > 1) {\r\n\t     console.log('path...', fromPath.substring(0, idx) + navPath);\r\n\t     item = path2Item[fromPath.substring(0, idx) + navPath];\r\n\t     console.log('item...', item);\r\n\t     if( item ) {\r\n\t     return item;\r\n\t     }\r\n\t     idx = fromPath.lastIndexOf('/', idx - 2) + 1;\r\n\t     console.log('index after...', idx);\r\n\t     }\r\n\t     }\r\n\t     return path2Item[navPath];\r\n\t     };*/\n\t\n\t    serv.findNavItem = function (navPath, fromPath) {\n\t      var item = null;\n\t      fromPath = fromPath || '';\n\t\n\t      if (navPath && navPath.indexOf('/') !== 0) {\n\t        // navPath is relative, search from fromPath\n\t        // var idx = fromPath.lastIndexOf('/') + 1;\n\t        // console.log('index...', idx);\n\t        // console.log('path2Item...', path2Item);\n\t        // console.log('path...', fromPath.substring(0, idx) + navPath);\n\t        item = path2Item[fromPath + '/' + navPath];\n\t        // console.log('item...', item);\n\t        if (item) {\n\t          return item;\n\t        }\n\t        // item not found relative to fromPath.\n\t        item = serv.getItemFromPath2Item(navPath);\n\t        // item still not found. Try to find if the path is just id. check with ids that contain '/' character\n\t        if (!item) {\n\t          item = getItemFromId2Item(navPath);\n\t        }\n\t        return item;\n\t      }\n\t\n\t      item = path2Item[navPath];\n\t\n\t      return item;\n\t    };\n\t\n\t    function getItemFromId2Item(navPath) {\n\t      var item = null;\n\t\n\t      for (var id in id2Item) {\n\t        // eslint-disable-line\n\t        var idArr = id.split('/');\n\t        var navPathArr = navPath.split('/');\n\t        if (idArr.length === navPathArr.length) {\n\t          var paramArr = matchTokens(idArr, navPathArr);\n\t          if (paramArr) {\n\t            item = id2Item[id];\n\t            item.params = paramArr;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return item;\n\t    }\n\t\n\t    function matchTokens(idArr, navPathArr) {\n\t      var paramArr = {};\n\t\n\t      for (var i = 0; i < idArr.length; i++) {\n\t        if (idArr[i] !== navPathArr[i] && idArr[i].indexOf(':') !== 0) {\n\t          paramArr = null;\n\t          return false;\n\t        } else if (idArr[i] !== navPathArr[i] && idArr[i].indexOf(':') === 0) {\n\t          var paramName = idArr[i].substring(1);\n\t          var paramValue = navPathArr[i];\n\t          paramArr[paramName] = paramValue;\n\t        }\n\t      }\n\t\n\t      return paramArr;\n\t    }\n\t\n\t    // returns the last part of the navItem, excluding those those which include a ':', in which case the second last part will be returned\n\t    function getNavPathEnd(navItem) {\n\t      var parts = navItem.split('/');\n\t      var size = parts.length;\n\t\n\t      if (size < 2) {\n\t        return navItem;\n\t      }\n\t\n\t      if (parts[size - 1].indexOf(':') === -1) {\n\t        return parts[size - 1];\n\t      } else if (parts[size - 2].indexOf(':') === -1) {\n\t        return parts[size - 2];\n\t      }\n\t\n\t      // more than one parameters in id\n\t      for (var i = size - 1; i > 0; i--) {\n\t        if (parts[i].indexOf(':') === -1) {\n\t          return parts[i];\n\t        }\n\t      }\n\t    }\n\t\n\t    serv.getItemFromPath2Item = function (navPath) {\n\t      var navItem = null;\n\t\n\t      for (var path in path2Item) {\n\t        if (path2Item.hasOwnProperty(path)) {\n\t          var item = path2Item[path];\n\t\n\t          var pathTokenLength = path.split('/').length;\n\t          var navPathTokenLength = navPath.split('/').length;\n\t\n\t          if ((pathTokenLength > 2 && navPathTokenLength > 2 && pathTokenLength === navPathTokenLength || pathTokenLength <= 2 || navPathTokenLength <= 2) && getNavPathEnd(path) === getNavPathEnd(navPath)) {\n\t            navItem = item;\n\t            return navItem;\n\t          }\n\t        }\n\t      }\n\t      return navItem;\n\t    };\n\t\n\t    serv.addDynamicItem = function (item, opts) {\n\t      path2Item[item.path] = item;\n\t      self.$routeProvider.when(item.path, opts);\n\t    };\n\t\n\t    /**\r\n\t     * @name addItemToMenu\r\n\t     * @description Add a node to existing navigation structure dynamically\r\n\t     * @param parentItemId id or path of the node to which the new node needs to be appended\r\n\t     * @param itemToAdd new node to be added\r\n\t     * @methodOf fisViewService\r\n\t     */\n\t    serv.addNavItem = function (parentItemId, itemToAdd, openItemAfterAdd, openParams, addAfterItemId) {\n\t      if (itemToAdd && itemToAdd.id) {\n\t        var deferred = $q.defer();\n\t        openItemAfterAdd = openItemAfterAdd === 'true' || openItemAfterAdd === true;\n\t        openParams = jQuery.isEmptyObject(openParams) ? undefined : openParams;\n\t        fisPubSubService.publish('fisBeforeNavItemAdd', true);\n\t        var parentItem = serv.findNavItem(parentItemId);\n\t        if (parentItem) {\n\t          itemToAdd.path = parentItem.path + '/' + itemToAdd.id;\n\t          path2Item[itemToAdd.path] = itemToAdd;\n\t          if (!parentItem.children) {\n\t            parentItem.children = [];\n\t          }\n\t\n\t          if (isItemAlreadyPresentInParent(parentItem.children, itemToAdd)) {\n\t            deferred.reject();\n\t          } else {\n\t            // add item after the specified sibling - if this item is not found, the new item will be added at the end\n\t            if (addAfterItemId) {\n\t              var siblingItem = serv.findNavItem(addAfterItemId);\n\t              if (siblingItem) {\n\t                var siblingIndex = -1;\n\t                for (var i = 0; i < parentItem.children.length; i++) {\n\t                  if (parentItem.children[i].path === siblingItem.path) {\n\t                    siblingIndex = i;\n\t                    break;\n\t                  }\n\t                }\n\t                if (siblingIndex > -1) {\n\t                  parentItem.children.splice(siblingIndex + 1, 0, itemToAdd);\n\t                }\n\t              }\n\t            } else {\n\t              parentItem.children.push(itemToAdd);\n\t            }\n\t            updateModel(parentItem, function (navItems, matchedItem) {\n\t              matchedItem.children = parentItem.children;\n\t            });\n\t\n\t            serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\n\t              fisPubSubService.publish('fisAfterNavItemAdd', { nav: nav, itemToAdd: itemToAdd, parentItem: parentItem, openItemAfterAdd: openItemAfterAdd, openParams: openParams });\n\t              deferred.resolve(nav);\n\t            });\n\t          }\n\t        } else if (!parentItem && nav[parentItemId]) {\n\t          // if item needs to be added directly at root level (for ex. directly under main, footer etc.)\n\t          itemToAdd.path = '/' + itemToAdd.id;\n\t          path2Item[itemToAdd.path] = itemToAdd;\n\t          if (isItemAlreadyPresentInParent(nav[parentItemId], itemToAdd)) {\n\t            deferred.reject();\n\t          } else {\n\t            nav[parentItemId].push(itemToAdd);\n\t            serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\n\t              var rootNav = parentItemId;\n\t              fisPubSubService.publish('fisAfterNavItemAdd', { nav: nav, itemToAdd: itemToAdd, parentItem: parentItem, openItemAfterAdd: openItemAfterAdd, openParams: openParams, rootNav: rootNav });\n\t              deferred.resolve(nav);\n\t            });\n\t          }\n\t        }\n\t        return deferred.promise;\n\t      }\n\t    };\n\t\n\t    function isItemAlreadyPresentInParent(children, itemToAdd) {\n\t      return children.some(function (child) {\n\t        return child.id === itemToAdd.id;\n\t      });\n\t    }\n\t\n\t    // TODO: There should not be a need for traversing the nav and updating it separately\n\t    // However in case when we add an item first and then remove it, the changes are not\n\t    // getting reflected in the model.\n\t    // Need to look into the cause of this.\n\t    function updateModel(itemToLookup, cb) {\n\t      angular.forEach(nav, function (navItems /* , key*/) {\n\t        traverse(navItems, function (itm) {\n\t          if (itm.path === itemToLookup.path) {\n\t            cb.apply(this, [navItems, itm]);\n\t          }\n\t        });\n\t      });\n\t    }\n\t\n\t    function getIndexOfChild(childItem, parentItem) {\n\t      var index = -1;\n\t      if (parentItem && parentItem.children) {\n\t        for (var i = 0; i < parentItem.children.length; i++) {\n\t          var child = parentItem.children[i];\n\t          if (child.id === childItem.id) {\n\t            index = i;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return index;\n\t    }\n\t\n\t    serv.removeNavItem = function (itemToRemoveId, openParentNode, openParams) {\n\t      var deferred = $q.defer();\n\t      var parentItem;\n\t\n\t      openParentNode = openParentNode === 'true' || openParentNode === true;\n\t      fisPubSubService.publish('fisBeforeNavItemRemove', true);\n\t      var itemToRemove = serv.findNavItem(itemToRemoveId);\n\t      if (itemToRemove) {\n\t        var parentPath = itemToRemove.path.substring(0, itemToRemove.path.lastIndexOf('/'));\n\t        if (parentPath) {\n\t          parentItem = serv.findNavItem(parentPath);\n\t\n\t          // if parent item not found, tokenize the path and try to find the parent\n\t          if (!parentItem) {\n\t            var hasMoreTokens = true;\n\t            var tempPath = parentPath;\n\t\n\t            while (hasMoreTokens) {\n\t              tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\n\t              if (tempPath && tempPath.length === 0) {\n\t                hasMoreTokens = false;\n\t              } else {\n\t                parentItem = serv.findNavItem(tempPath);\n\t                if (parentItem) {\n\t                  hasMoreTokens = false;\n\t                }\n\t              }\n\t            }\n\t          }\n\t\n\t          if (parentItem) {\n\t            var itmToRemIndex = getIndexOfChild(itemToRemove, parentItem);\n\t            if (itmToRemIndex > -1) {\n\t              parentItem.children.splice(itmToRemIndex, 1);\n\t              path2Item[parentItem.path] = parentItem;\n\t\n\t              delete path2Item[itemToRemove.path];\n\t              delete id2Item[itemToRemove.id];\n\t\n\t              updateModel(parentItem, function (navItems, matchedItem) {\n\t                matchedItem.children = parentItem.children;\n\t              });\n\t            }\n\t          }\n\t        } else {\n\t          // no parent path means the node is at root level\n\t          updateModel(itemToRemove, function (navItems, matchedItem) {\n\t            navItems.splice(navItems.indexOf(matchedItem), 1);\n\t          });\n\t        }\n\t\n\t        serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\n\t          fisPubSubService.publish('fisAfterNavItemRemove', { nav: nav, itemToRemove: itemToRemove, parentItem: parentItem, openParentNode: openParentNode, openParams: openParams });\n\t          deferred.resolve(nav);\n\t        });\n\t      } else {\n\t        deferred.reject();\n\t      }\n\t\n\t      return deferred.promise;\n\t    };\n\t\n\t    return serv;\n\t  }];\n\t};\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$routeProvider\", \"$locationProvider\", \"fisViewServiceProvider\", function ($routeProvider, $locationProvider, fisViewServiceProvider) {\n\t  'ngInject';\n\t  // Reset the location hashPrefix to the pre-1.6 default value of empty string for backward compatibility reasons\n\t  // https://docs.angularjs.org/guide/migration#commit-aa077e8\n\t  // https://github.com/angular/angular.js/commit/aa077e81129c740041438688dff2e8d20c3d7b52\n\t\n\t  $locationProvider.hashPrefix('');\n\t\n\t  // Store a reference to the routeProvider for further use once the menu items are loaded.\n\t  fisViewServiceProvider.$routeProvider = $routeProvider;\n\t}];\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = [\"$route\", \"$anchorScroll\", \"$compile\", \"$controller\", \"$animate\", \"fisI18nService\", \"$timeout\", function ($route, $anchorScroll, $compile, $controller, $animate, fisI18nService, $timeout) {\n\t  'ngInject';\n\t  // Makes a scope \"freezable\". This means it can be detached and re-attached\n\t  // to the scope hierarchy. This code is specific to the fisView and can't be reused\n\t  // for any scope. A frozen scope will not participate in the $apply cycle so\n\t  // watches inside it will not be checked.\n\t  // The scope keeps the same prototype so it could still modify models in the parent.\n\t  // It will not be able to $emit events to the parent and the parent will not be able to $broadcast to it.\n\t  // The reason we are freezing the scope is to prevent performance degradation when\n\t  // multiple tabs are opened.\n\t\n\t  function makeFreezable(s) {\n\t    // make sure that when the parent scope is destroyed,\n\t    // we re-attach the scope so that it can also be destroyed\n\t    s.$parent.$on('$destroy', function () {\n\t      if (s.$$frozen) {\n\t        s.$freeze(false);\n\t      }\n\t      // tell fisViews that if the lastSelectedPanel was destroyed, ignore it and lose the reference on it so it can be GC'd\n\t      s.$$fisGC = true;\n\t    });\n\t\n\t    s.$freeze = function (freeze) {\n\t      if (freeze && !this.$$frozen) {\n\t        // let the scope know it is about to be frozen\n\t        this.$broadcast('fisFreezing');\n\t\n\t        // marker to indicate the scope is frozen\n\t        this.$$frozen = {};\n\t        // preserve the parent (ngRepeat scope)\n\t        this.$$frozen.$parent = this.$parent;\n\t\n\t        // detach from the parent\n\t        this.$parent.$$childHead = null;\n\t        this.$parent.$$childTail = null;\n\t\n\t        this.$parent = null;\n\t        // let the scope know it has been frozen\n\t        this.$broadcast('fisFrozen');\n\t      } else if (!freeze && this.$$frozen) {\n\t        // let the scope know it is about to be unfrozen\n\t        this.$broadcast('fisUnfreezing');\n\t\n\t        // re-attach the scope to its parent\n\t        this.$parent = this.$$frozen.$parent;\n\t        this.$parent.$$childHead = this;\n\t        this.$parent.$$childTail = this;\n\t        this.$$frozen = null;\n\t\n\t        // let the scope know it has been unfrozen\n\t        this.$broadcast('fisUnfrozen');\n\t      }\n\t    };\n\t\n\t    return s;\n\t  }\n\t\n\t  return {\n\t    restrict: 'EA',\n\t    scope: true, // needed because we now put stuff in the scope\n\t    replace: true,\n\t    controller: ['$scope', '$attrs', 'fisPubSubService', function ($scope, $attrs, fisPubSubService) {\n\t      /**\r\n\t       * Provides translation for the view displayed in the view panel.\r\n\t       * This overrides the shell controller's i18n function and provides\r\n\t       * automatic namespacing based on the current view panel's module and id.\r\n\t       * e.g. for a view panel in the \"desktop-ui\" module and an id of \"dashboard\", the key,\r\n\t       * if it doesn't already contain dots \".\", will be prefixed by \"desktop-ui.dashboard.\".\r\n\t       * @param {string} key the i18n key to provide a translation for\r\n\t       * @param {string} def t{{item.label}}he default value, if the key can't be found\r\n\t       */\n\t      var unsubscribe = fisPubSubService.subscribe('shell.i18nReady', function () {\n\t        $scope.i18n = function (key, def) {\n\t          if (angular.isDefined(key)) {\n\t            if (key.indexOf('.') === -1) {\n\t              // TODO: when we allow reuse of viewPanels, the view panel should not be the active view panel\n\t              //      because this fisViewPanel directive will occur multiple times in the dom (once for each tab).\n\t              //      If we leave it like that, all strings of all views will get changed each time the active view is changed.\n\t              var view = $scope.activeViewPanel();\n\t              if (view) {\n\t                key = [view.module, view.id, key];\n\t              }\n\t            }\n\t            return fisI18nService.translate(key, def);\n\t          }\n\t        };\n\t        // Un-subscribing shell.i18nReady event\n\t        unsubscribe();\n\t      });\n\t\n\t      $scope.setTitle = function (value) {\n\t        $scope.activeViewPanel().setTitle(value);\n\t      };\n\t\n\t      $scope.resetTitle = function () {\n\t        $scope.activeViewPanel().resetTitle();\n\t      };\n\t\n\t      $scope.setIcon = function (value) {\n\t        $scope.activeViewPanel().setIcon(value);\n\t      };\n\t\n\t      if ($attrs.fisStacked && $attrs.fisStacked === 'false') {\n\t        $scope.fisStacked = false;\n\t      } else {\n\t        $scope.fisStacked = true;\n\t      }\n\t    }],\n\t    template: '<div fis-message-container>\\n                  <div class=\"fis-info-panel\"></div>\\n                  <div ng-repeat=\"panel in panels\" class=\"fis-panel-container ng-hide\" fis-element=\"panel\" fis-pub-sub></div>\\n                  <div class=\"default-panel\"></div>\\n                </div>',\n\t    link: function link(scope, element, attrs) {\n\t      // the default panel is used if none of the provided panels are selected or if no panels are provided\n\t      var defaultPanel;\n\t      // the previously selected panel\n\t      var lastSelectedPanel;\n\t      // expression to evaluate when contents is loaded\n\t      var onloadExp = attrs.fisOnLoad || '';\n\t      var updateTimeout;\n\t      // start with no panels\n\t      scope.panels = undefined;\n\t\n\t      function matchingPathParams(currentParams, panelParams) {\n\t        if (Object.keys(currentParams).length > 0) {\n\t          for (var prop in currentParams) {\n\t            if (currentParams[prop] != panelParams[prop]) {\n\t              // eslint-disable-line\n\t              return false;\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t\n\t      function updatePanel(panel) {\n\t        lastSelectedPanel = panel;\n\t        // we need the current route...\n\t        var current = $route.current;\n\t        // and the current route's local variables\n\t        var locals = current && current.locals;\n\t        // and the template for that route\n\t        var template = locals && locals.$template;\n\t\n\t        var activePanel = scope.activeViewPanel();\n\t\n\t        if (current && current.templateUrl && activePanel && current.templateUrl.indexOf(activePanel.partial) !== -1 && matchingPathParams(current.pathParams, activePanel.params)) {\n\t          // if the selected panel is for the current route, simply unfreeze its scope\n\t          if (current && panel.$route && panel.$route.originalPath === current.$$route.originalPath) {\n\t            // detach the scope from the scope hierarchy\n\t            panel.$scope.$freeze(false);\n\t            // panel already loaded, just broadcast it\n\t            panel.$scope.$broadcast('$panelContentLoaded');\n\t          } else if (template) {\n\t            // The panel is not for the current route, replace its contents with the route's template\n\t            // Clear the contents of the selected panel\n\t            clearContent(panel, false);\n\t            // associate with the current route\n\t            panel.$route = current.$$route;\n\t            // make the route template the panel's content in an animatable way\n\t            $animate.enter(angular.element('<div></div>').html(template).contents(), panel.$element);\n\t\n\t            // compile the panel's content\n\t            var link = $compile(panel.$element.contents());\n\t            var controller;\n\t            // grab a hold of the scope that the ng-repeat created for the panel div\n\t            var repeatScope = panel.$element.scope();\n\t            // create a child scope and make it freezable\n\t            panel.$scope = current.scope = makeFreezable(repeatScope.$new());\n\t            // if args are present in the item, make it available on the scope as viewArgs\n\t            if (panel.args) {\n\t              panel.$scope.viewArgs = panel.args;\n\t            }\n\t\n\t            // if the current route declares a controller\n\t            if (current.controller) {\n\t              // add the current panel's scope to the route's local variables\n\t              locals.$scope = panel.$scope;\n\t              // add the panel's element to the route's local variables\n\t              locals.$element = panel.$element;\n\t              // create the controller with the injectable locals\n\t              controller = $controller(current.controller, locals);\n\t              // attach to the panel\n\t              panel.$element.children().data('$ngControllerController', controller);\n\t            }\n\t\n\t            // link the compiled contents with the panel's scope\n\t            link(panel.$scope);\n\t            // emit the $viewContentLoaded event like ng-view does\n\t            panel.$scope.$emit('$viewContentLoaded');\n\t\n\t            // execute the onload handler\n\t            panel.$scope.$eval(onloadExp);\n\t\n\t            // $anchorScroll might listen on event...\n\t            $anchorScroll();\n\t          } else if (panel.$scope && panel.args.targetScope.location.$$url) {\n\t            // check for presence of scope.alert and scope.open: these are defined in the shell\n\t            // and this could be used outside the shell since it is in fis-components.\n\t            // no template for this route, display relevant message alert box (if a message is available)\n\t            var msg;\n\t            if (scope.alert && (msg = fisI18nService.translate('error-path-not-found', ''))) {\n\t              scope.alert(msg, { title: fisI18nService.translate('error-dialog-title') });\n\t            }\n\t            // open the last open panel\n\t            if (scope.open) {\n\t              scope.open(lastSelectedPanel.path);\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      function update() {\n\t        // find the selected panel\n\t        var panel = getSelectedPanel();\n\t        // ensure we are not dealing with a lastSelectedPanel that was destroyed\n\t        // this can happen when switching menus\n\t        if (lastSelectedPanel && lastSelectedPanel.$scope && lastSelectedPanel.$scope.$$fisGC) {\n\t          // the scope (and therefore the panel) was destroyed. Lose the references\n\t          clearContent(lastSelectedPanel, true);\n\t          lastSelectedPanel = null;\n\t        }\n\t\n\t        if (lastSelectedPanel !== panel) {\n\t          // eslint-disable-line\n\t          // we are changing panel, or the last panel was destroyed...\n\t          if (lastSelectedPanel) {\n\t            // hide the previous one if it still exists\n\t            $animate.addClass(lastSelectedPanel.$element, 'ng-hide');\n\t            lastSelectedPanel.$element.removeClass('fis-selected');\n\t\n\t            if (lastSelectedPanel.saveState === false) {\n\t              // View doesn't want state saving. Destroy the scope.\n\t              clearContent(lastSelectedPanel, false);\n\t            } else if (lastSelectedPanel.$scope) {\n\t              // freeze the scope on the previous panel\n\t              // scope may not be there for nav item without partial and secondary menu\n\t              lastSelectedPanel.$scope.$freeze(true);\n\t            }\n\t          }\n\t          // show the selected one\n\t          if (panel.$element) {\n\t            $animate.removeClass(panel.$element, 'ng-hide').then(function () {\n\t              panel.$element.addClass('fis-selected');\n\t              if (updateTimeout) {\n\t                $timeout.cancel(updateTimeout);\n\t              }\n\t              updateTimeout = $timeout(function () {\n\t                updatePanel(panel);\n\t              }, 0);\n\t            });\n\t          }\n\t        } else {\n\t          updatePanel(panel);\n\t        }\n\t      }\n\t\n\t      // This function is invoked when a panel is already opened but\n\t      // the route it is currently associated to needs to change\n\t      function clearContent(panel, removeElementRef) {\n\t        // remove the contents, if any, in an animatable way\n\t        var contents = panel.$element.contents();\n\t\n\t        if (contents.length > 0) {\n\t          $animate.leave(contents);\n\t        }\n\t\n\t        if (panel.$scope) {\n\t          // destroy the scope associated to the panel's content\n\t          panel.$scope.$destroy();\n\t          // make sure we don't keep a reference on it for GC\n\t          panel.$scope = null;\n\t          // make sure no route is associated to this panel\n\t          panel.$route = null;\n\t          // make sure no element is associated to this panel\n\t          if (removeElementRef) {\n\t            panel.$element = null;\n\t          }\n\t        }\n\t      }\n\t\n\t      function getSelectedPanel() {\n\t        if (angular.isNumber(scope.selectedIndex) && scope.selectedIndex !== -1) {\n\t          return scope.panels[scope.selectedIndex];\n\t        }\n\t\n\t        return getDefaultPanel();\n\t      }\n\t\n\t      function getDefaultPanel() {\n\t        if (!defaultPanel) {\n\t          // initialize default panel since we need it.\n\t          defaultPanel = {};\n\t          defaultPanel.$element = angular.element(element[0].getElementsByClassName('default-panel')[0]);\n\t        }\n\t        return defaultPanel;\n\t      }\n\t\n\t      if (scope.fisStacked && attrs.fisViews && attrs.fisSelectedIndex) {\n\t        // if a fisViews attribute is provided, operate in state preservation mode\n\t        scope.$watchCollection(attrs.fisViews, function (value) {\n\t          // don't need to find out what was added; scopes will be added if selected and a route is followed\n\t          scope.panels = value;\n\t        });\n\t        scope.$watch(attrs.fisSelectedIndex, function (idx) {\n\t          scope.selectedIndex = idx;\n\t        });\n\t      }\n\t\n\t      element.addClass('fis-view-panel');\n\t\n\t      scope.$on('$routeChangeSuccess', update);\n\t    }\n\t  };\n\t}];\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = 'ngResource';\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = 'ngRoute';\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = 'ngSanitize';\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = _;\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = jQuery;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// fis-core-components.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 92d8bbdfc222239413f0","'use strict';\n\nrequire('jquery');\n\nrequire('angular');\n\nvar _angularSanitize = require('angular-sanitize');\n\nvar _angularSanitize2 = _interopRequireDefault(_angularSanitize);\n\nvar _angularResource = require('angular-resource');\n\nvar _angularResource2 = _interopRequireDefault(_angularResource);\n\nvar _angularAnimate = require('angular-animate');\n\nvar _angularAnimate2 = _interopRequireDefault(_angularAnimate);\n\nrequire('./fis');\n\nrequire('./fis-angular-decorators');\n\nvar _hook = require('./hook');\n\nvar _hook2 = _interopRequireDefault(_hook);\n\nvar _data = require('./data');\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _directives = require('./directives');\n\nvar _directives2 = _interopRequireDefault(_directives);\n\nvar _filters = require('./filters');\n\nvar _filters2 = _interopRequireDefault(_filters);\n\nvar _i18n = require('./i18n');\n\nvar _i18n2 = _interopRequireDefault(_i18n);\n\nvar _pubsub = require('./pubsub');\n\nvar _pubsub2 = _interopRequireDefault(_pubsub);\n\nvar _services = require('./services');\n\nvar _services2 = _interopRequireDefault(_services);\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _views = require('./views');\n\nvar _views2 = _interopRequireDefault(_views);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = angular.module('fis.core', [_angularAnimate2.default, _angularSanitize2.default, _angularResource2.default, _hook2.default, _data2.default, _directives2.default, _filters2.default, _i18n2.default, _pubsub2.default, _services2.default, _utils2.default, _views2.default]);\n\n// for backward compatibility\n// making sure jquery gets loaded before angular\nangular.module('fisComponents', [ngModule.name]);\n\nif (TEST) {\n  // eslint-disable-line\n  require('jasmine-jquery');\n  require('jasmine-ajax');\n  require('angular-mocks');\n  require('@ruf/fis-mocks');\n}\n\n// SDHTML-14222: provide ability to disable angular's debug info while preserving the element.scope function.\n// Code taken from angular's source\nngModule.decorator('$compile', ['$delegate', function ($delegate) {\n  $delegate.$$addScopeInfo = function $$addScopeInfo($element, scope, isolated, noTemplate) {\n    var dataName = isolated ? noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope' : '$scope';\n    $element.data(dataName, scope);\n  };\n\n  return $delegate;\n}]);\n\n// create an empty controllerArr here, so that any module that has to register a controller can push it to this array\n// TODO: find where this is needed and move this code there.\nngModule.run(['$rootScope', function ($rootScope) {\n  $rootScope.controllersArr = [];\n}]);\n\n/**\r\n * This fix moved from fisInput to prevent multiple invocations of this fix - shown cause memory leak otherwise.\r\n *\r\n * IE specific fix, IE triggering validation on Focus of inputs\r\n * If a placeholder is defined on an input element IE10 fires this event when\r\n * the placeholder is set during DOM loading and when it is removed when the user clicks into the input field so that error messages\r\n * which depend on the pristine condition are displayed although the user has not yet modified the input's value.\r\n */\nngModule.run(['$sniffer', function ($sniffer) {\n  var msie = parseInt((/msie (\\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1], 10);\n  var _hasEvent = $sniffer.hasEvent;\n  $sniffer.hasEvent = function (event) {\n    if (event === 'input' && msie === 10) {\n      return false;\n    }\n    return _hasEvent.call(this, event);\n  };\n}]);\n\nmodule.exports = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./index.js","import 'jquery'; // making sure jquery gets loaded before angular\r\nimport 'angular';\r\nimport ngSanitize from 'angular-sanitize';\r\nimport ngResource from 'angular-resource';\r\nimport ngAnimate from 'angular-animate';\r\n\r\nimport './fis';\r\nimport './fis-angular-decorators';\r\nimport hook from './hook';\r\nimport data from './data';\r\nimport directives from './directives';\r\nimport filters from './filters';\r\nimport i18n from './i18n';\r\nimport pubsub from './pubsub';\r\nimport services from './services';\r\nimport utils from './utils';\r\nimport views from './views';\r\n\r\nconst ngModule = angular.module('fis.core', [\r\n  ngAnimate,\r\n  ngSanitize,\r\n  ngResource,\r\n  hook,\r\n  data,\r\n  directives,\r\n  filters,\r\n  i18n,\r\n  pubsub,\r\n  services,\r\n  utils,\r\n  views\r\n]);\r\n\r\n// for backward compatibility\r\nangular.module('fisComponents', [ngModule.name]);\r\n\r\nif (TEST) { // eslint-disable-line\r\n  require('jasmine-jquery');\r\n  require('jasmine-ajax');\r\n  require('angular-mocks');\r\n  require('@ruf/fis-mocks');\r\n}\r\n\r\n// SDHTML-14222: provide ability to disable angular's debug info while preserving the element.scope function.\r\n// Code taken from angular's source\r\nngModule.decorator('$compile', ['$delegate', function ($delegate) {\r\n  $delegate.$$addScopeInfo = function $$addScopeInfo($element, scope, isolated, noTemplate) {\r\n    let dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';\r\n    $element.data(dataName, scope);\r\n  };\r\n\r\n  return $delegate;\r\n}]);\r\n\r\n// create an empty controllerArr here, so that any module that has to register a controller can push it to this array\r\n// TODO: find where this is needed and move this code there.\r\nngModule.run(['$rootScope', function ($rootScope) {\r\n  $rootScope.controllersArr = [];\r\n}]);\r\n\r\n/**\r\n * This fix moved from fisInput to prevent multiple invocations of this fix - shown cause memory leak otherwise.\r\n *\r\n * IE specific fix, IE triggering validation on Focus of inputs\r\n * If a placeholder is defined on an input element IE10 fires this event when\r\n * the placeholder is set during DOM loading and when it is removed when the user clicks into the input field so that error messages\r\n * which depend on the pristine condition are displayed although the user has not yet modified the input's value.\r\n */\r\nngModule.run(['$sniffer', function ($sniffer) {\r\n  var msie = parseInt((/msie (\\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1], 10);\r\n  var _hasEvent = $sniffer.hasEvent;\r\n  $sniffer.hasEvent = function (event) {\r\n    if (event === 'input' && msie === 10) {\r\n      return false;\r\n    }\r\n    return _hasEvent.call(this, event);\r\n  };\r\n}]);\r\n\r\nmodule.exports = ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","module.exports = angular;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 1\n// module chunks = 0","module.exports = 'ngAnimate';\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"'ngAnimate'\"\n// module id = 2\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var self = this;\n\n  self.$get = ['typeBasedConstraints', function (typeBasedConstraints) {\n    var constraintsFactory = {};\n\n    constraintsFactory.getConstraintsByType = function (type) {\n      var result = typeBasedConstraints[type];\n      if (angular.isDefined(result)) {\n        return result;\n      }\n      return typeBasedConstraints.string;\n    };\n\n    return constraintsFactory;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./data/constraints-factory.provider.js","export default function () {\r\n  var self = this;\r\n\r\n  self.$get = ['typeBasedConstraints', function (typeBasedConstraints) {\r\n    var constraintsFactory = {};\r\n\r\n    constraintsFactory.getConstraintsByType = function (type) {\r\n      var result = typeBasedConstraints[type];\r\n      if (angular.isDefined(result)) {\r\n        return result;\r\n      }\r\n      return typeBasedConstraints.string;\r\n    };\r\n\r\n    return constraintsFactory;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./data/constraints-factory.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'use strict';\n\n  function toInt(str) {\n    return parseInt(str, 10);\n  }\n\n  function parseISODate(value) {\n    var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n    var match;\n    if (match = value.match(R_ISO8601_STR)) {\n      var date = new Date(0);\n      var tzHour = 0;\n      var tzMin = 0;\n      var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n      var timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n      if (match[9]) {\n        tzHour = toInt(match[9] + match[10]);\n        tzMin = toInt(match[9] + match[11]);\n      }\n      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n      var h = toInt(match[4] || 0) - tzHour;\n      var m = toInt(match[5] || 0) - tzMin;\n      var s = toInt(match[6] || 0);\n      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n      timeSetter.call(date, h, m, s, ms);\n      return date;\n    }\n    return value;\n  }\n\n  var self = this;\n\n  self.$get = [function () {\n    var service = {};\n\n    service.operators = ['and', 'or'];\n    service.operators.AND = service.operators[0];\n    service.operators.OR = service.operators[1];\n\n    service.constraints = ['eq', 'contains', 'ne', 'gt', 'ge', 'lt', 'le', 'startswith', 'endswith', 'is_null', 'not_contains', 'not_endswith', 'not_null', 'in_rel_range', 'not_in_rel_range', 'in_future', 'in_past', 'is_between', 'not_is_between', 'in', 'not_in', 'is_empty', 'not_empty', 'not_startswith'];\n    service.constraints.EQ = service.constraints[0];\n    service.constraints.CONTAINS = service.constraints[1];\n    service.constraints.NE = service.constraints[2];\n    service.constraints.GT = service.constraints[3];\n    service.constraints.GE = service.constraints[4];\n    service.constraints.LT = service.constraints[5];\n    service.constraints.LE = service.constraints[6];\n    service.constraints.STARTS_WITH = service.constraints[7];\n    service.constraints.ENDS_WITH = service.constraints[8];\n    service.constraints.IS_NULL = service.constraints[9];\n    service.constraints.NOT_CONTAINS = service.constraints[10];\n    service.constraints.NOT_ENDS_WITH = service.constraints[11];\n    service.constraints.NOT_NULL = service.constraints[12];\n    service.constraints.IN_REL_RANGE = service.constraints[13];\n    service.constraints.NOT_IN_REL_RANGE = service.constraints[14];\n    service.constraints.IN_FUTURE = service.constraints[15];\n    service.constraints.IN_PAST = service.constraints[16];\n    service.constraints.BETWEEN = service.constraints[17];\n    service.constraints.NOT_BETWEEN = service.constraints[18];\n    service.constraints.IN = service.constraints[19];\n    service.constraints.NOT_IN = service.constraints[20];\n    service.constraints.IS_EMPTY = service.constraints[21];\n    service.constraints.NOT_EMPTY = service.constraints[22];\n    service.constraints.NOT_STARTS_WITH = service.constraints[23];\n\n    var constraintsWithoutValue = [service.constraints.IS_EMPTY, service.constraints.NOT_EMPTY, service.constraints.IS_NULL, service.constraints.NOT_NULL];\n\n    function Criteria(operator) {\n      if (angular.isString(operator)) {\n        this.operator = operator || service.operators.AND;\n        this.operands = [];\n      } else if (angular.isObject(operator)) {\n        var jsonObj = operator;\n        var currentOperator = service.operators.AND;\n        if (jsonObj.operator) {\n          currentOperator = jsonObj.operator;\n        }\n        if (service.operators.indexOf(currentOperator) === -1) {\n          throw new Error('Invalid operator : ' + currentOperator);\n        }\n\n        var newCrit = service.newCriteria(currentOperator);\n\n        if (angular.isArray(jsonObj.operands)) {\n          completeCriteriaFromOperands(jsonObj.operands, newCrit);\n        }\n\n        return newCrit;\n      }\n    }\n\n    function completeCriteriaFromOperands(inputoperands, origCrit) {\n      for (var i = 0; i < inputoperands.length; i++) {\n        var operand = inputoperands[i];\n        if (operand.operator) {\n          var newCrit = service.newCriteria(operand.operator);\n          if (operand.operands) {\n            completeCriteriaFromOperands(operand.operands, newCrit);\n            origCrit.add(newCrit);\n          }\n        } else {\n          origCrit.add(new service.Criterion(operand.property, operand.value, operand.constraint, operand.type, operand.skipValidation));\n        }\n      }\n    }\n\n    Criteria.prototype.setOperator = function (operator) {\n      if (service.operators.indexOf(operator) === -1) {\n        throw new Error('Invalid operator : ' + operator);\n      }\n      this.operator = operator;\n      return this;\n    };\n\n    Criteria.prototype.add = function (operand) {\n      operand.validate();\n      this.operands.push(operand);\n      return this;\n    };\n\n    Criteria.prototype.setOperands = function (operands) {\n      this.operands = operands;\n      return this;\n    };\n\n    Criteria.prototype.isValid = function (isChild) {\n      if (service.operators.indexOf(this.operator) === -1) {\n        return false;\n      }\n      if (isChild && this.operands.length === 0) {\n        return false;\n      }\n      for (var i = 0; i < this.operands.length; i++) {\n        var operand = this.operands[i];\n        if (!angular.isUndefined(operand.skipValidation) && !operand.skipValidation && !operand.isValid(true)) {\n          return false;\n        }\n        var j = i + 1;\n        var nextOperand = this.operands[j];\n        if (nextOperand) {\n          if (!angular.isUndefined(nextOperand.skipValidation) && !nextOperand.skipValidation && !nextOperand.isValid(true)) {\n            return false;\n          }\n          if (service.operators.indexOf(this.operator) === -1) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n\n    Criteria.prototype.validate = function () {\n      if (!this.isValid()) {\n        throw new Error('Invalid Criteria: ' + this);\n      }\n    };\n\n    Criteria.prototype.validateWithoutError = function () {\n      console.warn('DEPRECATED: Criteria.validateWithoutError. Use Criteria.isValid.');\n      return this.isValid();\n    };\n\n    Criteria.prototype.toString = function () {\n      var crit = this.getAsString();\n      var finalCrit = '';\n      if (crit) {\n        finalCrit = crit.substring(1);\n        finalCrit = finalCrit.substring(0, finalCrit.length - 1);\n      }\n      return finalCrit;\n    };\n\n    Criteria.prototype.getAsString = function () {\n      var crit = '(';\n      for (var i = 0; i < this.operands.length; i++) {\n        var operand = this.operands[i];\n        crit += operand.getAsString();\n        var j = i + 1;\n        var next = this.operands[j];\n        if (next) {\n          crit += ' ';\n          crit += this.operator;\n          crit += ' ';\n        }\n      }\n      crit += ')';\n\n      return crit;\n    };\n\n    function isNumber(value) {\n      return !isNaN(parseFloat(value)) && isFinite(value);\n    }\n\n    function isValidValue(value, constraint, type) {\n      if ((angular.isUndefined(value) || value === '') && value !== 0) {\n        if (constraintsWithoutValue.indexOf(constraint) === -1) {\n          return false;\n        }\n        return true;\n      } else if (constraintsWithoutValue.indexOf(constraint) > -1) {\n        return false;\n      }\n\n      if ((type === 'integer' || type === 'number' || type === 'double') && !isNumber(value)) {\n        return false;\n      }\n      if (type === 'date' || type === 'datetime' || type === 'time') {\n        if (!value.toISOString) {\n          try {\n            new Date(value).toISOString();\n          } catch (e) {\n            // SDHTML-13812 - IE javascript engine cannot parse date in '2016-06-06T00:16:07+0000' format\n            value = parseISODate(value);\n            if (!angular.isUndefined(value)) {\n              try {\n                return Boolean(angular.isDate(value) ? value.toISOString() : new Date(value).toISOString());\n              } catch (e) {\n                return false;\n              }\n            }\n            return false;\n          }\n        }\n      }\n      if (type === 'boolean') {\n        if (typeof value !== 'boolean' && value !== 'true' && value !== 'false') {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    // criterion object\n    function Criterion(property, value, constraint, type, skipValidation) {\n      this.property = property || null;\n      this.value = angular.isUndefined(value) ? '' : value;\n      this.constraint = constraint || service.constraints.EQ;\n      this.type = type;\n      this.skipValidation = skipValidation;\n    }\n\n    function marshallValue(value, type) {\n      if (type === 'integer' || type === 'boolean' || type && type.substring(0, 6) === 'double' || type === 'number') {\n        return value;\n      }\n      if (type === 'date' || type === 'datetime' || type === 'time') {\n        if (!value.toISOString) {\n          /* eslint-disable no-negated-condition */\n          if (!isNaN(Date.parse(value))) {\n            value = new Date(value);\n          } else {\n            // SDHTML-13812 - IE javascript engine cannot parse date in '2016-06-06T00:16:07+0000' format\n            value = parseISODate(value);\n          }\n          /* eslint-enable no-negated-condition */\n        }\n        return 'datetime\\'' + value.toISOString() + '\\'';\n      }\n      return '\\'' + value.toString().replace(/'/g, '\\'\\'') + '\\'';\n    }\n\n    Criterion.prototype.getAsString = function () {\n      // var spaceWithStarIfCaseInsensitive = this.ignoreCase ? '' : '*';\n      var result = '';\n      switch (this.constraint) {\n        case 'startswith':\n        case 'endswith':\n          result = this.constraint + '(' + this.property + ',' + marshallValue(this.value, this.type) + ')';\n          break;\n        case 'not_startswith':\n        case 'not_endswith':\n          result = 'not ' + this.constraint.substring(this.constraint.indexOf('_') + 1) + '(' + this.property + ',' + marshallValue(this.value, this.type) + ')';\n          break;\n        case 'contains':\n          result = 'substringof(' + marshallValue(this.value, this.type) + ',' + this.property + ') eq true';\n          break;\n        case 'not_contains':\n          result = 'substringof(' + marshallValue(this.value, this.type) + ',' + this.property + ') eq false';\n          break;\n        case 'is_null':\n          result = this.property + ' eq null';\n          break;\n        case 'not_null':\n          result = this.property + ' ne null';\n          break;\n        case 'is_empty':\n          result = this.property + ' eq \\'\\'';\n          break;\n        case 'not_empty':\n          result = this.property + ' ne \\'\\'';\n          break;\n        default:\n          if (this.skipValidation || service.constraints.indexOf(this.constraint) < 0) {\n            result = this.property + ' ' + this.constraint + ' ' + this.value;\n          } else {\n            result = this.property + ' ' + this.constraint + ' ' + marshallValue(this.value, this.type);\n          }\n      }\n      return result;\n    };\n\n    Criterion.prototype.isValid = function () {\n      if (!this.property || service.constraints.indexOf(this.constraint) === -1 || !isValidValue(this.value, this.constraint, this.type)) {\n        return false;\n      }\n      return true;\n    };\n\n    Criterion.prototype.validate = function () {\n      if (!angular.isUndefined(this.skipValidation) && !this.skipValidation && !this.isValid()) {\n        throw new Error('Invalid Criterion: ' + this);\n      }\n    };\n\n    Criterion.prototype.validateWithoutError = function () {\n      console.warn('DEPRECATED: Criterion.validateWithoutError. Use Criterion.isValid.');\n      return this.isValid();\n    };\n\n    Criterion.prototype.setProperty = function (property) {\n      if (!property) {\n        throw new Error('Invalid property');\n      }\n      this.property = property;\n      return this;\n    };\n\n    Criterion.prototype.setValue = function (value) {\n      this.value = value;\n      return this;\n    };\n\n    Criterion.prototype.setConstraint = function (constraint) {\n      if (service.constraints.indexOf(constraint) === -1) {\n        throw new Error('Invalid constraint : ' + constraint);\n      }\n      this.constraint = constraint;\n      return this;\n    };\n\n    service.newCriteria = function (operator) {\n      if (!operator) {\n        operator = service.operators.AND;\n      }\n      if (angular.isString(operator)) {\n        if (service.operators.indexOf(operator) === -1) {\n          throw new Error('Invalid operator : ' + operator);\n        }\n      }\n      return new Criteria(operator);\n    };\n\n    service.Criteria = Criteria;\n    service.Criterion = Criterion;\n\n    return service;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./data/criteria-service.provider.js","/* jshint maxcomplexity:9*/\r\nexport default function () {\r\n  'use strict';\r\n  function toInt(str) {\r\n    return parseInt(str, 10);\r\n  }\r\n\r\n  function parseISODate(value) {\r\n    var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\r\n    var match;\r\n    if ((match = value.match(R_ISO8601_STR))) {\r\n      var date = new Date(0);\r\n      var tzHour = 0;\r\n      var tzMin = 0;\r\n      var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\r\n      var timeSetter = match[8] ? date.setUTCHours : date.setHours;\r\n\r\n      if (match[9]) {\r\n        tzHour = toInt(match[9] + match[10]);\r\n        tzMin = toInt(match[9] + match[11]);\r\n      }\r\n      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\r\n      var h = toInt(match[4] || 0) - tzHour;\r\n      var m = toInt(match[5] || 0) - tzMin;\r\n      var s = toInt(match[6] || 0);\r\n      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\r\n      timeSetter.call(date, h, m, s, ms);\r\n      return date;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  var self = this;\r\n\r\n  self.$get = [function () {\r\n    var service = {};\r\n\r\n    service.operators = ['and', 'or'];\r\n    service.operators.AND = service.operators[0];\r\n    service.operators.OR = service.operators[1];\r\n\r\n    service.constraints = ['eq', 'contains', 'ne', 'gt', 'ge', 'lt', 'le', 'startswith',\r\n                'endswith', 'is_null', 'not_contains', 'not_endswith', 'not_null', 'in_rel_range',\r\n                'not_in_rel_range', 'in_future', 'in_past', 'is_between', 'not_is_between', 'in', 'not_in',\r\n                'is_empty', 'not_empty', 'not_startswith'];\r\n    service.constraints.EQ = service.constraints[0];\r\n    service.constraints.CONTAINS = service.constraints[1];\r\n    service.constraints.NE = service.constraints[2];\r\n    service.constraints.GT = service.constraints[3];\r\n    service.constraints.GE = service.constraints[4];\r\n    service.constraints.LT = service.constraints[5];\r\n    service.constraints.LE = service.constraints[6];\r\n    service.constraints.STARTS_WITH = service.constraints[7];\r\n    service.constraints.ENDS_WITH = service.constraints[8];\r\n    service.constraints.IS_NULL = service.constraints[9];\r\n    service.constraints.NOT_CONTAINS = service.constraints[10];\r\n    service.constraints.NOT_ENDS_WITH = service.constraints[11];\r\n    service.constraints.NOT_NULL = service.constraints[12];\r\n    service.constraints.IN_REL_RANGE = service.constraints[13];\r\n    service.constraints.NOT_IN_REL_RANGE = service.constraints[14];\r\n    service.constraints.IN_FUTURE = service.constraints[15];\r\n    service.constraints.IN_PAST = service.constraints[16];\r\n    service.constraints.BETWEEN = service.constraints[17];\r\n    service.constraints.NOT_BETWEEN = service.constraints[18];\r\n    service.constraints.IN = service.constraints[19];\r\n    service.constraints.NOT_IN = service.constraints[20];\r\n    service.constraints.IS_EMPTY = service.constraints[21];\r\n    service.constraints.NOT_EMPTY = service.constraints[22];\r\n    service.constraints.NOT_STARTS_WITH = service.constraints[23];\r\n\r\n    var constraintsWithoutValue = [service.constraints.IS_EMPTY, service.constraints.NOT_EMPTY,\r\n                service.constraints.IS_NULL, service.constraints.NOT_NULL];\r\n\r\n    function Criteria(operator) {\r\n      if (angular.isString(operator)) {\r\n        this.operator = operator || service.operators.AND;\r\n        this.operands = [];\r\n      } else if (angular.isObject(operator)) {\r\n        var jsonObj = operator;\r\n        var currentOperator = service.operators.AND;\r\n        if (jsonObj.operator) {\r\n          currentOperator = jsonObj.operator;\r\n        }\r\n        if (service.operators.indexOf(currentOperator) === -1) {\r\n          throw new Error('Invalid operator : ' + currentOperator);\r\n        }\r\n\r\n        var newCrit = service.newCriteria(currentOperator);\r\n\r\n        if (angular.isArray(jsonObj.operands)) {\r\n          completeCriteriaFromOperands(jsonObj.operands, newCrit);\r\n        }\r\n\r\n        return newCrit;\r\n      }\r\n    }\r\n\r\n    function completeCriteriaFromOperands(inputoperands, origCrit) {\r\n      for (var i = 0; i < inputoperands.length; i++) {\r\n        var operand = inputoperands[i];\r\n        if (operand.operator) {\r\n          var newCrit = service.newCriteria(operand.operator);\r\n          if (operand.operands) {\r\n            completeCriteriaFromOperands(operand.operands, newCrit);\r\n            origCrit.add(newCrit);\r\n          }\r\n        } else {\r\n          origCrit.add(new service.Criterion(operand.property, operand.value, operand.constraint, operand.type, operand.skipValidation));\r\n        }\r\n      }\r\n    }\r\n\r\n    Criteria.prototype.setOperator = function (operator) {\r\n      if (service.operators.indexOf(operator) === -1) {\r\n        throw new Error('Invalid operator : ' + operator);\r\n      }\r\n      this.operator = operator;\r\n      return this;\r\n    };\r\n\r\n    Criteria.prototype.add = function (operand) {\r\n      operand.validate();\r\n      this.operands.push(operand);\r\n      return this;\r\n    };\r\n\r\n    Criteria.prototype.setOperands = function (operands) {\r\n      this.operands = operands;\r\n      return this;\r\n    };\r\n\r\n    Criteria.prototype.isValid = function (isChild) {\r\n      if (service.operators.indexOf(this.operator) === -1) {\r\n        return false;\r\n      }\r\n      if (isChild && this.operands.length === 0) {\r\n        return false;\r\n      }\r\n      for (var i = 0; i < this.operands.length; i++) {\r\n        var operand = this.operands[i];\r\n        if (!angular.isUndefined(operand.skipValidation) && !operand.skipValidation && !operand.isValid(true)) {\r\n          return false;\r\n        }\r\n        var j = i + 1;\r\n        var nextOperand = this.operands[j];\r\n        if (nextOperand) {\r\n          if (!angular.isUndefined(nextOperand.skipValidation) && !nextOperand.skipValidation && !nextOperand.isValid(true)) {\r\n            return false;\r\n          }\r\n          if (service.operators.indexOf(this.operator) === -1) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    Criteria.prototype.validate = function () {\r\n      if (!this.isValid()) {\r\n        throw new Error('Invalid Criteria: ' + this);\r\n      }\r\n    };\r\n\r\n    Criteria.prototype.validateWithoutError = function () {\r\n      console.warn('DEPRECATED: Criteria.validateWithoutError. Use Criteria.isValid.');\r\n      return this.isValid();\r\n    };\r\n\r\n    Criteria.prototype.toString = function () {\r\n      var crit = this.getAsString();\r\n      var finalCrit = '';\r\n      if (crit) {\r\n        finalCrit = crit.substring(1);\r\n        finalCrit = finalCrit.substring(0, finalCrit.length - 1);\r\n      }\r\n      return finalCrit;\r\n    };\r\n\r\n    Criteria.prototype.getAsString = function () {\r\n      var crit = '(';\r\n      for (var i = 0; i < this.operands.length; i++) {\r\n        var operand = this.operands[i];\r\n        crit += operand.getAsString();\r\n        var j = i + 1;\r\n        var next = this.operands[j];\r\n        if (next) {\r\n          crit += ' ';\r\n          crit += this.operator;\r\n          crit += ' ';\r\n        }\r\n      }\r\n      crit += ')';\r\n\r\n      return crit;\r\n    };\r\n\r\n    function isNumber(value) {\r\n      return !isNaN(parseFloat(value)) && isFinite(value);\r\n    }\r\n\r\n    function isValidValue(value, constraint, type) {\r\n      if ((angular.isUndefined(value) || value === '') && value !== 0) {\r\n        if (constraintsWithoutValue.indexOf(constraint) === -1) {\r\n          return false;\r\n        }\r\n        return true;\r\n      } else if (constraintsWithoutValue.indexOf(constraint) > -1) {\r\n        return false;\r\n      }\r\n\r\n      if ((type === 'integer' || type === 'number' || type === 'double') && !isNumber(value)) {\r\n        return false;\r\n      }\r\n      if (type === 'date' || type === 'datetime' || type === 'time') {\r\n        if (!value.toISOString) {\r\n          try {\r\n            new Date(value).toISOString();\r\n          } catch (e) {\r\n            // SDHTML-13812 - IE javascript engine cannot parse date in '2016-06-06T00:16:07+0000' format\r\n            value = parseISODate(value);\r\n            if (!angular.isUndefined(value)) {\r\n              try {\r\n                return Boolean(angular.isDate(value) ? value.toISOString() : new Date(value).toISOString());\r\n              } catch (e) {\r\n                return false;\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      if (type === 'boolean') {\r\n        if (typeof (value) !== 'boolean' && (value !== 'true' && value !== 'false')) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // criterion object\r\n    function Criterion(property, value, constraint, type, skipValidation) {\r\n      this.property = property || null;\r\n      this.value = angular.isUndefined(value) ? '' : value;\r\n      this.constraint = constraint || service.constraints.EQ;\r\n      this.type = type;\r\n      this.skipValidation = skipValidation;\r\n    }\r\n\r\n    function marshallValue(value, type) {\r\n      if (type === 'integer' || type === 'boolean' || (type && type.substring(0, 6) === 'double') || type === 'number') {\r\n        return value;\r\n      }\r\n      if (type === 'date' || type === 'datetime' || type === 'time') {\r\n        if (!value.toISOString) {\r\n          /* eslint-disable no-negated-condition */\r\n          if (!isNaN(Date.parse(value))) {\r\n            value = new Date(value);\r\n          } else {\r\n            // SDHTML-13812 - IE javascript engine cannot parse date in '2016-06-06T00:16:07+0000' format\r\n            value = parseISODate(value);\r\n          }\r\n          /* eslint-enable no-negated-condition */\r\n        }\r\n        return 'datetime\\'' + value.toISOString() + '\\'';\r\n      }\r\n      return '\\'' + value.toString().replace(/'/g, '\\'\\'') + '\\'';\r\n    }\r\n\r\n    Criterion.prototype.getAsString = function () {\r\n      // var spaceWithStarIfCaseInsensitive = this.ignoreCase ? '' : '*';\r\n      var result = '';\r\n      switch (this.constraint) {\r\n        case 'startswith':\r\n        case 'endswith':\r\n          result = this.constraint + '(' + this.property + ',' + marshallValue(this.value, this.type) + ')';\r\n          break;\r\n        case 'not_startswith':\r\n        case 'not_endswith':\r\n          result = 'not ' + this.constraint.substring(this.constraint.indexOf('_') + 1) + '(' + this.property + ',' + marshallValue(this.value, this.type) + ')';\r\n          break;\r\n        case 'contains':\r\n          result = 'substringof(' + marshallValue(this.value, this.type) + ',' + this.property + ') eq true';\r\n          break;\r\n        case 'not_contains':\r\n          result = 'substringof(' + marshallValue(this.value, this.type) + ',' + this.property + ') eq false';\r\n          break;\r\n        case 'is_null':\r\n          result = this.property + ' eq null';\r\n          break;\r\n        case 'not_null':\r\n          result = this.property + ' ne null';\r\n          break;\r\n        case 'is_empty':\r\n          result = this.property + ' eq \\'\\'';\r\n          break;\r\n        case 'not_empty':\r\n          result = this.property + ' ne \\'\\'';\r\n          break;\r\n        default:\r\n          if (this.skipValidation || service.constraints.indexOf(this.constraint) < 0) {\r\n            result = this.property + ' ' + this.constraint + ' ' + this.value;\r\n          } else {\r\n            result = this.property + ' ' + this.constraint + ' ' + marshallValue(this.value, this.type);\r\n          }\r\n      }\r\n      return result;\r\n    };\r\n\r\n    Criterion.prototype.isValid = function () {\r\n      if (!this.property || service.constraints.indexOf(this.constraint) === -1 || !isValidValue(this.value, this.constraint, this.type)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    Criterion.prototype.validate = function () {\r\n      if (!angular.isUndefined(this.skipValidation) && !this.skipValidation && !this.isValid()) {\r\n        throw new Error('Invalid Criterion: ' + this);\r\n      }\r\n    };\r\n\r\n    Criterion.prototype.validateWithoutError = function () {\r\n      console.warn('DEPRECATED: Criterion.validateWithoutError. Use Criterion.isValid.');\r\n      return this.isValid();\r\n    };\r\n\r\n    Criterion.prototype.setProperty = function (property) {\r\n      if (!property) {\r\n        throw new Error('Invalid property');\r\n      }\r\n      this.property = property;\r\n      return this;\r\n    };\r\n\r\n    Criterion.prototype.setValue = function (value) {\r\n      this.value = value;\r\n      return this;\r\n    };\r\n\r\n    Criterion.prototype.setConstraint = function (constraint) {\r\n      if (service.constraints.indexOf(constraint) === -1) {\r\n        throw new Error('Invalid constraint : ' + constraint);\r\n      }\r\n      this.constraint = constraint;\r\n      return this;\r\n    };\r\n\r\n    service.newCriteria = function (operator) {\r\n      if (!operator) {\r\n        operator = service.operators.AND;\r\n      }\r\n      if (angular.isString(operator)) {\r\n        if (service.operators.indexOf(operator) === -1) {\r\n          throw new Error('Invalid operator : ' + operator);\r\n        }\r\n      }\r\n      return new Criteria(operator);\r\n    };\r\n\r\n    service.Criteria = Criteria;\r\n    service.Criterion = Criterion;\r\n\r\n    return service;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./data/criteria-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($parse, $timeout, fisMemoryUtilService) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    require: 'fisData',\n    link: function link(scope, elem, attrs, fisData) {\n      if (angular.isUndefined(attrs.fisDataVar) || attrs.fisDataVar.length === 0) {\n        throw new Error('The fisDataVar attribute must have a value.');\n      }\n\n      var fisDataVarAttr = attrs.fisDataVar;\n\n      var loadData = function loadData(event) {\n        // do not execute the event if event.preventDefault() has been called before\n        if (event && event.defaultPrevented) {\n          return;\n        }\n        var timeout1 = $timeout(function () {\n          var promise = fisData.fetchData();\n          promise.then(function (result) {\n            var dataVar = $parse(fisDataVarAttr);\n            dataVar.assign(scope, result.data);\n          }, function (result) {\n            console.warn('Problem loading data: ' + result);\n          });\n        });\n        fisMemoryUtilService.cancelTimeoutOnDestroy(scope, timeout1, $timeout);\n      };\n\n      // Refresh Event\n      if (angular.isDefined(attrs.fisRefresh)) {\n        scope.$on('fisRefresh', loadData);\n      }\n\n      // Adding listener on fisData, so that data is reloaded when fisData's endPoint changes\n      var dataChangeListener = function dataChangeListener() {\n        loadData();\n      };\n      fisData.addDataChangedListener(dataChangeListener);\n\n      // Does initial call to get data\n      loadData();\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./data/data-var.directive.js","/**\r\n * @name fisDataVar\r\n * @description Directive used to add the payload of a REST call to the current scope\r\n * @methodOf fis.core.directives\r\n */\r\nexport default function ($parse, $timeout, fisMemoryUtilService) {\r\n  'ngInject';\r\n  return {\r\n    restrict: 'A',\r\n    require: 'fisData',\r\n    link: function (scope, elem, attrs, fisData) {\r\n      if (angular.isUndefined(attrs.fisDataVar) || attrs.fisDataVar.length === 0) {\r\n        throw new Error('The fisDataVar attribute must have a value.');\r\n      }\r\n\r\n      var fisDataVarAttr = attrs.fisDataVar;\r\n\r\n      var loadData = function (event) {\r\n                // do not execute the event if event.preventDefault() has been called before\r\n        if (event && event.defaultPrevented) {\r\n          return;\r\n        }\r\n        var timeout1 = $timeout(function () {\r\n          var promise = fisData.fetchData();\r\n          promise.then(\r\n                        function (result) {\r\n                          var dataVar = $parse(fisDataVarAttr);\r\n                          dataVar.assign(scope, result.data);\r\n                        },\r\n                        function (result) {\r\n                          console.warn('Problem loading data: ' + result);\r\n                        }\r\n                    );\r\n        });\r\n        fisMemoryUtilService.cancelTimeoutOnDestroy(scope, timeout1, $timeout);\r\n      };\r\n\r\n            // Refresh Event\r\n      if (angular.isDefined(attrs.fisRefresh)) {\r\n        scope.$on('fisRefresh', loadData);\r\n      }\r\n\r\n            // Adding listener on fisData, so that data is reloaded when fisData's endPoint changes\r\n      var dataChangeListener = function () {\r\n        loadData();\r\n      };\r\n      fisData.addDataChangedListener(dataChangeListener);\r\n\r\n            // Does initial call to get data\r\n      loadData();\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./data/data-var.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (fisResourceService, $q, $parse, fisCriteriaService, fisElementUtils, $interpolate, $timeout, fisUtilService, fisConfig, fisScopeUtils) {\n  'ngInject';\n\n  var queryParameterPrefix = 'fisParam';\n\n  return {\n    restrict: 'A',\n    priority: 600,\n    compile: function compile(elem, attrs) {\n      // Save the original parameter expressions for later if required.\n      // We will need them for interpolating the variable values if we're running in an isolated scope.\n      attrs._paramVariables = fisElementUtils.copyProperties(attrs, queryParameterPrefix, {});\n\n      return function () {};\n    },\n    controller: ['$attrs', '$scope', '$element', function ($attrs, $scope, $element) {\n      var self = this;\n\n      var odataV3Adaptor = $attrs.fisAdaptor === 'odatav3' || fisConfig.dataSourceAdaptor === 'odatav3';\n      function isAlwaysFetch() {\n        return angular.isUndefined($attrs.fisFetchVisibleOnly) || !$attrs.fisFetchVisibleOnly;\n      }\n\n      // Only add the visibility watch when the fetching should depend on the visibility of the component\n      if (!isAlwaysFetch()) {\n        /*\r\n        Adds a watch to the visibility state of the element.\r\n        If the element is made visible and there was a call to fetchData while it was invisible,\r\n        the fetch is executed now.\r\n          scope.allowFetch is used again in fetchData below\r\n          */\n        var watchFn = function watchFn() {\n          $scope.allowFetch = $element.is(':visible');\n\n          if ($scope.allowFetch) {\n            if ($scope.deferred) {\n              $scope.deferred.resolve(self.fetchData($scope.lastParams));\n              $scope.deferred = undefined;\n              $scope.lastParams = undefined;\n            }\n          }\n        };\n        fisScopeUtils.postDigest($scope, function () {\n          return $element.is(':visible');\n        }, watchFn, $timeout, true);\n      }\n\n      if (!$attrs.fisData) {\n        throw new Error('You must provide a value to the fis-data attribute');\n      }\n\n      var functionExpression = $attrs.fisData.indexOf('(') !== -1;\n      var arrayExpression = $attrs.fisData.indexOf('[') !== -1;\n      var objectExpression = $attrs.fisData.indexOf('{') !== -1;\n      var fixedResourceUrl = !functionExpression && !arrayExpression && !objectExpression && $attrs.fisData.indexOf('/') !== -1;\n      var beforeFetchListeners = [];\n      var afterFetchListeners = [];\n      var dataChangedListeners = [];\n\n      var schema = {\n        // the JSON element that contains the array of data items\n        data: $parse($attrs.fisSchemaData)($scope) !== undefined ? $parse($attrs.fisSchemaData)($scope) : $attrs.fisSchemaData, // eslint-disable-line\n        // the JSON element that contains the total number of records in the entire dataset (useful for widgets that support some kind of pagination)\n        total: $attrs.fisSchemaTotal\n      };\n\n      var Resource;\n\n      // TODO: add fisSharedCriteria to allow providing a criteria that multiple widgets can share.\n      //       It will be merged with the Criteria created by the grid (translated from kendo filters)\n      //       before being sent to fetchData in the params: {crit: mergedCriteria}\n      //       This is needed to be able to provide complex search outside of the grid.\n\n      if (!fixedResourceUrl && !functionExpression) {\n        // watch to see if the provided fisData value changes (checking references, not equality).\n        // this is to determine if the fisData will be handling RESTful fetching\n        var fisDataChangeWatch = $scope.$watch($attrs.fisData, function (newVal, oldVal) {\n          if (!newVal) {\n            // $attrs.fisData doesn't resolve to a value. We keep resource as-is.\n            return;\n          }\n          // when the watch is initialized, this function is called with identical newVal and oldVal\n          if (newVal !== oldVal) {\n            // if a String value, the user may have changed the endpoint of the resource\n            Resource = determineResource($attrs, newVal);\n\n            self.fireDataChanged(newVal);\n          }\n        });\n        $scope.$on('$destroy', function () {\n          if (fisDataChangeWatch) {\n            fisDataChangeWatch();\n          }\n        });\n      }\n\n      /**\r\n       * @return Returns the schema object to be used\r\n       */\n      self.getSchema = function () {\n        return schema;\n      };\n\n      /**\r\n       * Can be used by a widget directive to tell that the data has changed and that the underlying dom widget (kendo or other)\r\n       * can be notified of that change and be refreshed accordingly (by invoking fetchData again).\r\n       * Note that fisData will already invoke this if it detects that the reference to the model has changed.\r\n       */\n      self.fireDataChanged = function (data) {\n        invokeListeners(dataChangedListeners, data);\n      };\n\n      /**\r\n       * @returns a promise that will resolve into an object with two properties:\r\n       * The data property will contain an array of objects and the total property will contain the total number\r\n       * of records available in the dataset, if this information is available. This total is used for pagination, so that\r\n       * widgets can calculate the total number of pages.\r\n       */\n      self.fetchData = function (params) {\n        if ($attrs.fisSort) {\n          // check if the attribute specified in fis-sort is assignable (scope object)\n          var fisSort = $parse($attrs.fisSort);\n          if (fisSort.assign && params) {\n            // add params to check to prevent widgets with fis-sort breaking if no params defined for assignable expression\n            // if fis-sort expression is assignable, update the expression whenever user interacts with the grid\n            // (manual sorting by clicking on column headers)\n            var sortExpressionArray = [];\n            if (odataV3Adaptor) {\n              var sortExpr = params.sort;\n              if (sortExpr) {\n                var sortDefs = sortExpr.split(',');\n                angular.forEach(sortDefs, function (sortDef) {\n                  var parts = sortDef.split(' ');\n                  if (parts.length === 2) {\n                    sortExpressionArray.push({ field: parts[0], dir: parts[1] });\n                  }\n                });\n              }\n            } else {\n              angular.forEach(params.sort, function (sortedParam) {\n                // here the param.sort received is in the format [\"fieldName,sortOrder\",\"fieldName,sortOrder\",..]\n                // Convert it to [{field:fieldName, dir:sortOrder},{field:fieldName, dir:sortOrder}..] format\n                var parts = sortedParam.split(',');\n                sortExpressionArray.push({ field: parts[0], dir: parts[1] });\n              });\n            }\n            // Update the fis-sort assignable expression to the changed value\n            fisSort.assign($scope, sortExpressionArray.length === 1 ? sortExpressionArray[0] : sortExpressionArray);\n          }\n        }\n\n        // If not explicitely set to just fetch when visible the fetch function is always called\n        if (!isAlwaysFetch()) {\n          /*\r\n          Only fetch the data when the fetching is allowed (since the element is visible) - otherwise\r\n          enter this if and return just a promise that will be resolved once.\r\n            */\n          if (!$scope.allowFetch) {\n            // Store any provided parameters for later execution\n            $scope.lastParams = params;\n            if ($scope.deferred) {\n              // There is already a deferred execution of fetchData - return a new promise here as the resolution\n              var newDeferred = $q.defer();\n              $scope.deferred.resolve(newDeferred.promise);\n              $scope.deferred = newDeferred;\n            } else {\n              // This is the first call to fetchData since the element is invisible\n              $scope.deferred = $q.defer();\n            }\n\n            // Return just a promise for now - the watch on the visibility will resolve it later\n            return $scope.deferred.promise;\n          }\n        }\n\n        if ($attrs.fisCriteria) {\n          var mergedCriteria;\n          var mergedOperands;\n          var fisCriteria = fisCriteriaService.newCriteria($parse($attrs.fisCriteria)($scope));\n\n          if (params.crit) {\n            mergedOperands = [];\n            fisCriteria.operands.concat(params.crit.operands).forEach(function (operand) {\n              if (mergedOperands.indexOf(operand) === -1) {\n                mergedOperands.push(operand);\n              }\n            });\n            mergedCriteria = angular.extend(fisCriteria, params.crit);\n            mergedCriteria.operands = mergedOperands;\n          } else {\n            mergedCriteria = fisCriteria;\n          }\n          params.crit = mergedCriteria.toString();\n        }\n\n        Resource = determineResource($attrs);\n        invokeListeners(beforeFetchListeners, params);\n\n        params = fisElementUtils.copyProperties($attrs, queryParameterPrefix, params);\n\n        // When running in isolated scope, e.g. in fisGrid, we don't have access to the outer scope.\n        // Someone using a parameter like fis-param-foo=\"{{foo}}\" would need to use {{$parent.foo}}\n        // to escape the isolated scope of fisGrid. To avoid that, we reevaluate the fis-param-*\n        // expressions against the parent scope. This way, the use doesn't need to care whether\n        // the directive uses isolated scope or not.\n        if ($scope.hasOwnProperty('$$isolateBindings') && $scope) {\n          // Loop over the parameter expressions that we saved in the compile function.\n          // The variables are not interpolated at this stage.\n          angular.forEach($attrs._paramVariables, function (val, key) {\n            // Interpolate the variable ourselves using the $interpolate service\n            // We use the parent scope to resolve the variables.\n            var interpolatedValue = $interpolate(val)($scope);\n\n            // Assign the variable to the respective entry in the params object,\n            // overwriting any value that was previously there.\n            params[key] = interpolatedValue;\n          });\n        }\n\n        if (Resource) {\n          return getDataFromResource(params);\n        }\n        // data retrieval is managed externally (could still come from a server)\n        var getter = $parse($attrs.fisData);\n        var promise;\n\n        if (functionExpression) {\n          // function expression\n          // wrap in a promise, chain promises if function also returns a promise\n          promise = $q.when(getter($scope, { params: params })).then(function (data) {\n            var resultData = invokeListeners(afterFetchListeners, normalizeData(data));\n            if (angular.isFunction(schema.data)) {\n              resultData.data = retrieveDataFromSchemaData(data);\n            }\n            return resultData;\n          }, function () {\n            // TODO: define exceptions\n            throw new Error('fisData could not get data from ' + $attrs.fisData);\n          });\n        } else {\n          var scoped = getter($scope);\n          if (angular.isFunction(scoped)) {\n            var result = scoped(params);\n            promise = $q.when(result).then(function (data) {\n              var resultData = invokeListeners(afterFetchListeners, normalizeData(data));\n              if (angular.isFunction(schema.data)) {\n                resultData.data = retrieveDataFromSchemaData(data);\n              }\n              return resultData;\n            }, function () {\n              throw new Error('fisData could not get data from ' + $attrs.fisData);\n            });\n          } else {\n            var deferred = $q.defer();\n            var resultData = invokeListeners(afterFetchListeners, normalizeData(scoped));\n            if (angular.isFunction(schema.data)) {\n              resultData.data = retrieveDataFromSchemaData(scoped);\n            }\n            deferred.resolve(resultData);\n            promise = deferred.promise;\n          }\n        }\n\n        return promise;\n      };\n\n      function retrieveDataFromSchemaData(data) {\n        var resultData = [];\n        var results = schema.data(data);\n        angular.forEach(results, function (item) {\n          resultData.push(item);\n        });\n        return resultData;\n      }\n\n      self.addDataChangedListener = function (listener) {\n        if (dataChangedListeners.indexOf(listener) === -1) {\n          dataChangedListeners.push(listener);\n        }\n        return function () {\n          var idx = dataChangedListeners.indexOf(listener);\n          if (idx !== -1) {\n            dataChangedListeners.splice(idx, 1);\n          }\n        };\n      };\n\n      self.addBeforeFetchListener = function (listener) {\n        if (beforeFetchListeners.indexOf(listener) === -1) {\n          beforeFetchListeners.push(listener);\n        }\n        return function () {\n          var idx = beforeFetchListeners.indexOf(listener);\n          if (idx !== -1) {\n            beforeFetchListeners.splice(idx, 1);\n          }\n        };\n      };\n\n      self.addAfterFetchListener = function (listener) {\n        if (afterFetchListeners.indexOf(listener) === -1) {\n          afterFetchListeners.push(listener);\n        }\n        return function () {\n          var idx = afterFetchListeners.indexOf(listener);\n          if (idx !== -1) {\n            afterFetchListeners.splice(idx, 1);\n          }\n        };\n      };\n\n      function normalizeData(data) {\n        if (data.data) {\n          return data;\n        }\n\n        if (angular.isArray(data)) {\n          if (data.length > 1) {\n            return {\n              data: data\n            };\n          } else if (data.length === 1) {\n            return {\n              data: data,\n              obj: data[0]\n            };\n          }\n        }\n        if (angular.isArray(data)) {\n          return {\n            data: data\n          };\n        }\n        if (schema && schema.data) {\n          var resultData = {\n            data: []\n          };\n          angular.extend(resultData, data);\n          if (schema.data !== 'data') {\n            var results;\n            if (angular.isString(schema.data)) {\n              results = fisUtilService.extractData(schema.data, data);\n            }\n            angular.forEach(results, function (item) {\n              resultData.data.push(item);\n            });\n          }\n\n          if (schema.total) {\n            resultData.total = data[schema.total];\n          }\n          if (schema.data !== 'data') {\n            delete resultData[schema.data];\n          }\n          if (schema.total !== 'total') {\n            delete resultData[schema.total];\n          }\n          return resultData;\n        }\n        return {\n          data: [data]\n        };\n      }\n\n      function invokeListeners(listeners, data) {\n        angular.forEach(listeners, function (listener) {\n          // invoke the listener and make sure it's returned data is normalized so that all listeners can expect the same format.\n          data = normalizeData(listener(data) || data);\n        });\n        return data;\n      }\n\n      function getDataFromResource(params) {\n        var instance;\n        var deferred = $q.defer();\n        var promise;\n\n        // here you can receive params that are objects but that you may not want to transform to JSON\n        // to pass as query parameters. Make sure they are marshalled to a string that is appropriate\n        // to the backend.\n        // TODO: provide a hook to marshall special objects (decorate params). For now, only translating Criteria to its string form\n        if (params.crit) {\n          params.crit = params.crit.toString();\n        }\n        if (odataV3Adaptor) {\n          if (params.crit) {\n            params.$filter = params.crit.toString();\n            delete params.crit;\n          }\n\n          if (angular.isNumber(params.offset)) {\n            params.$skip = params.offset;\n            delete params.offset;\n          }\n\n          if (angular.isNumber(params.limit)) {\n            params.$top = params.limit;\n            delete params.limit;\n          }\n\n          if (params.sort) {\n            params.$orderby = params.sort;\n            delete params.sort;\n          }\n          // TODO add $inlinecount only when schema.total is defined\n          // params.$inlinecount = 'allpages'; // ask for the total in the response\n          params.$format = 'json';\n        }\n        instance = Resource.getData(params, function () {\n          // don't return just instance.data, send back everything\n          deferred.resolve(invokeListeners(afterFetchListeners, instance));\n        }, function (d) {\n          // TODO: define exceptions (fisException service?)\n          deferred.reject(invokeListeners(afterFetchListeners, d));\n        });\n        promise = deferred.promise;\n        promise.data = instance.data;\n        return promise;\n      }\n\n      function determineResource(attrs, val) {\n        if (functionExpression) {\n          // fisData will not handle invoking the rest resource and will delegate to the function expression\n          return null;\n        }\n        val = val || fixedResourceUrl && attrs.fisData || $parse(attrs.fisData)($scope);\n\n        if (angular.isString(val)) {\n          // the value refers to a $resource URL\n          // fisData will handle RESTful fetching\n          return fisResourceService(val, null, null, schema);\n        } else if (!val) {\n          // $attrs.fisData is not empty but doesn't resolve to a scoped value, consider the string in $attrs.fisData as a $resource URL\n          // fisData will handle RESTful fetching\n          return fisResourceService(attrs.fisData, null, null, schema);\n        }\n        // fisData will not handle RESTful fetching\n        return null;\n      }\n    }]\n\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./data/data.directive.js","/**\r\n * @name fisData\r\n * @description Directive that provides a list based widget with a $resource it can query to GET a collection of data items.\r\n *      This is useful only for GET of a collection of\r\n * @methodOf fis.core.directives\r\n */\r\nexport default function (fisResourceService, $q, $parse, fisCriteriaService, fisElementUtils, $interpolate, $timeout, fisUtilService, fisConfig, fisScopeUtils) {\r\n  'ngInject';\r\n\r\n  var queryParameterPrefix = 'fisParam';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    priority: 600,\r\n    compile: function (elem, attrs) {\r\n                // Save the original parameter expressions for later if required.\r\n                // We will need them for interpolating the variable values if we're running in an isolated scope.\r\n      attrs._paramVariables = fisElementUtils.copyProperties(attrs, queryParameterPrefix, {});\r\n\r\n      return function () {};\r\n    },\r\n    controller: ['$attrs', '$scope', '$element',\r\n                function ($attrs, $scope, $element) {\r\n                  var self = this;\r\n\r\n                  var odataV3Adaptor = $attrs.fisAdaptor === 'odatav3' || (fisConfig.dataSourceAdaptor === 'odatav3');\r\n                  function isAlwaysFetch() {\r\n                    return angular.isUndefined($attrs.fisFetchVisibleOnly) || !$attrs.fisFetchVisibleOnly;\r\n                  }\r\n\r\n                  // Only add the visibility watch when the fetching should depend on the visibility of the component\r\n                  if (!isAlwaysFetch()) {\r\n                    /*\r\n                    Adds a watch to the visibility state of the element.\r\n                    If the element is made visible and there was a call to fetchData while it was invisible,\r\n                    the fetch is executed now.\r\n\r\n                    scope.allowFetch is used again in fetchData below\r\n                      */\r\n                    var watchFn = function () {\r\n                      $scope.allowFetch = $element.is(':visible');\r\n\r\n                      if ($scope.allowFetch) {\r\n                        if ($scope.deferred) {\r\n                          $scope.deferred.resolve(self.fetchData($scope.lastParams));\r\n                          $scope.deferred = undefined;\r\n                          $scope.lastParams = undefined;\r\n                        }\r\n                      }\r\n                    };\r\n                    fisScopeUtils.postDigest($scope, function () {\r\n                      return $element.is(':visible');\r\n                    }, watchFn, $timeout, true);\r\n                  }\r\n\r\n                  if (!$attrs.fisData) {\r\n                    throw new Error('You must provide a value to the fis-data attribute');\r\n                  }\r\n\r\n                  var functionExpression = $attrs.fisData.indexOf('(') !== -1;\r\n                  var arrayExpression = $attrs.fisData.indexOf('[') !== -1;\r\n                  var objectExpression = $attrs.fisData.indexOf('{') !== -1;\r\n                  var fixedResourceUrl = !functionExpression && !arrayExpression && !objectExpression && $attrs.fisData.indexOf('/') !== -1;\r\n                  var beforeFetchListeners = [];\r\n                  var afterFetchListeners = [];\r\n                  var dataChangedListeners = [];\r\n\r\n                  var schema = {\r\n                    // the JSON element that contains the array of data items\r\n                    data: ($parse($attrs.fisSchemaData)($scope) !== undefined) ? $parse($attrs.fisSchemaData)($scope) : $attrs.fisSchemaData, // eslint-disable-line\r\n                    // the JSON element that contains the total number of records in the entire dataset (useful for widgets that support some kind of pagination)\r\n                    total: $attrs.fisSchemaTotal\r\n                  };\r\n\r\n                  var Resource;\r\n\r\n                  // TODO: add fisSharedCriteria to allow providing a criteria that multiple widgets can share.\r\n                  //       It will be merged with the Criteria created by the grid (translated from kendo filters)\r\n                  //       before being sent to fetchData in the params: {crit: mergedCriteria}\r\n                  //       This is needed to be able to provide complex search outside of the grid.\r\n\r\n                  if (!fixedResourceUrl && !functionExpression) {\r\n                    // watch to see if the provided fisData value changes (checking references, not equality).\r\n                    // this is to determine if the fisData will be handling RESTful fetching\r\n                    var fisDataChangeWatch = $scope.$watch($attrs.fisData, function (newVal, oldVal) {\r\n                      if (!newVal) {\r\n                        // $attrs.fisData doesn't resolve to a value. We keep resource as-is.\r\n                        return;\r\n                      }\r\n                      // when the watch is initialized, this function is called with identical newVal and oldVal\r\n                      if (newVal !== oldVal) {\r\n                        // if a String value, the user may have changed the endpoint of the resource\r\n                        Resource = determineResource($attrs, newVal);\r\n\r\n                        self.fireDataChanged(newVal);\r\n                      }\r\n                    });\r\n                    $scope.$on('$destroy', function () {\r\n                      if (fisDataChangeWatch) {\r\n                        fisDataChangeWatch();\r\n                      }\r\n                    });\r\n                  }\r\n\r\n                    /**\r\n                     * @return Returns the schema object to be used\r\n                     */\r\n                  self.getSchema = function () {\r\n                    return schema;\r\n                  };\r\n\r\n                  /**\r\n                   * Can be used by a widget directive to tell that the data has changed and that the underlying dom widget (kendo or other)\r\n                   * can be notified of that change and be refreshed accordingly (by invoking fetchData again).\r\n                   * Note that fisData will already invoke this if it detects that the reference to the model has changed.\r\n                   */\r\n                  self.fireDataChanged = function (data) {\r\n                    invokeListeners(dataChangedListeners, data);\r\n                  };\r\n\r\n                  /**\r\n                   * @returns a promise that will resolve into an object with two properties:\r\n                   * The data property will contain an array of objects and the total property will contain the total number\r\n                   * of records available in the dataset, if this information is available. This total is used for pagination, so that\r\n                   * widgets can calculate the total number of pages.\r\n                   */\r\n                  self.fetchData = function (params) {\r\n                    if ($attrs.fisSort) {\r\n                      // check if the attribute specified in fis-sort is assignable (scope object)\r\n                      var fisSort = $parse($attrs.fisSort);\r\n                      if (fisSort.assign && params) {   // add params to check to prevent widgets with fis-sort breaking if no params defined for assignable expression\r\n                        // if fis-sort expression is assignable, update the expression whenever user interacts with the grid\r\n                        // (manual sorting by clicking on column headers)\r\n                        var sortExpressionArray = [];\r\n                        if (odataV3Adaptor) {\r\n                          var sortExpr = params.sort;\r\n                          if (sortExpr) {\r\n                            var sortDefs = sortExpr.split(',');\r\n                            angular.forEach(sortDefs, function (sortDef) {\r\n                              var parts = sortDef.split(' ');\r\n                              if (parts.length === 2) {\r\n                                sortExpressionArray.push({ field: parts[0], dir: parts[1] });\r\n                              }\r\n                            });\r\n                          }\r\n                        } else {\r\n                          angular.forEach(params.sort, function (sortedParam) {\r\n                                        // here the param.sort received is in the format [\"fieldName,sortOrder\",\"fieldName,sortOrder\",..]\r\n                                        // Convert it to [{field:fieldName, dir:sortOrder},{field:fieldName, dir:sortOrder}..] format\r\n                            var parts = sortedParam.split(',');\r\n                            sortExpressionArray.push({ field: parts[0], dir: parts[1] });\r\n                          });\r\n                        }\r\n                        // Update the fis-sort assignable expression to the changed value\r\n                        fisSort.assign($scope, sortExpressionArray.length === 1 ? sortExpressionArray[0] : sortExpressionArray);\r\n                      }\r\n                    }\r\n\r\n                    // If not explicitely set to just fetch when visible the fetch function is always called\r\n                    if (!isAlwaysFetch()) {\r\n                      /*\r\n                      Only fetch the data when the fetching is allowed (since the element is visible) - otherwise\r\n                      enter this if and return just a promise that will be resolved once.\r\n                        */\r\n                      if (!$scope.allowFetch) {\r\n                        // Store any provided parameters for later execution\r\n                        $scope.lastParams = params;\r\n                        if ($scope.deferred) {\r\n                          // There is already a deferred execution of fetchData - return a new promise here as the resolution\r\n                          var newDeferred = $q.defer();\r\n                          $scope.deferred.resolve(newDeferred.promise);\r\n                          $scope.deferred = newDeferred;\r\n                        } else {\r\n                          // This is the first call to fetchData since the element is invisible\r\n                          $scope.deferred = $q.defer();\r\n                        }\r\n\r\n                        // Return just a promise for now - the watch on the visibility will resolve it later\r\n                        return $scope.deferred.promise;\r\n                      }\r\n                    }\r\n\r\n                    if ($attrs.fisCriteria) {\r\n                      var mergedCriteria;\r\n                      var mergedOperands;\r\n                      var fisCriteria = fisCriteriaService.newCriteria($parse($attrs.fisCriteria)($scope));\r\n\r\n                      if (params.crit) {\r\n                        mergedOperands = [];\r\n                        fisCriteria.operands.concat(params.crit.operands).forEach(function (operand) {\r\n                          if (mergedOperands.indexOf(operand) === -1) {\r\n                            mergedOperands.push(operand);\r\n                          }\r\n                        });\r\n                        mergedCriteria = angular.extend(fisCriteria, params.crit);\r\n                        mergedCriteria.operands = mergedOperands;\r\n                      } else {\r\n                        mergedCriteria = fisCriteria;\r\n                      }\r\n                      params.crit = mergedCriteria.toString();\r\n                    }\r\n\r\n                    Resource = determineResource($attrs);\r\n                    invokeListeners(beforeFetchListeners, params);\r\n\r\n                    params = fisElementUtils.copyProperties($attrs, queryParameterPrefix, params);\r\n\r\n                    // When running in isolated scope, e.g. in fisGrid, we don't have access to the outer scope.\r\n                    // Someone using a parameter like fis-param-foo=\"{{foo}}\" would need to use {{$parent.foo}}\r\n                    // to escape the isolated scope of fisGrid. To avoid that, we reevaluate the fis-param-*\r\n                    // expressions against the parent scope. This way, the use doesn't need to care whether\r\n                    // the directive uses isolated scope or not.\r\n                    if ($scope.hasOwnProperty('$$isolateBindings') && $scope) {\r\n                      // Loop over the parameter expressions that we saved in the compile function.\r\n                      // The variables are not interpolated at this stage.\r\n                      angular.forEach($attrs._paramVariables, function (val, key) {\r\n                        // Interpolate the variable ourselves using the $interpolate service\r\n                        // We use the parent scope to resolve the variables.\r\n                        var interpolatedValue = $interpolate(val)($scope);\r\n\r\n                        // Assign the variable to the respective entry in the params object,\r\n                        // overwriting any value that was previously there.\r\n                        params[key] = interpolatedValue;\r\n                      });\r\n                    }\r\n\r\n                    if (Resource) {\r\n                      return getDataFromResource(params);\r\n                    }\r\n                    // data retrieval is managed externally (could still come from a server)\r\n                    var getter = $parse($attrs.fisData);\r\n                    var promise;\r\n\r\n                    if (functionExpression) {\r\n                      // function expression\r\n                      // wrap in a promise, chain promises if function also returns a promise\r\n                      promise = $q.when(getter($scope, { params: params })).then(function (data) {\r\n                        var resultData = invokeListeners(afterFetchListeners, normalizeData(data));\r\n                        if (angular.isFunction(schema.data)) {\r\n                          resultData.data = retrieveDataFromSchemaData(data);\r\n                        }\r\n                        return resultData;\r\n                      }, function () {\r\n                        // TODO: define exceptions\r\n                        throw new Error('fisData could not get data from ' + $attrs.fisData);\r\n                      });\r\n                    } else {\r\n                      var scoped = getter($scope);\r\n                      if (angular.isFunction(scoped)) {\r\n                        var result = scoped(params);\r\n                        promise = $q.when(result).then(function (data) {\r\n                          var resultData = invokeListeners(afterFetchListeners, normalizeData(data));\r\n                          if (angular.isFunction(schema.data)) {\r\n                            resultData.data = retrieveDataFromSchemaData(data);\r\n                          }\r\n                          return resultData;\r\n                        }, function () {\r\n                          throw new Error('fisData could not get data from ' + $attrs.fisData);\r\n                        });\r\n                      } else {\r\n                        var deferred = $q.defer();\r\n                        var resultData = invokeListeners(afterFetchListeners, normalizeData(scoped));\r\n                        if (angular.isFunction(schema.data)) {\r\n                          resultData.data = retrieveDataFromSchemaData(scoped);\r\n                        }\r\n                        deferred.resolve(resultData);\r\n                        promise = deferred.promise;\r\n                      }\r\n                    }\r\n\r\n                    return promise;\r\n                  };\r\n\r\n                  function retrieveDataFromSchemaData(data) {\r\n                    var resultData = [];\r\n                    var results = schema.data(data);\r\n                    angular.forEach(results, function (item) {\r\n                      resultData.push(item);\r\n                    });\r\n                    return resultData;\r\n                  }\r\n\r\n                  self.addDataChangedListener = function (listener) {\r\n                    if (dataChangedListeners.indexOf(listener) === -1) {\r\n                      dataChangedListeners.push(listener);\r\n                    }\r\n                    return function () {\r\n                      var idx = dataChangedListeners.indexOf(listener);\r\n                      if (idx !== -1) {\r\n                        dataChangedListeners.splice(idx, 1);\r\n                      }\r\n                    };\r\n                  };\r\n\r\n                  self.addBeforeFetchListener = function (listener) {\r\n                    if (beforeFetchListeners.indexOf(listener) === -1) {\r\n                      beforeFetchListeners.push(listener);\r\n                    }\r\n                    return function () {\r\n                      var idx = beforeFetchListeners.indexOf(listener);\r\n                      if (idx !== -1) {\r\n                        beforeFetchListeners.splice(idx, 1);\r\n                      }\r\n                    };\r\n                  };\r\n\r\n                  self.addAfterFetchListener = function (listener) {\r\n                    if (afterFetchListeners.indexOf(listener) === -1) {\r\n                      afterFetchListeners.push(listener);\r\n                    }\r\n                    return function () {\r\n                      var idx = afterFetchListeners.indexOf(listener);\r\n                      if (idx !== -1) {\r\n                        afterFetchListeners.splice(idx, 1);\r\n                      }\r\n                    };\r\n                  };\r\n\r\n                  function normalizeData(data) {\r\n                    if (data.data) {\r\n                      return data;\r\n                    }\r\n\r\n                    if (angular.isArray(data)) {\r\n                      if (data.length > 1) {\r\n                        return {\r\n                          data: data\r\n                        };\r\n                      } else if (data.length === 1) {\r\n                        return {\r\n                          data: data,\r\n                          obj: data[0]\r\n                        };\r\n                      }\r\n                    }\r\n                    if (angular.isArray(data)) {\r\n                      return {\r\n                        data: data\r\n                      };\r\n                    }\r\n                    if (schema && schema.data) {\r\n                      var resultData = {\r\n                        data: []\r\n                      };\r\n                      angular.extend(resultData, data);\r\n                      if (schema.data !== 'data') {\r\n                        var results;\r\n                        if (angular.isString(schema.data)) {\r\n                          results = fisUtilService.extractData(schema.data, data);\r\n                        }\r\n                        angular.forEach(results, function (item) {\r\n                          resultData.data.push(item);\r\n                        });\r\n                      }\r\n\r\n                      if (schema.total) {\r\n                        resultData.total = data[schema.total];\r\n                      }\r\n                      if (schema.data !== 'data') {\r\n                        delete resultData[schema.data];\r\n                      }\r\n                      if (schema.total !== 'total') {\r\n                        delete resultData[schema.total];\r\n                      }\r\n                      return resultData;\r\n                    }\r\n                    return {\r\n                      data: [data]\r\n                    };\r\n                  }\r\n\r\n                  function invokeListeners(listeners, data) {\r\n                    angular.forEach(listeners, function (listener) {\r\n                            // invoke the listener and make sure it's returned data is normalized so that all listeners can expect the same format.\r\n                      data = normalizeData(listener(data) || data);\r\n                    });\r\n                    return data;\r\n                  }\r\n\r\n                  function getDataFromResource(params) {\r\n                    var instance;\r\n                    var deferred = $q.defer();\r\n                    var promise;\r\n\r\n                    // here you can receive params that are objects but that you may not want to transform to JSON\r\n                    // to pass as query parameters. Make sure they are marshalled to a string that is appropriate\r\n                    // to the backend.\r\n                    // TODO: provide a hook to marshall special objects (decorate params). For now, only translating Criteria to its string form\r\n                    if (params.crit) {\r\n                      params.crit = params.crit.toString();\r\n                    }\r\n                    if (odataV3Adaptor) {\r\n                      if (params.crit) {\r\n                        params.$filter = params.crit.toString();\r\n                        delete params.crit;\r\n                      }\r\n\r\n                      if (angular.isNumber(params.offset)) {\r\n                        params.$skip = params.offset;\r\n                        delete params.offset;\r\n                      }\r\n\r\n                      if (angular.isNumber(params.limit)) {\r\n                        params.$top = params.limit;\r\n                        delete params.limit;\r\n                      }\r\n\r\n                      if (params.sort) {\r\n                        params.$orderby = params.sort;\r\n                        delete params.sort;\r\n                      }\r\n                      // TODO add $inlinecount only when schema.total is defined\r\n                      // params.$inlinecount = 'allpages'; // ask for the total in the response\r\n                      params.$format = 'json';\r\n                    }\r\n                    instance = Resource.getData(params, function () {\r\n                      // don't return just instance.data, send back everything\r\n                      deferred.resolve(invokeListeners(afterFetchListeners, instance));\r\n                    }, function (d) {\r\n                      // TODO: define exceptions (fisException service?)\r\n                      deferred.reject(invokeListeners(afterFetchListeners, d));\r\n                    });\r\n                    promise = deferred.promise;\r\n                    promise.data = instance.data;\r\n                    return promise;\r\n                  }\r\n\r\n                  function determineResource(attrs, val) {\r\n                    if (functionExpression) {\r\n                      // fisData will not handle invoking the rest resource and will delegate to the function expression\r\n                      return null;\r\n                    }\r\n                    val = val || (fixedResourceUrl && attrs.fisData) || $parse(attrs.fisData)($scope);\r\n\r\n                    if (angular.isString(val)) {\r\n                      // the value refers to a $resource URL\r\n                      // fisData will handle RESTful fetching\r\n                      return fisResourceService(val, null, null, schema);\r\n                    } else if (!val) {\r\n                      // $attrs.fisData is not empty but doesn't resolve to a scoped value, consider the string in $attrs.fisData as a $resource URL\r\n                      // fisData will handle RESTful fetching\r\n                      return fisResourceService(attrs.fisData, null, null, schema);\r\n                    }\r\n                    // fisData will not handle RESTful fetching\r\n                    return null;\r\n                  }\r\n                }]\r\n\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./data/data.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _data = require('./data.directive');\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _dataVar = require('./data-var.directive');\n\nvar _dataVar2 = _interopRequireDefault(_dataVar);\n\nvar _resourceService = require('./resource-service.provider');\n\nvar _resourceService2 = _interopRequireDefault(_resourceService);\n\nvar _criteriaService = require('./criteria-service.provider');\n\nvar _criteriaService2 = _interopRequireDefault(_criteriaService);\n\nvar _constraintsFactory = require('./constraints-factory.provider');\n\nvar _constraintsFactory2 = _interopRequireDefault(_constraintsFactory);\n\nvar _typeBasedConstraints = require('./type-based-constraints.value');\n\nvar _typeBasedConstraints2 = _interopRequireDefault(_typeBasedConstraints);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.data', []);\n\nngModule.directive('fisData', _data2.default);\nngModule.directive('fisDataVar', _dataVar2.default);\n\nngModule.provider('fisResourceService', _resourceService2.default);\nngModule.provider('fisCriteriaService', _criteriaService2.default);\nngModule.provider('fisConstraintsFactory', _constraintsFactory2.default);\n\nngModule.value('typeBasedConstraints', _typeBasedConstraints2.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./data/index.js","import angular from 'angular';\r\n\r\nimport data from './data.directive';\r\nimport dataVar from './data-var.directive';\r\n\r\nimport resourceService from './resource-service.provider';\r\nimport criteriaService from './criteria-service.provider';\r\nimport constraintsFactory from './constraints-factory.provider';\r\n\r\nimport typeBasedConstraints from './type-based-constraints.value';\r\n\r\nconst ngModule = angular.module('fis.core.data', []);\r\n\r\nngModule.directive('fisData', data);\r\nngModule.directive('fisDataVar', dataVar);\r\n\r\nngModule.provider('fisResourceService', resourceService);\r\nngModule.provider('fisCriteriaService', criteriaService);\r\nngModule.provider('fisConstraintsFactory', constraintsFactory);\r\n\r\nngModule.value('typeBasedConstraints', typeBasedConstraints);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./data/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'use strict';\n\n  var self = this;\n\n  self.$get = ['$resource', 'fisUtilService', function ($resource, fisUtilService) {\n    return function (url, paramDefaults, actions, schema) {\n      var localResource = $resource(url, paramDefaults, actions);\n      localResource.getData = function (params, success, failure) {\n        var ret = {\n          data: []\n        };\n        if (schema && schema.data) {\n          localResource.get(params, function (d, headers) {\n            ret.data.length = 0;\n            angular.extend(ret, d);\n\n            if (schema.data !== 'data') {\n              if (schema.data === 'none') {\n                var res = {};\n                angular.forEach(d, function (key, val) {\n                  if (val.toString().indexOf('$') !== 0) {\n                    res[val] = key;\n                  }\n                });\n                ret.data.push(res);\n              } else {\n                var results;\n                if (angular.isString(schema.data)) {\n                  results = fisUtilService.extractData(schema.data, d);\n                } else if (angular.isFunction(schema.data)) {\n                  results = schema.data(d);\n                }\n                angular.forEach(results, function (item) {\n                  ret.data.push(item);\n                });\n              }\n            }\n\n            if (schema.total) {\n              ret.total = d[schema.total];\n            }\n            if (schema.data !== 'data' && schema.data !== 'none') {\n              delete ret[schema.data];\n            }\n            if (schema.total !== 'total') {\n              delete ret[schema.total];\n            }\n            success(ret, headers);\n          }, failure);\n        } else {\n          ret.data = localResource.query(params, function (d, headers) {\n            // send normalized data structure to success callback\n            success(ret, headers);\n          }, failure);\n        }\n        // always returns an object with an empty data array that gets filled when request is successful\n        return ret;\n      };\n\n      return localResource;\n    };\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./data/resource-service.provider.js","/**\r\n * A service that extends the angular $resource service with methods that follow framework conventions\r\n */\r\nexport default function () {\r\n  'use strict';\r\n  var self = this;\r\n\r\n  self.$get = ['$resource', 'fisUtilService', function ($resource, fisUtilService) {\r\n    return function (url, paramDefaults, actions, schema) {\r\n      var localResource = $resource(url, paramDefaults, actions);\r\n      localResource.getData = function (params, success, failure) {\r\n        var ret = {\r\n          data: []\r\n        };\r\n        if (schema && schema.data) {\r\n          localResource.get(params, function (d, headers) {\r\n            ret.data.length = 0;\r\n            angular.extend(ret, d);\r\n\r\n            if (schema.data !== 'data') {\r\n              if (schema.data === 'none') {\r\n                var res = {};\r\n                angular.forEach(d, function (key, val) {\r\n                  if (val.toString().indexOf('$') !== 0) {\r\n                    res[val] = key;\r\n                  }\r\n                });\r\n                ret.data.push(res);\r\n              } else {\r\n                var results;\r\n                if (angular.isString(schema.data)) {\r\n                  results = fisUtilService.extractData(schema.data, d);\r\n                } else if (angular.isFunction(schema.data)) {\r\n                  results = schema.data(d);\r\n                }\r\n                angular.forEach(results, function (item) {\r\n                  ret.data.push(item);\r\n                });\r\n              }\r\n            }\r\n\r\n            if (schema.total) {\r\n              ret.total = d[schema.total];\r\n            }\r\n            if (schema.data !== 'data' && schema.data !== 'none') {\r\n              delete ret[schema.data];\r\n            }\r\n            if (schema.total !== 'total') {\r\n              delete ret[schema.total];\r\n            }\r\n            success(ret, headers);\r\n          }, failure);\r\n        } else {\r\n          ret.data = localResource.query(params, function (d, headers) {\r\n            // send normalized data structure to success callback\r\n            success(ret, headers);\r\n          }, failure);\r\n        }\r\n        // always returns an object with an empty data array that gets filled when request is successful\r\n        return ret;\r\n      };\r\n\r\n      return localResource;\r\n    };\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./data/resource-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar basicConstraints = [{ value: 'eq', label: 'is' }, { value: 'ne', label: 'is not' }, { value: 'is_null', label: 'is null' }, { value: 'not_null', label: 'is not null' }];\n\nvar numberConstraints = basicConstraints.concat([{ value: 'gt', label: 'greater than' }, { value: 'ge', label: 'greater than or equal to' }, { value: 'lt', label: 'less than' }, { value: 'le', label: 'less than or equal to' }]);\n\nvar defaultConstraints = basicConstraints.concat([{ value: 'contains', label: 'contains' }, { value: 'not_contains', label: 'not contains' }, { value: 'is_empty', label: 'is empty' }, { value: 'not_empty', label: 'is not empty' }, { value: 'startswith', label: 'starts with' }, { value: 'not_startswith', label: 'not starts with' }, { value: 'endswith', label: 'ends with' }, { value: 'not_endswith', label: 'not ends with' }]);\n\nexports.default = {\n    string: defaultConstraints,\n    integer: numberConstraints,\n    currency: numberConstraints,\n    percentage: numberConstraints,\n    number: numberConstraints,\n    double: numberConstraints,\n    date: numberConstraints,\n    datetime: numberConstraints,\n    time: numberConstraints,\n    defaultType: defaultConstraints,\n    boolean: basicConstraints\n};\n\n\n// WEBPACK FOOTER //\n// ./data/type-based-constraints.value.js","    var basicConstraints = [\r\n        { value: 'eq', label: 'is' },\r\n        { value: 'ne', label: 'is not' },\r\n        { value: 'is_null', label: 'is null' },\r\n        { value: 'not_null', label: 'is not null' }\r\n    ];\r\n\r\n    var numberConstraints = basicConstraints.concat([\r\n        { value: 'gt', label: 'greater than' },\r\n        { value: 'ge', label: 'greater than or equal to' },\r\n        { value: 'lt', label: 'less than' },\r\n        { value: 'le', label: 'less than or equal to' }\r\n    ]);\r\n\r\n    var defaultConstraints = basicConstraints.concat([\r\n        { value: 'contains', label: 'contains' },\r\n        { value: 'not_contains', label: 'not contains' },\r\n        { value: 'is_empty', label: 'is empty' },\r\n        { value: 'not_empty', label: 'is not empty' },\r\n        { value: 'startswith', label: 'starts with' },\r\n        { value: 'not_startswith', label: 'not starts with' },\r\n        { value: 'endswith', label: 'ends with' },\r\n        { value: 'not_endswith', label: 'not ends with' }\r\n    ]);\r\n\r\n    export default {\r\n      string: defaultConstraints,\r\n      integer: numberConstraints,\r\n      currency: numberConstraints,\r\n      percentage: numberConstraints,\r\n      number: numberConstraints,\r\n      double: numberConstraints,\r\n      date: numberConstraints,\r\n      datetime: numberConstraints,\r\n      time: numberConstraints,\r\n      defaultType: defaultConstraints,\r\n      boolean: basicConstraints\r\n    };\r\n\n\n\n// WEBPACK FOOTER //\n// ./data/type-based-constraints.value.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (fisPubSubService) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      var draggable = attrs.fisDraggable === true || attrs.fisDraggable === 'true';\n      element.attr('draggable', draggable);\n\n      var dragStartEvent = 'fisOnDragStart.' + attrs.fisDragDropType;\n      var dragEvent = 'fisOnDrag.' + attrs.fisDragDropType;\n      var dragEndEvent = 'fisOnDragEnd.' + attrs.fisDragDropType;\n\n      element.get(0).addEventListener('dragstart', function (e) {\n        fisPubSubService.publish(dragStartEvent, { event: e });\n      });\n\n      element.get(0).addEventListener('dragover', function (e) {\n        e.preventDefault();\n      });\n\n      element.get(0).addEventListener('drag', function (e) {\n        fisPubSubService.publish(dragEvent, { event: e });\n      });\n\n      element.get(0).addEventListener('dragend', function (e) {\n        fisPubSubService.publish(dragEndEvent, { event: e });\n      });\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/dragdrop/draggable.directive.js","/**\r\n * @name fisDraggable\r\n * @description Directive used to add the payload of a REST call to the current scope\r\n * @methodOf fis.core.directives\r\n *\r\n */\r\nexport default function (fisPubSubService) {\r\n  'ngInject';\r\n  return {\r\n    restrict: 'A',\r\n    link: function (scope, element, attrs) {\r\n      var draggable = attrs.fisDraggable === true || attrs.fisDraggable === 'true';\r\n      element.attr('draggable', draggable);\r\n\r\n      var dragStartEvent = 'fisOnDragStart.' + attrs.fisDragDropType;\r\n      var dragEvent = 'fisOnDrag.' + attrs.fisDragDropType;\r\n      var dragEndEvent = 'fisOnDragEnd.' + attrs.fisDragDropType;\r\n\r\n      element.get(0).addEventListener('dragstart', function (e) {\r\n        fisPubSubService.publish(dragStartEvent, { event: e });\r\n      });\r\n\r\n      element.get(0).addEventListener('dragover', function (e) {\r\n        e.preventDefault();\r\n      });\r\n\r\n      element.get(0).addEventListener('drag', function (e) {\r\n        fisPubSubService.publish(dragEvent, { event: e });\r\n      });\r\n\r\n      element.get(0).addEventListener('dragend', function (e) {\r\n        fisPubSubService.publish(dragEndEvent, { event: e });\r\n      });\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/dragdrop/draggable.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (fisPubSubService) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      var dragEnterEvent = 'fisOnDragEnter.' + attrs.fisDragDropType;\n      var dragLeaveEvent = 'fisOnDragLeave.' + attrs.fisDragDropType;\n      var dropEvent = 'fisOnDrop.' + attrs.fisDragDropType;\n\n      element.get(0).addEventListener('dragover', function (e) {\n        e.preventDefault();\n      });\n\n      element.get(0).addEventListener('dragenter', function (e) {\n        fisPubSubService.publish(dragEnterEvent, { event: e });\n      });\n\n      element.get(0).addEventListener('dragleave', function (e) {\n        fisPubSubService.publish(dragLeaveEvent, { event: e });\n      });\n\n      element.get(0).addEventListener('drop', function (e) {\n        e.preventDefault();\n        fisPubSubService.publish(dropEvent, { event: e });\n      });\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/dragdrop/drop-target.directive.js","/**\r\n * @name fisDropTarget\r\n * @description Directive used to add the payload of a REST call to the current scope\r\n * @methodOf fis.core.directives\r\n *\r\n */\r\nexport default function (fisPubSubService) {\r\n  'ngInject';\r\n  return {\r\n    restrict: 'A',\r\n    link: function (scope, element, attrs) {\r\n      var dragEnterEvent = 'fisOnDragEnter.' + attrs.fisDragDropType;\r\n      var dragLeaveEvent = 'fisOnDragLeave.' + attrs.fisDragDropType;\r\n      var dropEvent = 'fisOnDrop.' + attrs.fisDragDropType;\r\n\r\n      element.get(0).addEventListener('dragover', function (e) {\r\n        e.preventDefault();\r\n      });\r\n\r\n      element.get(0).addEventListener('dragenter', function (e) {\r\n        fisPubSubService.publish(dragEnterEvent, { event: e });\r\n      });\r\n\r\n      element.get(0).addEventListener('dragleave', function (e) {\r\n        fisPubSubService.publish(dragLeaveEvent, { event: e });\r\n      });\r\n\r\n      element.get(0).addEventListener('drop', function (e) {\r\n        e.preventDefault();\r\n        fisPubSubService.publish(dropEvent, { event: e });\r\n      });\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/dragdrop/drop-target.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _draggable = require('./draggable.directive');\n\nvar _draggable2 = _interopRequireDefault(_draggable);\n\nvar _dropTarget = require('./drop-target.directive');\n\nvar _dropTarget2 = _interopRequireDefault(_dropTarget);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.directives.dragdrop', []);\n\nngModule.directive('fisDraggable', _draggable2.default);\nngModule.directive('fisDropTarget', _dropTarget2.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./directives/dragdrop/index.js","import angular from 'angular';\r\n\r\nimport draggable from './draggable.directive';\r\nimport dropTarget from './drop-target.directive';\r\n\r\nconst ngModule = angular.module('fis.core.directives.dragdrop', []);\r\n\r\nngModule.directive('fisDraggable', draggable);\r\nngModule.directive('fisDropTarget', dropTarget);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/dragdrop/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _dragdrop = require('./dragdrop');\n\nvar _dragdrop2 = _interopRequireDefault(_dragdrop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.directives', [_utils2.default, _dragdrop2.default]);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./directives/index.js","import angular from 'angular';\r\n\r\nimport utils from './utils';\r\nimport dragdrop from './dragdrop';\r\n\r\nconst ngModule = angular.module('fis.core.directives', [\r\n  utils,\r\n  dragdrop\r\n]);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($compile) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    priority: 590,\n    terminal: true,\n    compile: function compile() {\n      return function postLink(scope, element, attrs) {\n        element.addClass(scope.$eval(attrs.fisApplyClassDirective));\n\n        $compile(element, null, 590)(scope);\n      };\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/apply-class-directive.directive.js","export default function ($compile) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    priority: 590,\r\n    terminal: true,\r\n    compile: function () {\r\n      return function postLink(scope, element, attrs) {\r\n        element.addClass(scope.$eval(attrs.fisApplyClassDirective));\r\n\r\n        $compile(element, null, 590)(scope);\r\n      };\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/apply-class-directive.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'ngInject';\n\n  var service = {};\n\n  /**\r\n   * @description Allows filtering properties of a provided source object to set them without the provided prefix\r\n   * on a target object.\r\n   * @param {Object} sourceObject The object from which the properties should be taken.\r\n   * @param {String} prefix The not empty prefix applied to filter the properties of the source object.\r\n   * @param {Object} targetObject The optional target object on which to set the properties. If not provided, a new object is created.\r\n   */\n  service.copyProperties = function (sourceObject, prefix, targetObject) {\n    if (sourceObject === undefined) {\n      throw 'sourceObject must be provided'; // eslint-disable-line\n    }\n\n    if (prefix === undefined || typeof prefix !== 'string' || prefix.length < 1) {\n      throw 'no not empty string prefix provided. Got ' + prefix; // eslint-disable-line\n    }\n\n    if (targetObject === undefined) {\n      targetObject = {};\n    }\n\n    // Filter all object properties for the prefix\n    var propertyNames = Object.keys(sourceObject).filter(function (property) {\n      return property.substring(0, prefix.length) === prefix;\n    });\n\n    // Add the property values to the target object\n    if (propertyNames !== undefined) {\n      angular.forEach(propertyNames, function (propertyName) {\n        // truncate the name, throw away the prefix\n        var truncatedName = propertyName.substr(prefix.length);\n\n        // Adjust the first letter to be lowerCase\n        truncatedName = truncatedName.substring(0, 1).toLowerCase() + truncatedName.substring(1);\n\n        targetObject[truncatedName] = sourceObject[propertyName];\n      });\n    }\n\n    return targetObject;\n  };\n\n  /**\r\n   * Helps in migrating attrs.$observe invocations from AngularJS 1.2.x to 1.3+.\r\n   * 1.2 used to invoke the listener function once if the attribute is undefined.\r\n   * IT IS PREFERABLE TO REFACTOR YOUR CODE THAN TO USE THIS FUNCTION.\r\n   */\n  service.invokeAndObserve = function (attrs, key, fn) {\n    // if attribute is present, no need to invoke since observe will.\n    if (!angular.isDefined(attrs[key])) {\n      fn(undefined);\n    }\n    attrs.$observe(key, fn);\n  };\n\n  return service;\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/element-utils.factory.js","    export default function () {\r\n      'ngInject';\r\n      var service = {};\r\n\r\n      /**\r\n       * @description Allows filtering properties of a provided source object to set them without the provided prefix\r\n       * on a target object.\r\n       * @param {Object} sourceObject The object from which the properties should be taken.\r\n       * @param {String} prefix The not empty prefix applied to filter the properties of the source object.\r\n       * @param {Object} targetObject The optional target object on which to set the properties. If not provided, a new object is created.\r\n       */\r\n      service.copyProperties = function (sourceObject, prefix, targetObject) {\r\n        if (sourceObject === undefined) {\r\n          throw 'sourceObject must be provided'; // eslint-disable-line\r\n        }\r\n\r\n        if (prefix === undefined || typeof prefix !== 'string' || prefix.length < 1) {\r\n          throw 'no not empty string prefix provided. Got ' + prefix; // eslint-disable-line\r\n        }\r\n\r\n        if (targetObject === undefined) {\r\n          targetObject = {};\r\n        }\r\n\r\n        // Filter all object properties for the prefix\r\n        var propertyNames = Object.keys(sourceObject).filter(function (property) {\r\n          return property.substring(0, prefix.length) === prefix;\r\n        });\r\n\r\n        // Add the property values to the target object\r\n        if (propertyNames !== undefined) {\r\n          angular.forEach(propertyNames, function (propertyName) {\r\n            // truncate the name, throw away the prefix\r\n            var truncatedName = propertyName.substr(prefix.length);\r\n\r\n            // Adjust the first letter to be lowerCase\r\n            truncatedName = truncatedName.substring(0, 1).toLowerCase() + truncatedName.substring(1);\r\n\r\n            targetObject[truncatedName] = sourceObject[propertyName];\r\n          });\r\n        }\r\n\r\n        return targetObject;\r\n      };\r\n\r\n      /**\r\n       * Helps in migrating attrs.$observe invocations from AngularJS 1.2.x to 1.3+.\r\n       * 1.2 used to invoke the listener function once if the attribute is undefined.\r\n       * IT IS PREFERABLE TO REFACTOR YOUR CODE THAN TO USE THIS FUNCTION.\r\n       */\r\n      service.invokeAndObserve = function (attrs, key, fn) {\r\n        // if attribute is present, no need to invoke since observe will.\r\n        if (!angular.isDefined(attrs[key])) {\r\n          fn(undefined);\r\n        }\r\n        attrs.$observe(key, fn);\r\n      };\r\n\r\n      return service;\r\n    }\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/element-utils.factory.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (fisUniqueIdService, fisScopeUtils) {\n  'ngInject';\n\n  var fieldTemplate = '<div class=\"fis-field control-group\">\\n                <%var isExpVal=false;if (field.attrs.fisLabel  || field.attrs.required !== undefined) {if(field.attrs.fisLabel && field.attrs.fisLabel.indexOf(\"\\'\") > -1){field.attrs.fisLabel = field.attrs.fisLabel.replace(/\\'/g,\\'\"\\');}if(field.attrs.fisLabel && field.attrs.fisLabel.indexOf(\"{{\") > -1){field.attrs.fisLabel = field.attrs.fisLabel.replace(/{|}/g,\"\");isExpVal=true;}%><label class=\"control-label\"><span><span class=\"fis-req\">*</span><%if(isExpVal){%><span ng-bind-html=\"<%- field.attrs.fisLabel %>\"></span><%} else{%><span ng-bind-html=\"\\'<%- field.attrs.fisLabel %>\\'\"></span><%}%></span></label><%}%>\\n                <div class=\"controls\">\\n                    <div ng-show=\"fisEditMode\" class=\"wrap fis-inputs\" fis-unique-id=\"edit_mode\">\\n                    <%= field.editTemplate %>\\n                    </div>\\n                    <div ng-show=\"!fisEditMode\" class=\"wrap fis-view-value control-label-view\" fis-unique-id=\"not_edit_mode\">\\n                    <%= field.viewTemplate %>\\n                    </div>\\n                    <% if (field.attrs.fisInstruct){ %><span ng-show=\"fisEditMode\" class=\"fis-instruct-message\"><%- field.attrs.fisInstruct %></span> <% } %>\\n                    <span ng-show=\"fisEditMode\" fis-field-message></span>\\n                </div>\\n            </div>';\n\n  var FieldController = function FieldController($scope, $element, $attrs, $transclude, $parse) {\n    if ($scope.$parent.fisEditMode !== true && $scope.$parent.fisEditMode !== false) {\n      // set fisEditMode on the parent if it is not already set.\n      // this takes care of fields that are outside of an fisFields directive.\n      $scope.$parent.fisEditMode = true;\n    }\n\n    fisScopeUtils.watch($scope.$parent, $attrs.fisDisabled, function (disabled) {\n      $scope.fisDisabled = disabled;\n\n      var required = $parse($attrs.fisRequired)($scope);\n\n      if (required === true) {\n        if (disabled === true) {\n          // Was required, is now disabled, so remove the required flag\n          $scope.fisRequired = false;\n          $element.removeClass('fis-required');\n        } else {\n          // Was required, the flag might have been removed earlier, so re-add it\n          $scope.fisRequired = true;\n          $element.addClass('fis-required');\n        }\n      }\n    });\n\n    fisScopeUtils.watch($scope.$parent, $attrs.fisRequired, function (required) {\n      $scope.fisRequired = required;\n\n      if (required) {\n        $element.addClass('fis-required');\n      } else if ($attrs.required == null) {\n        // eslint-disable-line\n        $element.removeClass('fis-required');\n      }\n    });\n\n    fisScopeUtils.watch($scope.$parent, $attrs.fisEditMode, function (editMode) {\n      $scope.fisEditMode = editMode;\n    });\n\n    /**\r\n     * @name registeredInputs\r\n     * @description Hash of model property to ngModel.\r\n     * Used by fisFieldMessage to dispatch valid state to ngModel\r\n     * @methodOf FieldController\r\n     */\n    $scope.registeredInputs = {};\n\n    var models = [];\n\n    /**\r\n     * @name registerInput\r\n     * @description Registers a ngModel controller. Invoked by fisInput controller\r\n     * @methodOf FieldController\r\n     */\n    $scope.registerInput = function (ngModel) {\n      if (ngModel.fisProperty) {\n        $scope.registeredInputs[ngModel.fisProperty] = ngModel;\n        models.push(ngModel);\n      }\n    };\n\n    $scope.unregisterInput = function (ngModel) {\n      if (ngModel.fisProperty && $scope.registeredInputs[ngModel.fisProperty] === ngModel) {\n        delete $scope.registeredInputs[ngModel.fisProperty];\n\n        var idx = models.indexOf(ngModel);\n        if (idx > -1) {\n          delete models[idx];\n        }\n      }\n    };\n\n    $scope.fieldValue = function () {\n      // TODO: provide access to fis-input element(s) inside transclusion\n      // scope.fisFieldValueFn is the callback that is provided by the linkWrapper\n      return $scope.fisFieldValueFn($scope, $element, $attrs, models);\n    };\n  };\n\n  // default function used by scope.fieldValue which only takes care of single input fields (single ngModel per field)\n  // the models passed to it will be decorated with fisLabel, fisProperty and fisInput properties (this is done in fisInput directive)\n  function fieldValueFn(scope, element, attrs, models) {\n    return models[0] && models[0].$modelValue || '';\n  }\n\n  /**\r\n   * @name FieldDirective\r\n   * @methodOf fis.fis.core.forms\r\n   */\n  var FieldDirective = function FieldDirective(options) {\n    var self = this;\n    options = options || {};\n\n    // Using default priority of 0, just like any other directive does\n    self.priority = 0;\n\n    // Overwrite it with whatever the user has specified.\n    // Don't use the || approach since it doesn't handle 0 gracefully.\n    if (options.priority !== undefined) {\n      self.priority = options.priority;\n    }\n\n    self.restrict = options.restrict || 'ACE';\n    self.require = options.require; // should merge with this and only return array of required to outside link fn\n    self.transclude = options.transclude || false;\n    self.scope = true;\n    self.editTemplate = options.editTemplate || '';\n    self.viewTemplate = options.viewTemplate || '{{fieldValue()}}';\n    self.fieldValue = options.fieldValue || fieldValueFn;\n\n    self.compiledTemplate = _.template(fieldTemplate);\n\n    self.controller = options.controller || ['$scope', '$element', '$attrs', '$transclude', '$parse', FieldController];\n\n    self.compile = function (element, attrs, transclude) {\n      var context = {\n        editTemplate: self.editTemplate,\n        viewTemplate: self.viewTemplate,\n        attrs: attrs\n      };\n\n      attrs.fisSize = attrs.fisSize || 'large';\n\n      // attaching the editTemplate and viewTemplate to the main fieldTemplate\n      var markup = self.compiledTemplate({ field: context });\n\n      if (markup.indexOf('<%') !== -1) {\n        markup = _.template(markup)({ field: context });\n      }\n\n      var tplElement = angular.element(markup);\n\n      /* Call moveAssignAttributesToInputs to move and assign attributes to inputs element\r\n        * - If elements have compile function with transclusion then input element added after compilation,\r\n        *  so in this case move and assign attributes after compilation done.\r\n        * - If input elements have link function then input element already added,\r\n        *  so in this case first move and assign attributes to input element and then call link function.\r\n        */\n      var result;\n\n      if (options.compile) {\n        // if the FieldDirective was provided with a compile function, invoke it.\n        // We pass it the tplElement we just created but also the original element to allow\n        // inspecting it in a provided compile function before it gets replaced below.\n        result = linkWrapper(options.compile(tplElement, attrs, transclude, element), self.fieldValue);\n        moveAssignAttributesToInputs(attrs, tplElement);\n      } else {\n        moveAssignAttributesToInputs(attrs, tplElement);\n        // return the link function\n        result = linkWrapper(options.link || angular.noop, self.fieldValue);\n      }\n\n      // replace the provided element with the newly constructed one.\n      element.replaceWith(tplElement);\n\n      return result;\n    };\n    return self;\n  };\n\n  // Function mo ves and assign attributes to input element\n  function moveAssignAttributesToInputs(attrs, tplElement) {\n    // find the input elements in the assembled template element\n    var inputs = findInputs(tplElement);\n\n    // find the label element in the assembled template element\n    var labels = findLabel(tplElement);\n\n    // move attributes from the template's root element to each input element found, following naming convention\n    moveAttributesToInputs(attrs, tplElement, inputs);\n\n    // assign additional attributes to inputs (e.g. ng-disabled)\n    assignAttributesToInputs(attrs, tplElement, inputs);\n\n    // move attributes from the template's root element to each label element found, following naming convention\n    moveAttributesToLabel(attrs, tplElement, labels);\n  }\n\n  function linkWrapper(linkFn, valueFn) {\n    return function (scope, element, attrs, ctrls) {\n      if (attrs.fisLabel === undefined) {\n        if (attrs.required != null) {\n          // eslint-disable-line\n          element.find('.control-label').addClass('without-fis-label');\n        }\n        element.find('.controls').addClass('without-fis-label');\n      }\n\n      attrs.$observe('ngRequiredInput', function (value) {\n        if (value === 'true') {\n          element.addClass('fis-required');\n        }\n      });\n\n      var editModelName = element.find('input').attr('ng-model');\n\n      if (!editModelName) {\n        editModelName = element.find('select').attr('ng-model');\n      }\n\n      fisUniqueIdService.generateUniqueId(scope, element.find('.fis-view-value'), attrs, 'view_' + editModelName);\n\n      scope.fisFieldValueFn = valueFn;\n      if (linkFn) {\n        linkFn(scope, element, attrs, ctrls);\n      }\n    };\n  }\n\n  /*\r\n    * @name moveAttributes\r\n    * @param attrs The angular Attributes object for the directive\r\n    * @param rootElement The angular decorated root element of the directive\r\n    * @param inputs A hash of input element name to decorate element.\r\n    * @private\r\n    */\n  function moveAttributesToInputs(attrs, rootElement, inputs) {\n    var rootAttrs = attrs;\n\n    // move attributes for each input found\n    angular.forEach(inputs, function (elem, name) {\n      var inputAttrs = getAttributesForInput(attrs, name);\n      // remove the attributes found from the rootAttrs\n      rootAttrs = _.omit(rootAttrs, _.keys(inputAttrs));\n      // Object.keys(inputAttrs).forEach(function (inputAttr){\n      //    rootAttrs[inputAttr] = undefined;\n      // });\n      // copy the attributes minus the ending part (i.e. ng-model-input becomes ng-model for the element marked as 'input')\n      angular.forEach(inputAttrs, function (attr) {\n        elem.attr(attr.name, attr.val);\n      });\n    });\n\n    // rootAttrs now contains only the attributes that were not assigned to inputs\n    // add them to the root element of the directive\n    angular.forEach(rootAttrs, function (val, key) {\n      if (key === 'class') {\n        rootElement.addClass(val);\n      } else {\n        var denormalized = attrs.$attr[key];\n        if (denormalized) {\n          rootElement.attr(denormalized, val);\n        }\n      }\n    });\n  }\n\n  /*\r\n    * @name moveAttributesToLabel\r\n    * @param attrs The angular Attributes object for the directive\r\n    * @param rootElement The angular decorated root element of the directive\r\n    * @param label A hash of label element name to decorate element.\r\n    * @private\r\n    */\n  function moveAttributesToLabel(attrs, rootElement, label) {\n    var rootAttrs = attrs;\n\n    // move attributes for each label found\n    angular.forEach(label, function (elem, name) {\n      var labelAttrs = getAttributesForLabel(attrs, name);\n\n      // remove the attributes found from the rootAttrs\n      rootAttrs = _.omit(rootAttrs, _.keys(labelAttrs));\n      // Object.keys(labelAttrs).forEach(function (labelAttr){\n      //    rootAttrs[labelAttr] = undefined;\n      // });\n\n      // copy the attributes minus the ending part (i.e. class-label becomes class for the element marked as 'label')\n      angular.forEach(labelAttrs, function (attr) {\n        if (attr.name === 'class') {\n          elem.addClass(attr.val);\n        } else {\n          elem.attr(attr.name, attr.val);\n        }\n      });\n    });\n\n    // rootAttrs now contains only the attributes that were not assigned to inputs\n    // add them to the root element of the directive\n    angular.forEach(rootAttrs, function (val, key) {\n      if (key === 'class') {\n        rootElement.addClass(val);\n      } else {\n        var denormalized = attrs.$attr[key];\n\n        if (denormalized) {\n          rootElement.attr(denormalized, val);\n        }\n      }\n    });\n  }\n\n  /*\r\n    * @description This function will make sure the template elements to be compiled follow our form field conventions\r\n    * so that widget developers and page developers don't have to know about them.\r\n    * @param {Object} attrs Angular Attributes object for the root element\r\n    * @param {Object} root The template's root element\r\n    * @param {Object} inputs The array of input elements\r\n    * @private\r\n    */\n  function assignAttributesToInputs(attrs, root, inputs) {\n    // TODO: if any of the input is marked required by a ng-required-value for example, put fis-required class on root element\n    angular.forEach(inputs, function (elem) {\n      elem.attr('ng-disabled', 'fisDisabled');\n      elem.attr('fis-unique-id', '');\n\n      if (attrs.required != null) {\n        // eslint-disable-line\n        // let's empty string (\"\") through, DON'T CHANGE TO !== ELSE THINGS BREAK\n        elem.attr('required', true);\n      } else {\n        elem.attr('ng-required', 'fisRequired');\n      }\n    });\n\n    if (attrs.required != null) {\n      // eslint-disable-line\n      // DON'T CHANGE TO !== ELSE THINGS BREAK\n      root.addClass('fis-required');\n    }\n  }\n\n  function getAttributesForInput(attrs, name) {\n    var ret = {};\n    var endsWith = '-' + name;\n    var re = new RegExp(endsWith + '$');\n\n    angular.forEach(attrs, function (val, key) {\n      var denormalized = attrs.$attr[key];\n\n      if (denormalized && denormalized.match(re)) {\n        // remove the last part of the attribute name\n        var attrName = denormalized.substring(0, denormalized.length - endsWith.length);\n        ret[key] = { name: attrName, val: val };\n      }\n    });\n\n    return ret;\n  }\n\n  function getAttributesForLabel(attrs, name) {\n    var ret = {};\n    var endsWith = '-' + name;\n    var re = new RegExp(endsWith + '$');\n\n    angular.forEach(attrs, function (val, key) {\n      var denormalized = attrs.$attr[key];\n\n      if (denormalized && denormalized.match(re)) {\n        // remove the last part of the attribute name\n        if (denormalized !== 'fis-label') {\n          var attrName = denormalized.substring(0, denormalized.length - endsWith.length);\n          ret[key] = { name: attrName, val: val };\n        }\n      }\n    });\n\n    return ret;\n  }\n\n  function findInputs(parent) {\n    var ret = {};\n\n    var nodeList = parent[0].querySelectorAll('[fis-input]');\n    for (var i = 0; i < nodeList.length; ++i) {\n      var elem = angular.element(nodeList[i]);\n      ret[elem.attr('fis-input') || 'input'] = elem;\n    }\n\n    return ret;\n  }\n\n  function findLabel(parent) {\n    var ret = {};\n\n    parent.find('label').each(function (index, n) {\n      var elem = angular.element(n);\n      ret[elem.attr('fis-label') || 'label'] = elem;\n    });\n\n    return ret;\n  }\n\n  return {\n\n    create: function create(options) {\n      return new FieldDirective(options);\n    },\n\n    // TODO: remove this when we have removed requireJS, only needed for tests to be able to access\n    _FieldController: FieldController\n\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/field-directive-factory.factory.js","export default function (fisUniqueIdService, fisScopeUtils) {\r\n  'ngInject';\r\n  var fieldTemplate = `<div class=\"fis-field control-group\">\r\n                <%var isExpVal=false;if (field.attrs.fisLabel  || field.attrs.required !== undefined) {if(field.attrs.fisLabel && field.attrs.fisLabel.indexOf(\"\\'\") > -1){field.attrs.fisLabel = field.attrs.fisLabel.replace(/\\'/g,\\'\"\\');}if(field.attrs.fisLabel && field.attrs.fisLabel.indexOf(\"{{\") > -1){field.attrs.fisLabel = field.attrs.fisLabel.replace(/{|}/g,\"\");isExpVal=true;}%><label class=\"control-label\"><span><span class=\"fis-req\">*</span><%if(isExpVal){%><span ng-bind-html=\"<%- field.attrs.fisLabel %>\"></span><%} else{%><span ng-bind-html=\"\\'<%- field.attrs.fisLabel %>\\'\"></span><%}%></span></label><%}%>\r\n                <div class=\"controls\">\r\n                    <div ng-show=\"fisEditMode\" class=\"wrap fis-inputs\" fis-unique-id=\"edit_mode\">\r\n                    <%= field.editTemplate %>\r\n                    </div>\r\n                    <div ng-show=\"!fisEditMode\" class=\"wrap fis-view-value control-label-view\" fis-unique-id=\"not_edit_mode\">\r\n                    <%= field.viewTemplate %>\r\n                    </div>\r\n                    <% if (field.attrs.fisInstruct){ %><span ng-show=\"fisEditMode\" class=\"fis-instruct-message\"><%- field.attrs.fisInstruct %></span> <% } %>\r\n                    <span ng-show=\"fisEditMode\" fis-field-message></span>\r\n                </div>\r\n            </div>`;\r\n\r\n  var FieldController = function ($scope, $element, $attrs, $transclude, $parse) {\r\n    if ($scope.$parent.fisEditMode !== true && $scope.$parent.fisEditMode !== false) {\r\n                // set fisEditMode on the parent if it is not already set.\r\n                // this takes care of fields that are outside of an fisFields directive.\r\n      $scope.$parent.fisEditMode = true;\r\n    }\r\n\r\n    fisScopeUtils.watch($scope.$parent, $attrs.fisDisabled, function (disabled) {\r\n      $scope.fisDisabled = disabled;\r\n\r\n      var required = $parse($attrs.fisRequired)($scope);\r\n\r\n      if (required === true) {\r\n        if (disabled === true) {\r\n                        // Was required, is now disabled, so remove the required flag\r\n          $scope.fisRequired = false;\r\n          $element.removeClass('fis-required');\r\n        } else {\r\n                        // Was required, the flag might have been removed earlier, so re-add it\r\n          $scope.fisRequired = true;\r\n          $element.addClass('fis-required');\r\n        }\r\n      }\r\n    });\r\n\r\n    fisScopeUtils.watch($scope.$parent, $attrs.fisRequired, function (required) {\r\n      $scope.fisRequired = required;\r\n\r\n      if (required) {\r\n        $element.addClass('fis-required');\r\n      } else if ($attrs.required == null) { // eslint-disable-line\r\n        $element.removeClass('fis-required');\r\n      }\r\n    });\r\n\r\n    fisScopeUtils.watch($scope.$parent, $attrs.fisEditMode, function (editMode) {\r\n      $scope.fisEditMode = editMode;\r\n    });\r\n\r\n    /**\r\n     * @name registeredInputs\r\n     * @description Hash of model property to ngModel.\r\n     * Used by fisFieldMessage to dispatch valid state to ngModel\r\n     * @methodOf FieldController\r\n     */\r\n    $scope.registeredInputs = {};\r\n\r\n    var models = [];\r\n\r\n    /**\r\n     * @name registerInput\r\n     * @description Registers a ngModel controller. Invoked by fisInput controller\r\n     * @methodOf FieldController\r\n     */\r\n    $scope.registerInput = function (ngModel) {\r\n      if (ngModel.fisProperty) {\r\n        $scope.registeredInputs[ngModel.fisProperty] = ngModel;\r\n        models.push(ngModel);\r\n      }\r\n    };\r\n\r\n    $scope.unregisterInput = function (ngModel) {\r\n      if (ngModel.fisProperty && $scope.registeredInputs[ngModel.fisProperty] === ngModel) {\r\n        delete $scope.registeredInputs[ngModel.fisProperty];\r\n\r\n        var idx = models.indexOf(ngModel);\r\n        if (idx > -1) {\r\n          delete models[idx];\r\n        }\r\n      }\r\n    };\r\n\r\n    $scope.fieldValue = function () {\r\n      // TODO: provide access to fis-input element(s) inside transclusion\r\n      // scope.fisFieldValueFn is the callback that is provided by the linkWrapper\r\n      return $scope.fisFieldValueFn($scope, $element, $attrs, models);\r\n    };\r\n  };\r\n\r\n  // default function used by scope.fieldValue which only takes care of single input fields (single ngModel per field)\r\n  // the models passed to it will be decorated with fisLabel, fisProperty and fisInput properties (this is done in fisInput directive)\r\n  function fieldValueFn(scope, element, attrs, models) {\r\n    return models[0] && models[0].$modelValue || '';\r\n  }\r\n\r\n  /**\r\n   * @name FieldDirective\r\n   * @methodOf fis.fis.core.forms\r\n   */\r\n  var FieldDirective = function (options) {\r\n    var self = this;\r\n    options = options || {};\r\n\r\n    // Using default priority of 0, just like any other directive does\r\n    self.priority = 0;\r\n\r\n    // Overwrite it with whatever the user has specified.\r\n    // Don't use the || approach since it doesn't handle 0 gracefully.\r\n    if (options.priority !== undefined) {\r\n      self.priority = options.priority;\r\n    }\r\n\r\n    self.restrict = options.restrict || 'ACE';\r\n    self.require = options.require; // should merge with this and only return array of required to outside link fn\r\n    self.transclude = options.transclude || false;\r\n    self.scope = true;\r\n    self.editTemplate = options.editTemplate || '';\r\n    self.viewTemplate = options.viewTemplate || '{{fieldValue()}}';\r\n    self.fieldValue = options.fieldValue || fieldValueFn;\r\n\r\n    self.compiledTemplate = _.template(fieldTemplate);\r\n\r\n    self.controller = options.controller || ['$scope', '$element', '$attrs', '$transclude', '$parse', FieldController];\r\n\r\n    self.compile = function (element, attrs, transclude) {\r\n      var context = {\r\n        editTemplate: self.editTemplate,\r\n        viewTemplate: self.viewTemplate,\r\n        attrs: attrs\r\n      };\r\n\r\n      attrs.fisSize = attrs.fisSize || 'large';\r\n\r\n      // attaching the editTemplate and viewTemplate to the main fieldTemplate\r\n      var markup = self.compiledTemplate({ field: context });\r\n\r\n      if (markup.indexOf('<%') !== -1) {\r\n        markup = _.template(markup)({ field: context });\r\n      }\r\n\r\n      var tplElement = angular.element(markup);\r\n\r\n      /* Call moveAssignAttributesToInputs to move and assign attributes to inputs element\r\n        * - If elements have compile function with transclusion then input element added after compilation,\r\n        *  so in this case move and assign attributes after compilation done.\r\n        * - If input elements have link function then input element already added,\r\n        *  so in this case first move and assign attributes to input element and then call link function.\r\n        */\r\n      var result;\r\n\r\n      if (options.compile) {\r\n        // if the FieldDirective was provided with a compile function, invoke it.\r\n        // We pass it the tplElement we just created but also the original element to allow\r\n        // inspecting it in a provided compile function before it gets replaced below.\r\n        result = linkWrapper(options.compile(tplElement, attrs, transclude, element), self.fieldValue);\r\n        moveAssignAttributesToInputs(attrs, tplElement);\r\n      } else {\r\n        moveAssignAttributesToInputs(attrs, tplElement);\r\n        // return the link function\r\n        result = linkWrapper(options.link || angular.noop, self.fieldValue);\r\n      }\r\n\r\n      // replace the provided element with the newly constructed one.\r\n      element.replaceWith(tplElement);\r\n\r\n      return result;\r\n    };\r\n    return self;\r\n  };\r\n\r\n  // Function mo ves and assign attributes to input element\r\n  function moveAssignAttributesToInputs(attrs, tplElement) {\r\n    // find the input elements in the assembled template element\r\n    var inputs = findInputs(tplElement);\r\n\r\n    // find the label element in the assembled template element\r\n    var labels = findLabel(tplElement);\r\n\r\n    // move attributes from the template's root element to each input element found, following naming convention\r\n    moveAttributesToInputs(attrs, tplElement, inputs);\r\n\r\n    // assign additional attributes to inputs (e.g. ng-disabled)\r\n    assignAttributesToInputs(attrs, tplElement, inputs);\r\n\r\n    // move attributes from the template's root element to each label element found, following naming convention\r\n    moveAttributesToLabel(attrs, tplElement, labels);\r\n  }\r\n\r\n  function linkWrapper(linkFn, valueFn) {\r\n    return function (scope, element, attrs, ctrls) {\r\n      if (attrs.fisLabel === undefined) {\r\n        if (attrs.required != null) { // eslint-disable-line\r\n          element.find('.control-label').addClass('without-fis-label');\r\n        }\r\n        element.find('.controls').addClass('without-fis-label');\r\n      }\r\n\r\n      attrs.$observe('ngRequiredInput', function (value) {\r\n        if (value === 'true') {\r\n          element.addClass('fis-required');\r\n        }\r\n      });\r\n\r\n      var editModelName = element.find('input').attr('ng-model');\r\n\r\n      if (!editModelName) {\r\n        editModelName = element.find('select').attr('ng-model');\r\n      }\r\n\r\n      fisUniqueIdService.generateUniqueId(scope, element.find('.fis-view-value'), attrs, 'view_' + editModelName);\r\n\r\n      scope.fisFieldValueFn = valueFn;\r\n      if (linkFn) {\r\n        linkFn(scope, element, attrs, ctrls);\r\n      }\r\n    };\r\n  }\r\n\r\n  /*\r\n    * @name moveAttributes\r\n    * @param attrs The angular Attributes object for the directive\r\n    * @param rootElement The angular decorated root element of the directive\r\n    * @param inputs A hash of input element name to decorate element.\r\n    * @private\r\n    */\r\n  function moveAttributesToInputs(attrs, rootElement, inputs) {\r\n    var rootAttrs = attrs;\r\n\r\n    // move attributes for each input found\r\n    angular.forEach(inputs, function (elem, name) {\r\n      var inputAttrs = getAttributesForInput(attrs, name);\r\n      // remove the attributes found from the rootAttrs\r\n      rootAttrs = _.omit(rootAttrs, _.keys(inputAttrs));\r\n      // Object.keys(inputAttrs).forEach(function (inputAttr){\r\n      //    rootAttrs[inputAttr] = undefined;\r\n      // });\r\n      // copy the attributes minus the ending part (i.e. ng-model-input becomes ng-model for the element marked as 'input')\r\n      angular.forEach(inputAttrs, function (attr) {\r\n        elem.attr(attr.name, attr.val);\r\n      });\r\n    });\r\n\r\n    // rootAttrs now contains only the attributes that were not assigned to inputs\r\n    // add them to the root element of the directive\r\n    angular.forEach(rootAttrs, function (val, key) {\r\n      if (key === 'class') {\r\n        rootElement.addClass(val);\r\n      } else {\r\n        var denormalized = attrs.$attr[key];\r\n        if (denormalized) {\r\n          rootElement.attr(denormalized, val);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /*\r\n    * @name moveAttributesToLabel\r\n    * @param attrs The angular Attributes object for the directive\r\n    * @param rootElement The angular decorated root element of the directive\r\n    * @param label A hash of label element name to decorate element.\r\n    * @private\r\n    */\r\n  function moveAttributesToLabel(attrs, rootElement, label) {\r\n    var rootAttrs = attrs;\r\n\r\n    // move attributes for each label found\r\n    angular.forEach(label, function (elem, name) {\r\n      var labelAttrs = getAttributesForLabel(attrs, name);\r\n\r\n      // remove the attributes found from the rootAttrs\r\n      rootAttrs = _.omit(rootAttrs, _.keys(labelAttrs));\r\n      // Object.keys(labelAttrs).forEach(function (labelAttr){\r\n      //    rootAttrs[labelAttr] = undefined;\r\n      // });\r\n\r\n      // copy the attributes minus the ending part (i.e. class-label becomes class for the element marked as 'label')\r\n      angular.forEach(labelAttrs, function (attr) {\r\n        if (attr.name === 'class') {\r\n          elem.addClass(attr.val);\r\n        } else {\r\n          elem.attr(attr.name, attr.val);\r\n        }\r\n      });\r\n    });\r\n\r\n    // rootAttrs now contains only the attributes that were not assigned to inputs\r\n    // add them to the root element of the directive\r\n    angular.forEach(rootAttrs, function (val, key) {\r\n      if (key === 'class') {\r\n        rootElement.addClass(val);\r\n      } else {\r\n        var denormalized = attrs.$attr[key];\r\n\r\n        if (denormalized) {\r\n          rootElement.attr(denormalized, val);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /*\r\n    * @description This function will make sure the template elements to be compiled follow our form field conventions\r\n    * so that widget developers and page developers don't have to know about them.\r\n    * @param {Object} attrs Angular Attributes object for the root element\r\n    * @param {Object} root The template's root element\r\n    * @param {Object} inputs The array of input elements\r\n    * @private\r\n    */\r\n  function assignAttributesToInputs(attrs, root, inputs) {\r\n    // TODO: if any of the input is marked required by a ng-required-value for example, put fis-required class on root element\r\n    angular.forEach(inputs, function (elem) {\r\n      elem.attr('ng-disabled', 'fisDisabled');\r\n      elem.attr('fis-unique-id', '');\r\n\r\n      if (attrs.required != null) { // eslint-disable-line\r\n        // let's empty string (\"\") through, DON'T CHANGE TO !== ELSE THINGS BREAK\r\n        elem.attr('required', true);\r\n      } else {\r\n        elem.attr('ng-required', 'fisRequired');\r\n      }\r\n    });\r\n\r\n    if (attrs.required != null) { // eslint-disable-line\r\n      // DON'T CHANGE TO !== ELSE THINGS BREAK\r\n      root.addClass('fis-required');\r\n    }\r\n  }\r\n\r\n  function getAttributesForInput(attrs, name) {\r\n    var ret = {};\r\n    var endsWith = '-' + name;\r\n    var re = new RegExp(endsWith + '$');\r\n\r\n    angular.forEach(attrs, function (val, key) {\r\n      var denormalized = attrs.$attr[key];\r\n\r\n      if (denormalized && denormalized.match(re)) {\r\n        // remove the last part of the attribute name\r\n        var attrName = denormalized.substring(0, denormalized.length - endsWith.length);\r\n        ret[key] = { name: attrName, val: val };\r\n      }\r\n    });\r\n\r\n    return ret;\r\n  }\r\n\r\n  function getAttributesForLabel(attrs, name) {\r\n    var ret = {};\r\n    var endsWith = '-' + name;\r\n    var re = new RegExp(endsWith + '$');\r\n\r\n    angular.forEach(attrs, function (val, key) {\r\n      var denormalized = attrs.$attr[key];\r\n\r\n      if (denormalized && denormalized.match(re)) {\r\n        // remove the last part of the attribute name\r\n        if (denormalized !== 'fis-label') {\r\n          var attrName = denormalized.substring(0, denormalized.length - endsWith.length);\r\n          ret[key] = { name: attrName, val: val };\r\n        }\r\n      }\r\n    });\r\n\r\n    return ret;\r\n  }\r\n\r\n  function findInputs(parent) {\r\n    var ret = {};\r\n\r\n    var nodeList = parent[0].querySelectorAll('[fis-input]');\r\n    for (var i = 0; i < nodeList.length; ++i) {\r\n      var elem = angular.element(nodeList[i]);\r\n      ret[elem.attr('fis-input') || 'input'] = elem;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  function findLabel(parent) {\r\n    var ret = {};\r\n\r\n    parent.find('label').each(function (index, n) {\r\n      var elem = angular.element(n);\r\n      ret[elem.attr('fis-label') || 'label'] = elem;\r\n    });\r\n\r\n    return ret;\r\n  }\r\n\r\n  return {\r\n\r\n    create: function (options) {\r\n      return new FieldDirective(options);\r\n    },\r\n\r\n    // TODO: remove this when we have removed requireJS, only needed for tests to be able to access\r\n    _FieldController: FieldController\r\n\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/field-directive-factory.factory.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _elementUtils = require('./element-utils.factory');\n\nvar _elementUtils2 = _interopRequireDefault(_elementUtils);\n\nvar _fieldDirectiveFactory = require('./field-directive-factory.factory');\n\nvar _fieldDirectiveFactory2 = _interopRequireDefault(_fieldDirectiveFactory);\n\nvar _scopeUtils = require('./scope-utils.factory');\n\nvar _scopeUtils2 = _interopRequireDefault(_scopeUtils);\n\nvar _uniqueIdService = require('./unique-id-service.factory');\n\nvar _uniqueIdService2 = _interopRequireDefault(_uniqueIdService);\n\nvar _input = require('./input.directive');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _applyClassDirective = require('./apply-class-directive.directive');\n\nvar _applyClassDirective2 = _interopRequireDefault(_applyClassDirective);\n\nvar _triggerDirectives = require('./trigger-directives.directive');\n\nvar _triggerDirectives2 = _interopRequireDefault(_triggerDirectives);\n\nvar _uniqueId = require('./unique-id.directive');\n\nvar _uniqueId2 = _interopRequireDefault(_uniqueId);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Utilities for component/directive authoring\n\nvar ngModule = _angular2.default.module('fis.core.directives.utils', []);\n\nngModule.factory('fisElementUtils', _elementUtils2.default);\nngModule.factory('fisFieldDirectiveFactory', _fieldDirectiveFactory2.default);\nngModule.factory('fisScopeUtils', _scopeUtils2.default);\nngModule.factory('fisUniqueIdService', _uniqueIdService2.default);\n\nngModule.directive('fisInput', _input2.default);\nngModule.directive('fisApplyClassDirective', _applyClassDirective2.default);\nngModule.directive('fisUniqueId', _uniqueId2.default);\n\n['fisReinit', 'fisRefresh'].forEach(function (directive) {\n  ngModule.directive(directive, (0, _triggerDirectives2.default)(directive));\n});\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/index.js","import angular from 'angular';\r\n\r\n// Utilities for component/directive authoring\r\n\r\nimport elementUtils from './element-utils.factory';\r\nimport fieldDirective from './field-directive-factory.factory';\r\nimport scopeUtils from './scope-utils.factory';\r\nimport uniqueIdService from './unique-id-service.factory';\r\n\r\nimport input from './input.directive';\r\nimport applyClassDirective from './apply-class-directive.directive';\r\nimport triggerFactory from './trigger-directives.directive';\r\nimport uniqueId from './unique-id.directive';\r\n\r\nconst ngModule = angular.module('fis.core.directives.utils', []);\r\n\r\nngModule.factory('fisElementUtils', elementUtils);\r\nngModule.factory('fisFieldDirectiveFactory', fieldDirective);\r\nngModule.factory('fisScopeUtils', scopeUtils);\r\nngModule.factory('fisUniqueIdService', uniqueIdService);\r\n\r\nngModule.directive('fisInput', input);\r\nngModule.directive('fisApplyClassDirective', applyClassDirective);\r\nngModule.directive('fisUniqueId', uniqueId);\r\n\r\n['fisReinit', 'fisRefresh'].forEach(directive => {\r\n  ngModule.directive(directive, triggerFactory(directive));\r\n});\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  function extractProperty(path, sep, $scope) {\n    var parts = path.split('.');\n\n    // To handle component case where user provide ng-model like '$ctrl.user.name'\n    if (parts.length > 1 && $scope && $scope.$ctrl && $scope.$ctrl.constructor.name !== 'AppComponentController') {\n      parts.splice(0, 1);\n    }\n\n    if (parts.length > 1) {\n      parts.splice(0, 1);\n    }\n\n    var result;\n    if (sep) {\n      result = parts.join(sep).replace(/[[\\]]+/g, sep);\n    } else {\n      result = parts.join('.');\n    }\n    return result;\n  }\n\n  return {\n    restrict: 'AC',\n    priority: 400,\n    require: 'ngModel',\n    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n      // before the ngModel controller is loaded (directive priority is higher),\n      // make sure there's a name assigned to the input so that the ngModel controller\n      // can register itself to the form with that name.\n      if (!$attrs.name && $attrs.ngModel) {\n        $attrs.name = extractProperty($attrs.ngModel, '_', $scope);\n      }\n    }],\n    link: function link(scope, element, attrs, ngModel) {\n      element.addClass('fis-input');\n\n      if (scope.registerInput) {\n        ngModel.fisProperty = extractProperty(attrs.ngModel, undefined, scope);\n        // useful when passed to FieldDirective's fieldValueFn.\n        ngModel.fisInput = attrs.fisInput || 'input';\n        ngModel.fisLabel = attrs.fisLabel;\n        if (attrs.name) {\n          ngModel.fisName = attrs.name;\n        }\n        scope.registerInput(ngModel);\n        element.on('$destroy', function () {\n          scope.unregisterInput(ngModel);\n        });\n      }\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/input.directive.js","/**\r\n * @name fisInput\r\n * @description Sungard Input Component\r\n\t<p>This directive registers the sibling ngModelController to the parent FieldDirective by invoking\r\n\tits registerInput function.\r\n\t</p>\r\n */\r\nexport default function () {\r\n  function extractProperty(path, sep, $scope) {\r\n    var parts = path.split('.');\r\n\r\n    // To handle component case where user provide ng-model like '$ctrl.user.name'\r\n    if (parts.length > 1 && $scope && $scope.$ctrl && $scope.$ctrl.constructor.name !== 'AppComponentController') {\r\n      parts.splice(0, 1);\r\n    }\r\n\r\n    if (parts.length > 1) {\r\n      parts.splice(0, 1);\r\n    }\r\n\r\n    var result;\r\n    if (sep) {\r\n      result = parts.join(sep).replace(/[[\\]]+/g, sep);\r\n    } else {\r\n      result = parts.join('.');\r\n    }\r\n    return result;\r\n  }\r\n\r\n  return {\r\n    restrict: 'AC',\r\n    priority: 400,\r\n    require: 'ngModel',\r\n    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n      // before the ngModel controller is loaded (directive priority is higher),\r\n      // make sure there's a name assigned to the input so that the ngModel controller\r\n      // can register itself to the form with that name.\r\n      if (!$attrs.name && $attrs.ngModel) {\r\n        $attrs.name = extractProperty($attrs.ngModel, '_', $scope);\r\n      }\r\n    }],\r\n    link: function (scope, element, attrs, ngModel) {\r\n      element.addClass('fis-input');\r\n\r\n      if (scope.registerInput) {\r\n        ngModel.fisProperty = extractProperty(attrs.ngModel, undefined, scope);\r\n        // useful when passed to FieldDirective's fieldValueFn.\r\n        ngModel.fisInput = attrs.fisInput || 'input';\r\n        ngModel.fisLabel = attrs.fisLabel;\r\n        if (attrs.name) {\r\n          ngModel.fisName = attrs.name;\r\n        }\r\n        scope.registerInput(ngModel);\r\n        element.on('$destroy', function () {\r\n          scope.unregisterInput(ngModel);\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/input.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var service = {};\n\n  /**\r\n   * @description Allows setting a watch on a specified scope and invoke a callback with the watched value as an argument\r\n   * It also treats 'true'/'false' as hardcoded values and will not put a watch in these cases. This is useful when you are watching a directive attribute.\r\n   * @param {Object} scope The scope on witch to put a watch.\r\n   * @param {String} watched The scoped model to watch. If 'true' or 'false', the value is converted to a boolean and passed directly to the callback.\r\n   * @param {function} cb Callback to be invoked when the value changes. Can be invoked many times in the same $digest. Should be idempotent.\r\n   * @param {Object|String} def If provided, def will be passed to the callback if watched is falsy.\r\n   */\n  service.watch = function (scope, watched, cb, def) {\n    if (!cb) {\n      throw new Error('No callback provided!');\n    }\n\n    if (!watched) {\n      // check for null and undefined. DON'T CHANGE TO !== ELSE THINGS BREAK.\n      if (def != null) {\n        // eslint-disable-line\n        cb(def);\n      }\n      return;\n    }\n\n    if (watched === 'true') {\n      cb(true);\n    } else if (watched === 'false') {\n      cb(false);\n    } else {\n      scope.$watch(watched, function (value) {\n        cb(value);\n      });\n    }\n  };\n\n  /**\r\n   * Trigger a watch function once after a digest cycle competed\r\n   * @param scope scope to create the $watch at\r\n   * @param listener function returning the property to watch for (similarly to the first parameter you pass to regular scope.$watch)\r\n   * @param callback function ti be executed after the digest cycle completed\r\n   * @param $timeout reference to angular $timeout service\r\n   * @param apply boolean, true if the callback should be wrapped in scope.$apply, false to execute without wrapping\r\n   */\n  service.postDigest = function (scope, listener, callback, $timeout, apply) {\n    return function () {\n      var unregister;\n      var previous;\n      var timeout;\n\n      // Register some cleanup methods at the scope\n      scope.$on('$destroy', function () {\n        if (timeout) {\n          $timeout.cancel(timeout);\n        }\n        if (unregister) {\n          unregister();\n        }\n      });\n\n      function postDigest(callback) {\n        // Register a $watch with custom function as watchExpression.\n        // A watchExpression will be executed in every digest cycle\n        unregister = scope.$watch(function () {\n          // In the first digest cycle unregister this watch again\n          // to avoid creating multiple timeouts (infinity loop)\n          unregister();\n          // Create a timeout, this timeout will be executed after the digest cycle finished\n          timeout = $timeout(function () {\n            var current = listener();\n            // Check whether our listener changed\n            if (current !== previous) {\n              if (apply) {\n                // Execute callback in $scope.$apply phase\n                (function (current, previous) {\n                  scope.$apply(function () {\n                    callback(current, previous);\n                  });\n                })(current, previous);\n              } else {\n                callback(current, previous);\n              }\n              previous = current;\n            }\n            // Recursive call to register for the next digest cycle\n            postDigest(callback);\n          }, 0, false);\n        });\n      }\n\n      // Start postDigest Cycle\n      postDigest(callback);\n    }();\n  };\n\n  return service;\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/scope-utils.factory.js","export default function () {\r\n  var service = {};\r\n\r\n  /**\r\n   * @description Allows setting a watch on a specified scope and invoke a callback with the watched value as an argument\r\n   * It also treats 'true'/'false' as hardcoded values and will not put a watch in these cases. This is useful when you are watching a directive attribute.\r\n   * @param {Object} scope The scope on witch to put a watch.\r\n   * @param {String} watched The scoped model to watch. If 'true' or 'false', the value is converted to a boolean and passed directly to the callback.\r\n   * @param {function} cb Callback to be invoked when the value changes. Can be invoked many times in the same $digest. Should be idempotent.\r\n   * @param {Object|String} def If provided, def will be passed to the callback if watched is falsy.\r\n   */\r\n  service.watch = function (scope, watched, cb, def) {\r\n    if (!cb) {\r\n      throw new Error('No callback provided!');\r\n    }\r\n\r\n    if (!watched) {\r\n      // check for null and undefined. DON'T CHANGE TO !== ELSE THINGS BREAK.\r\n      if (def != null) { // eslint-disable-line\r\n        cb(def);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (watched === 'true') {\r\n      cb(true);\r\n    } else if (watched === 'false') {\r\n      cb(false);\r\n    } else {\r\n      scope.$watch(watched, function (value) {\r\n        cb(value);\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Trigger a watch function once after a digest cycle competed\r\n   * @param scope scope to create the $watch at\r\n   * @param listener function returning the property to watch for (similarly to the first parameter you pass to regular scope.$watch)\r\n   * @param callback function ti be executed after the digest cycle completed\r\n   * @param $timeout reference to angular $timeout service\r\n   * @param apply boolean, true if the callback should be wrapped in scope.$apply, false to execute without wrapping\r\n   */\r\n  service.postDigest = function (scope, listener, callback, $timeout, apply) {\r\n    return (function () {\r\n      var unregister;\r\n      var previous;\r\n      var timeout;\r\n\r\n      // Register some cleanup methods at the scope\r\n      scope.$on('$destroy', function () {\r\n        if (timeout) {\r\n          $timeout.cancel(timeout);\r\n        }\r\n        if (unregister) {\r\n          unregister();\r\n        }\r\n      });\r\n\r\n      function postDigest(callback) {\r\n        // Register a $watch with custom function as watchExpression.\r\n        // A watchExpression will be executed in every digest cycle\r\n        unregister = scope.$watch(function () {\r\n          // In the first digest cycle unregister this watch again\r\n          // to avoid creating multiple timeouts (infinity loop)\r\n          unregister();\r\n          // Create a timeout, this timeout will be executed after the digest cycle finished\r\n          timeout = $timeout(function () {\r\n            var current = listener();\r\n            // Check whether our listener changed\r\n            if (current !== previous) {\r\n              if (apply) {\r\n                // Execute callback in $scope.$apply phase\r\n                (function (current, previous) {\r\n                  scope.$apply(function () {\r\n                    callback(current, previous);\r\n                  });\r\n                })(current, previous);\r\n              } else {\r\n                callback(current, previous);\r\n              }\r\n              previous = current;\r\n            }\r\n            // Recursive call to register for the next digest cycle\r\n            postDigest(callback);\r\n          }, 0, false);\r\n        });\r\n      }\r\n\r\n      // Start postDigest Cycle\r\n      postDigest(callback);\r\n    })();\r\n  };\r\n\r\n  return service;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/scope-utils.factory.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (directive) {\n  return function () {\n    return {\n      restrict: 'A',\n      controller: ['$scope', '$attrs', function ($scope, $attrs) {\n        var self = this;\n\n        // put a watch on the attribute's expression and invoke the controller's trigger function\n        $scope.$watch($attrs[directive], function (newVal, oldVal) {\n          if (newVal !== oldVal) {\n            self.trigger($scope, newVal, oldVal);\n          }\n        }, true); // uses angular.equals\n\n        // default trigger function $broadcasts an event with the same name as the directive.\n        // Directives that require this directive can override this function and provide their own.\n        // Like this: triggerCtrl.trigger = function(scope, newVal, oldVal) {...}\n        self.trigger = function (scope, newVal, oldVal) {\n          scope.$broadcast(directive, { value: newVal, oldValue: oldVal });\n        };\n      }]\n    };\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/trigger-directives.directive.js","/**\r\n * @name fisReinit\r\n * @description This directive watches for changes in the provided expression and broadcasts a fisReinit event.\r\n * Other directives can also provide a <code>trigger</code> function that will get executed instead of broadcasting an event.\r\n * Use this attribute directive when you want directives that support it to reinitializing themselves.\r\n * This is useful for directives that do not put watches on all the attributes it supports but you still want to\r\n * change attribute values.\r\n * @methodOf fis.core.directives\r\n */\r\n/**\r\n * @name fisRefresh\r\n * @description This directive watches for changes in the provided expression and broadcasts a fisRefresh event.\r\n * Other directives can also provide a <code>trigger</code> function that will get executed instead of broadcasting an event.\r\n * Use this attribute directive when you want directives that support it to refresh their data without reinitializing themselves.\r\n * @methodOf fis.core.directives\r\n */\r\n export default function (directive) {\r\n   return function () {\r\n     return {\r\n       restrict: 'A',\r\n       controller: ['$scope', '$attrs', function ($scope, $attrs) {\r\n         var self = this;\r\n\r\n          // put a watch on the attribute's expression and invoke the controller's trigger function\r\n         $scope.$watch($attrs[directive], function (newVal, oldVal) {\r\n           if (newVal !== oldVal) {\r\n             self.trigger($scope, newVal, oldVal);\r\n           }\r\n         }, true); // uses angular.equals\r\n\r\n          // default trigger function $broadcasts an event with the same name as the directive.\r\n          // Directives that require this directive can override this function and provide their own.\r\n          // Like this: triggerCtrl.trigger = function(scope, newVal, oldVal) {...}\r\n         self.trigger = function (scope, newVal, oldVal) {\r\n           scope.$broadcast(directive, { value: newVal, oldValue: oldVal });\r\n         };\r\n       }]\r\n     };\r\n   };\r\n }\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/trigger-directives.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  /**\r\n   * Replace all non alphanumeric characters by an underscore\r\n   * @param value which should be cleaned up\r\n   * @param spacesOnly boolean, whether only spaces should be replaced or all non alphanumeric characters\r\n   * @returns {String}\r\n   */\n  function replaceNonAlphaNumeric(value, spacesOnly) {\n    var pattern = /[^\\w_\\-]+/g;\n    if (spacesOnly) {\n      pattern = /[^\\w]+/g;\n    }\n    return value.replace(pattern, '_');\n  }\n\n  /**\r\n   * Append extend to base, separated by an underscore if base is a string of non-zero length\r\n   * Otherwise extend gets returned\r\n   * @param base\r\n   * @param extend\r\n   * @returns {String} concatenation of base and extend, separated by underscore\r\n   */\n  function appendOrReplace(base, extend) {\n    var ret = base;\n    if (angular.isString(extend)) {\n      if (angular.isString(base) && base.length > 0) {\n        ret = base + '_' + extend;\n      } else {\n        ret = extend;\n      }\n    }\n    return ret;\n  }\n\n  var service = {\n\n    generateUniqueId: function () {\n      return function (scope, element, attributes, idBase, allowOverride, seed) {\n        if (angular.isString(idBase) && idBase.indexOf(' ') !== -1) {\n          return service.generateIdWithStaticSeed(scope, element, attributes, undefined, undefined, replaceNonAlphaNumeric(idBase, true), seed);\n        }\n\n        if (fis.initParams().appStage === 'T' || fis.initParams().appStage === 'D') {\n          // test appStage\n          return service.generateUniqueIdForce(scope, element, attributes, idBase, allowOverride, seed);\n        }\n      };\n    }(),\n\n    generateUniqueIdForce: function () {\n      var idCounter = {};\n      var initialized = false;\n\n      return function (scope, element, attributes, idBase, allowOverride, seed) {\n        if (!initialized) {\n          scope.$root.$on('$routeChangeStart', function () {\n            idCounter = {};\n          });\n          initialized = true;\n        }\n\n        // if the element already has an fisid we do not want to change it.\n        if (!allowOverride && element && angular.isDefined(element.attr('fisid'))) {\n          var nonGenId = element.attr('fisid');\n          return nonGenId;\n        }\n\n        var returnValue = idBase || '';\n\n        if (!returnValue) {\n          if (attributes.ngModel) {\n            returnValue = attributes.ngModel;\n          } else if (attributes.ngClick) {\n            if (scope.item && scope.item.path) {\n              returnValue = scope.item.path;\n            } else {\n              returnValue = attributes.ngClick;\n            }\n          } else if (attributes.fisI18n) {\n            returnValue = attributes.fisI18n;\n          }\n        }\n\n        if (seed === undefined) {\n          seed = '';\n        }\n\n        returnValue = replaceNonAlphaNumeric(returnValue) + seed;\n\n        if (idCounter[returnValue]) {\n          idCounter[returnValue] += 1;\n        } else {\n          idCounter[returnValue] = 1;\n        }\n        returnValue = returnValue + '_' + idCounter[returnValue];\n\n        if (element && (allowOverride || !element.attr('fisid'))) {\n          element.attr('fisid', returnValue);\n        }\n\n        return returnValue;\n      };\n    }(),\n\n    generateIdWithStaticSeed: function () {\n      return function (scope, element, attributes, idBase, childIdBase, staticId, seed) {\n        var idPrefix = attributes.fisUniqueIdSeed || idBase || '';\n\n        if (childIdBase) {\n          idPrefix += childIdBase;\n        }\n\n        idPrefix = appendOrReplace(idPrefix, angular.isArray(staticId) ? staticId.join('_') : staticId);\n\n        idPrefix = replaceNonAlphaNumeric(idPrefix);\n\n        if (seed === undefined) {\n          seed = '';\n        }\n        idPrefix += seed;\n\n        if (element && !element.attr('fisid')) {\n          element.attr('fisid', idPrefix);\n        }\n\n        return idPrefix;\n      };\n    }()\n\n  };\n\n  return service;\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/unique-id-service.factory.js","export default function () {\r\n  /**\r\n   * Replace all non alphanumeric characters by an underscore\r\n   * @param value which should be cleaned up\r\n   * @param spacesOnly boolean, whether only spaces should be replaced or all non alphanumeric characters\r\n   * @returns {String}\r\n   */\r\n  function replaceNonAlphaNumeric(value, spacesOnly) {\r\n    var pattern = /[^\\w_\\-]+/g;\r\n    if (spacesOnly) {\r\n      pattern = /[^\\w]+/g;\r\n    }\r\n    return value.replace(pattern, '_');\r\n  }\r\n\r\n  /**\r\n   * Append extend to base, separated by an underscore if base is a string of non-zero length\r\n   * Otherwise extend gets returned\r\n   * @param base\r\n   * @param extend\r\n   * @returns {String} concatenation of base and extend, separated by underscore\r\n   */\r\n  function appendOrReplace(base, extend) {\r\n    var ret = base;\r\n    if (angular.isString(extend)) {\r\n      if (angular.isString(base) && base.length > 0) {\r\n        ret = base + '_' + extend;\r\n      } else {\r\n        ret = extend;\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  var service = {\r\n\r\n    generateUniqueId: (function () {\r\n      return function (scope, element, attributes, idBase, allowOverride, seed) {\r\n        if (angular.isString(idBase) && idBase.indexOf(' ') !== -1) {\r\n          return service.generateIdWithStaticSeed(scope, element, attributes, undefined, undefined, replaceNonAlphaNumeric(idBase, true), seed);\r\n        }\r\n\r\n        if (fis.initParams().appStage === 'T' || fis.initParams().appStage === 'D') { // test appStage\r\n          return service.generateUniqueIdForce(scope, element, attributes, idBase, allowOverride, seed);\r\n        }\r\n      };\r\n    })(),\r\n\r\n    generateUniqueIdForce: (function () {\r\n      var idCounter = {};\r\n      var initialized = false;\r\n\r\n      return function (scope, element, attributes, idBase, allowOverride, seed) {\r\n        if (!initialized) {\r\n          scope.$root.$on('$routeChangeStart', function () {\r\n            idCounter = {};\r\n          });\r\n          initialized = true;\r\n        }\r\n\r\n        // if the element already has an fisid we do not want to change it.\r\n        if (!allowOverride && element && angular.isDefined(element.attr('fisid'))) {\r\n          var nonGenId = element.attr('fisid');\r\n          return nonGenId;\r\n        }\r\n\r\n        var returnValue = idBase || '';\r\n\r\n        if (!returnValue) {\r\n          if (attributes.ngModel) {\r\n            returnValue = attributes.ngModel;\r\n          } else if (attributes.ngClick) {\r\n            if (scope.item && scope.item.path) {\r\n              returnValue = scope.item.path;\r\n            } else {\r\n              returnValue = attributes.ngClick;\r\n            }\r\n          } else if (attributes.fisI18n) {\r\n            returnValue = attributes.fisI18n;\r\n          }\r\n        }\r\n\r\n        if (seed === undefined) {\r\n          seed = '';\r\n        }\r\n\r\n        returnValue = replaceNonAlphaNumeric(returnValue) + seed;\r\n\r\n        if (idCounter[returnValue]) {\r\n          idCounter[returnValue] += 1;\r\n        } else {\r\n          idCounter[returnValue] = 1;\r\n        }\r\n        returnValue = returnValue + '_' + idCounter[returnValue];\r\n\r\n        if (element && (allowOverride || !element.attr('fisid'))) {\r\n          element.attr('fisid', returnValue);\r\n        }\r\n\r\n        return returnValue;\r\n      };\r\n    })(),\r\n\r\n    generateIdWithStaticSeed: (function () {\r\n      return function (scope, element, attributes, idBase, childIdBase, staticId, seed) {\r\n        var idPrefix = attributes.fisUniqueIdSeed || idBase || '';\r\n\r\n        if (childIdBase) {\r\n          idPrefix += childIdBase;\r\n        }\r\n\r\n        idPrefix = appendOrReplace(idPrefix, angular.isArray(staticId) ? staticId.join('_') : staticId);\r\n\r\n        idPrefix = replaceNonAlphaNumeric(idPrefix);\r\n\r\n        if (seed === undefined) {\r\n          seed = '';\r\n        }\r\n        idPrefix += seed;\r\n\r\n        if (element && !element.attr('fisid')) {\r\n          element.attr('fisid', idPrefix);\r\n        }\r\n\r\n        return idPrefix;\r\n      };\r\n    })()\r\n\r\n  };\r\n\r\n  return service;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/unique-id-service.factory.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (fisUniqueIdService) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attributes) {\n      var seed = attributes.fisSeed;\n      if (seed === undefined) {\n        seed = '';\n      }\n      // if test mode, then we build up seeds for unique id's based on parents that contain fis-seed attributes\n      if (fis.initParams().appStage === 'T' || fis.initParams().appStage === 'D') {\n        if (seed.length > 0 && seed.charAt(0) !== '_') {\n          seed = '_' + seed;\n        }\n        var seedArr = element.parents('[fis-seed]');\n        if (seedArr.length > 0) {\n          for (var i = 0; i < seedArr.length; i++) {\n            var elem = angular.element(seedArr[i]);\n            seed = seed + '_' + elem.attr('fis-seed');\n            elem = undefined;\n          }\n        }\n      }\n      if (angular.isDefined(attributes.fisIdNoIncrement) && attributes.fisIdNoIncrement) {\n        fisUniqueIdService.generateIdWithStaticSeed(scope, element, attributes, undefined, undefined, attributes.fisUniqueId, seed);\n      } else if (attributes.fisIdNoIncrement !== '' && attributes.fisIdNoIncrement !== null) {\n        fisUniqueIdService.generateUniqueId(scope, element, attributes, attributes.fisUniqueId, undefined, seed);\n      } else {\n        fisUniqueIdService.generateUniqueId(scope, element, attributes, undefined, undefined, seed);\n      }\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/unique-id.directive.js","/* jshint multistr:true */\r\n\r\n/**\r\n * @name fisUniqueId\r\n * @description Defining directive to make text field\r\n * @methodOf fis.core.directives\r\n *\r\n */\r\nexport default function (fisUniqueIdService) {\r\n  'ngInject';\r\n  return {\r\n    restrict: 'A',\r\n    link: function (scope, element, attributes) {\r\n      var seed = attributes.fisSeed;\r\n      if (seed === undefined) {\r\n        seed = '';\r\n      }\r\n      // if test mode, then we build up seeds for unique id's based on parents that contain fis-seed attributes\r\n      if (fis.initParams().appStage === 'T' || fis.initParams().appStage === 'D') {\r\n        if (seed.length > 0 && seed.charAt(0) !== '_') {\r\n          seed = '_' + seed;\r\n        }\r\n        var seedArr = element.parents('[fis-seed]');\r\n        if (seedArr.length > 0) {\r\n          for (var i = 0; i < seedArr.length; i++) {\r\n            var elem = angular.element(seedArr[i]);\r\n            seed = seed + '_' + elem.attr('fis-seed');\r\n            elem = undefined;\r\n          }\r\n        }\r\n      }\r\n      if (angular.isDefined(attributes.fisIdNoIncrement) && attributes.fisIdNoIncrement) {\r\n        fisUniqueIdService.generateIdWithStaticSeed(scope, element, attributes, undefined, undefined, attributes.fisUniqueId, seed);\r\n      } else if (attributes.fisIdNoIncrement !== '' && attributes.fisIdNoIncrement !== null) {\r\n        fisUniqueIdService.generateUniqueId(scope, element, attributes, attributes.fisUniqueId, undefined, seed);\r\n      } else {\r\n        fisUniqueIdService.generateUniqueId(scope, element, attributes, undefined, undefined, seed);\r\n      }\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./directives/utils/unique-id.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _interpolate = require('./interpolate.filter');\n\nvar _interpolate2 = _interopRequireDefault(_interpolate);\n\nvar _search = require('./search.filter');\n\nvar _search2 = _interopRequireDefault(_search);\n\nvar _uncamelcase = require('./uncamelcase.filter');\n\nvar _uncamelcase2 = _interopRequireDefault(_uncamelcase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.filters', []);\n\nngModule.filter('interpolate', _interpolate2.default);\nngModule.filter('search', _search2.default);\nngModule.filter('uncamelcase', _uncamelcase2.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./filters/index.js","import angular from 'angular';\r\n\r\nimport interpolate from './interpolate.filter';\r\nimport search from './search.filter';\r\nimport uncamelcase from './uncamelcase.filter';\r\n\r\nconst ngModule = angular.module('fis.core.filters', []);\r\n\r\nngModule.filter('interpolate', interpolate);\r\nngModule.filter('search', search);\r\nngModule.filter('uncamelcase', uncamelcase);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./filters/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\r\n                                                                                                                                                                                                                                                                               * @name interpolate\r\n                                                                                                                                                                                                                                                                               * @description This filter allows replacing markers in a string with values.\r\n                                                                                                                                                                                                                                                                               * You can give it an array of string values, a string or an object hash to map a string value to a name.</p>\r\n                                                                                                                                                                                                                                                                               * <p>For an array or a string, the interpolation markers need to contain the index:</p>\r\n                                                                                                                                                                                                                                                                               * <pre>'Hello {0}' | interpolate ['World'] => 'Hello World'\r\n                                                                                                                                                                                                                                                                               * 'Hello {0} | interpolate 'Pierre' => 'Hello Pierre'</pre>\r\n                                                                                                                                                                                                                                                                               * <p>For an object hash, the interpolation markers need to contain the hash keys:</p>\r\n                                                                                                                                                                                                                                                                               * <pre>'Hello {firstName} {lastName} | interpolate {firstName: 'Pierre', lastName: 'Asselin'} => Hello Pierre Asselin</pre>\r\n                                                                                                                                                                                                                                                                               * <p>You can also use this filter inside a service or a controller by injecting the $filter service:</p>\r\n                                                                                                                                                                                                                                                                               * <pre>$filter('interpolate')('Hello {0}')</pre>\r\n                                                                                                                                                                                                                                                                               * @param {String} text The text to interpolate the values with\r\n                                                                                                                                                                                                                                                                               * @param {Object|String[]|String} val The value(s) to use for interpolation\r\n                                                                                                                                                                                                                                                                               * @methodOf fis.core.filters\r\n                                                                                                                                                                                                                                                                               */\n\n\nexports.default = function () {\n  'use strict';\n\n  return function (text, val) {\n    if (text) {\n      var str = String(text);\n\n      if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object' && typeof val !== 'array') {\n        // eslint-disable-line\n        val = [val];\n      }\n      for (var itm in val) {\n        if (itm) {\n          var re = new RegExp('\\\\{' + itm + '\\\\}', 'mg');\n          str = str.replace(re, val[itm]);\n        }\n      }\n      return str;\n    }\n\n    return '';\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./filters/interpolate.filter.js","/**\r\n * @name interpolate\r\n * @description This filter allows replacing markers in a string with values.\r\n * You can give it an array of string values, a string or an object hash to map a string value to a name.</p>\r\n * <p>For an array or a string, the interpolation markers need to contain the index:</p>\r\n * <pre>'Hello {0}' | interpolate ['World'] => 'Hello World'\r\n * 'Hello {0} | interpolate 'Pierre' => 'Hello Pierre'</pre>\r\n * <p>For an object hash, the interpolation markers need to contain the hash keys:</p>\r\n * <pre>'Hello {firstName} {lastName} | interpolate {firstName: 'Pierre', lastName: 'Asselin'} => Hello Pierre Asselin</pre>\r\n * <p>You can also use this filter inside a service or a controller by injecting the $filter service:</p>\r\n * <pre>$filter('interpolate')('Hello {0}')</pre>\r\n * @param {String} text The text to interpolate the values with\r\n * @param {Object|String[]|String} val The value(s) to use for interpolation\r\n * @methodOf fis.core.filters\r\n */\r\nexport default function () {\r\n  'use strict';\r\n\r\n  return function (text, val) {\r\n    if (text) {\r\n      var str = String(text);\r\n\r\n      if (typeof (val) !== 'object' && typeof (val) !== 'array') { // eslint-disable-line\r\n        val = [val];\r\n      }\r\n      for (var itm in val) {\r\n        if (itm) {\r\n          var re = new RegExp('\\\\{' + itm + '\\\\}', 'mg');\r\n          str = str.replace(re, val[itm]);\r\n        }\r\n      }\r\n      return str;\r\n    }\r\n\r\n    return '';\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./filters/interpolate.filter.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'use strict';\n\n  return function (list, queryObj, property) {\n    var requiredObj;\n    var queryKeys = queryObj ? Object.keys(queryObj) : [];\n    list.some(function (item) {\n      var currentItemMatchesQueryObj = queryKeys.every(function (queryKey) {\n        return queryObj[queryKey] === item[queryKey];\n      });\n      if (currentItemMatchesQueryObj) {\n        requiredObj = item;\n        return true;\n      }\n      return false;\n    });\n    if (requiredObj) {\n      if (property) {\n        return requiredObj[property] || '';\n      }\n      return requiredObj;\n    }\n    return '';\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./filters/search.filter.js","/**\r\n * @name search\r\n * @description This filter searches a given object on for a given query and if a matched object is found, it returns the\r\n * value of 'property' property from that object.\r\n * Example:\r\n * {{[{value:1, label:'A'}, {value:2, label:'B'}] | search:{value:2}:'label'}} => 'B'\r\n * {{[{value:1, label:'A'}, {value:2, label:'B'}] | search:{value:3}:'label'}} => ''\r\n * {{[{value:1, label:'A'}, {value:2, label:'B'}] | search:{value:1}:'someproperty'}} => ''\r\n * {{[{value:1, label:'A'}, {value:2, label:'B'}] | search:{value:1}}} => {value:1, label:'A'}\r\n * @param {String} list The array/collection to be searched\r\n * @param {Object} queryObj The object that is used for querying to find a single object.\r\n * @param {String} property The property of the object found by querying 'list'. The value of this property will be returned.\r\n * @methodOf fis.core.filters\r\n */\r\nexport default function () {\r\n  'use strict';\r\n  return function (list, queryObj, property) {\r\n    var requiredObj;\r\n    var queryKeys = queryObj ? Object.keys(queryObj) : [];\r\n    list.some(function (item) {\r\n      var currentItemMatchesQueryObj = queryKeys.every(function (queryKey) {\r\n        return queryObj[queryKey] === item[queryKey];\r\n      });\r\n      if (currentItemMatchesQueryObj) {\r\n        requiredObj = item;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    if (requiredObj) {\r\n      if (property) {\r\n        return requiredObj[property] || '';\r\n      }\r\n      return requiredObj;\r\n    }\r\n    return '';\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./filters/search.filter.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'use strict';\n\n  return function (text) {\n    if (text) {\n      return text\n      // insert a space between lower & upper\n      .replace(/([a-z])([A-Z])/g, '$1 $2')\n      // space before last upper in a sequence followed by lower\n      .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\n      // uppercase the first character\n      .replace(/^\\w/, function (str) {\n        return str.toUpperCase();\n      });\n    }\n    return '';\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./filters/uncamelcase.filter.js","/**\r\n * @name uncamelcase\r\n * @description This filter allows converting a camelCased string to a more human readable string.\r\n * <pre>'accountName' | uncamelcase => 'Account Name'\r\n * 'innerHTML' | uncamelcase => 'Inner HTML'\r\n * $filter('uncamelcase')('anotherString') => 'Another String'</pre>\r\n * @param {String} text The text to uncamelcase\r\n */\r\nexport default function () {\r\n  'use strict';\r\n\r\n  return function (text) {\r\n    if (text) {\r\n      return text\r\n        // insert a space between lower & upper\r\n        .replace(/([a-z])([A-Z])/g, '$1 $2')\r\n        // space before last upper in a sequence followed by lower\r\n        .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\r\n        // uppercase the first character\r\n        .replace(/^\\w/, function (str) {\r\n          return str.toUpperCase();\r\n        });\r\n    }\r\n    return '';\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./filters/uncamelcase.filter.js","'use strict';\n\nvar fis = window.fis = window.sg = window.fis || window.sg || {};\n\nfis.__angularModule = angular.module;\n\nfis.__controllers = {};\n\nangular.module = function (name, deps) {\n  'use strict';\n\n  var module = fis.__angularModule(name, deps);\n  var origCtrlFn = module.controller;\n\n  module.controller = function (name, constructor) {\n    var entry = constructor;\n\n    if (angular.isArray(constructor)) {\n      entry = constructor[constructor.length - 1];\n    }\n    fis.__controllers[name] = entry;\n\n    return origCtrlFn.apply(this, arguments);\n  };\n  return module;\n};\n\n\n// WEBPACK FOOTER //\n// ./fis-angular-decorators.js","var fis = window.fis = window.sg = (window.fis || window.sg || {});\r\n\r\nfis.__angularModule = angular.module;\r\n\r\nfis.__controllers = {};\r\n\r\nangular.module = function (name, deps) {\r\n  'use strict';\r\n  var module = fis.__angularModule(name, deps);\r\n  var origCtrlFn = module.controller;\r\n\r\n  module.controller = function (name, constructor) {\r\n    var entry = constructor;\r\n\r\n    if (angular.isArray(constructor)) {\r\n      entry = constructor[constructor.length - 1];\r\n    }\r\n    fis.__controllers[name] = entry;\r\n\r\n    return origCtrlFn.apply(this, arguments);\r\n  };\r\n  return module;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./fis-angular-decorators.js","'use strict';\n\n(function (fis, document) {\n  'use strict';\n\n  var params = null;\n  var cacheQuery = {};\n  var injector = null;\n\n  angular.extend(fis, {\n    // adding version this way so that grunt-bump can automatically update the version\n    version: '4.5.1'\n  });\n\n  // this can be replaced by using applications to change the cache string sent in requests\n  fis.cacheVersion = fis.version;\n\n  /**\r\n   * @name extend\r\n   * @description Copies properties of the second object into the first\r\n   * @param o1 Object to 'extend'. (Target)\r\n   * @param o2 Object to copy properties from. (Source)\r\n   * @returns The extended object.\r\n   */\n  function extend(o1, o2) {\n    for (var itm in o2) {\n      if (itm) {\n        o1[itm] = o2[itm];\n      }\n    }\n    return o1;\n  }\n\n  fis.paths = function () {\n    return {};\n  };\n  fis.shim = function () {\n    return {};\n  };\n\n  /**\r\n   * @class\r\n   * @name fis.initParams\r\n   * @description Get/Set accessor function for initParameters. Would normally be invoked by app-setup.js\r\n   * @param [opts] String\r\n   * @returns initParams object populated with appStage, configEndpoint, baseElement, modules etc.\r\n   * @namespace fis.initParams\r\n   */\n  fis.initParams = function (opts) {\n    if (opts || params === null) {\n      if (opts) {\n        // Use this syntax over the object notation, otherwise grunt-bump will try to update the object and\n        // destroy the file.\n        cacheQuery = {};\n        cacheQuery.version = fis.cacheVersion;\n        cacheQuery.appStage = opts.appStage;\n      }\n\n      params = extend(params || {\n        appStage: fis.utils.getRequestParam('appStage') || 'P',\n        baseElement: document,\n        modules: []\n      }, opts || {});\n\n      if (params.appStage === 'D') {\n        console.log('- Development mode.');\n      }\n    }\n\n    return params;\n  };\n\n  fis.getCacheQuery = function () {\n    return cacheQuery;\n  };\n\n  // Keep the String Parameter function for backward compatibility\n  fis.cacheQueryParameter = function (args) {\n    console.warn('Please use fisUtilService appendCacheQueryParameter() function for adding cache query parameters to url');\n    var version = cacheQuery.version;\n    if (args) {\n      version = args;\n    }\n    return 'version=' + version + '&appStage=' + cacheQuery.appStage;\n    // 'version=' + version + '&appStage=' + cacheQuery.appStage + '';\n  };\n\n  fis.prefixContext = function (pathObj) {\n    var modifiedPaths = extend({}, pathObj);\n    var context = fis.getLocationPath();\n    // context === / means no context root else context root like /myapp/\n    if (context !== '/') {\n      // check if it ends in resource extension like test.html, test.htm etc. Drop it if that's the case\n      var arrContext = context.split('/');\n      var arrContextLength = arrContext.length;\n      if (arrContext[arrContextLength - 1].indexOf('.') !== -1) {\n        // resource extension present\n        arrContext.splice(arrContextLength - 1, 1); // drop the last part\n      }\n      context = arrContext.join('/');\n\n      // remove the trailing / if it ends with one\n      if (context.match(/\\/$/)) {\n        context = context.substr(0, context.length - 1);\n      }\n      for (var prop in modifiedPaths) {\n        if (modifiedPaths[prop].indexOf('/') === 0) {\n          modifiedPaths[prop] = context + modifiedPaths[prop];\n        }\n      }\n    }\n    return modifiedPaths;\n  };\n\n  // Extracting location path logic into separate method for testability\n  fis.getLocationPath = function () {\n    return window.location.pathname;\n  };\n\n  fis.packages = function (arr) {\n    var i;\n    var n = arr.length;\n    var packages = [];\n\n    if (params.appStage !== 'D') {\n      return arr;\n    }\n\n    for (i = 0; i < n; i++) {\n      packages.push({ name: arr[i], main: 'dev' });\n    }\n\n    return packages;\n  };\n\n  fis.bootstrapAngular = function (depModules) {\n    // only bootstrap if it wasn't already done by ng-app\n    if (!fis.utils.getInjector()) {\n      injector = angular.bootstrap(document, depModules);\n    }\n  };\n  /**\r\n   * @class\r\n   * @name fis.start\r\n   * @description Boot starting the framework. Loading the required or necessary script files through this.\r\n   * @param [init]\r\n   * @namespace fis.start\r\n   */\n  fis.start = function (initParams) {\n    if (angular.isObject(initParams)) {\n      initParams = fis.initParams(initParams);\n    } else {\n      initParams = fis.initParams();\n    }\n\n    if (!angular.isObject(initParams)) {\n      throw new Error('Init params need to be provided to fis.start.');\n    }\n\n    if (!angular.isArray(initParams.modules)) {\n      throw new Error('Modules needs to be defined in init parameters.');\n    }\n\n    // apps that are using ng-app will not have a configEndpoint and would use the newer\n    // fisConfig constant approach. For apps using fis.start, keep the old behavior of\n    // providing a default configEndpoint\n    if (!initParams.configEndpoint) {\n      initParams.configEndpoint = 'api/config';\n    }\n\n    angular.element(document).ready(function () {\n      // only bootstrap if it wasn't already done by ng-app\n      fis.bootstrapAngular(initParams.modules);\n    });\n  };\n\n  /**\r\n   * @namespace fis.utils\r\n   */\n  fis.utils = {};\n\n  /**\r\n   * @name getRequestParam\r\n   * @description Returns a single request parameter for the provided name\r\n   * @param name The name of the request parameter you are looking for\r\n   * @returns The value of the parameter if it is present only once or an array of values if it is present multiple times. Null is not found.\r\n   * @memberOf fis.utils\r\n   */\n  fis.utils.getRequestParam = function (name) {\n    var isString = function isString(value) {\n      return typeof value === 'string' || value instanceof String;\n    };\n    var re = new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)', 'g');\n    var res = [];\n    var search = isString(this) ? this : window.location.search;\n    var match = re.exec(search);\n\n    while (match) {\n      res.push(decodeURIComponent(match[1]));\n      match = re.exec(search);\n    }\n\n    if (res.length === 0) {\n      return null;\n    } else if (res.length === 1) {\n      return res[0];\n    }\n\n    return res;\n  };\n\n  fis.utils.getInjector = function () {\n    return injector;\n  };\n\n  function findRootElement() {\n    var rootElement = document.querySelector && document.querySelector('[ng-app]');\n    if (rootElement) {\n      return angular.element(rootElement);\n    }\n    return null;\n  }\n\n  function findInjector() {\n    var root = findRootElement();\n    if (root) {\n      return root.injector();\n    }\n    return null;\n  }\n\n  angular.element(document).ready(function () {\n    angular.element(document).find('body').removeClass('fis-loading-indicator');\n    injector = findInjector();\n  });\n\n  console.log('  ____  _   _ _____\\n' + ' |  _ \\\\| | | |  ___|\\n' + ' | |_) | | | | |_\\n' + ' |  _ <| |_| |  _|\\n' + ' |_| \\\\_\\\\\\\\___/|_|\\n' + ' FIS Responsive UI Framework\\n' + ' Version: ' + fis.version + '\\n © 2012-' + (new Date().getYear() + 1900) + ', all rights reserved.\\n');\n})(window.fis = window.sg = window.fis || window.sg || {}, document);\n\n\n// WEBPACK FOOTER //\n// ./fis.js","(function (fis, document) {\r\n  'use strict';\r\n  var params = null;\r\n  var cacheQuery = {};\r\n  var injector = null;\r\n\r\n  angular.extend(fis, {\r\n    // adding version this way so that grunt-bump can automatically update the version\r\n    version: '4.5.1'\r\n  });\r\n\r\n  // this can be replaced by using applications to change the cache string sent in requests\r\n  fis.cacheVersion = fis.version;\r\n\r\n  /**\r\n   * @name extend\r\n   * @description Copies properties of the second object into the first\r\n   * @param o1 Object to 'extend'. (Target)\r\n   * @param o2 Object to copy properties from. (Source)\r\n   * @returns The extended object.\r\n   */\r\n  function extend(o1, o2) {\r\n    for (var itm in o2) {\r\n      if (itm) {\r\n        o1[itm] = o2[itm];\r\n      }\r\n    }\r\n    return o1;\r\n  }\r\n\r\n  fis.paths = function () {\r\n    return {};\r\n  };\r\n  fis.shim = function () {\r\n    return {};\r\n  };\r\n\r\n  /**\r\n   * @class\r\n   * @name fis.initParams\r\n   * @description Get/Set accessor function for initParameters. Would normally be invoked by app-setup.js\r\n   * @param [opts] String\r\n   * @returns initParams object populated with appStage, configEndpoint, baseElement, modules etc.\r\n   * @namespace fis.initParams\r\n   */\r\n  fis.initParams = function (opts) {\r\n    if (opts || params === null) {\r\n      if (opts) {\r\n        // Use this syntax over the object notation, otherwise grunt-bump will try to update the object and\r\n        // destroy the file.\r\n        cacheQuery = {};\r\n        cacheQuery.version = fis.cacheVersion;\r\n        cacheQuery.appStage = opts.appStage;\r\n      }\r\n\r\n      params = extend(params || {\r\n        appStage: fis.utils.getRequestParam('appStage') || 'P',\r\n        baseElement: document,\r\n        modules: []\r\n      }, opts || {});\r\n\r\n      if (params.appStage === 'D') {\r\n        console.log('- Development mode.');\r\n      }\r\n    }\r\n\r\n    return params;\r\n  };\r\n\r\n  fis.getCacheQuery = function () {\r\n    return cacheQuery;\r\n  };\r\n\r\n  // Keep the String Parameter function for backward compatibility\r\n  fis.cacheQueryParameter = function (args) {\r\n    console.warn('Please use fisUtilService appendCacheQueryParameter() function for adding cache query parameters to url');\r\n    var version = cacheQuery.version;\r\n    if (args) {\r\n      version = args;\r\n    }\r\n    return `version=${version}&appStage=${cacheQuery.appStage}`;\r\n    // 'version=' + version + '&appStage=' + cacheQuery.appStage + '';\r\n  };\r\n\r\n  fis.prefixContext = function (pathObj) {\r\n    var modifiedPaths = extend({}, pathObj);\r\n    var context = fis.getLocationPath();\r\n    // context === / means no context root else context root like /myapp/\r\n    if (context !== '/') {\r\n      // check if it ends in resource extension like test.html, test.htm etc. Drop it if that's the case\r\n      var arrContext = context.split('/');\r\n      var arrContextLength = arrContext.length;\r\n      if (arrContext[arrContextLength - 1].indexOf('.') !== -1) { // resource extension present\r\n        arrContext.splice(arrContextLength - 1, 1);// drop the last part\r\n      }\r\n      context = arrContext.join('/');\r\n\r\n      // remove the trailing / if it ends with one\r\n      if (context.match(/\\/$/)) {\r\n        context = context.substr(0, context.length - 1);\r\n      }\r\n      for (var prop in modifiedPaths) {\r\n        if (modifiedPaths[prop].indexOf('/') === 0) {\r\n          modifiedPaths[prop] = context + modifiedPaths[prop];\r\n        }\r\n      }\r\n    }\r\n    return modifiedPaths;\r\n  };\r\n\r\n  // Extracting location path logic into separate method for testability\r\n  fis.getLocationPath = function () {\r\n    return window.location.pathname;\r\n  };\r\n\r\n  fis.packages = function (arr) {\r\n    var i;\r\n    var n = arr.length;\r\n    var packages = [];\r\n\r\n    if (params.appStage !== 'D') {\r\n      return arr;\r\n    }\r\n\r\n    for (i = 0; i < n; i++) {\r\n      packages.push({ name: arr[i], main: 'dev' });\r\n    }\r\n\r\n    return packages;\r\n  };\r\n\r\n  fis.bootstrapAngular = function (depModules) {\r\n    // only bootstrap if it wasn't already done by ng-app\r\n    if (!fis.utils.getInjector()) {\r\n      injector = angular.bootstrap(document, depModules);\r\n    }\r\n  };\r\n  /**\r\n   * @class\r\n   * @name fis.start\r\n   * @description Boot starting the framework. Loading the required or necessary script files through this.\r\n   * @param [init]\r\n   * @namespace fis.start\r\n   */\r\n  fis.start = function (initParams) {\r\n    if (angular.isObject(initParams)) {\r\n      initParams = fis.initParams(initParams);\r\n    } else {\r\n      initParams = fis.initParams();\r\n    }\r\n\r\n    if (!angular.isObject(initParams)) {\r\n      throw new Error('Init params need to be provided to fis.start.');\r\n    }\r\n\r\n    if (!angular.isArray(initParams.modules)) {\r\n      throw new Error('Modules needs to be defined in init parameters.');\r\n    }\r\n\r\n    // apps that are using ng-app will not have a configEndpoint and would use the newer\r\n    // fisConfig constant approach. For apps using fis.start, keep the old behavior of\r\n    // providing a default configEndpoint\r\n    if (!initParams.configEndpoint) {\r\n      initParams.configEndpoint = 'api/config';\r\n    }\r\n\r\n    angular.element(document).ready(function () {\r\n      // only bootstrap if it wasn't already done by ng-app\r\n      fis.bootstrapAngular(initParams.modules);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @namespace fis.utils\r\n   */\r\n  fis.utils = {};\r\n\r\n  /**\r\n   * @name getRequestParam\r\n   * @description Returns a single request parameter for the provided name\r\n   * @param name The name of the request parameter you are looking for\r\n   * @returns The value of the parameter if it is present only once or an array of values if it is present multiple times. Null is not found.\r\n   * @memberOf fis.utils\r\n   */\r\n  fis.utils.getRequestParam = function (name) {\r\n    var isString = function (value) {\r\n      return typeof value === 'string' || value instanceof String;\r\n    };\r\n    var re = new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)', 'g');\r\n    var res = [];\r\n    var search = isString(this) ? this : window.location.search;\r\n    var match = re.exec(search);\r\n\r\n    while (match) {\r\n      res.push(decodeURIComponent(match[1]));\r\n      match = re.exec(search);\r\n    }\r\n\r\n    if (res.length === 0) {\r\n      return null;\r\n    } else if (res.length === 1) {\r\n      return res[0];\r\n    }\r\n\r\n    return res;\r\n  };\r\n\r\n  fis.utils.getInjector = function () {\r\n    return injector;\r\n  };\r\n\r\n  function findRootElement() {\r\n    var rootElement = document.querySelector && document.querySelector('[ng-app]');\r\n    if (rootElement) {\r\n      return angular.element(rootElement);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function findInjector() {\r\n    var root = findRootElement();\r\n    if (root) {\r\n      return root.injector();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  angular.element(document).ready(function () {\r\n    angular.element(document).find('body').removeClass('fis-loading-indicator');\r\n    injector = findInjector();\r\n  });\r\n\r\n  console.log(\r\n    '  ____  _   _ _____\\n' +\r\n    ' |  _ \\\\| | | |  ___|\\n' +\r\n    ' | |_) | | | | |_\\n' +\r\n    ' |  _ <| |_| |  _|\\n' +\r\n    ' |_| \\\\_\\\\\\\\___/|_|\\n' +\r\n    ' FIS Responsive UI Framework\\n' +\r\n    ' Version: ' + fis.version +\r\n    '\\n © 2012-' + (new Date().getYear() + 1900) + ', all rights reserved.\\n'\r\n  );\r\n}(window.fis = window.sg = (window.fis || window.sg || {}), document));\r\n\n\n\n// WEBPACK FOOTER //\n// ./fis.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($compile, fisConfig) {\n  'ngInject';\n\n  return {\n    restrict: 'E',\n    replace: 'true',\n    template: '<div class=\"hookList\" />',\n    link: function link(scope, elem, attrs) {\n      var newTemplate = buildHookListElement(attrs);\n      var hookList = angular.element(newTemplate);\n      elem.append(hookList);\n      $compile(hookList)(scope);\n    }\n  };\n\n  function buildHookListElement(attrs) {\n    var buffer = [];\n    if (fisConfig && fisConfig.hookListConfig) {\n      buffer.push('<div>');\n\n      fisConfig.hookListConfig.forEach(function (configItem) {\n        if (configItem.enabled === 'true') {\n          if (configItem.id === attrs.id) {\n            buffer.push(buildHookElement(configItem));\n          }\n        }\n      });\n      buffer.push('</div>');\n    }\n    return buffer.join('');\n  }\n\n  function buildHookElement(item) {\n    var hooks = item.hooks;\n    var buffer = ['<div'];\n    hooks.forEach(function (hookId) {\n      buffer.push('<div>');\n      buffer.push('<fis-hook id=\"');\n      buffer.push(hookId);\n      buffer.push('\"');\n      buffer.push(' />');\n      buffer.push('</div>');\n    });\n    buffer.push('</div>');\n    return buffer.join('');\n  }\n};\n\n\n// WEBPACK FOOTER //\n// ./hook/hook-list.directive.js","/**\r\n * @name fisHookLIst\r\n * @description The fisHookList directive will read the config and add a list of fisHook directives to the DOM\r\n *\r\n */\r\nexport default function ($compile, fisConfig) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'E',\r\n    replace: 'true',\r\n    template: '<div class=\"hookList\" />',\r\n    link: function (scope, elem, attrs) {\r\n      var newTemplate = buildHookListElement(attrs);\r\n      var hookList = angular.element(newTemplate);\r\n      elem.append(hookList);\r\n      $compile(hookList)(scope);\r\n    }\r\n  };\r\n\r\n  function buildHookListElement(attrs) {\r\n    var buffer = [];\r\n    if (fisConfig && fisConfig.hookListConfig) {\r\n      buffer.push('<div>');\r\n\r\n      fisConfig.hookListConfig.forEach(function (configItem) {\r\n        if (configItem.enabled === 'true') {\r\n          if (configItem.id === attrs.id) {\r\n            buffer.push(buildHookElement(configItem));\r\n          }\r\n        }\r\n      });\r\n      buffer.push('</div>');\r\n    }\r\n    return buffer.join('');\r\n  }\r\n\r\n  function buildHookElement(item) {\r\n    var hooks = item.hooks;\r\n    var buffer = ['<div'];\r\n    hooks.forEach(function (hookId) {\r\n      buffer.push('<div>');\r\n      buffer.push('<fis-hook id=\"');\r\n      buffer.push(hookId);\r\n      buffer.push('\"');\r\n      buffer.push(' />');\r\n      buffer.push('</div>');\r\n    });\r\n    buffer.push('</div>');\r\n    return buffer.join('');\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./hook/hook-list.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($compile, fisConfig, $templateCache, $parse, fisTemplateCacheService) {\n  'ngInject';\n\n  return {\n    restrict: 'E',\n    replace: 'true',\n    scope: true,\n    template: '<div class=\"hook\"></div>',\n    link: function link(scope, elem, attrs) {\n      var setHookData = function setHookData() {\n        var fisHookData = $parse(attrs.fisHookData);\n        scope.fisHookData = fisHookData(scope);\n      };\n\n      if (attrs.fisHookData) {\n        setHookData();\n        attrs.$observe('fisHookData', function () {\n          setHookData();\n        });\n      }\n\n      if (attrs.id) {\n        var templateName = attrs.id;\n        var template = fisTemplateCacheService.getTemplate(templateName);\n\n        if (angular.isDefined(template)) {\n          if (attrs.ngController) {\n            template = addController(template, attrs);\n          }\n          var hook = angular.element(template);\n          elem.append(hook);\n          $compile(hook)(scope);\n        }\n      }\n    }\n  };\n\n  function addController(template, attrs) {\n    var startDiv = '<div ng-controller=\"' + attrs.ngController + '\">';\n    var endDiv = '</div>';\n    return startDiv + template + endDiv;\n  }\n};\n\n\n// WEBPACK FOOTER //\n// ./hook/hook.directive.js","/**\r\n * @name fisHook\r\n * @description The fisHook directive will read the config and add a directive to the DOM\r\n *\r\n */\r\nexport default function ($compile, fisConfig, $templateCache, $parse, fisTemplateCacheService) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'E',\r\n    replace: 'true',\r\n    scope: true,\r\n    template: '<div class=\"hook\"></div>',\r\n    link: function (scope, elem, attrs) {\r\n      var setHookData = function () {\r\n        var fisHookData = $parse(attrs.fisHookData);\r\n        scope.fisHookData = fisHookData(scope);\r\n      };\r\n\r\n      if (attrs.fisHookData) {\r\n        setHookData();\r\n        attrs.$observe('fisHookData', function () {\r\n          setHookData();\r\n        });\r\n      }\r\n\r\n      if (attrs.id) {\r\n        var templateName = attrs.id;\r\n        var template = fisTemplateCacheService.getTemplate(templateName);\r\n\r\n        if (angular.isDefined(template)) {\r\n          if (attrs.ngController) {\r\n            template = addController(template, attrs);\r\n          }\r\n          var hook = angular.element(template);\r\n          elem.append(hook);\r\n          $compile(hook)(scope);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  function addController(template, attrs) {\r\n    var startDiv = '<div ng-controller=\"' + attrs.ngController + '\">';\r\n    var endDiv = '</div>';\r\n    return startDiv + template + endDiv;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./hook/hook.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _hook = require('./hook.directive');\n\nvar _hook2 = _interopRequireDefault(_hook);\n\nvar _hookList = require('./hook-list.directive');\n\nvar _hookList2 = _interopRequireDefault(_hookList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.hook', []);\n\nngModule.directive('fisHook', _hook2.default);\nngModule.directive('fisHookList', _hookList2.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./hook/index.js","import angular from 'angular';\r\n\r\nimport hookDirective from './hook.directive';\r\nimport hookListDirective from './hook-list.directive';\r\n\r\nconst ngModule = angular.module('fis.core.hook', []);\r\n\r\nngModule.directive('fisHook', hookDirective);\r\nngModule.directive('fisHookList', hookListDirective);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./hook/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'use strict';\n\n  var self = this;\n  var NOT_FOUND = '__NOT_FOUND__';\n\n  var defaultLocale = 'en';\n  self.setDefaultLocale = function (locale) {\n    defaultLocale = locale;\n  };\n\n  self.$get = ['$rootScope', '$http', '$q', '$location', 'fisPubSubService', 'fisConfig', '$translate', function ($rootScope, $http, $q, $location, fisPubSubService, conf, $translate) {\n    var serv = {};\n\n    var supportedLanguagesDeferred = $q.defer();\n    serv.supportedLanguages = supportedLanguagesDeferred.promise;\n\n    /**\r\n     * @name defaultLocale\r\n     * @description Getter function to access the framework default locale\r\n     * @return the default framework locale\r\n     * @methodOf angular.module('fis.core').fisI18nService\r\n     */\n    serv.defaultLocale = function () {\n      return defaultLocale;\n    };\n\n    var cancelTranslateLoadingSuccess = $rootScope.$on('$translateLoadingSuccess', function () {\n      fisPubSubService.publish('shell.i18nReady');\n      cancelTranslateLoadingSuccess();\n    });\n\n    /**\r\n     * @name locale\r\n     * @description Getter/setter function to access the current locale\r\n     *  @param [locale] The locale string to be set (optional).\r\n     *  @return the current locale\r\n     *  @methodOf angular.module('fis.core').fisI18nService\r\n     */\n    serv.locale = function (locale) {\n      if (locale) {\n        // only way to only request a single language is to\n        $translate.use(locale);\n        $http.defaults.headers.common['Accept-Language'] = locale;\n        fisPubSubService.publish('fisLocaleChanged', locale);\n      }\n\n      return locale || $translate.proposedLanguage();\n    };\n\n    serv.isTranslationReady = function () {\n      if ($translate.isReady() && $translate.getTranslationTable($translate.proposedLanguage()) !== null) {\n        return true;\n      }\n      return false;\n    };\n\n    function processLocaleConfiguration(defaultLang) {\n      var initLang = $location.search().lang || serv.defaultLocale();\n      if (initLang !== defaultLang && conf.supportedLanguages) {\n        // First check for actual language code like \"de-CH\" from supported language list\n        var foundLang;\n        conf.supportedLanguages.some(function (language) {\n          if (angular.equals(language.value, defaultLang)) {\n            foundLang = language;\n            return true;\n          }\n          return false;\n        });\n        // if not found then check for a fallback standard language code\n        // like \"de\" from supported language list\n        if (angular.isUndefined(foundLang)) {\n          var standardLangCode = defaultLang.split('-');\n          conf.supportedLanguages.some(function (language) {\n            if (angular.equals(language.value, standardLangCode[0])) {\n              foundLang = language;\n              return true;\n            }\n            return false;\n          });\n        }\n        if (angular.isDefined(foundLang)) {\n          initLang = foundLang.value ? foundLang.value : initLang;\n        }\n      }\n\n      $http.defaults.headers.common['Accept-Language'] = initLang;\n\n      $translate.use(initLang);\n\n      // only invoked once on load of the page (once config is loaded)\n      fisPubSubService.publish('fisLocaleSet', initLang);\n\n      supportedLanguagesDeferred.resolve(conf.supportedLanguages);\n      // Put the $location in the rootScope so that we can watch it\n      $rootScope.location = $location;\n\n      // put a watch on the lang request parameter and change the locale according to that parameter\n      $rootScope.$watch('location.search().lang', function (lang) {\n        if (lang && lang !== serv.locale()) {\n          serv.locale(lang);\n          // FIXME: removing the lang param because it screws up routes.\n          $rootScope.location.search('lang', null);\n        }\n      });\n    }\n    processLocaleConfiguration(fetchLocaleFromConfig());\n    // return config locale or fetch locale from browser\n    function fetchLocale() {\n      if (angular.isDefined(conf.locale)) {\n        return conf.locale;\n      }\n      return findBestDefaultLanguage();\n    }\n\n    // Retrieve locale as per configuration provided by user\n    function fetchLocaleFromConfig() {\n      var defaultLang = serv.defaultLocale();\n      if (angular.isDefined(conf.preferredLocale)) {\n        if (conf.preferredLocale === 'browser') {\n          defaultLang = findBestDefaultLanguage();\n        } else {\n          defaultLang = fetchLocale();\n        }\n      } else {\n        defaultLang = fetchLocale();\n      }\n      return defaultLang;\n    }\n\n    // find the closest language we can from what is sent through the \"Accept-Language\" header.\n    // After invocation of processLocaleConfiguration, we set the Accept-Language headers.\n    // Therefore, the config service's request is made using the browser's Accept-Language so the\n    // server can also return the language it receives.\n    function findBestDefaultLanguage() {\n      // Chrome and Firefox return the Accept-Language languages with navigator.languages.\n      // Not supported in other browsers\n      if (window.navigator.languages) {\n        return window.navigator.languages[0];\n      }\n\n      // Most supported. Returns Accept-Language on older firefox and OS language on IE 11\n      if (window.navigator.language) {\n        return window.navigator.language;\n      }\n\n      // IE specific property. Returns the operating system's natural language setting.\n      // http://msdn.microsoft.com/en-us/library/ie/ms535867(v=vs.85).aspx\n      if (window.navigator.userLanguage) {\n        return window.navigator.userLanguage;\n      }\n\n      // all supported browsers should have returned already\n      return 'en';\n    }\n\n    // This function is used to get the translated values for the specified keys\n    function getTranslatedValues(keysToTranslate, def, key, translations, translation) {\n      for (var i = 0; i < keysToTranslate.length; i++) {\n        // $translate.instant removes white spaces from string so compare trimmed value here as well\n        if (translations[keysToTranslate[i]] !== keysToTranslate[i].trim()) {\n          translation = translations[keysToTranslate[i]];\n          break;\n        }\n      }\n      return translation === NOT_FOUND ? (def === null || def === undefined) && key.join('.') || def : translation;\n    }\n\n    // This function returns the keysToTranslate array\n    function getKeysToTranslate(key) {\n      if (angular.isArray(key)) {\n        var ns = angular.copy(key);\n        var keysToTranslate = [];\n        while (ns.length > 0) {\n          if (ns[0]) {\n            keysToTranslate.push(ns.join('.'));\n          }\n          ns.shift();\n        }\n        return keysToTranslate;\n      }\n    }\n\n    /**\r\n     * @name translate\r\n     * @description provides a translation for the provided key\r\n     * @param {string|string[]} key The key to be translated. If an array, the service will try from the most significant (all elements joined to form a key) to the least significant (only the last element is used as the key)\r\n     * @param {string} [def] The default string to use if no translations are available\r\n     * @return The translated text if found, the default string provided or the key itself if nothing else can be returned\r\n     * @methodOf angular.module('fis.core').fisI18nService\r\n     */\n\n    // using $translate.instant\n    serv.translate = function (key, def) {\n      var translation = NOT_FOUND;\n      if (angular.isString(key)) {\n        key = key.split('.');\n      }\n      if (angular.isArray(key)) {\n        var keysToTranslate = getKeysToTranslate(key);\n        var translations = $translate.instant(keysToTranslate);\n        return getTranslatedValues(keysToTranslate, def, key, translations, translation);\n      }\n      return def || key;\n    };\n\n    /**\r\n     * @name translateAsync\r\n     * @description provides a translation for the provided key when translation data is not yet loaded\r\n     * @param {string|string[]} key The key to be translated. If an array, the service will try from the most significant (all elements joined to form a key) to the least significant (only the last element is used as the key)\r\n     * @param {string} [def] The default string to use if no translations are available\r\n     * @return Promise which will get resolved to the translated text if found, the default string provided or the key itself if nothing else can be returned\r\n     * @methodOf angular.module('fis.core').fisI18nService\r\n     */\n    serv.translateAsync = function (key, def) {\n      var translation = NOT_FOUND;\n      var translations;\n      var asyncTranslation = $q.defer();\n      if (angular.isString(key)) {\n        key = key.split('.');\n      }\n      var keysToTranslate = getKeysToTranslate(key);\n      // We have subscribed to '$translateChangeSuccess' event published by angular.translate module.\n      // Once the translation object is available, we will resolve the promise for UI translation of data.\n      var cancelTranslateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function () {\n        translations = $translate.instant(keysToTranslate);\n        var result = getTranslatedValues(keysToTranslate, def, key, translations, translation);\n        asyncTranslation.resolve(result);\n        // un-registering '$translateChangeSuccess' event handler\n        cancelTranslateChangeSuccess();\n      });\n      return asyncTranslation.promise;\n    };\n    return serv;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./i18n/i18n-service.provider.js","export default function () {\r\n  'use strict';\r\n  var self = this;\r\n  var NOT_FOUND = '__NOT_FOUND__';\r\n\r\n  var defaultLocale = 'en';\r\n  self.setDefaultLocale = function (locale) {\r\n    defaultLocale = locale;\r\n  };\r\n\r\n  self.$get = ['$rootScope', '$http', '$q', '$location', 'fisPubSubService', 'fisConfig', '$translate',\r\n    function ($rootScope, $http, $q, $location, fisPubSubService, conf, $translate) {\r\n      var serv = {};\r\n\r\n      var supportedLanguagesDeferred = $q.defer();\r\n      serv.supportedLanguages = supportedLanguagesDeferred.promise;\r\n\r\n      /**\r\n       * @name defaultLocale\r\n       * @description Getter function to access the framework default locale\r\n       * @return the default framework locale\r\n       * @methodOf angular.module('fis.core').fisI18nService\r\n       */\r\n      serv.defaultLocale = function () {\r\n        return defaultLocale;\r\n      };\r\n\r\n      var cancelTranslateLoadingSuccess = $rootScope.$on('$translateLoadingSuccess', function () {\r\n        fisPubSubService.publish('shell.i18nReady');\r\n        cancelTranslateLoadingSuccess();\r\n      });\r\n\r\n      /**\r\n       * @name locale\r\n       * @description Getter/setter function to access the current locale\r\n       *  @param [locale] The locale string to be set (optional).\r\n       *  @return the current locale\r\n       *  @methodOf angular.module('fis.core').fisI18nService\r\n       */\r\n      serv.locale = function (locale) {\r\n        if (locale) {\r\n          // only way to only request a single language is to\r\n          $translate.use(locale);\r\n          $http.defaults.headers.common['Accept-Language'] = locale;\r\n          fisPubSubService.publish('fisLocaleChanged', locale);\r\n        }\r\n\r\n        return locale || $translate.proposedLanguage();\r\n      };\r\n\r\n      serv.isTranslationReady = function () {\r\n        if ($translate.isReady() && $translate.getTranslationTable($translate.proposedLanguage()) !== null) {\r\n          return true;\r\n        }\r\n        return false;\r\n      };\r\n\r\n      function processLocaleConfiguration(defaultLang) {\r\n        var initLang = $location.search().lang || serv.defaultLocale();\r\n        if (initLang !== defaultLang && conf.supportedLanguages) {\r\n          // First check for actual language code like \"de-CH\" from supported language list\r\n          var foundLang;\r\n          conf.supportedLanguages.some(function (language) {\r\n            if (angular.equals(language.value, defaultLang)) {\r\n              foundLang = language;\r\n              return true;\r\n            }\r\n            return false;\r\n          });\r\n          // if not found then check for a fallback standard language code\r\n          // like \"de\" from supported language list\r\n          if (angular.isUndefined(foundLang)) {\r\n            var standardLangCode = defaultLang.split('-');\r\n            conf.supportedLanguages.some(function (language) {\r\n              if (angular.equals(language.value, standardLangCode[0])) {\r\n                foundLang = language;\r\n                return true;\r\n              }\r\n              return false;\r\n            });\r\n          }\r\n          if (angular.isDefined(foundLang)) {\r\n            initLang = (foundLang.value) ? foundLang.value : initLang;\r\n          }\r\n        }\r\n\r\n        $http.defaults.headers.common['Accept-Language'] = initLang;\r\n\r\n        $translate.use(initLang);\r\n\r\n        // only invoked once on load of the page (once config is loaded)\r\n        fisPubSubService.publish('fisLocaleSet', initLang);\r\n\r\n        supportedLanguagesDeferred.resolve(conf.supportedLanguages);\r\n        // Put the $location in the rootScope so that we can watch it\r\n        $rootScope.location = $location;\r\n\r\n        // put a watch on the lang request parameter and change the locale according to that parameter\r\n        $rootScope.$watch('location.search().lang', function (lang) {\r\n          if (lang && lang !== serv.locale()) {\r\n            serv.locale(lang);\r\n            // FIXME: removing the lang param because it screws up routes.\r\n            $rootScope.location.search('lang', null);\r\n          }\r\n        });\r\n      }\r\n      processLocaleConfiguration(fetchLocaleFromConfig());\r\n      // return config locale or fetch locale from browser\r\n      function fetchLocale() {\r\n        if (angular.isDefined(conf.locale)) {\r\n          return conf.locale;\r\n        }\r\n        return findBestDefaultLanguage();\r\n      }\r\n\r\n      // Retrieve locale as per configuration provided by user\r\n      function fetchLocaleFromConfig() {\r\n        var defaultLang = serv.defaultLocale();\r\n        if (angular.isDefined(conf.preferredLocale)) {\r\n          if (conf.preferredLocale === 'browser') {\r\n            defaultLang = findBestDefaultLanguage();\r\n          } else {\r\n            defaultLang = fetchLocale();\r\n          }\r\n        } else {\r\n          defaultLang = fetchLocale();\r\n        }\r\n        return defaultLang;\r\n      }\r\n\r\n      // find the closest language we can from what is sent through the \"Accept-Language\" header.\r\n      // After invocation of processLocaleConfiguration, we set the Accept-Language headers.\r\n      // Therefore, the config service's request is made using the browser's Accept-Language so the\r\n      // server can also return the language it receives.\r\n      function findBestDefaultLanguage() {\r\n        // Chrome and Firefox return the Accept-Language languages with navigator.languages.\r\n        // Not supported in other browsers\r\n        if (window.navigator.languages) {\r\n          return window.navigator.languages[0];\r\n        }\r\n\r\n        // Most supported. Returns Accept-Language on older firefox and OS language on IE 11\r\n        if (window.navigator.language) {\r\n          return window.navigator.language;\r\n        }\r\n\r\n        // IE specific property. Returns the operating system's natural language setting.\r\n        // http://msdn.microsoft.com/en-us/library/ie/ms535867(v=vs.85).aspx\r\n        if (window.navigator.userLanguage) {\r\n          return window.navigator.userLanguage;\r\n        }\r\n\r\n        // all supported browsers should have returned already\r\n        return 'en';\r\n      }\r\n\r\n      // This function is used to get the translated values for the specified keys\r\n      function getTranslatedValues(keysToTranslate, def, key, translations, translation) {\r\n        for (var i = 0; i < keysToTranslate.length; i++) {\r\n          // $translate.instant removes white spaces from string so compare trimmed value here as well\r\n          if (translations[keysToTranslate[i]] !== keysToTranslate[i].trim()) {\r\n            translation = translations[keysToTranslate[i]];\r\n            break;\r\n          }\r\n        }\r\n        return translation === NOT_FOUND ? (def === null || def === undefined) && key.join('.') || def : translation;\r\n      }\r\n\r\n      // This function returns the keysToTranslate array\r\n      function getKeysToTranslate(key) {\r\n        if (angular.isArray(key)) {\r\n          var ns = angular.copy(key);\r\n          var keysToTranslate = [];\r\n          while (ns.length > 0) {\r\n            if (ns[0]) {\r\n              keysToTranslate.push(ns.join('.'));\r\n            }\r\n            ns.shift();\r\n          }\r\n          return keysToTranslate;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * @name translate\r\n       * @description provides a translation for the provided key\r\n       * @param {string|string[]} key The key to be translated. If an array, the service will try from the most significant (all elements joined to form a key) to the least significant (only the last element is used as the key)\r\n       * @param {string} [def] The default string to use if no translations are available\r\n       * @return The translated text if found, the default string provided or the key itself if nothing else can be returned\r\n       * @methodOf angular.module('fis.core').fisI18nService\r\n       */\r\n\r\n      // using $translate.instant\r\n      serv.translate = function (key, def) {\r\n        var translation = NOT_FOUND;\r\n        if (angular.isString(key)) {\r\n          key = key.split('.');\r\n        }\r\n        if (angular.isArray(key)) {\r\n          var keysToTranslate = getKeysToTranslate(key);\r\n          var translations = $translate.instant(keysToTranslate);\r\n          return getTranslatedValues(keysToTranslate, def, key, translations, translation);\r\n        }\r\n        return (def || key);\r\n      };\r\n\r\n      /**\r\n       * @name translateAsync\r\n       * @description provides a translation for the provided key when translation data is not yet loaded\r\n       * @param {string|string[]} key The key to be translated. If an array, the service will try from the most significant (all elements joined to form a key) to the least significant (only the last element is used as the key)\r\n       * @param {string} [def] The default string to use if no translations are available\r\n       * @return Promise which will get resolved to the translated text if found, the default string provided or the key itself if nothing else can be returned\r\n       * @methodOf angular.module('fis.core').fisI18nService\r\n       */\r\n      serv.translateAsync = function (key, def) {\r\n        var translation = NOT_FOUND;\r\n        var translations;\r\n        var asyncTranslation = $q.defer();\r\n        if (angular.isString(key)) {\r\n          key = key.split('.');\r\n        }\r\n        var keysToTranslate = getKeysToTranslate(key);\r\n        // We have subscribed to '$translateChangeSuccess' event published by angular.translate module.\r\n        // Once the translation object is available, we will resolve the promise for UI translation of data.\r\n        var cancelTranslateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function () {\r\n          translations = $translate.instant(keysToTranslate);\r\n          var result = getTranslatedValues(keysToTranslate, def, key, translations, translation);\r\n          asyncTranslation.resolve(result);\r\n          // un-registering '$translateChangeSuccess' event handler\r\n          cancelTranslateChangeSuccess();\r\n        });\r\n        return asyncTranslation.promise;\r\n      };\r\n      return serv;\r\n    }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./i18n/i18n-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      if (!attrs.fisI18n) {\n        throw new Error('Should provide a value for the fis-i18n attribute');\n      }\n      element.html(scope.i18n(attrs.fisI18n, element.html() || undefined));\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./i18n/i18n.directive.js","/**\r\n * This attribute directive allows localizing screens on the client side.\r\n * @name fisI18n\r\n * @methodOf fis.core.module\r\n */\r\nexport default function () {\r\n  return {\r\n    restrict: 'A',\r\n    link: function (scope, element, attrs) {\r\n      if (!attrs.fisI18n) {\r\n        throw new Error('Should provide a value for the fis-i18n attribute');\r\n      }\r\n      element.html(scope.i18n(attrs.fisI18n, element.html() || undefined));\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./i18n/i18n.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (fisI18nService, fisViewPanelService) {\n  'ngInject';\n\n  return function (key, DefalutValue) {\n    if (angular.isDefined(key)) {\n      if (key.indexOf('.') === -1) {\n        var view = fisViewPanelService.activeViewPanel();\n        if (view) {\n          key = [view.module, view.id, key];\n        }\n      }\n      return fisI18nService.translate(key, DefalutValue);\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./i18n/i18n.filter.js","/**\r\n * @name i18n\r\n * @description This filter replaces the string with its internationalized value.\r\n * You can also provide default value to the filter in case the key is not found in the filter.\r\n * If no default value is provided and the key in not found in the bundle, the key will be printed as is.\r\n * Example:\r\n * {{'myApp.key1.value1' | i18n:'Default Value'}} => internationalized value of myApp.key1.value1 or 'Default Value'\r\n * {{'myApp.key1.value2' | i18n}} => internationalized value of myApp.key2.value2 or 'myApp.key2.value2'\r\n * @param {String} key The key in resource bundle which needs to be internationalized\r\n * @param String defaultValue The value to be displayed if key is not found in resource bundle\r\n * @methodOf fis.core.filters\r\n */\r\nexport default function (fisI18nService, fisViewPanelService) {\r\n  'ngInject';\r\n  return function (key, DefalutValue) {\r\n    if (angular.isDefined(key)) {\r\n      if (key.indexOf('.') === -1) {\r\n        var view = fisViewPanelService.activeViewPanel();\r\n        if (view) {\r\n          key = [view.module, view.id, key];\r\n        }\r\n      }\r\n      return fisI18nService.translate(key, DefalutValue);\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./i18n/i18n.filter.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _translate = require('./translate.filter');\n\nvar _translate2 = _interopRequireDefault(_translate);\n\nvar _i18n = require('./i18n.filter');\n\nvar _i18n2 = _interopRequireDefault(_i18n);\n\nvar _i18nService = require('./i18n-service.provider');\n\nvar _i18nService2 = _interopRequireDefault(_i18nService);\n\nvar _translate3 = require('./translate.provider');\n\nvar _translate4 = _interopRequireDefault(_translate3);\n\nvar _i18n3 = require('./i18n.directive');\n\nvar _i18n4 = _interopRequireDefault(_i18n3);\n\nvar _translate5 = require('./translate.directive');\n\nvar _translate6 = _interopRequireDefault(_translate5);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.i18n', []);\n\nngModule.filter('translate', _translate2.default);\nngModule.filter('i18n', _i18n2.default);\n\nngModule.provider('fisI18nService', _i18nService2.default);\nngModule.provider('$translate', _translate4.default);\n\nngModule.directive('fisI18n', _i18n4.default);\nngModule.directive('translate', _translate6.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./i18n/index.js","import angular from 'angular';\r\n\r\nimport translate from './translate.filter';\r\nimport i18n from './i18n.filter';\r\nimport i18nService from './i18n-service.provider';\r\nimport translateProvider from './translate.provider';\r\nimport i18nDirective from './i18n.directive';\r\nimport translateDirective from './translate.directive';\r\n\r\nconst ngModule = angular.module('fis.core.i18n', []);\r\n\r\nngModule.filter('translate', translate);\r\nngModule.filter('i18n', i18n);\r\n\r\nngModule.provider('fisI18nService', i18nService);\r\nngModule.provider('$translate', translateProvider);\r\n\r\nngModule.directive('fisI18n', i18nDirective);\r\nngModule.directive('translate', translateDirective);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./i18n/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  return {\n    restrict: 'AE',\n    link: function link(scope, element, attrs) {\n      console.warn('You are using dummy translate directive. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\n      if (attrs.translate) {\n        element.html(attrs.translate);\n      } else {\n        element.html(element.text());\n      }\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./i18n/translate.directive.js","export default function () {\r\n  return {\r\n    restrict: 'AE',\r\n    link: function (scope, element, attrs) {\r\n      console.warn('You are using dummy translate directive. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\r\n      if (attrs.translate) {\r\n        element.html(attrs.translate);\r\n      } else {\r\n        element.html(element.text());\r\n      }\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./i18n/translate.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($translate) {\n  'ngInject';\n\n  return function (key, defaultValue) {\n    console.warn('You are using dummy translate filter. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\n    return $translate.instant(key, defaultValue);\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./i18n/translate.filter.js","export default function ($translate) {\r\n  'ngInject';\r\n  return function (key, defaultValue) {\r\n    console.warn('You are using dummy translate filter. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\r\n    return $translate.instant(key, defaultValue);\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./i18n/translate.filter.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var self = this;\n\n  var warningPrinted = false;\n  function dummy() {\n    if (!warningPrinted) {\n      warningPrinted = true;\n      console.warn('You are using dummy angular-translate APIs. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\n    }\n  }\n\n  self.preferredLanguage = self.use = self.translations = dummy;\n\n  self.$get = ['$q', function ($q) {\n    var lang = '';\n    var $translate = function $translate(translationId, interpolateParams, interpolationId, defaultTranslationText /* , forceLanguage*/) {\n      dummy();\n      var deferred = $q.defer();\n      if (defaultTranslationText) {\n        deferred.resolve(defaultTranslationText);\n      } else {\n        deferred.resolve($translate.instant(translationId));\n      }\n      return deferred.promise;\n    };\n\n    $translate.instant = function (translationId /* , interpolateParams, interpolationId , forceLanguage*/) {\n      dummy();\n      var result = '';\n      if (angular.isArray(translationId) && translationId.length > 0) {\n        result = {};\n        translationId.forEach(function (key) {\n          result[key] = key;\n        });\n      } else {\n        result = translationId;\n      }\n      return result;\n    };\n\n    $translate.use = function (language) {\n      lang = language;\n      dummy();\n    };\n\n    $translate.proposedLanguage = function () {\n      dummy();\n      return lang;\n    };\n\n    return $translate;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./i18n/translate.provider.js","export default function () {\r\n  var self = this;\r\n\r\n  var warningPrinted = false;\r\n  function dummy() {\r\n    if (!warningPrinted) {\r\n      warningPrinted = true;\r\n      console.warn('You are using dummy angular-translate APIs. Please load and use angular-translate in your application or add a dependency on fis.i18n module');\r\n    }\r\n  }\r\n\r\n  self.preferredLanguage = self.use = self.translations = dummy;\r\n\r\n  self.$get = ['$q', function ($q) {\r\n    var lang = '';\r\n    var $translate = function (translationId, interpolateParams, interpolationId, defaultTranslationText /* , forceLanguage*/) {\r\n      dummy();\r\n      var deferred = $q.defer();\r\n      if (defaultTranslationText) {\r\n        deferred.resolve(defaultTranslationText);\r\n      } else {\r\n        deferred.resolve($translate.instant(translationId));\r\n      }\r\n      return deferred.promise;\r\n    };\r\n\r\n    $translate.instant = function (translationId/* , interpolateParams, interpolationId , forceLanguage*/) {\r\n      dummy();\r\n      var result = '';\r\n      if (angular.isArray(translationId) && translationId.length > 0) {\r\n        result = {};\r\n        translationId.forEach(function (key) {\r\n          result[key] = key;\r\n        });\r\n      } else {\r\n        result = translationId;\r\n      }\r\n      return result;\r\n    };\r\n\r\n    $translate.use = function (language) {\r\n      lang = language;\r\n      dummy();\r\n    };\r\n\r\n    $translate.proposedLanguage = function () {\r\n      dummy();\r\n      return lang;\r\n    };\r\n\r\n    return $translate;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./i18n/translate.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _pubsub = require('./pubsub.directive');\n\nvar _pubsub2 = _interopRequireDefault(_pubsub);\n\nvar _pubsub3 = require('./pubsub.service');\n\nvar _pubsub4 = _interopRequireDefault(_pubsub3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.pubsub', []);\n\nngModule.directive('fisPubSub', _pubsub2.default);\nngModule.service('fisPubSubService', _pubsub4.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./pubsub/index.js","import angular from 'angular';\r\n\r\nimport pubsub from './pubsub.directive';\r\nimport pubsubService from './pubsub.service';\r\n\r\nconst ngModule = angular.module('fis.core.pubsub', []);\r\n\r\nngModule.directive('fisPubSub', pubsub);\r\nngModule.service('fisPubSubService', pubsubService);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./pubsub/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\r\n                                                                                                                                                                                                                                                                               * @name fisPubSub\r\n                                                                                                                                                                                                                                                                               * @description event handling service for the framework\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               */\n\n\nexports.default = function () {\n  return {\n    restrict: 'A',\n    controller: ['$scope', 'fisPubSubService', function ($scope, fisPubSubService) {\n      var unsubs = [];\n      $scope.subscribe = function (topic, cb) {\n        var unsubscribe = fisPubSubService.subscribe(topic, cb);\n        unsubs.push(unsubscribe);\n        return unsubscribe;\n      };\n\n      $scope.publish = function (topic, payload) {\n        if ((typeof payload === 'undefined' ? 'undefined' : _typeof(payload)) === 'object') {\n          payload.$scope = $scope;\n        }\n\n        if ($scope.$root.$$phase === '$apply' || $scope.$root.$$phase === '$digest') {\n          return fisPubSubService.publish(topic, payload);\n        }\n\n        $scope.$apply(function () {\n          return fisPubSubService.publish(topic, payload);\n        });\n      };\n\n      // unsubscribe events when scope is destroyed\n      $scope.$on('$destroy', function () {\n        while (unsubs.length > 0) {\n          unsubs.pop()(); // pop the unsubscribe function and invoke it.\n        }\n      });\n    }]\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./pubsub/pubsub.directive.js","/**\r\n * @name fisPubSub\r\n * @description event handling service for the framework\r\n *\r\n */\r\n export default function () {\r\n   return {\r\n     restrict: 'A',\r\n     controller: ['$scope', 'fisPubSubService', function ($scope, fisPubSubService) {\r\n       var unsubs = [];\r\n       $scope.subscribe = function (topic, cb) {\r\n         var unsubscribe = fisPubSubService.subscribe(topic, cb);\r\n         unsubs.push(unsubscribe);\r\n         return unsubscribe;\r\n       };\r\n\r\n       $scope.publish = function (topic, payload) {\r\n         if (typeof payload === 'object') {\r\n           payload.$scope = $scope;\r\n         }\r\n\r\n         if ($scope.$root.$$phase === '$apply' || $scope.$root.$$phase === '$digest') {\r\n           return fisPubSubService.publish(topic, payload);\r\n         }\r\n\r\n         $scope.$apply(function () {\r\n           return fisPubSubService.publish(topic, payload);\r\n         });\r\n       };\r\n\r\n       // unsubscribe events when scope is destroyed\r\n       $scope.$on('$destroy', function () {\r\n         while (unsubs.length > 0) {\r\n           unsubs.pop()(); // pop the unsubscribe function and invoke it.\r\n         }\r\n       });\r\n     }]\r\n   };\r\n }\r\n\n\n\n// WEBPACK FOOTER //\n// ./pubsub/pubsub.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($q) {\n  'ngInject';\n\n  var listeners = {};\n  var count = 0;\n\n  function addListener(topic, callback, sticky) {\n    var id = count++;\n    if (!callback || !topic) {\n      return;\n    }\n    listeners[topic] = listeners[topic] || {};\n    listeners[topic]._sticky = sticky || listeners[topic]._sticky;\n    listeners[topic][id] = callback;\n\n    if (sticky && listeners[topic]._lastPayload !== undefined) {\n      // invoke callback immediately with the last payload\n      callback.call(listeners[topic]._lastPayload, listeners[topic]._lastPayload, topic);\n    }\n    var ret = function ret() {\n      // handle allows removing the listener\n      if (listeners[topic] && listeners[topic][id]) {\n        delete listeners[topic][id];\n      }\n    };\n    // add properties to function to allow inspecting the topic it is attached to.\n    ret.topic = topic;\n    ret.id = id;\n    return ret;\n  }\n\n  /**\r\n   * @name publish\r\n   * @description Publish to a topic\r\n   * @param [topic, payload] Passing the topic information and payload information.\r\n   */\n  this.publish = function (topic, payload) {\n    var deferred = $q.defer();\n    var retPromises = [];\n    var l = listeners[topic] || {};\n\n    if (l._sticky) {\n      l._lastPayload = payload;\n    }\n    for (var i in l) {\n      if (i.indexOf('_') !== 0) {\n        // Wrap every returned value into a promise. Non-promise return values will be resolved\n        // immediately.\n        retPromises.push($q.when(l[i].call(payload, payload, topic)));\n      }\n    }\n\n    $q.all(retPromises).then(function (retVals) {\n      if (retVals.indexOf(false) > -1) {\n        deferred.reject();\n      } else {\n        deferred.resolve(retVals);\n      }\n    }, function () {\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\r\n   * @name subscribe\r\n   * @description Subscribe to a topic\r\n   * @param [topic, callback, sticky]\r\n   * @memberOf sungard.event\r\n   * @returns Adds the listener and passes the handle.\r\n   */\n  this.subscribe = function (topic, callback, sticky) {\n    return addListener(topic, callback, sticky);\n  };\n\n  /**\r\n   * @name unsubscribe\r\n   * @description Unsubscribe to a topic\r\n   * @param [handle] Passing the handle to find out the topic information from the handle.\r\n   * @memberOf sungard.event\r\n   */\n  this.unsubscribe = function (handle) {\n    if (typeof handle === 'function') {\n      handle();\n    } else if (listeners[handle.topic] && listeners[handle.topic][handle.id]) {\n      delete listeners[handle.topic][handle.id];\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./pubsub/pubsub.service.js","export default function ($q) {\r\n  'ngInject';\r\n  var listeners = {};\r\n  var count = 0;\r\n\r\n  function addListener(topic, callback, sticky) {\r\n    var id = count++;\r\n    if (!callback || !topic) {\r\n      return;\r\n    }\r\n    listeners[topic] = (listeners[topic] || {});\r\n    listeners[topic]._sticky = sticky || listeners[topic]._sticky;\r\n    listeners[topic][id] = callback;\r\n\r\n    if (sticky && listeners[topic]._lastPayload !== undefined) {\r\n      // invoke callback immediately with the last payload\r\n      callback.call(listeners[topic]._lastPayload, listeners[topic]._lastPayload, topic);\r\n    }\r\n    var ret = function () {\r\n      // handle allows removing the listener\r\n      if (listeners[topic] && listeners[topic][id]) {\r\n        delete listeners[topic][id];\r\n      }\r\n    };\r\n    // add properties to function to allow inspecting the topic it is attached to.\r\n    ret.topic = topic;\r\n    ret.id = id;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @name publish\r\n   * @description Publish to a topic\r\n   * @param [topic, payload] Passing the topic information and payload information.\r\n   */\r\n  this.publish = function (topic, payload) {\r\n    var deferred = $q.defer();\r\n    var retPromises = [];\r\n    var l = listeners[topic] || {};\r\n\r\n    if (l._sticky) {\r\n      l._lastPayload = payload;\r\n    }\r\n    for (var i in l) {\r\n      if (i.indexOf('_') !== 0) {\r\n        // Wrap every returned value into a promise. Non-promise return values will be resolved\r\n        // immediately.\r\n        retPromises.push($q.when(l[i].call(payload, payload, topic)));\r\n      }\r\n    }\r\n\r\n    $q.all(retPromises).then(function (retVals) {\r\n      if (retVals.indexOf(false) > -1) {\r\n        deferred.reject();\r\n      } else {\r\n        deferred.resolve(retVals);\r\n      }\r\n    }, function () {\r\n      deferred.reject();\r\n    });\r\n\r\n    return deferred.promise;\r\n  };\r\n\r\n  /**\r\n   * @name subscribe\r\n   * @description Subscribe to a topic\r\n   * @param [topic, callback, sticky]\r\n   * @memberOf sungard.event\r\n   * @returns Adds the listener and passes the handle.\r\n   */\r\n  this.subscribe = function (topic, callback, sticky) {\r\n    return addListener(topic, callback, sticky);\r\n  };\r\n\r\n  /**\r\n   * @name unsubscribe\r\n   * @description Unsubscribe to a topic\r\n   * @param [handle] Passing the handle to find out the topic information from the handle.\r\n   * @memberOf sungard.event\r\n   */\r\n  this.unsubscribe = function (handle) {\r\n    if (typeof (handle) === 'function') {\r\n      handle();\r\n    } else if (listeners[handle.topic] && listeners[handle.topic][handle.id]) {\r\n      delete listeners[handle.topic][handle.id];\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./pubsub/pubsub.service.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var self = this;\n\n  self.$get = ['$window', 'fisUserContextService', function ($window, fisUserContextService) {\n    var service = {};\n    var separator = '_';\n    var inited = false;\n    var appId;\n\n    service.init = function (id) {\n      appId = id;\n      inited = true;\n    };\n\n    function createStorageKey(key) {\n      var userKey = fisUserContextService.context() ? fisUserContextService.context().userId : null;\n      if (appId) {\n        if (userKey) {\n          return appId + separator + userKey + separator + key;\n        }\n        return appId + separator + key;\n      } else if (userKey) {\n        return userKey + separator + key;\n      }\n      return key;\n    }\n\n    /**\r\n     * method to persist data in client storage\r\n     * @param {String} key    key\r\n     * @param {Object} val    Object to be stored in client storage\r\n     * @param {Object|String} opts Optional additional attributes like scope (app or user) and storageType (session or default) | storageType\r\n     */\n    service.setItem = function (key, val, opts) {\n      if (!inited) {\n        throw new Error('Service not initialized with appId');\n      }\n      var storageKey = createStorageKey(key);\n      if ($window.sessionStorage && $window.localStorage) {\n        if (opts && (opts === 'session' || opts.storageType === 'session')) {\n          // options present, work with it\n          $window.sessionStorage.setItem(storageKey, angular.toJson(val));\n        } else {\n          // Add to localStorage\n          $window.localStorage.setItem(storageKey, angular.toJson(val));\n        }\n      } else {\n        throw new Error('localStorage/sessionStorage not supported by browser');\n      }\n    };\n\n    /**\r\n     * Method to get item from Client Storage\r\n     * @param  {String} key   Key\r\n     * @return {Object}       Object stored in Client storage\r\n     */\n    service.getItem = function (key) {\n      if (!inited) {\n        throw new Error('Service not initialized with appId');\n      }\n      if ($window.sessionStorage && $window.localStorage) {\n        var storageKey = createStorageKey(key);\n        return angular.fromJson($window.localStorage.getItem(storageKey)) || angular.fromJson($window.sessionStorage.getItem(storageKey));\n      }\n      throw new Error('localStorage/sessionStorage not supported by browser');\n    };\n\n    /**\r\n     * Method to remove item from Client Storage\r\n     * @param  {String} key   Key of the item to be removed\r\n     */\n    service.removeItem = function (key) {\n      if (!inited) {\n        throw new Error('Service not initialized with appId');\n      }\n      if ($window.sessionStorage && $window.localStorage) {\n        var storageKey = createStorageKey(key);\n        $window.localStorage.removeItem(storageKey);\n        $window.sessionStorage.removeItem(storageKey);\n      } else {\n        throw new Error('localStorage/sessionStorage not supported by browser');\n      }\n    };\n\n    return service;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./services/client-storage-service.provider.js","export default function () {\r\n  var self = this;\r\n\r\n  self.$get = ['$window', 'fisUserContextService', function ($window, fisUserContextService) {\r\n    var service = {};\r\n    var separator = '_';\r\n    var inited = false;\r\n    var appId;\r\n\r\n    service.init = function (id) {\r\n      appId = id;\r\n      inited = true;\r\n    };\r\n\r\n    function createStorageKey(key) {\r\n      var userKey = fisUserContextService.context() ? fisUserContextService.context().userId : null;\r\n      if (appId) {\r\n        if (userKey) {\r\n          return appId + separator + userKey + separator + key;\r\n        }\r\n        return appId + separator + key;\r\n      } else if (userKey) {\r\n        return userKey + separator + key;\r\n      }\r\n      return key;\r\n    }\r\n\r\n    /**\r\n     * method to persist data in client storage\r\n     * @param {String} key    key\r\n     * @param {Object} val    Object to be stored in client storage\r\n     * @param {Object|String} opts Optional additional attributes like scope (app or user) and storageType (session or default) | storageType\r\n     */\r\n    service.setItem = function (key, val, opts) {\r\n      if (!inited) {\r\n        throw new Error('Service not initialized with appId');\r\n      }\r\n      var storageKey = createStorageKey(key);\r\n      if ($window.sessionStorage && $window.localStorage) {\r\n        if (opts && (opts === 'session' || opts.storageType === 'session')) { // options present, work with it\r\n          $window.sessionStorage.setItem(storageKey, angular.toJson(val));\r\n        } else { // Add to localStorage\r\n          $window.localStorage.setItem(storageKey, angular.toJson(val));\r\n        }\r\n      } else {\r\n        throw new Error('localStorage/sessionStorage not supported by browser');\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Method to get item from Client Storage\r\n     * @param  {String} key   Key\r\n     * @return {Object}       Object stored in Client storage\r\n     */\r\n    service.getItem = function (key) {\r\n      if (!inited) {\r\n        throw new Error('Service not initialized with appId');\r\n      }\r\n      if ($window.sessionStorage && $window.localStorage) {\r\n        var storageKey = createStorageKey(key);\r\n        return angular.fromJson($window.localStorage.getItem(storageKey)) || angular.fromJson($window.sessionStorage.getItem(storageKey));\r\n      }\r\n      throw new Error('localStorage/sessionStorage not supported by browser');\r\n    };\r\n\r\n    /**\r\n     * Method to remove item from Client Storage\r\n     * @param  {String} key   Key of the item to be removed\r\n     */\r\n    service.removeItem = function (key) {\r\n      if (!inited) {\r\n        throw new Error('Service not initialized with appId');\r\n      }\r\n      if ($window.sessionStorage && $window.localStorage) {\r\n        var storageKey = createStorageKey(key);\r\n        $window.localStorage.removeItem(storageKey);\r\n        $window.sessionStorage.removeItem(storageKey);\r\n      } else {\r\n        throw new Error('localStorage/sessionStorage not supported by browser');\r\n      }\r\n    };\r\n\r\n    return service;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/client-storage-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($resource, $q, fisPubSubService, $injector) {\n  'ngInject';\n\n  function publishEvent(name, value) {\n    if (name) {\n      fisPubSubService.publish(name, value);\n    }\n  }\n\n  function conditionalLoader(constantName, urlTemplate, urlParams, eventName) {\n    var deferred;\n    var event = eventName || constantName && constantName + '.loaded';\n    var value;\n\n    if ($injector.has(constantName)) {\n      value = $injector.get(constantName);\n      publishEvent(event, value);\n      value.then = function syncThen(cb) {\n        return cb(value);\n      };\n      return value;\n    }\n    // return an aync promise\n    deferred = $q.defer();\n\n    if (!urlTemplate) {\n      deferred.reject('No ' + constantName + ' constant found and no URL to GET.');\n      return deferred.promise;\n    }\n\n    $resource(urlTemplate).get(urlParams || {}, function loadSuccess(value) {\n      var prop;\n\n      deferred.resolve(value);\n      publishEvent(event, value);\n\n      for (prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          deferred.promise[prop] = value[prop];\n        }\n      }\n    }, function loadFailure(httpResponse) {\n      deferred.reject(httpResponse);\n    });\n    return deferred.promise;\n  }\n\n  return conditionalLoader;\n};\n\n\n// WEBPACK FOOTER //\n// ./services/conditional-loader-service.factory.js","// TODO: reuse concept for navigation and i18n\r\n// returns a promise resolved by a constant if present and if not, by an HTTP GET request\r\nexport default function ($resource, $q, fisPubSubService, $injector) {\r\n  'ngInject';\r\n\r\n  function publishEvent(name, value) {\r\n    if (name) {\r\n      fisPubSubService.publish(name, value);\r\n    }\r\n  }\r\n\r\n  function conditionalLoader(constantName, urlTemplate, urlParams, eventName) {\r\n    var deferred;\r\n    var event = eventName || (constantName && constantName + '.loaded');\r\n    var value;\r\n\r\n    if ($injector.has(constantName)) {\r\n      value = $injector.get(constantName);\r\n      publishEvent(event, value);\r\n      value.then = function syncThen(cb) {\r\n        return cb(value);\r\n      };\r\n      return value;\r\n    }\r\n    // return an aync promise\r\n    deferred = $q.defer();\r\n\r\n    if (!urlTemplate) {\r\n      deferred.reject('No ' + constantName + ' constant found and no URL to GET.');\r\n      return deferred.promise;\r\n    }\r\n\r\n    $resource(urlTemplate).get(urlParams || {},\r\n\r\n        function loadSuccess(value) {\r\n          var prop;\r\n\r\n          deferred.resolve(value);\r\n          publishEvent(event, value);\r\n\r\n          for (prop in value) {\r\n            if (value.hasOwnProperty(prop)) {\r\n              deferred.promise[prop] = value[prop];\r\n            }\r\n          }\r\n        },\r\n\r\n        function loadFailure(httpResponse) {\r\n          deferred.reject(httpResponse);\r\n        }\r\n\r\n      );\r\n    return deferred.promise;\r\n  }\r\n\r\n  return conditionalLoader;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/conditional-loader-service.factory.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'use strict';\n\n  var provider = this;\n  var eventName = 'shell.configReady';\n  var defaultFactory;\n\n  provider.config = function setConfig(cfg) {\n    if (angular.isObject(cfg)) {\n      cfg.then = function (cb) {\n        return cb(cfg);\n      };\n      provider.$get = function () {\n        return cfg;\n      };\n    } else {\n      provider.$get = defaultFactory;\n    }\n  };\n\n  defaultFactory = provider.$get = ['$resource', '$q', 'fisPubSubService', '$injector', 'fisConditionalLoaderService', function ($resource, $q, fisPubSubService, $injector, loader) {\n    var configPromise;\n\n    if (!$injector.has('fisConfig')) {\n      console.warn('DEPRECATED. Use a fisConfig constant instead to improve load speed.', 'https://www.csa.sungard.com/wiki/x/ggfNAg');\n    }\n\n    configPromise = loader('fisConfig', fis.initParams().configEndpoint, {}, eventName);\n\n    configPromise.then(function success() {\n      console.log('- Framework config loaded.');\n    }, function failure(err) {\n      // If err is a http response object, throw an error to notify developer the\n      // config endpoint used is not working.\n      // If not a response object, it means the developer intentionally left the configEnpoint empty\n      // and does not use the config service. This is not possible when using fis.start.\n      if (err.status) {\n        throw new Error('Framework config is required!');\n      }\n    });\n\n    return configPromise;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./services/config-service.provider.js","/**\r\n * @class\r\n * @name fisConfigService\r\n * @description Provides application-wide configuration to your application.\r\n */\r\nexport default function () {\r\n  'use strict';\r\n  var provider = this;\r\n  var eventName = 'shell.configReady';\r\n  var defaultFactory;\r\n\r\n  provider.config = function setConfig(cfg) {\r\n    if (angular.isObject(cfg)) {\r\n      cfg.then = function (cb) {\r\n        return cb(cfg);\r\n      };\r\n      provider.$get = function () {\r\n        return cfg;\r\n      };\r\n    } else {\r\n      provider.$get = defaultFactory;\r\n    }\r\n  };\r\n\r\n  defaultFactory = provider.$get = [\r\n    '$resource',\r\n    '$q',\r\n    'fisPubSubService',\r\n    '$injector',\r\n    'fisConditionalLoaderService',\r\n\r\n    function ($resource, $q, fisPubSubService, $injector, loader) {\r\n      var configPromise;\r\n\r\n      if (!$injector.has('fisConfig')) {\r\n        console.warn('DEPRECATED. Use a fisConfig constant instead to improve load speed.',\r\n                    'https://www.csa.sungard.com/wiki/x/ggfNAg');\r\n      }\r\n\r\n      configPromise = loader('fisConfig', fis.initParams().configEndpoint, {}, eventName);\r\n\r\n      configPromise.then(\r\n\r\n        function success() {\r\n          console.log('- Framework config loaded.');\r\n        },\r\n\r\n        function failure(err) {\r\n            // If err is a http response object, throw an error to notify developer the\r\n            // config endpoint used is not working.\r\n            // If not a response object, it means the developer intentionally left the configEnpoint empty\r\n            // and does not use the config service. This is not possible when using fis.start.\r\n          if (err.status) {\r\n            throw new Error('Framework config is required!');\r\n          }\r\n        }\r\n\r\n      );\r\n\r\n      return configPromise;\r\n    }\r\n  ];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/config-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($delegate) {\n  'ngInject';\n\n  var doc = '\\nSee https://www.csa.sungard.com/wiki/x/9xVMB';\n  var interceptors = {};\n  var ANY = '_any';\n\n  var handler = function exceptionHandler(exception, cause) {\n    var prop;\n    for (prop in interceptors) {\n      if (prop === ANY || exception.hasOwnProperty(prop)) {\n        interceptors[prop](exception, cause);\n      }\n    }\n\n    $delegate(exception, cause);\n  };\n\n  handler.intercept = function intercept(property, cb) {\n    if (!property) {\n      delete interceptors[ANY];\n      return;\n    }\n\n    if (angular.isFunction(property)) {\n      cb = property;\n      property = ANY;\n    }\n\n    if (angular.isString(property)) {\n      if (angular.isFunction(cb)) {\n        interceptors[property] = cb;\n      } else {\n        delete interceptors[property];\n      }\n    }\n  };\n\n  handler.intercept('userMessage', function (exception) {\n    exception.message += doc;\n  });\n\n  return handler;\n};\n\n\n// WEBPACK FOOTER //\n// ./services/exception-handler.decorator.js","export default function ($delegate) {\r\n  'ngInject';\r\n\r\n  var doc = '\\nSee https://www.csa.sungard.com/wiki/x/9xVMB';\r\n  var interceptors = {};\r\n  var ANY = '_any';\r\n\r\n  var handler = function exceptionHandler(exception, cause) {\r\n    var prop;\r\n    for (prop in interceptors) {\r\n      if (prop === ANY || exception.hasOwnProperty(prop)) {\r\n        interceptors[prop](exception, cause);\r\n      }\r\n    }\r\n\r\n    $delegate(exception, cause);\r\n  };\r\n\r\n  handler.intercept = function intercept(property, cb) {\r\n    if (!property) {\r\n      delete interceptors[ANY];\r\n      return;\r\n    }\r\n\r\n    if (angular.isFunction(property)) {\r\n      cb = property;\r\n      property = ANY;\r\n    }\r\n\r\n    if (angular.isString(property)) {\r\n      if (angular.isFunction(cb)) {\r\n        interceptors[property] = cb;\r\n      } else {\r\n        delete interceptors[property];\r\n      }\r\n    }\r\n  };\r\n\r\n  handler.intercept('userMessage', function (exception) {\r\n    exception.message += doc;\r\n  });\r\n\r\n  return handler;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/exception-handler.decorator.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($httpProvider) {\n  'ngInject';\n\n  $httpProvider.interceptors.push('fisHttpErrorInterceptor');\n};\n\n\n// WEBPACK FOOTER //\n// ./services/http-error-interceptor.config.js","// CONFIGURATION AND INITIALIZATION\r\nexport default function ($httpProvider) {\r\n  'ngInject';\r\n  $httpProvider.interceptors.push('fisHttpErrorInterceptor');\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/http-error-interceptor.config.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var provider = this;\n\n  // default HTTP status for firing fisLoginRequired: 403 Forbidden\n  var loginStatuses = [403];\n\n  provider.setLoginRequiredStatus = function (httpStatuses) {\n    var i;\n    loginStatuses = [];\n    if (angular.isNumber(httpStatuses)) {\n      loginStatuses = [httpStatuses];\n    } else if (angular.isArray(httpStatuses)) {\n      for (i = 0; i < httpStatuses.length; i++) {\n        if (angular.isNumber(httpStatuses[i])) {\n          loginStatuses.push(httpStatuses[i]);\n        }\n      }\n    }\n  };\n\n  provider.$get = ['$rootScope', '$q', 'fisPubSubService', function ($rootScope, $q, fisPubSubService) {\n    var successFn = function success(response) {\n      return response;\n    };\n\n    // default strategy is to reject but fire events.\n    // Another strategy could be to allow trying requests again after app confirms login (https://github.com/witoldsz/angular-http-auth)\n    var rejectNoRetry = function error(response) {\n      // check if the received error is in the HTTP statuses configured to $broadcast a fisLoginRequired event\n      if (loginStatuses.indexOf(response.status) !== -1) {\n        $rootScope.$broadcast('fisLoginRequired', response);\n      }\n\n      // publish response to the fisHTTPError topic\n      if (response.status >= 400 || response.status === 0) {\n        fisPubSubService.publish('fisHTTPError', response);\n      }\n      // 3xx range statuses are also going through this error callback but are not errors\n      // A strategy could try to load the location received in the response headers before rejecting the promise.\n\n      // reject the response and continue in chain\n      return $q.reject(response);\n    };\n\n    return {\n      response: successFn,\n      responseError: rejectNoRetry\n    };\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./services/http-error-interceptor.provider.js","/**\r\n * @description fisHttpErrorInterceptor is an $http response interceptor that provides a\r\n * simple way for applications to listen for HTTP error events and provide the user with some feedback if necessary\r\n * (see http://docs.angularjs.org/api/ng.$http).\r\n */\r\nexport default function () {\r\n  var provider = this;\r\n\r\n  // default HTTP status for firing fisLoginRequired: 403 Forbidden\r\n  var loginStatuses = [403];\r\n\r\n  provider.setLoginRequiredStatus = function (httpStatuses) {\r\n    var i;\r\n    loginStatuses = [];\r\n    if (angular.isNumber(httpStatuses)) {\r\n      loginStatuses = [httpStatuses];\r\n    } else if (angular.isArray(httpStatuses)) {\r\n      for (i = 0; i < httpStatuses.length; i++) {\r\n        if (angular.isNumber(httpStatuses[i])) {\r\n          loginStatuses.push(httpStatuses[i]);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  provider.$get = ['$rootScope', '$q', 'fisPubSubService', function ($rootScope, $q, fisPubSubService) {\r\n    var successFn = function success(response) {\r\n      return response;\r\n    };\r\n\r\n    // default strategy is to reject but fire events.\r\n    // Another strategy could be to allow trying requests again after app confirms login (https://github.com/witoldsz/angular-http-auth)\r\n    var rejectNoRetry = function error(response) {\r\n      // check if the received error is in the HTTP statuses configured to $broadcast a fisLoginRequired event\r\n      if (loginStatuses.indexOf(response.status) !== -1) {\r\n        $rootScope.$broadcast('fisLoginRequired', response);\r\n      }\r\n\r\n      // publish response to the fisHTTPError topic\r\n      if (response.status >= 400 || response.status === 0) {\r\n        fisPubSubService.publish('fisHTTPError', response);\r\n      }\r\n      // 3xx range statuses are also going through this error callback but are not errors\r\n      // A strategy could try to load the location received in the response headers before rejecting the promise.\r\n\r\n      // reject the response and continue in chain\r\n      return $q.reject(response);\r\n    };\r\n\r\n    return {\r\n      response: successFn,\r\n      responseError: rejectNoRetry\r\n    };\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/http-error-interceptor.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _exceptionHandler = require('./exception-handler.decorator');\n\nvar _exceptionHandler2 = _interopRequireDefault(_exceptionHandler);\n\nvar _clientStorageService = require('./client-storage-service.provider');\n\nvar _clientStorageService2 = _interopRequireDefault(_clientStorageService);\n\nvar _conditionalLoaderService = require('./conditional-loader-service.factory');\n\nvar _conditionalLoaderService2 = _interopRequireDefault(_conditionalLoaderService);\n\nvar _configServiceProvider = require('./config-service.provider.js');\n\nvar _configServiceProvider2 = _interopRequireDefault(_configServiceProvider);\n\nvar _httpErrorInterceptorProvider = require('./http-error-interceptor.provider.js');\n\nvar _httpErrorInterceptorProvider2 = _interopRequireDefault(_httpErrorInterceptorProvider);\n\nvar _templateCacheServiceProvider = require('./template-cache-service.provider.js');\n\nvar _templateCacheServiceProvider2 = _interopRequireDefault(_templateCacheServiceProvider);\n\nvar _userContextServiceProvider = require('./user-context-service.provider.js');\n\nvar _userContextServiceProvider2 = _interopRequireDefault(_userContextServiceProvider);\n\nvar _httpErrorInterceptorConfig = require('./http-error-interceptor.config.js');\n\nvar _httpErrorInterceptorConfig2 = _interopRequireDefault(_httpErrorInterceptorConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.services', []);\n\nngModule.decorator('$exceptionHandler', _exceptionHandler2.default);\n\nngModule.provider('fisClientStorageService', _clientStorageService2.default);\nngModule.provider('fisConfigService', _configServiceProvider2.default);\nngModule.provider('fisHttpErrorInterceptor', _httpErrorInterceptorProvider2.default);\nngModule.provider('fisTemplateCacheService', _templateCacheServiceProvider2.default);\nngModule.provider('fisUserContextService', _userContextServiceProvider2.default);\n\nngModule.factory('fisConditionalLoaderService', _conditionalLoaderService2.default);\n\nngModule.config(_httpErrorInterceptorConfig2.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./services/index.js","import angular from 'angular';\r\n\r\nimport exceptionHandler from './exception-handler.decorator';\r\nimport clientStorage from './client-storage-service.provider';\r\nimport conditionalLoaderService from './conditional-loader-service.factory';\r\nimport configService from './config-service.provider.js';\r\nimport httpErrorInterceptor from './http-error-interceptor.provider.js';\r\nimport templateCacheService from './template-cache-service.provider.js';\r\nimport userContextService from './user-context-service.provider.js';\r\n\r\nimport httpErrorInterceptorConfig from './http-error-interceptor.config.js';\r\n\r\nconst ngModule = angular.module('fis.core.services', []);\r\n\r\nngModule.decorator('$exceptionHandler', exceptionHandler);\r\n\r\nngModule.provider('fisClientStorageService', clientStorage);\r\nngModule.provider('fisConfigService', configService);\r\nngModule.provider('fisHttpErrorInterceptor', httpErrorInterceptor);\r\nngModule.provider('fisTemplateCacheService', templateCacheService);\r\nngModule.provider('fisUserContextService', userContextService);\r\n\r\nngModule.factory('fisConditionalLoaderService', conditionalLoaderService);\r\n\r\nngModule.config(httpErrorInterceptorConfig);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  /**\r\n  * @private\r\n  */\n  var self = this;\n\n  /**\r\n  * @name $get\r\n  * @methodOf fisTemplateCacheService\r\n  * @description <p>Factory method to create instance of fisTemplateCacheService.</p>\r\n  */\n  self.$get = ['$templateCache', function ($templateCache) {\n    var service = {};\n\n    service.getTemplate = function (templateName) {\n      return $templateCache.get(templateName);\n    };\n\n    service.addTemplate = function (templateName, template) {\n      $templateCache.put(templateName, template);\n    };\n\n    service.removeTemplate = function (templateName) {\n      $templateCache.remove(templateName);\n    };\n\n    return service;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./services/template-cache-service.provider.js","/**\r\n * @name fisTemplateCacheService\r\n * @description  Sungard Template Cache Service\r\n */\r\nexport default function () {\r\n  /**\r\n  * @private\r\n  */\r\n  var self = this;\r\n\r\n  /**\r\n  * @name $get\r\n  * @methodOf fisTemplateCacheService\r\n  * @description <p>Factory method to create instance of fisTemplateCacheService.</p>\r\n  */\r\n  self.$get = ['$templateCache', function ($templateCache) {\r\n    var service = {};\r\n\r\n    service.getTemplate = function (templateName) {\r\n      return $templateCache.get(templateName);\r\n    };\r\n\r\n    service.addTemplate = function (templateName, template) {\r\n      $templateCache.put(templateName, template);\r\n    };\r\n\r\n    service.removeTemplate = function (templateName) {\r\n      $templateCache.remove(templateName);\r\n    };\r\n\r\n    return service;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/template-cache-service.provider.js","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var self = this;\n\n  self.$get = [function () {\n    var serv = {};\n\n    var userInContext;\n\n    serv.context = function (user) {\n      if (arguments.length === 1) {\n        userInContext = user;\n      } else {\n        var clonedUser = angular.copy(userInContext);\n        return clonedUser;\n      }\n    };\n    return serv;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./services/user-context-service.provider.js","/**\r\n * @class\r\n * @name fisThemeService\r\n * @description fisConfig service, retrieves configuration for shell\r\n */\r\nexport default function () {\r\n  var self = this;\r\n\r\n  self.$get = [function () {\r\n    var serv = {};\r\n\r\n    var userInContext;\r\n\r\n    serv.context = function (user) {\r\n      if (arguments.length === 1) {\r\n        userInContext = user;\r\n      } else {\r\n        var clonedUser = angular.copy(userInContext);\r\n        return clonedUser;\r\n      }\r\n    };\r\n    return serv;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./services/user-context-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _memoryUtilService = require('./memory-util-service.provider');\n\nvar _memoryUtilService2 = _interopRequireDefault(_memoryUtilService);\n\nvar _utilService = require('./util-service.provider');\n\nvar _utilService2 = _interopRequireDefault(_utilService);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.utils', []);\n\nngModule.provider('fisMemoryUtilService', _memoryUtilService2.default);\nngModule.provider('fisUtilService', _utilService2.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./utils/index.js","import angular from 'angular';\r\n\r\nimport memoryUtilService from './memory-util-service.provider';\r\nimport utilService from './util-service.provider';\r\n\r\nconst ngModule = angular.module('fis.core.utils', []);\r\n\r\nngModule.provider('fisMemoryUtilService', memoryUtilService);\r\nngModule.provider('fisUtilService', utilService);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./utils/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var self = this;\n\n  self.$get = [function () {\n    var service = {};\n\n    service.enabled = true;\n    service.logging = false;\n\n    if (!service.enabled) {\n      console.warn('fisMemoryUtilService has been disabled!');\n    }\n\n    /**\r\n     * Convenience method attempty to clean off all references to enable garbage collection\r\n     * @param node -  the element to be cleaned\r\n     */\n    service.callCleanAll = function (node) {\n      service.removeListeners(node);\n      service.destroyNode(node);\n    };\n\n    /**\r\n     * Attempts to remove all listeners from node.\r\n     * @param domNode\r\n     */\n    service.removeListeners = function (domNode) {\n      if (angular.isDefined(domNode)) {\n        var node = $(domNode);\n        if (node.length === 1) {\n          var children = node.children();\n          if (angular.isDefined(children) && children.length > 0) {\n            children.get().forEach(function (child) {\n              service.removeListeners(child);\n            });\n          }\n        }\n        if (node.length > 1) {\n          // node is a \"jQuery\" object\n          node.get().forEach(function (child) {\n            service.removeListeners(child);\n          });\n        } else {\n          if (node.scope()) {\n            node.scope().$destroy(); // in case this is implemented in scope.\n          }\n          node.unbind();\n        }\n      }\n    };\n\n    /**\r\n     * Utility method to destroy node (html elements like dom nodes)\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild\r\n     * @param node to be destroyed.\r\n     */\n    service.destroyNode = function (node) {\n      if (node) {\n        service.destroyAllChildNodes(node);\n        if (node.parent) {\n          var parent = node.parent();\n          service.destroyAllChildNodes(parent);\n        }\n        node = null;\n      }\n    };\n\n    /**\r\n     * Utility method to destroy All Children Nodes (html elements like dom nodes)\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild\r\n     * @param parentNode to be destroyed.\r\n     */\n    service.destroyAllChildNodes = function (parentNode) {\n      if (angular.isUndefined(parentNode)) {\n        return;\n      }\n      if (parentNode.length && parentNode.length === 1) {\n        if (angular.isDefined(parentNode.children()) && parentNode.children().length > 0) {\n          var child = parentNode.children();\n          child.remove();\n          child = null;\n        }\n      }\n      if (parentNode.length && parentNode.length > 1) {\n        angular.forEach(parentNode, function (child) {\n          service.destroyAllChildNodes(child);\n        });\n      }\n    };\n\n    /**\r\n     * Utility to cancel timeout\r\n     * @param scope\r\n     * @param timeout\r\n     * @param $timeout\r\n     */\n    service.cancelTimeoutOnDestroy = function (scope, timeout, $timeout) {\n      if (angular.isDefined(scope)) {\n        scope.$on('$destroy', function () {\n          if (timeout) {\n            $timeout.cancel(timeout);\n          }\n        });\n      } else {\n        console.warn('Memory cleanup failed scope is undefined');\n      }\n    };\n\n    /**\r\n     * Utility to cancel timeout\r\n     * @param compCtrl - the component controller instance\r\n     * @param timeout\r\n     * @param $timeout\r\n     */\n    service.cancelTimeoutOnComponentCtrlDestroy = function (compCtrl, timeout, $timeout) {\n      if (compCtrl) {\n        compCtrl.$onDestroy = function () {\n          if (timeout) {\n            $timeout.cancel(timeout);\n          }\n        };\n      }\n    };\n\n    /**\r\n     * Utility to cancel timeout\r\n     * @param scope\r\n     * @param watch\r\n     */\n    service.cancelWatchOnDestroy = function (scope, watch) {\n      scope.$on('$destroy', function () {\n        if (watch) {\n          watch(); // unbinds watch\n        }\n      });\n    };\n\n    /**\r\n     * Utility to destroy scope and data\r\n     * @param scope\r\n     * @param element\r\n     */\n    service.destroyScopeAndData = function (scope, element) {\n      if (scope) {\n        scope.$destroy();\n      }\n      if (element) {\n        $(element).removeData('$scope').removeData('$isolateScope').removeData('$isolateScopeNoTemplate').removeClass('ng-scope');\n      }\n    };\n\n    /**\r\n     * Utility to destroy kendo widgets\r\n     * @param widgets - kendo widgets to destroy\r\n     * @param element\r\n     */\n    // https://github.com/telerik/kendo-ui-core/issues/99\n    // https://github.com/kendo-labs/knockout-kendo/issues/140\n    service.destroyKendoWidgets = function (widgets) {\n      if (widgets) {\n        try {\n          widgets.destroy();\n          widgets = null;\n        } catch (e) {}\n      }\n    };\n\n    service.purgeAttributes = function (elements) {\n      if (elements !== undefined && elements.length > 0) {\n        for (var e = 0; e < elements.length; e++) {\n          var element = elements[e];\n          angular.element(element).removeData().removeAttr(); // try clear jqlite / jquery cache\n          if (element.attributes !== undefined && element.attributes.length > 0) {\n            for (var a = element.attributes.length - 1; a >= 0; a--) {\n              if (element.attributes[a].name !== 'class') {\n                // so kendo doesnt break, we leave the classlist in\n                element.removeAttribute(element.attributes[a].name);\n              }\n            }\n          }\n          if (element.children !== undefined && element.children.length > 0) {\n            service.purgeAttributes(element.children);\n          }\n          a = undefined; // eslint-disable-line\n        }\n      }\n    };\n\n    return service;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./utils/memory-util-service.provider.js","/**\r\n * Created by carl on 2014/03/06.\r\n */\r\nexport default function () {\r\n  var self = this;\r\n\r\n  self.$get = [function () {\r\n    var service = {};\r\n\r\n    service.enabled = true;\r\n    service.logging = false;\r\n\r\n    if (!service.enabled) {\r\n      console.warn('fisMemoryUtilService has been disabled!');\r\n    }\r\n\r\n    /**\r\n     * Convenience method attempty to clean off all references to enable garbage collection\r\n     * @param node -  the element to be cleaned\r\n     */\r\n    service.callCleanAll = function (node) {\r\n      service.removeListeners(node);\r\n      service.destroyNode(node);\r\n    };\r\n\r\n    /**\r\n     * Attempts to remove all listeners from node.\r\n     * @param domNode\r\n     */\r\n    service.removeListeners = function (domNode) {\r\n      if (angular.isDefined(domNode)) {\r\n        var node = $(domNode);\r\n        if (node.length === 1) {\r\n          var children = node.children();\r\n          if (angular.isDefined(children) && children.length > 0) {\r\n            children.get().forEach(function (child) {\r\n              service.removeListeners(child);\r\n            });\r\n          }\r\n        }\r\n        if (node.length > 1) {\r\n          // node is a \"jQuery\" object\r\n          node.get().forEach(function (child) {\r\n            service.removeListeners(child);\r\n          });\r\n        } else {\r\n          if (node.scope()) {\r\n            node.scope().$destroy(); // in case this is implemented in scope.\r\n          }\r\n          node.unbind();\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Utility method to destroy node (html elements like dom nodes)\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild\r\n     * @param node to be destroyed.\r\n     */\r\n    service.destroyNode = function (node) {\r\n      if (node) {\r\n        service.destroyAllChildNodes(node);\r\n        if (node.parent) {\r\n          var parent = node.parent();\r\n          service.destroyAllChildNodes(parent);\r\n        }\r\n        node = null;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Utility method to destroy All Children Nodes (html elements like dom nodes)\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild\r\n     * @param parentNode to be destroyed.\r\n     */\r\n    service.destroyAllChildNodes = function (parentNode) {\r\n      if (angular.isUndefined(parentNode)) {\r\n        return;\r\n      }\r\n      if (parentNode.length && parentNode.length === 1) {\r\n        if (angular.isDefined(parentNode.children()) && parentNode.children().length > 0) {\r\n          var child = parentNode.children();\r\n          child.remove();\r\n          child = null;\r\n        }\r\n      }\r\n      if (parentNode.length && parentNode.length > 1) {\r\n        angular.forEach(parentNode, function (child) {\r\n          service.destroyAllChildNodes(child);\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Utility to cancel timeout\r\n     * @param scope\r\n     * @param timeout\r\n     * @param $timeout\r\n     */\r\n    service.cancelTimeoutOnDestroy = function (scope, timeout, $timeout) {\r\n      if (angular.isDefined(scope)) {\r\n        scope.$on('$destroy', function () {\r\n          if (timeout) {\r\n            $timeout.cancel(timeout);\r\n          }\r\n        });\r\n      } else {\r\n        console.warn('Memory cleanup failed scope is undefined');\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Utility to cancel timeout\r\n     * @param compCtrl - the component controller instance\r\n     * @param timeout\r\n     * @param $timeout\r\n     */\r\n    service.cancelTimeoutOnComponentCtrlDestroy = function (compCtrl, timeout, $timeout) {\r\n      if (compCtrl) {\r\n        compCtrl.$onDestroy = function () {\r\n          if (timeout) {\r\n            $timeout.cancel(timeout);\r\n          }\r\n        };\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Utility to cancel timeout\r\n     * @param scope\r\n     * @param watch\r\n     */\r\n    service.cancelWatchOnDestroy = function (scope, watch) {\r\n      scope.$on('$destroy', function () {\r\n        if (watch) {\r\n          watch(); // unbinds watch\r\n        }\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Utility to destroy scope and data\r\n     * @param scope\r\n     * @param element\r\n     */\r\n    service.destroyScopeAndData = function (scope, element) {\r\n      if (scope) {\r\n        scope.$destroy();\r\n      }\r\n      if (element) {\r\n        $(element)\r\n          .removeData('$scope')\r\n          .removeData('$isolateScope')\r\n          .removeData('$isolateScopeNoTemplate')\r\n          .removeClass('ng-scope');\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Utility to destroy kendo widgets\r\n     * @param widgets - kendo widgets to destroy\r\n     * @param element\r\n     */\r\n    // https://github.com/telerik/kendo-ui-core/issues/99\r\n    // https://github.com/kendo-labs/knockout-kendo/issues/140\r\n    service.destroyKendoWidgets = function (widgets) {\r\n      if (widgets) {\r\n        try {\r\n          widgets.destroy();\r\n          widgets = null;\r\n        } catch (e) {\r\n\r\n        }\r\n      }\r\n    };\r\n\r\n    service.purgeAttributes = function (elements) {\r\n      if (elements !== undefined && elements.length > 0) {\r\n        for (var e = 0; e < elements.length; e++) {\r\n          var element = elements[e];\r\n          angular.element(element).removeData().removeAttr(); // try clear jqlite / jquery cache\r\n          if (element.attributes !== undefined && element.attributes.length > 0) {\r\n            for (var a = element.attributes.length - 1; a >= 0; a--) {\r\n              if (element.attributes[a].name !== 'class') { // so kendo doesnt break, we leave the classlist in\r\n                element.removeAttribute(element.attributes[a].name);\r\n              }\r\n            }\r\n          }\r\n          if (element.children !== undefined && element.children.length > 0) {\r\n            service.purgeAttributes(element.children);\r\n          }\r\n          a = undefined; // eslint-disable-line\r\n        }\r\n      }\r\n    };\r\n\r\n    return service;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./utils/memory-util-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var self = this;\n\n  self.$get = [function () {\n    var service = {};\n\n    /**\r\n     *@name calculateContainerWidth\r\n     *@param {Object} currentTabstrip.\r\n     *\r\n     *@description Returns the width of the Div containing the tabstrip.\r\n     * The extra width ensures there is always some space on the tabstrip.\r\n     * This method is in fisUtilService because it breaks the unit tests - uses jQuery to calculate the width of component on screen\r\n     * which is a problem for phantomJS which is headless\r\n     *\r\n     */\n    service.calculateContainerWidth = function (component) {\n      return parseFloat(component.width());\n    };\n\n    function queryStringToObject(queryString) {\n      var ret = {};\n      var queryPairs;\n\n      if (angular.isString(queryString)) {\n        queryPairs = queryString.split('&');\n      } else if (angular.isObject(queryPairs)) {\n        queryPairs = queryString;\n      }\n\n      queryPairs.forEach(function (queryElem) {\n        var elemParts = queryElem.split('=');\n        ret[elemParts[0]] = elemParts[1];\n      });\n      return ret;\n    }\n\n    function objectToQueryString(object) {\n      var str = '';\n      Object.keys(object).forEach(function (key) {\n        var val = object[key];\n        if (val !== null) {\n          str += key + '=';\n          if (angular.isDefined(val)) {\n            str += val;\n          }\n          str += '&';\n        }\n      });\n      return str.slice(0, -1);\n    }\n\n    /**\r\n     * Append custom parameters to a given URL. Already existing parameters will be overridden.\r\n     * Set the value of key to null to remove it from the url. Keeps existing anchors in the URL.\r\n     * @param url {String} The URL the parameters should be appended to.\r\n     * @param params {string|object} Object holding key-value pairs of parameters or query string in format \"key=value\" separated by &\r\n     * @returns {String} url enhanced by the parameters\r\n     */\n    service.appendQueryParameters = function (url, params) {\n      var pathString = url.match(/^([^?#]*)/i);\n      var queryString = url.match(/\\?([^#]*)/i);\n      var anchorString = url.match(/(#.*)$/i);\n\n      // Set to empty String of no matches found, otherwise use the first (and hopefully only) match\n      pathString = pathString === null ? '' : pathString[1];\n      anchorString = anchorString === null ? '' : anchorString[1];\n\n      var queryObject = {};\n\n      if (queryString !== null) {\n        queryObject = queryStringToObject(queryString[1]);\n      }\n      if (angular.isString(params)) {\n        params = queryStringToObject(params);\n      }\n      var mergedQueryString = objectToQueryString(angular.extend(queryObject, params));\n      if (mergedQueryString !== '') {\n        pathString += '?';\n      }\n      return pathString + mergedQueryString + anchorString;\n    };\n\n    /**\r\n     * Append version and appStage parameters to a given URL\r\n     * @param url The URL the parameters should be appended to\r\n     * @param customVersion {String} optional Override the version value\r\n     * @returns {String} url with the cache query parameters added\r\n     */\n    service.appendCacheQueryParameter = function (url, customVersion) {\n      var cacheQueryObject = fis.getCacheQuery();\n      if (angular.isDefined(customVersion)) {\n        // Clone the object to not change the version setting\n        cacheQueryObject = angular.extend({}, cacheQueryObject);\n        cacheQueryObject.version = customVersion;\n      }\n      return service.appendQueryParameters(url, cacheQueryObject);\n    };\n\n    /**\r\n     * Extract data from complex JSON for nested path (multi level)\r\n     * @param schema JSON path\r\n     * @param data JSON response\r\n     * @returns extracted data from JSON response\r\n     */\n    service.extractData = function (schema, data) {\n      var results;\n      var temp = angular.copy(data);\n      var tokens = schema.split(/\\.|(\\(\\))|(\\[\\d+?])/).filter(function (t) {\n        return t;\n      });\n      if (tokens.length === 1) {\n        results = temp[schema];\n      } else {\n        var isTokenArrayAccess = /^\\[\\d+\\]$/;\n        for (var i = 0; i < tokens.length; i++) {\n          var extractValue;\n          if (isTokenArrayAccess.test(tokens[i])) {\n            extractValue = temp[parseInt(tokens[i].substr(1), 10)];\n          } else {\n            extractValue = temp[tokens[i]];\n          }\n          if (angular.isDefined(extractValue)) {\n            temp = extractValue;\n            results = temp;\n          }\n        }\n      }\n      return results;\n    };\n\n    /*\r\n    * This function does a proper boolean check and is necessary anywhere\r\n    * that an angular directive is pulling in an attribute that is meant\r\n    * to be a boolean. Sometimes the value coming in will be a string,\r\n    * so the shortcut ways of checking boolean state don't work.\r\n    */\n    service.booleanCheck = function (actualValue, defaultValue) {\n      if (actualValue === undefined || actualValue === null) {\n        // no value specified, so resort to default value\n        return defaultValue;\n      } else if (typeof actualValue === 'boolean') {\n        // specific check to make sure its boolean\n        return actualValue;\n      }\n      var lowercase = actualValue.toLowerCase();\n      // we have to be specific here, otherwise use the default\n      if (lowercase === 'true') {\n        return true;\n      } else if (lowercase === 'false') {\n        return false;\n      }\n      return defaultValue;\n    };\n\n    /**\r\n     * Checks whether a given value is NaN.\r\n     * This is not the same as the native isNaN function, which will\r\n     * also return true for many other not-number values, such as undefined.\r\n     *\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\n    service.isNaN = function (value) {\n      return toString.call(value) === '[object Number]' && value !== Number(value);\n    };\n\n    return service;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./utils/util-service.provider.js","/**\r\n * @class\r\n * @name fisUtilService\r\n * @description fisUtilService will be used for abstracting functionality that will break unit tests, i.e. phantomJS - see calculateContainerWidth\r\n * @memberOf fis.core\r\n */\r\nexport default function () {\r\n  var self = this;\r\n\r\n  self.$get = [function () {\r\n    var service = {};\r\n\r\n            /**\r\n             *@name calculateContainerWidth\r\n             *@param {Object} currentTabstrip.\r\n             *\r\n             *@description Returns the width of the Div containing the tabstrip.\r\n             * The extra width ensures there is always some space on the tabstrip.\r\n             * This method is in fisUtilService because it breaks the unit tests - uses jQuery to calculate the width of component on screen\r\n             * which is a problem for phantomJS which is headless\r\n             *\r\n             */\r\n    service.calculateContainerWidth = function (component) {\r\n      return parseFloat(component.width());\r\n    };\r\n\r\n    function queryStringToObject(queryString) {\r\n      var ret = {};\r\n      var queryPairs;\r\n\r\n      if (angular.isString(queryString)) {\r\n        queryPairs = queryString.split('&');\r\n      } else if (angular.isObject(queryPairs)) {\r\n        queryPairs = queryString;\r\n      }\r\n\r\n      queryPairs.forEach(function (queryElem) {\r\n        var elemParts = queryElem.split('=');\r\n        ret[elemParts[0]] = elemParts[1];\r\n      });\r\n      return ret;\r\n    }\r\n\r\n    function objectToQueryString(object) {\r\n      var str = '';\r\n      Object.keys(object).forEach(function (key) {\r\n        var val = object[key];\r\n        if (val !== null) {\r\n          str += (key + '=');\r\n          if (angular.isDefined(val)) {\r\n            str += val;\r\n          }\r\n          str += '&';\r\n        }\r\n      });\r\n      return str.slice(0, -1);\r\n    }\r\n\r\n    /**\r\n     * Append custom parameters to a given URL. Already existing parameters will be overridden.\r\n     * Set the value of key to null to remove it from the url. Keeps existing anchors in the URL.\r\n     * @param url {String} The URL the parameters should be appended to.\r\n     * @param params {string|object} Object holding key-value pairs of parameters or query string in format \"key=value\" separated by &\r\n     * @returns {String} url enhanced by the parameters\r\n     */\r\n    service.appendQueryParameters = function (url, params) {\r\n      var pathString = url.match(/^([^?#]*)/i);\r\n      var queryString = url.match(/\\?([^#]*)/i);\r\n      var anchorString = url.match(/(#.*)$/i);\r\n\r\n                // Set to empty String of no matches found, otherwise use the first (and hopefully only) match\r\n      pathString = pathString === null ? '' : pathString[1];\r\n      anchorString = anchorString === null ? '' : anchorString[1];\r\n\r\n      var queryObject = {};\r\n\r\n      if (queryString !== null) {\r\n        queryObject = queryStringToObject(queryString[1]);\r\n      }\r\n      if (angular.isString(params)) {\r\n        params = queryStringToObject(params);\r\n      }\r\n      var mergedQueryString = objectToQueryString(angular.extend(queryObject, params));\r\n      if (mergedQueryString !== '') {\r\n        pathString += '?';\r\n      }\r\n      return pathString + mergedQueryString + anchorString;\r\n    };\r\n\r\n    /**\r\n     * Append version and appStage parameters to a given URL\r\n     * @param url The URL the parameters should be appended to\r\n     * @param customVersion {String} optional Override the version value\r\n     * @returns {String} url with the cache query parameters added\r\n     */\r\n    service.appendCacheQueryParameter = function (url, customVersion) {\r\n      var cacheQueryObject = fis.getCacheQuery();\r\n      if (angular.isDefined(customVersion)) {\r\n                    // Clone the object to not change the version setting\r\n        cacheQueryObject = angular.extend({}, cacheQueryObject);\r\n        cacheQueryObject.version = customVersion;\r\n      }\r\n      return service.appendQueryParameters(url, cacheQueryObject);\r\n    };\r\n\r\n    /**\r\n     * Extract data from complex JSON for nested path (multi level)\r\n     * @param schema JSON path\r\n     * @param data JSON response\r\n     * @returns extracted data from JSON response\r\n     */\r\n    service.extractData = function (schema, data) {\r\n      var results;\r\n      var temp = angular.copy(data);\r\n      var tokens = schema.split(/\\.|(\\(\\))|(\\[\\d+?])/).filter(function (t) {\r\n        return t;\r\n      });\r\n      if (tokens.length === 1) {\r\n        results = temp[schema];\r\n      } else {\r\n        var isTokenArrayAccess = /^\\[\\d+\\]$/;\r\n        for (var i = 0; i < tokens.length; i++) {\r\n          var extractValue;\r\n          if (isTokenArrayAccess.test(tokens[i])) {\r\n            extractValue = temp[parseInt(tokens[i].substr(1), 10)];\r\n          } else {\r\n            extractValue = temp[tokens[i]];\r\n          }\r\n          if (angular.isDefined(extractValue)) {\r\n            temp = extractValue;\r\n            results = temp;\r\n          }\r\n        }\r\n      }\r\n      return results;\r\n    };\r\n\r\n    /*\r\n    * This function does a proper boolean check and is necessary anywhere\r\n    * that an angular directive is pulling in an attribute that is meant\r\n    * to be a boolean. Sometimes the value coming in will be a string,\r\n    * so the shortcut ways of checking boolean state don't work.\r\n    */\r\n    service.booleanCheck = function (actualValue, defaultValue) {\r\n      if (actualValue === undefined || actualValue === null) {\r\n        // no value specified, so resort to default value\r\n        return defaultValue;\r\n      } else if (typeof actualValue === 'boolean') {\r\n        // specific check to make sure its boolean\r\n        return actualValue;\r\n      }\r\n      var lowercase = actualValue.toLowerCase();\r\n        // we have to be specific here, otherwise use the default\r\n      if (lowercase === 'true') {\r\n        return true;\r\n      } else if (lowercase === 'false') {\r\n        return false;\r\n      }\r\n      return defaultValue;\r\n    };\r\n\r\n    /**\r\n     * Checks whether a given value is NaN.\r\n     * This is not the same as the native isNaN function, which will\r\n     * also return true for many other not-number values, such as undefined.\r\n     *\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    service.isNaN = function (value) {\r\n      return toString.call(value) === '[object Number]' && value !== Number(value);\r\n    };\r\n\r\n    return service;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./utils/util-service.provider.js","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  return function (scope, element, attrs) {\n    if (attrs.fisElement) {\n      var obj = scope[attrs.fisElement];\n      obj.$element = element;\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./views/element.directive.js","// Puts a reference on the element in the scope.\r\n// DO NOT USE: BAD PRACTICE\r\nexport default function () {\r\n  return function (scope, element, attrs) {\r\n    if (attrs.fisElement) {\r\n      var obj = scope[attrs.fisElement];\r\n      obj.$element = element;\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./views/element.directive.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _angularAnimate = require('angular-animate');\n\nvar _angularAnimate2 = _interopRequireDefault(_angularAnimate);\n\nvar _angularRoute = require('angular-route');\n\nvar _angularRoute2 = _interopRequireDefault(_angularRoute);\n\nvar _views = require('./views.config');\n\nvar _views2 = _interopRequireDefault(_views);\n\nvar _element = require('./element.directive');\n\nvar _element2 = _interopRequireDefault(_element);\n\nvar _views3 = require('./views.directive');\n\nvar _views4 = _interopRequireDefault(_views3);\n\nvar _viewPanelService = require('./view-panel-service.provider');\n\nvar _viewPanelService2 = _interopRequireDefault(_viewPanelService);\n\nvar _viewService = require('./view-service.provider');\n\nvar _viewService2 = _interopRequireDefault(_viewService);\n\nvar _navigationService = require('./navigation-service.provider');\n\nvar _navigationService2 = _interopRequireDefault(_navigationService);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ngModule = _angular2.default.module('fis.core.views', [_angularAnimate2.default, _angularRoute2.default]);\n\nngModule.config(_views2.default);\n\nngModule.directive('fisElement', _element2.default);\nngModule.directive('fisViews', _views4.default);\n\nngModule.provider('fisViewPanelService', _viewPanelService2.default);\nngModule.provider('fisViewService', _viewService2.default);\nngModule.provider('fisNavigationService', _navigationService2.default);\n\nexports.default = ngModule.name;\n\n\n// WEBPACK FOOTER //\n// ./views/index.js","import angular from 'angular';\r\nimport ngAnimate from 'angular-animate';\r\nimport ngRoute from 'angular-route';\r\n\r\nimport config from './views.config';\r\n\r\nimport elementDirective from './element.directive';\r\nimport viewsDirective from './views.directive';\r\n\r\nimport viewPanelService from './view-panel-service.provider';\r\nimport viewService from './view-service.provider';\r\nimport navigationService from './navigation-service.provider';\r\n\r\nconst ngModule = angular.module('fis.core.views', [ngAnimate, ngRoute]);\r\n\r\nngModule.config(config);\r\n\r\nngModule.directive('fisElement', elementDirective);\r\nngModule.directive('fisViews', viewsDirective);\r\n\r\nngModule.provider('fisViewPanelService', viewPanelService);\r\nngModule.provider('fisViewService', viewService);\r\nngModule.provider('fisNavigationService', navigationService);\r\n\r\nexport default ngModule.name;\r\n\n\n\n// WEBPACK FOOTER //\n// ./views/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var self = this;\n\n  self.$get = ['fisPubSubService', '$q', function (fisPubSubService, $q) {\n    var service = {};\n    var navigation;\n    var deferred = $q.defer();\n\n    /**\r\n     * since the 'shell.navReady' is fired before this directive is instantiated,\r\n     * this method is only used when the navigation is updated.\r\n     * @param nav\r\n     */\n    fisPubSubService.subscribe('shell.navReady', function (nav) {\n      if (angular.isDefined(nav)) {\n        navigation = nav;\n        deferred.resolve(navigation);\n      }\n    });\n\n    /**\r\n     * Setter for the Navigation - used to set navigaiton from the View Service.\r\n     * @param nav\r\n     */\n    service.setNavigation = function (nav) {\n      navigation = nav;\n      deferred.resolve(navigation);\n    };\n\n    /**\r\n     * Accessor for the navigation\r\n     * @returns {*}\r\n     */\n    service.getNavigation = function () {\n      return deferred.promise;\n    };\n\n    return service;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./views/navigation-service.provider.js","/**\r\n * @class\r\n * @name fisNavigationService\r\n * @description fisNavigationService, subscribes to and caches the navigation for frequent access\r\n */\r\nexport default function () {\r\n  var self = this;\r\n\r\n  self.$get = ['fisPubSubService', '$q', function (fisPubSubService, $q) {\r\n    var service = {};\r\n    var navigation;\r\n    var deferred = $q.defer();\r\n\r\n    /**\r\n     * since the 'shell.navReady' is fired before this directive is instantiated,\r\n     * this method is only used when the navigation is updated.\r\n     * @param nav\r\n     */\r\n    fisPubSubService.subscribe('shell.navReady', function (nav) {\r\n      if (angular.isDefined(nav)) {\r\n        navigation = nav;\r\n        deferred.resolve(navigation);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Setter for the Navigation - used to set navigaiton from the View Service.\r\n     * @param nav\r\n     */\r\n    service.setNavigation = function (nav) {\r\n      navigation = nav;\r\n      deferred.resolve(navigation);\r\n    };\r\n\r\n    /**\r\n     * Accessor for the navigation\r\n     * @returns {*}\r\n     */\r\n    service.getNavigation = function () {\r\n      return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n  }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./views/navigation-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /* jshint maxparams:12 */\n/**\r\n * @class\r\n * @name fisViewPanelService\r\n * @requires $locatio* @requires $timeout\r\n * @requires fisViewService\r\n * @description\r\n <p>Provides ViewPanel management functionality to the application.<p>\r\n <p>This service subscribes to <em>shell.navReady</em> event to get a list of\r\n top-level Navigation Items with partials configured and opens up non-closeable ViewPanels for these\r\n as the landing view for a user.</p>\r\n <p>The provider for this service, <em>fisViewPanelServiceProvider</em>, can be configured with View opening\r\n strategy during the module configuration phase. This can be a function or string. Possible value for string argument\r\n is <em>mdi</em> at the moment, while <em>sdi</em> and <em>hybrid</em> options would be made available in future.</p>\r\n */\n\n\nexports.default = function () {\n  'use strict';\n\n  var DEFAULT_OPEN_STRAT = 'mdi';\n  var CUSTOM_OPEN_STRAT = 'custom function';\n\n  var provider = this;\n  var openStratStr = null;\n  var customStrategyFn = null;\n  var preventBrowserNavigation = true;\n\n  /**\r\n   * @name setViewOpeningStrategy\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @param {String | Function} Function reference of custom view opening strategy or string from enum (only 'mdi' and 'browser' at this point in time)\r\n   * @description\r\n   * <p>Configures the provider with a View Panel Opening strategy that is then used by the <em>fisViewPanelService</em> to open\r\n   * View Panels.</p>\r\n   */\n  this.setViewOpeningStrategy = function (fn) {\n    if (angular.isFunction(fn)) {\n      openStratStr = CUSTOM_OPEN_STRAT;\n      customStrategyFn = fn;\n    } else if (angular.isString(fn)) {\n      openStratStr = fn;\n    } else {\n      openStratStr = DEFAULT_OPEN_STRAT;\n    }\n  };\n\n  /**\r\n   * @name getViewOpeningStrategy\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @description\r\n   * <p>Get the view opening strategy string reference or custom function if one was set.</p>\r\n   */\n  this.getViewOpeningStrategy = function () {\n    if (openStratStr === null) {\n      return DEFAULT_OPEN_STRAT;\n    } else if (openStratStr === CUSTOM_OPEN_STRAT) {\n      return customStrategyFn;\n    }\n    return openStratStr;\n  };\n\n  /**\r\n   * @name setPreventBrowserNavigation\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @param {Boolean} True for preventing browser reloading while navigating\r\n   * @description\r\n   * <p>Set a flag to prevent browser default navigation while using <em>fisViewPanelService</em>.</p>\r\n   */\n  this.setPreventBrowserNavigation = function (val) {\n    preventBrowserNavigation = Boolean(val);\n  };\n\n  /**\r\n   * @name getPreventBrowserNavigation\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @description\r\n   * <p>Get if the view panel should prevent the default browser navigation.</p>\r\n   */\n  this.getPreventBrowserNavigation = function () {\n    return preventBrowserNavigation;\n  };\n\n  /**\r\n   * @name ViewPanel\r\n   * @methodOf fisViewPanelService\r\n   * @param {viewDef} navigation Item\r\n   * @description extends and decorates the nav item with a label and ability to change this via method call.\r\n   */\n  var ViewPanel = function ViewPanel(viewDef, $filter) {\n    angular.extend(this, viewDef);\n\n    this.$filter = $filter;\n    this.navItem = angular.copy(viewDef);\n    this.title = viewDef.label;\n  };\n\n  ViewPanel.prototype.setTitle = function (stringOrObject) {\n    if ((typeof stringOrObject === 'undefined' ? 'undefined' : _typeof(stringOrObject)) !== 'object') {\n      // eslint-disable-line\n      this.navItem.customTitle = stringOrObject;\n    } else {\n      var tl = '';\n      var sep = '|';\n\n      if (stringOrObject.sep) {\n        sep = stringOrObject.sep;\n      }\n\n      if (stringOrObject.prefix) {\n        tl = stringOrObject.prefix;\n        tl += sep;\n      }\n\n      tl += this.$filter('interpolate')(this.navItem.label, stringOrObject);\n\n      if (stringOrObject.suffix) {\n        tl += sep;\n        tl += stringOrObject.suffix;\n      }\n\n      this.navItem.customTitle = tl;\n    }\n  };\n\n  ViewPanel.prototype.setIcon = function (cssClass) {\n    this.navItem.customIcon = cssClass;\n  };\n\n  ViewPanel.prototype.resetIcon = function () {\n    this.navItem.customIcon = undefined;\n  };\n\n  // Returns the title the view want's to be shown in the tab.\n  // (fisTabsBar may display parentTitle due to config if no customTitle supplied)\n  ViewPanel.prototype.getTitle = function () {\n    if (this.navItem && this.navItem.customTitle) {\n      return this.navItem.customTitle;\n    }\n\n    return this.title;\n  };\n\n  // Returns the icon the view want's to be shown in the tab.\n  // (fisTabsBar may display parentIcon due to config if no customIcon supplied)\n  ViewPanel.prototype.getIcon = function () {\n    if (this.navItem && this.navItem.customIcon) {\n      return this.navItem.customIcon;\n    }\n\n    return this.icon;\n  };\n\n  // we merge properties from the routeParams with the already manually set params.\n  // jQuery.extend(this.params, $routeParams);\n  ViewPanel.prototype.resetTitle = function () {\n    this.navItem.customTitle = undefined;\n  };\n\n  this.ViewPanel = ViewPanel;\n\n  /**\r\n   * @name $get\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @description\r\n   * <p>Factory method to create instance of fisViewPanelService.</p>\r\n   */\n  this.$get = ['$location', '$timeout', 'fisViewService', 'fisConfig', '$filter', '$route', 'fisPubSubService', 'fisI18nService', '$routeParams', '$rootScope', '$q', '$controller', function ($location, $timeout, fisViewService, fisConfig, $filter, $route, fisPubSubService, fisI18nService, $routeParams, $rootScope, $q, $controller) {\n    var service = {};\n    var selectedPanelPath;\n    var selectedPanelUnresolvedPath;\n    var selectedPanelParams;\n    var tabs = [];\n    var navigationUnderWay = false;\n    var changeLocationNavigationUnderway = false;\n    var strategies = {};\n    var keepSameTabsOpenOnReload;\n    var keepTabsOpenVariableLoaded;\n    var tabsAfterNavReadySet;\n    var preventBrowserNavigationSet;\n    var refreshInterval;\n\n    function init() {\n      startAvailableStrategies();\n\n      loadKeepTabsOpenVariable(); // sets keepSameTabsOpenOnReload variable\n\n      setupTabsAfterNavReady();\n\n      setupPreventBrowserNavigation();\n\n      setupLocaleChangeHandle();\n\n      refreshInterval = setInterval(publishNavComplete, 100);\n    }\n\n    function publishNavComplete() {\n      if (keepTabsOpenVariableLoaded && tabsAfterNavReadySet && preventBrowserNavigationSet) {\n        // publish event navigation done...\n        clearInterval(refreshInterval);\n        fisPubSubService.publish('shell.viewPanelReady');\n      }\n    }\n\n    /**\r\n     * Setup the initially available opening strategies\r\n     * by placing them in the private strategies object\r\n     */\n    function startAvailableStrategies() {\n      strategies = {\n        mdi: mdiFunction,\n        browser: browserFunction\n      };\n    }\n\n    function isDuplicatePath(path, items) {\n      return items.some(function (item) {\n        return path === item.path;\n      });\n    }\n\n    function loadKeepTabsOpenVariable() {\n      if (angular.isUndefined(keepSameTabsOpenOnReload)) {\n        if (fisConfig.widgets && fisConfig.widgets.fisTabsBar && angular.isDefined(fisConfig.widgets.fisTabsBar.keepSameTabsOpenOnReload)) {\n          keepSameTabsOpenOnReload = fisConfig.widgets.fisTabsBar.keepSameTabsOpenOnReload;\n        } else {\n          keepSameTabsOpenOnReload = false;\n        }\n        keepTabsOpenVariableLoaded = true;\n        return keepSameTabsOpenOnReload;\n      }\n\n      keepTabsOpenVariableLoaded = true;\n      return keepSameTabsOpenOnReload;\n    }\n\n    function setupTabsAfterNavReady() {\n      fisPubSubService.subscribe('shell.navReady', function (nav) {\n        if (keepSameTabsOpenOnReload) {\n          // Clearing all tabs not in new nav structure\n          if (tabs.length > 0) {\n            for (var i = tabs.length; i-- > 0;) {\n              var tabItem = tabs[i];\n              var item = fisViewService.findNavItem(tabItem.path);\n\n              // remove tab not in new nav structure but do not remove untitled tab (':vmcount')\n              if (!item && tabItem.id !== ':vmCount') {\n                tabs.splice(i, 1);\n              }\n            }\n          }\n        } else {\n          tabs = [];\n        }\n\n        // Get static tabs from nav structure\n        var newTabs = getNewTabs(nav.main);\n\n        // Checks to see which static pages need to be added or which static pages already in tabs\n        newTabs.forEach(function (newTab, index) {\n          // Checks to see if newTab exists in current or new nav structure\n          var item = fisViewService.findNavItem(newTab.path);\n\n          // it exists in nav structure\n          if (item) {\n            // Checking if newTab already in tabs\n            if (!isDuplicatePath(item.path, tabs)) {\n              // Adds static page to tabs\n              var newStaticPage = new provider.ViewPanel(item, $filter);\n              tabs.splice(index, 0, newStaticPage);\n            }\n          }\n        });\n\n        resetSelectedPanelPath();\n        tabsAfterNavReadySet = true;\n      }, true);\n    }\n\n    function getNewTabs(items) {\n      var tabs = [];\n      var count = 0;\n\n      items.forEach(function (item) {\n        item.location = 'main';\n        if (isValidTab(item)) {\n          tabs[count++] = new provider.ViewPanel(item, $filter);\n        }\n      });\n\n      return tabs;\n    }\n\n    function isValidTab(item) {\n      return hasNonCloseableFlag(item) || hasDropdownSecondaryMenu(item);\n    }\n\n    function hasNonCloseableFlag(item) {\n      return angular.isDefined(item.closeable) && !item.closeable;\n    }\n\n    function hasDropdownSecondaryMenu(item) {\n      return item.secondaryNav === 'dropdown';\n    }\n\n    function resetSelectedPanelPath() {\n      // This is important when reloading navigation at runtime.\n      selectedPanelPath = undefined;\n      selectedPanelUnresolvedPath = undefined;\n      selectedPanelParams = undefined;\n    }\n\n    function setupPreventBrowserNavigation() {\n      if (provider.getPreventBrowserNavigation()) {\n        $rootScope.$on('$locationChangeStart', onLocationChangeStart);\n      } else {\n        $rootScope.$on('$locationChangeStart', onLocationChangeStartNavigate);\n      }\n    }\n\n    var shellReady = false;\n\n    function onLocationChangeStartNavigate() {\n      fisPubSubService.subscribe('shell.navReady', function () {\n        shellReady = true;\n      });\n\n      if (!navigationUnderWay && shellReady) {\n        changeLocationNavigationUnderway = true;\n        service.open($location.path());\n      }\n\n      navigationUnderWay = false;\n\n      preventBrowserNavigationSet = true;\n    }\n\n    function onLocationChangeStart(event, newPath, oldPath) {\n      if (!navigationUnderWay) {\n        // eslint-disable-line\n        var newUrl = getUrlWithoutHash(newPath);\n        var oldUrl = getUrlWithoutHash(oldPath);\n\n        if (newUrl !== oldUrl) {\n          // Old and new path are not the same, which means that someone is trying to navigate away from the current page.\n          // prevent the location change (this will revert the url in the address bar to what it was\n          event.preventDefault();\n        }\n      } else {\n        navigationUnderWay = false;\n      }\n\n      preventBrowserNavigationSet = true;\n    }\n\n    function setupLocaleChangeHandle() {\n      fisPubSubService.subscribe('fisLocaleChanged', function () {\n        // Reload the navigation if the locale setting changed\n        var activePanel = service.activeViewPanel();\n        fisViewService.load().then(function () {\n          $timeout(function () {\n            if (activePanel) {\n              // get the path the to take care of unicode path\n              var item = fisViewService.getItemFromPath2Item(activePanel.path);\n              if (item) {\n                service.open(item.path, null, activePanel.params); // Open active one last.\n              } else {\n                // untitled tab\n                service.open(activePanel.path, null, activePanel.params); // Open active one last.\n              }\n            }\n          }, 0);\n        });\n      });\n    }\n\n    function checkAndSetForSecondaryNavItem(navItem, event, params) {\n      var navParent = getSecondaryNavThroughPaths(navItem);\n\n      if (navParent) {\n        // set the parent title for display\n        var paramsToUse = params ? params : navParent.params;\n\n        // check if tab is already present - if it is, do not update parentTitle, as it can mess up with tab title\n        var tabAlreadyPresent = false;\n\n        tabs.forEach(function (tab) {\n          if (tab.path === navItem.path) {\n            tabAlreadyPresent = true;\n          }\n        });\n\n        // change parent title only if tab is not already present and there are parameters\n        if (!tabAlreadyPresent && paramsToUse) {\n          navItem.parentTitle = $filter('interpolate')(navParent.label, paramsToUse);\n        } else if (!tabAlreadyPresent && !paramsToUse && navParent.label && navParent.label.indexOf('{') < 0 && navParent.label.indexOf('}') < 0) {\n          navItem.parentTitle = navParent.label;\n        }\n\n        navItem.parentIcon = navParent.icon ? navParent.icon : null;\n        var newNavItem = openSecNavItem(navItem, event, params);\n        if (newNavItem) {\n          navItem = newNavItem;\n        }\n      }\n    }\n\n    function getSecondaryNavThroughPaths(navItem) {\n      var navParent = null;\n\n      if (navItem !== undefined && navItem !== null) {\n        if (navItem.unresolvedPath) {\n          navParent = getSecondaryNavParent(navItem.unresolvedPath);\n        }\n\n        if (navParent === null) {\n          navParent = getSecondaryNavParent(navItem.path);\n        }\n      }\n      return navParent;\n    }\n\n    function publishViewPanelChange(navItem, previousViewPanel, event) {\n      if (navItem && navItem.params) {\n        navItem.decodedParams = addDecodedParams(navItem.params);\n      }\n\n      fisPubSubService.publish('fisActiveViewPanelChanged', {\n        before: previousViewPanel,\n        after: selectedPanelPath,\n        currentNavItem: navItem,\n        event: event\n      });\n    }\n\n    function addDecodedParams(params) {\n      var decodedParams = {};\n      if (params) {\n        for (var key in params) {\n          if (params.hasOwnProperty(key)) {\n            var paramValue = params[key];\n            // decode only if url contains : or / characters\n            if (paramValue && typeof paramValue === 'string' && (paramValue.indexOf('%2F') > -1 || paramValue.indexOf('%3A') > -1)) {\n              decodedParams[key] = decodeURIComponent(paramValue);\n            }\n          }\n        }\n      }\n      return decodedParams;\n    }\n\n    /**\r\n     * Call the appropriate opening strategy which decides whether to open\r\n     * a new tab or reuse the current one\r\n     * @param navItem object containing information about the view to be opened\r\n     * @param localEvent\r\n     */\n    function callRelevantStrategy(navItem, localEvent, parameters) {\n      // Check for boolean values as localEvent to override strategy\n      if (typeof localEvent === 'boolean') {\n        if (localEvent) {\n          openInNewTab(navItem, null, parameters);\n        } else {\n          openInSameTab(navItem, null, parameters);\n        }\n      } else {\n        // No overriding, continue as usual\n        var openingStrategy = provider.getViewOpeningStrategy();\n\n        if (angular.isFunction(customStrategyFn) && openStratStr === CUSTOM_OPEN_STRAT) {\n          // We've got a custom strategy and should use it\n          customStrategyFn.call(service, navItem, localEvent, parameters);\n        } else {\n          // Use one of the framework pre-implemented strategies\n          var stratFn = strategies[openingStrategy];\n\n          if (angular.isFunction(stratFn)) {\n            stratFn.call(service, navItem, localEvent, parameters);\n          } else {\n            // Framework default/Fallback if we do not have a strategy function\n            // matching this name or one at all\n            strategies[DEFAULT_OPEN_STRAT].call(service, navItem, localEvent, parameters);\n            console.warn('Unable to find opening strategy ' + openingStrategy + ', will use default ' + DEFAULT_OPEN_STRAT);\n          }\n        }\n      }\n    }\n\n    function validateNavItem(navItem, navPath) {\n      setPathNotFoundError(navItem, navPath);\n\n      setPartialNotFoundError(navItem);\n    }\n\n    function setPathNotFoundError(navItem, navPath) {\n      // if (hasNoItemButTabs(navItem)) {\n      // we need to display path-not-found error even if there are no tabs open\n      if (!navItem && navPath !== '' && navPath !== '/') {\n        throwNoItemDefinedError(fisI18nService.translate('error-path-not-found', ''));\n      }\n    }\n\n    function hasNoItemButTabs(navItem) {\n      return !navItem && tabs.length > 0;\n    }\n\n    function throwNoItemDefinedError(userMessage) {\n      // TODO: replace with a fisMessageCenterService\n      var err = new Error('No nav item defined for this path');\n      err.userMessage = userMessage;\n      throw err;\n    }\n\n    function setPartialNotFoundError(navItem) {\n      if (hasTabsButNoPartial(navItem)) {\n        throwNoPartialFoundError(navItem, fisI18nService.translate('error-partial-not-found', ''));\n      }\n    }\n\n    function hasTabsButNoPartial(navItem) {\n      return navItem && // item exists\n      !navItem.partial && // but no partial\n      !navItem.secondaryNav && // neither secondary nav\n      !navItem.action && // or action\n      tabs.length > 0; // and the service has tabs\n    }\n\n    function throwNoPartialFoundError(navItem, userMessage) {\n      // TODO: replace with a fisMessageCenterService\n      var err = new Error('Nav item \"' + navItem.label + '\" does not have a partial to load');\n      err.userMessage = userMessage;\n      throw err;\n    }\n\n    function substituteParams(path, localParams) {\n      while (path.indexOf(':') > -1) {\n        path = getReplacedPath(path, localParams);\n      }\n\n      return path;\n    }\n\n    function removeExtraParamsFromLocalParams(path, localParams) {\n      var localParamsToKeep = {};\n      while (path.indexOf(':') > -1) {\n        var paramStr = path.substring(path.indexOf(':') + 1);\n        var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\n        localParamsToKeep[param] = localParams[param];\n        path = path.substring(path.indexOf(':' + paramStr) + 1);\n      }\n      return localParamsToKeep;\n    }\n\n    function hasSpecialCharacter(paramVal) {\n      return !/^[a-zA-Z0-9-% ]*$/.test(paramVal);\n    }\n\n    function getReplacedPath(path, localParams) {\n      var paramStr = path.substring(path.indexOf(':') + 1);\n      var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\n      var remainingStr = paramStr.substring(param.length);\n\n      var paramValue;\n      var paramValueOrig = localParams[param];\n      if (paramValueOrig && (paramValueOrig.toString().indexOf('/') > -1 || paramValueOrig.toString().indexOf(':') > -1)) {\n        paramValue = encodeURIComponent(paramValueOrig);\n      } else if (hasSpecialCharacter(paramValueOrig)) {\n        paramValue = encodeURIComponent(paramValueOrig);\n        paramValue = decodeURIComponent(paramValue);\n      } else {\n        paramValue = decodeURIComponent(paramValueOrig);\n      }\n\n      if (localParams[param] !== paramValue) {\n        // This Is a reload\n        localParams[param] = paramValue; // Set Local param to decoded value so it can found\n      }\n      return path.substring(0, path.indexOf(':')) + paramValue + remainingStr;\n    }\n\n    // Updating tabs[] array with the data received from the translation object\n    // This is required to update the tab title correctly in case translation data is loading asynchronously\n    function updateTabsArray(path, navItem) {\n      if (tabs) {\n        for (var count = 0; count < tabs.length; count++) {\n          if (tabs[count].path === path) {\n            if (navItem && navItem.label) {\n              tabs[count].label = navItem.label;\n              tabs[count].title = navItem.label;\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    function getSecondaryNavParent(navPath) {\n      var tempPath = navPath;\n      var navItemParent = null;\n      var itemWithSecNav = null;\n\n      while (!itemWithSecNav) {\n        if (tempPath) {\n          navItemParent = fisViewService.findNavItem(tempPath);\n          updateTabsArray(tempPath, navItemParent);\n          itemWithSecNav = getItemParentRefIfValid(navItemParent);\n          tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\n        } else {\n          break;\n        }\n      }\n\n      // clear params from the item, since it may contain stale value\n      if (itemWithSecNav) {\n        itemWithSecNav.params = null;\n      }\n      return itemWithSecNav;\n    }\n\n    // Expose getSecondaryNavParent functionality required by breadcrumbs container to check for a tab\n    // whether its a secondary navigation tab or not\n    service._getSecondaryNavParent = getSecondaryNavParent;\n\n    function getItemParentRefIfValid(navItemParent) {\n      var value = null;\n      if (navItemParent && (navItemParent.secondaryNav === 'menubar' || navItemParent.secondaryNav === 'dropdown')) {\n        value = navItemParent;\n      }\n      return value;\n    }\n\n    function openSecNavItem(item, event, params) {\n      var navItem = getNavItemFromViewPanel(item);\n      var parameters = getParamsOrNavItemParams(params, navItem);\n      var substitutedNavItem = getSubstitutedUrlIfContainsParams(parameters, navItem);\n\n      openTestingByGroupOpened(substitutedNavItem, event, parameters);\n\n      if (isValidSecondaryMenuItem(navItem)) {\n        var itemWithSecNav = getSecondaryNavThroughPaths(navItem);\n        var children = getChildrenFromNavItem(navItem, itemWithSecNav);\n        var newNavItem = null;\n\n        updateAllChildren(itemWithSecNav);\n\n        setParamsAcessedBySecondaryMenu(itemWithSecNav, substitutedNavItem);\n\n        newNavItem = getNewNavItem(navItem, itemWithSecNav, children);\n\n        fisPubSubService.publish('fisSecondaryMenuClicked', itemWithSecNav);\n\n        return newNavItem;\n      }\n    }\n\n    function getNavItemFromViewPanel(item) {\n      var navItem = item;\n\n      if (navItem instanceof provider.ViewPanel) {\n        navItem = navItem.navItem;\n        if (navItem.params && navItem.unresolvedPath) {\n          navItem.path = navItem.unresolvedPath;\n        }\n      }\n\n      return navItem;\n    }\n\n    function getParamsOrNavItemParams(params, navItem) {\n      var parameters = params;\n\n      if (!parameters && navItem.params !== null) {\n        parameters = navItem.params;\n      }\n\n      return parameters;\n    }\n\n    function getSubstitutedUrlIfContainsParams(parameters, navItem) {\n      var substitutedNavItem = angular.copy(navItem);\n\n      if (parameters && navItem) {\n        // set the original parameterized path\n        if (!substitutedNavItem.unresolvedPath) {\n          substitutedNavItem.unresolvedPath = navItem.path;\n        }\n        substitutedNavItem.path = substituteParams(navItem.path, parameters);\n        substitutedNavItem.label = $filter('interpolate')(navItem.label, parameters);\n        substitutedNavItem.params = parameters;\n      }\n\n      return substitutedNavItem;\n    }\n\n    function openTestingByGroupOpened(substitutedNavItem, event, parameters) {\n      if ((isTrue(event) || angular.isUndefined(event) || angular.isObject(event)) && !isSecNavItemGroupOpen(substitutedNavItem) && !isPartOfSecondaryNav(getSecondaryNavParent(substitutedNavItem.path), service.activeViewPanel())) {\n        openInNewTab(substitutedNavItem, event);\n      } else {\n        openInSameTab(substitutedNavItem, event, parameters);\n      }\n    }\n\n    function isPartOfSecondaryNav(navItem, currentNavItem) {\n      var containsNavItem = false;\n      if (navItem !== null && currentNavItem !== null) {\n        if (navItem.id === currentNavItem.id) {\n          return true;\n        } else if (angular.isDefined(navItem.children) && angular.isArray(navItem.children)) {\n          navItem.children.forEach(function (childNavItem) {\n            if (containsNavItem !== true) {\n              containsNavItem = isPartOfSecondaryNav(childNavItem, currentNavItem);\n            }\n          });\n        } else {\n          return false;\n        }\n      }\n      return containsNavItem;\n    }\n\n    function isValidSecondaryMenuItem(navItem) {\n      return navItem && (navItem.secondaryNav || getSecondaryNavParent(navItem.path) || getSecondaryNavParent(navItem.unresolvedPath));\n    }\n\n    function getChildrenFromNavItem(navItem, itemWithSecNav) {\n      var children = null;\n\n      if (navItem.secondaryNav) {\n        children = navItem.children;\n      } else if (itemWithSecNav) {\n        children = itemWithSecNav.children;\n      }\n\n      return children;\n    }\n\n    function setParamsAcessedBySecondaryMenu(itemWithSecNav, substitutedNavItem) {\n      if (itemWithSecNav) {\n        itemWithSecNav.params = substitutedNavItem.params;\n      }\n    }\n\n    function getNewNavItem(navItem, itemWithSecNav, children) {\n      var newNavItem = angular.extend({}, navItem);\n      newNavItem.children = children;\n      newNavItem.secondaryNav = itemWithSecNav.secondaryNav;\n\n      return newNavItem;\n    }\n\n    function updateAllChildren(navItem) {\n      if (navItem && navItem.children) {\n        navItem.children.forEach(function (child) {\n          updateChildData(child);\n\n          updateAllChildren(child);\n        });\n      }\n    }\n\n    function updateChildData(child) {\n      if (child.partial) {\n        child.isStatic = true;\n      }\n\n      child.text = child.label;\n      child.items = child.children;\n\n      if (child.partial) {\n        child.url = child.path;\n      }\n    }\n\n    function isSecNavItemGroupOpen(navItem) {\n      var itemWithSecNav = getSecondaryNavThroughPaths(navItem);\n      var secNavItemGroupPresent = false;\n\n      if (itemWithSecNav !== null) {\n        // attach a property secondaryNavParent to the navItem in case the parent secondary navigation item has secondaryNav as dropdown\n        if (hasDropdownSecondaryMenu(itemWithSecNav)) {\n          navItem.secondaryNavParent = itemWithSecNav;\n        }\n\n        for (var i = 0; i < tabs.length; i++) {\n          if (isTabPathValid(tabs[i], navItem, itemWithSecNav)) {\n            secNavItemGroupPresent = true;\n            selectedPanelPath = tabs[i].path;\n            selectedPanelUnresolvedPath = tabs[i].unresolvedPath;\n            selectedPanelParams = tabs[i].params;\n\n            return secNavItemGroupPresent;\n          }\n        }\n      }\n    }\n\n    function isTabPathValid(tab, navItem, itemWithSecNav) {\n      if (navItem.unresolvedPath) {\n        return tabPathHasNavItemParams(tab, navItem, itemWithSecNav);\n      }\n      return tab.path.indexOf(itemWithSecNav.path) > -1;\n    }\n\n    function tabPathHasNavItemParams(tab, navItem /* , itemWithSecNav*/) {\n      var continueLooping = true;\n      var unresolvedPath = navItem.unresolvedPath;\n      var navPathUptoResolvedParam;\n      var paramValue;\n\n      while (continueLooping) {\n        var paramStr = unresolvedPath.substring(unresolvedPath.indexOf(':') + 1);\n        var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\n        var remainingStr = paramStr.substring(param.length);\n        paramValue = navItem.params[param];\n        navPathUptoResolvedParam = unresolvedPath.substring(0, unresolvedPath.indexOf(':')) + paramValue;\n        if (remainingStr.indexOf(':') > -1) {\n          unresolvedPath = unresolvedPath.substring(0, unresolvedPath.indexOf(':')) + paramValue + remainingStr;\n        } else {\n          continueLooping = false;\n        }\n      }\n\n      // check for the token length of navPathUptoResolvedParam and tab.path\n      // if the length of tokens of navPathUptoResolvedParam is greater than tab.path length and navPathUptoResolvedParam begins with tab.path,\n      // it means the current nav item to open is a child of the existing tab),\n      // If the length of tokens is same, it means the current nav item to open is not a child of the existing tab\n      // This check is needed for cases where the name of the new tab to open contains the name of the already open tab, for example Bank_of_Pune and Bank_of_Pune1\n      var navPathUptoResolvedParamTokens = getTokensFromNavPath(navPathUptoResolvedParam);\n      var tabPathTokens = getTokensFromNavPath(tab.path);\n      var navPathContainsTabPath = false;\n      if (navPathUptoResolvedParamTokens.length > tabPathTokens.length && navPathUptoResolvedParam.indexOf(tab.path) > -1) {\n        navPathContainsTabPath = true;\n      }\n\n      return tab.path.indexOf(navPathUptoResolvedParam) > -1 && paramValue === tab.label || navPathContainsTabPath;\n    }\n\n    function openInNewTab(navItem, event, parameters) {\n      if (isFalse(event)) {\n        openInSameTab(navItem, event, parameters);\n      }\n\n      if (navItem) {\n        if (!isAlreadyInTabs(navItem)) {\n          addNewTab(navItem);\n        }\n\n        setPathAndNavigateTo(navItem);\n      }\n    }\n    // Expose opening in a new tab functionality so custom opening strategies may use it\n    /**\r\n     * @name _openInNewTab\r\n     * @methodOf fisViewPanelService\r\n     * @param {Object} Navigation Item to be opened\r\n     * @param\r\n     * @description\r\n     * <p>Configures the provider with a View Panel Opening strategy that is then used by the <em>fisViewPanelService</em> to open\r\n     * View Panels.</p>\r\n     */\n    service._openInNewTab = openInNewTab;\n\n    function isAlreadyInTabs(navItem) {\n      return tabs.some(function (tab) {\n        return tab.path === navItem.path;\n      });\n    }\n\n    function addNewTab(navItem) {\n      tabs.push(new provider.ViewPanel(navItem, $filter));\n      publishViewPanelOpened(navItem, getLastTab());\n    }\n\n    function publishViewPanelOpened(navItem, tab) {\n      fisPubSubService.publish('fisViewPanelOpened', {\n        path: navItem.path,\n        viewPanel: tab\n      });\n    }\n\n    function getFirstTab() {\n      return tabs[0];\n    }\n\n    function getLastTab() {\n      return tabs[tabs.length - 1];\n    }\n\n    function openInSameTab(navItem, event, parameters) {\n      if (!isSecNavItemGroupOpen(navItem) && hasItemButNoTabsOrEvent(navItem, event)) {\n        openInNewTab(navItem, event, parameters);\n      } else if (hasItemAndTabs(navItem)) {\n        if (!shouldOpenInSameTab(navItem)) {\n          setPathAndNavigateTo(navItem, parameters);\n        }\n      }\n    }\n    // Expose opening in same tab functionality so custom opening strategies may use it\n    service._openInSameTab = openInSameTab;\n\n    function hasItemButNoTabsOrEvent(navItem, event) {\n      return hasItemButNoTabs(navItem) || isTrue(event);\n    }\n\n    function hasItemButNoTabs(navItem) {\n      return navItem && tabs.length === 0;\n    }\n\n    function hasItemAndTabs(navItem) {\n      return navItem && tabs.length > 0;\n    }\n\n    function shouldOpenInSameTab(navItem, parameters) {\n      var activeViewPanel = service.activeViewPanel();\n      var isOpeningAction = false;\n\n      if (isActiveAndNonCloseable(activeViewPanel, navItem)) {\n        openInNewTab(navItem, parameters);\n        isOpeningAction = true;\n      } else if (shouldReplaceViewPanel(activeViewPanel, navItem, parameters)) {\n        isOpeningAction = true;\n      }\n\n      return isOpeningAction;\n    }\n\n    function isActiveAndNonCloseable(activeViewPanel, navItem) {\n      return activeViewPanel && service.isNonCloseable(activeViewPanel) && !getSecondaryNavParent(navItem.path);\n    }\n\n    function findCurrentlyOpenedTab(activeViewPanel) {\n      if (!activeViewPanel) {\n        return null;\n      }\n\n      var activeViewPanelIndex = null;\n\n      tabs.forEach(function (tab, index) {\n        if (activeViewPanel.path === tab.path) {\n          activeViewPanelIndex = index;\n        }\n      });\n\n      return activeViewPanelIndex;\n    }\n\n    function shouldReplaceViewPanel(activeViewPanel, navItem, parameters) {\n      var navItemInTabs = isNavItemInTabs(navItem);\n      var activeViewPanelIndex = findCurrentlyOpenedTab(activeViewPanel);\n\n      if (activeViewPanel && !navItemInTabs) {\n        replaceViewPanel(activeViewPanel, navItem, parameters, activeViewPanelIndex);\n\n        return true;\n      }\n      return false;\n    }\n\n    function isNavItemInTabs(navItem) {\n      return tabs.some(function (tab) {\n        return tab.path === navItem.path;\n      });\n    }\n\n    function replaceViewPanel(activeViewPanel, navItem, parameters, index) {\n      var promise = publishViewPanelReplaceIntent(navItem, activeViewPanel);\n      promise.then(function () {\n        onViewPanelReplaceIntentSuccess(navItem, parameters, index);\n      }, function () {\n        // publish an event if view panel replacement has been vetoed.\n        fisPubSubService.publish('fisViewPanelReplaceVetoed', {\n          navItem: navItem,\n          viewPanel: activeViewPanel\n        });\n      });\n    }\n\n    function publishViewPanelReplaceIntent(navItem, activeViewPanel) {\n      return fisPubSubService.publish('fisViewPanelReplaceIntent', {\n        path: navItem.path,\n        viewPanel: activeViewPanel\n      });\n    }\n\n    function onViewPanelReplaceIntentSuccess(navItem, parameters, index) {\n      var tab = tabs[index] = new provider.ViewPanel(navItem, $filter);\n\n      publishViewPanelOpened(navItem.path, tab);\n      publishViewReplaced(navItem);\n\n      setPathAndNavigateTo(navItem);\n    }\n\n    function setPathAndNavigateTo(navItem) {\n      selectedPanelPath = navItem.path;\n      selectedPanelUnresolvedPath = navItem.unresolvedPath;\n      selectedPanelParams = navItem.params;\n      navigateTo(navItem);\n    }\n\n    function publishViewReplaced(navItem) {\n      fisPubSubService.publish('fisViewPanelReplaced', { path: navItem.path });\n    }\n\n    function getUrlWithoutHash(url) {\n      // Use the provided URL as the default value,\n      // this will ensure a correct return value even\n      // if it doesn't contain a trailing hash (anchor)\n      var iPound = url.lastIndexOf('#');\n      var iSlash = url.lastIndexOf('/');\n      var noHash = url;\n\n      // Only cut off the hash if the hash sign was\n      // found after the last slash in the path.\n      if (iPound > iSlash) {\n        // Take everything before the hash sign\n        noHash = url.substring(0, iPound);\n      }\n\n      return noHash;\n    }\n\n    function navigateTo(navItem) {\n      // Give time to angular to complete it's $apply cycle and then update path\n      // Reference - https://groups.google.com/d/msg/angular/FJwxJ-XbJaE/584zbwBjbU8J\n      $timeout(function () {\n        // Route change only occurs when $location.path changes\n        // In some cases, we want the route to be refreshed even if the path doesn't change:\n        // 1. The user clicks on a bookmark containing #/welcome for example. In this case,\n        //    open is called with #/welcome but $location.path() is already #/welcome\n        // 2. The navigation structure is changed with fisViewService.load and the current path is\n        //    #/welcome and the new path to open is also #/welcome. In this case, the paths may be the\n        //    same but they are referring to different views so we need to reload.\n        // Note that fisViews will not drop the current view panel and reload the route's template:\n        // it will notice the view panel is for the same route and will not do anything\n        // since it only means the user is navigating to the same page again, in which case we don't\n        // want the view to be reloaded.\n        if ($location.path() === navItem.path) {\n          $route.reload();\n        } else {\n          $location.path(navItem.path);\n        }\n\n        if (!changeLocationNavigationUnderway) {\n          // eslint-disable-line\n          /*\r\n              This variable is explicitly set to true because it is checked while updating the view\r\n              The '$locationChangeStart' event handler checks for this flag to be set to true, else it will\r\n              prevent the location change.\r\n              Since this function is called by the open method of framework, we want the $location to change\r\n          */\n          navigationUnderWay = true;\n        } else {\n          changeLocationNavigationUnderway = false;\n        }\n      }, 0);\n    }\n\n    function mdiFunction(navItem, event, parameters) {\n      if (isFalse(event)) {\n        openInSameTab(navItem, event, parameters);\n      } else {\n        openInNewTab(navItem, event, parameters);\n      }\n    }\n\n    function browserFunction(navItem, event, parameters) {\n      if (!event || event && !event.ctrlKey && !event.metaKey) {\n        // to open child page in the current tab.\n        openInSameTab(navItem, null, parameters);\n      } else {\n        // to open child page in new tab.\n        openInNewTab(navItem, null, parameters);\n      }\n    }\n\n    function isTrue(e) {\n      return e === true || e === 'true';\n    }\n\n    function isFalse(e) {\n      return e === false || e === 'false';\n    }\n\n    function resetLocationHash() {\n      // This is done to avoid carrying over the anchor\n      // location (hash, e.g. \"#toc_3\") to the new tab.\n\n      // We might have to revisit this if we want to\n      // support opening tabs and jumping to a\n      // specific location at the same time.\n      $location.hash('');\n    }\n\n    function getDefaultIfNoPath(navPath) {\n      if (navPath === undefined) {\n        return '';\n      }\n      return navPath;\n    }\n\n    function normalizeOpenArguments(args, event, params) {\n      var localEvent = null;\n      var localParams = {};\n\n      if (args.length === 2) {\n        localEvent = getValidatedEvent(args[1]);\n\n        if (isStrategyOverride(event)) {\n          localEvent = event;\n        } else {\n          // it's a params object, set it to localParams\n          localParams = args[1];\n        }\n      } else if (args.length === 3) {\n        localEvent = event;\n        localParams = params;\n      }\n\n      return {\n        localEvent: localEvent,\n        localParams: localParams\n      };\n    }\n\n    function getValidatedEvent(value) {\n      if (isEvent(value)) {\n        return value;\n      }\n      return null;\n    }\n\n    function isEvent(value) {\n      return value && value.target;\n    }\n\n    function isStrategyOverride(value) {\n      return value === 'true' || value === 'false' || value === true || value === false;\n    }\n\n    function checkIfTabIsAlreadyPresent(navPath, event, params) {\n      var navItem = null;\n      var tabFound = false;\n\n      tabs.forEach(function (tab) {\n        if (tab.path === navPath) {\n          tabFound = true;\n          navItem = tab;\n          checkAndSetForSecondaryNavItem(tab, event, params);\n        }\n      });\n\n      return {\n        navItem: navItem,\n        tabFound: tabFound\n      };\n    }\n\n    function tryOpenViewBasedOnDefaultParams(navItem, navPath, tabFound, event, params, localParams) {\n      if (isNavPathNotDefined(navPath, tabFound)) {\n        navItem = openDefaultView(event, params);\n      } else if (isRelativePath(navPath, tabFound)) {\n        navItem = openRelativeView(navPath, event, params, localParams);\n        if (navItem) {\n          navPath = navItem.path;\n        }\n      } else if (isSecondaryNavigation(navPath, tabFound)) {\n        navItem = openSecondaryView(navPath, event, params);\n      }\n\n      // When navItem has parameterized url, a copy of the navItem is created and processed. Hence, the\n      // isStatic property is not set even if secondary navigation is present.\n      // Hence, setting this property after all the processing is done\n      if (navItem && getSecondaryNavParent(navItem.path) && navItem.partial) {\n        navItem.isStatic = true;\n      }\n\n      return navItem;\n    }\n\n    function openDefaultView(event, params) {\n      // TODO: default if no root tab.\n      // Provide a way to configure default and open tabs if necessary?\n\n      var navItem = getFirstTab();\n\n      if (isNavItemDefined(navItem)) {\n        checkAndSetForSecondaryNavItem(navItem, event, params);\n        return navItem;\n      }\n      return null;\n    }\n\n    function isNavPathNotDefined(navPath, tabFound) {\n      return !navPath && tabFound === false;\n    }\n\n    function isNavItemDefined(navItem) {\n      return navItem && navItem.path;\n    }\n\n    function isRelativePath(navPath, tabFound) {\n      return navPath && navPath.indexOf('/') !== 0 && tabFound === false;\n    }\n\n    function openRelativeView(navPath, event, params, localParams) {\n      var navItemTemp = fisViewService.findNavItem(navPath, selectedPanelPath);\n      var key;\n\n      // if navItemTemp not found, look it up using selectedPanelUnresolvedPath\n      if (!navItemTemp) {\n        navItemTemp = fisViewService.findNavItem(navPath, selectedPanelUnresolvedPath);\n\n        // add the selectedPanelParams to localParams for substitution.\n        for (key in selectedPanelParams) {\n          if (selectedPanelParams.hasOwnProperty(key)) {\n            localParams[key] = selectedPanelParams[key];\n          }\n        }\n      }\n\n      // Add the selectedPanelParams to localParams for substitution in case navItemTemp is found.\n      // In this case add the param only if localParams does not have the key\n      if (navItemTemp) {\n        for (key in selectedPanelParams) {\n          if (selectedPanelParams.hasOwnProperty(key) && !localParams.hasOwnProperty(key)) {\n            localParams[key] = selectedPanelParams[key];\n          }\n        }\n      }\n\n      if (navItemTemp && navItemTemp.params && Object.keys(localParams).length === 0) {\n        localParams = navItemTemp.params;\n      }\n\n      // if no local params are defined, try to use params from the active view panel in this case; since the view to be opened is a relative view.\n      if (angular.isUndefined(localParams) || localParams === null || Object.keys(localParams).length === 0) {\n        if (service.activeViewPanel()) {\n          localParams = service.activeViewPanel().params;\n        }\n      }\n\n      // when a parent page is called from child page without giving any parameters, child page params are also added in localParams\n      // we need to remove such extra params from localParams\n      var navItem = null;\n      if (navItemTemp) {\n        localParams = removeExtraParamsFromLocalParams(navItemTemp.path, localParams);\n\n        var path = substituteParams(navItemTemp.path, localParams);\n\n        navItem = getNavItemForRelativePath(navItemTemp, path, localParams);\n        navItem.unresolvedPath = navItemTemp.path;\n\n        checkAndSetForSecondaryNavItem(navItem, event, params);\n      }\n\n      return navItem;\n    }\n\n    function getNavItemForRelativePath(navItem, path, localParams) {\n      var newItem = {};\n\n      angular.copy(navItem, newItem);\n\n      newItem.path = path;\n      newItem.label = $filter('interpolate')(newItem.label, localParams);\n      newItem.params = localParams;\n\n      return newItem;\n    }\n\n    function isSecondaryNavigation(navPath, tabFound) {\n      return getSecondaryNavParent(navPath) && tabFound === false;\n    }\n\n    function openSecondaryView(navPath, event, params) {\n      var navItem = fisViewService.findNavItem(navPath);\n\n      // case of handling parameterized navigation item with secondary menu\n      if (!navItem) {\n        var relativeData = extractRelativeUrlData(navItem, navPath);\n        params = relativeData.params;\n        navItem = relativeData.navItem;\n      }\n      checkAndSetForSecondaryNavItem(navItem, event, params);\n      if (navItem) {\n        navItem.params = params;\n      }\n      return navItem;\n    }\n\n    function findNavItemIfNotDefined(navItem, navPath) {\n      // TODO: should it instead just call navigation.navigate(navPath) and have tabs handled in view service?\n\n      if (!isNavItemDefined(navItem)) {\n        navItem = fisViewService.findNavItem(navPath, selectedPanelPath);\n      }\n\n      return navItem;\n    }\n\n    function extractRelativeUrlData(navItem, navPath) {\n      var tempPath = navPath;\n      var tokens = getTokensFromNavPath(navPath);\n      var parameters = {};\n      var tempNavPath = navPath;\n      var parsedData = null;\n      var hasMoreTokens = true;\n\n      while (hasMoreTokens) {\n        if (!hasPathToParse(tempNavPath)) {\n          break;\n        }\n\n        tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\n        if (tempPath.length === 0) {\n          break;\n        }\n        var tempNavItem = fisViewService.findNavItem(tempPath);\n\n        if (tempNavItem) {\n          var parsedDataCopy = angular.copy(parsedData);\n\n          parsedData = findMatchedChildThroughNavPath({\n            navItem: navItem,\n            tokens: tokens,\n            tempPath: tempPath,\n            tempNavPath: tempNavPath,\n            tempNavItem: tempNavItem,\n            hasMoreTokens: true,\n            parameters: parameters\n          });\n\n          if (parsedData && parsedDataCopy && parsedData.navItem && parsedDataCopy.navItem && parsedData.navItem.id === parsedDataCopy.navItem.id) {\n            hasMoreTokens = false;\n            return {\n              params: null,\n              navItem: null\n            };\n          }\n\n          navItem = parsedData.navItem;\n          tokens = parsedData.tokens;\n          tempPath = parsedData.tempPath;\n          tempNavPath = parsedData.tempNavPath;\n          tempNavItem = parsedData.tempNavItem;\n          parameters = parsedData.parameters;\n\n          if (!parsedData.hasMoreTokens) {\n            break;\n          }\n        } else if (noMoreItems(tempNavItem, tempPath)) {\n          parsedData = findMatchedNoChild(navItem, parameters, tempPath, tempNavPath);\n\n          navItem = parsedData.navItem;\n          parameters = parsedData.parameters;\n\n          break;\n        }\n      }\n\n      var resolvedPath;\n      // compute resolvedPath only for cases when navPath contains tempPath -- this is needed in case there is a parameterized url,\n      // in which case, this navPath will have unresolved path (with ':' character), and tempPath will have resolved path with substituted parameters.\n      if (navItem) {\n        var navItemIdTokens = getTokensFromNavPath(navItem.id) || [];\n        if (navPath.indexOf(tempPath) > -1 && navItemIdTokens.length > 2) {\n          resolvedPath = navPath.substring(tempPath.length + 1);\n        }\n      }\n\n      return {\n        params: parameters,\n        navItem: navItem,\n        resolvedPath: resolvedPath\n      };\n    }\n\n    // exposing this method since it is used internally by breadcrumb widget to extract relative data\n    service._extractRelativeUrlData = extractRelativeUrlData;\n\n    function noMoreItems(tempNavItem, tempPath) {\n      return !tempNavItem && tempPath.lastIndexOf('/') === 0;\n    }\n\n    function hasSomeEquivalentParam(child, childPath) {\n      var childPathWithoutParam = child.id;\n      var withoutParamWord = childPathWithoutParam.substring(0, childPathWithoutParam.indexOf('/'));\n      var originalWord = childPath.substring(0, childPath.indexOf('/'));\n      return withoutParamWord === originalWord;\n    }\n\n    function getTokensFromNavPath(navPath) {\n      var tokens = [];\n\n      if (navPath && navPath.indexOf('/') > -1) {\n        tokens = navPath.split('/');\n      }\n\n      return tokens;\n    }\n\n    function hasPathToParse(path) {\n      return path && path.substring(0, path.lastIndexOf('/'));\n    }\n\n    function getChildTokens(childPath) {\n      return childPath.split('/');\n    }\n\n    function getChildDataFromPath(child, childPath, tokensLength, tempPath, tempNavPath, hasMoreTokens) {\n      var childData = {};\n      var childTokens = getChildTokens(childPath);\n      var itemTokens = child.path.split('/');\n\n      childData.paramName = child.id.substring(child.id.indexOf(':') + 1);\n      childData.paramVal = getParameterValue(child, childPath, childTokens);\n      childData.navItem = angular.copy(child);\n\n      if (tokensLength === itemTokens.length) {\n        childData.hasMoreTokens = false;\n        childData.tempPath = tempPath;\n        childData.tempNavPath = tempNavPath;\n      } else {\n        childData.hasMoreTokens = hasMoreTokens;\n        // remove tokens already resolved\n        spliceChildTokens(child, childTokens);\n        // Add to tempPath the resolved tokens and the unresolved tokens and start again :-)\n        childData.tempPath = tempPath + '/' + child.id + '/' + childTokens.join('/');\n        childData.tempNavPath = childData.tempPath; // start again - but with one token resolved\n      }\n\n      return childData;\n    }\n\n    function spliceChildTokens(child, childTokens) {\n      if (child.id.indexOf(':') === 0) {\n        childTokens.splice(0, 1);\n      } else {\n        childTokens.splice(0, 2);\n      }\n    }\n\n    function findMatchedChildThroughNavPath(defaultData) {\n      var childPath = defaultData.tempNavPath.substring(defaultData.tempPath.length + 1);\n      var cont = true;\n\n      while (cont) {\n        if (!defaultData.tempNavItem.children) {\n          break;\n        }\n\n        var parsedDataCopy = angular.copy(parsedData); // eslint-disable-line\n\n        var parsedData = parseChildDataFrom({\n          cont: cont,\n          navItem: defaultData.navItem,\n          childPath: childPath,\n          tokens: defaultData.tokens,\n          tempPath: defaultData.tempPath,\n          tempNavPath: defaultData.tempNavPath,\n          tempNavItem: defaultData.tempNavItem,\n          hasMoreTokens: defaultData.hasMoreTokens,\n          parameters: defaultData.parameters\n        });\n\n        if (parsedData && parsedDataCopy && parsedData.navItem && parsedDataCopy.navItem && parsedData.navItem.id === parsedDataCopy.navItem.id) {\n          cont = false;\n          return defaultData;\n        }\n\n        cont = parsedData.cont;\n        childPath = parsedData.childPath;\n        defaultData.navItem = parsedData.navItem;\n        defaultData.tokens = parsedData.tokens;\n        defaultData.tempPath = parsedData.tempPath;\n        defaultData.tempNavPath = parsedData.tempNavPath;\n        defaultData.tempNavItem = parsedData.tempNavItem;\n        defaultData.hasMoreTokens = parsedData.hasMoreTokens;\n        defaultData.parameters = parsedData.parameters;\n      }\n\n      return defaultData;\n    }\n\n    function findMatchedNoChild(_navItem, parameters, tempPath, tempNavPath) {\n      var navItem = fisViewService.getItemFromPath2Item(tempPath);\n      var navigationPanelParamValue = createUrlFillingParams(tempPath, tempNavPath);\n      var paramNameString;\n      if (navItem !== null) {\n        paramNameString = findParamName(navItem);\n      }\n\n      parameters[paramNameString] = navigationPanelParamValue;\n\n      return {\n        navItem: navItem,\n        parameters: parameters\n      };\n    }\n\n    function createUrlFillingParams(tempPath, tempNavPath) {\n      return tempNavPath.substring(tempPath.length + 1);\n    }\n\n    function findParamName(navItem) {\n      return navItem.id.substring(navItem.id.indexOf(':') + 1);\n    }\n\n    function parseChildDataFrom(defaultData) {\n      var i = 0;\n      var child = null;\n      var childData = null;\n\n      for (i = 0; i < defaultData.tempNavItem.children.length; i++) {\n        child = defaultData.tempNavItem.children[i];\n\n        if (child && child.id.indexOf(':') !== -1) {\n          var proceed = child.id.indexOf(':') === 0 ? true : hasSomeEquivalentParam(child, defaultData.childPath);\n          if (proceed) {\n            childData = getChildDataFromPath(child, defaultData.childPath, defaultData.tokens.length, defaultData.tempPath, defaultData.tempNavPath, defaultData.hasMoreTokens);\n\n            defaultData.cont = false;\n            defaultData.navItem = childData.navItem;\n            defaultData.hasMoreTokens = childData.hasMoreTokens;\n            defaultData.tempPath = childData.tempPath;\n            defaultData.tempNavPath = childData.tempNavPath;\n            defaultData.parameters[childData.paramName] = childData.paramVal;\n\n            break;\n          }\n        } else {\n          for (var j = 0; j < defaultData.tokens.length; j++) {\n            if (child.id === defaultData.tokens[j]) {\n              var itemTokens = child.path.split('/');\n              // commented below line otherwise it continously loops for the case mentioned in SDHTML-5237\n              // defaultData.tempPath = defaultData.tempPath + '/' + child.path + '/';\n              defaultData.tempNavPath = defaultData.tempPath;\n              if (defaultData.tokens.length === itemTokens.length) {\n                defaultData.hasMoreTokens = false;\n                defaultData.cont = false;\n                defaultData.navItem = angular.copy(child);\n              }\n              break;\n            }\n          }\n          defaultData.cont = false;\n        }\n      }\n      return defaultData;\n    }\n\n    function getParameterValue(child, childPath, childTokens) {\n      var paramVal;\n\n      if (child.id.indexOf(':') === 0) {\n        paramVal = childTokens[0];\n      } else {\n        paramVal = childTokens[1];\n      }\n\n      return paramVal;\n    }\n\n    function getParametersIfUndefined(parameters, params) {\n      if (parameters === null && angular.isDefined(params)) {\n        parameters = params;\n      }\n\n      return parameters;\n    }\n\n    function mergeParametersIfRequired(parameters, params) {\n      if (parameters === null && angular.isDefined(params)) {\n        parameters = params;\n      } else if (angular.isDefined(params)) {\n        $.extend(true, parameters, params);\n      }\n\n      return parameters;\n    }\n\n    function getNavItemCopyIfParams(navItem, parameters, resolvedPath) {\n      if (parameters && navItem) {\n        if (navItem instanceof provider.ViewPanel) {\n          navItem = navItem.navItem;\n        }\n        // if it is a parameterized URL, substitue the params in the navItem's path\n        navItem = angular.copy(navItem);\n        if (!navItem.unresolvedPath) {\n          navItem.unresolvedPath = navItem.path;\n        }\n        navItem.path = substituteParams(navItem.path, parameters);\n        if (navItem.path && navItem.path.indexOf('/undefined/') > -1 && resolvedPath) {\n          navItem = fisViewService.findNavItem(resolvedPath);\n          navItem.path = substituteParams(navItem.path, navItem.params);\n        }\n        navItem.label = $filter('interpolate')(navItem.label, parameters);\n        if (!resolvedPath) {\n          navItem.params = parameters;\n        }\n      }\n\n      return navItem;\n    }\n\n    function getPanelPath(navPath) {\n      var panelPath = null;\n\n      if (angular.isDefined(navPath)) {\n        panelPath = navPath;\n      } else {\n        panelPath = service.activeViewPanel().path;\n      }\n\n      return panelPath;\n    }\n\n    function forceSelectionOfLastPanel(force) {\n      if (hasNoSelectedPanelPathButTabs()) {\n        if (force === undefined || force) {\n          // TODO: is this needed? is it only used when closing a tab? could it be moved there?\n          selectedPanelPath = getLastTab().path;\n        } else {\n          // no opened view panel (tab) available to select and we don't force selection.\n          return null;\n        }\n      }\n    }\n\n    function hasNoSelectedPanelPathButTabs() {\n      return !selectedPanelPath && tabs && tabs.length > 0;\n    }\n\n    function createParamsIfNotDefined(activeViewPanel) {\n      if (activeViewPanel !== null) {\n        if (angular.isUndefined(activeViewPanel.params) || activeViewPanel.params === null) {\n          activeViewPanel.params = {}; // we create a new object\n        } else if (angular.isUndefined(activeViewPanel.decodedParams) || activeViewPanel.decodedParams === null) {\n          activeViewPanel.decodedParams = addDecodedParams(activeViewPanel.params);\n        }\n      }\n    }\n\n    function isSecondaryNavItemReplacingPrimary(item, isNonCloseable) {\n      var primaryItem = getSecondaryNavParent(item.path);\n\n      if (primaryItem === item) {\n        return false;\n      }\n      if (primaryItem) {\n        var stillOpenPrimaryItem = service.viewPanels().filter(function (panel) {\n          return panel.path === primaryItem.path;\n        });\n        if (stillOpenPrimaryItem.length === 0) {\n          // The parent is not open in another tab, the closability depends on the parents closability\n          return service.isNonCloseable(primaryItem);\n        }\n        // The parent is open in another tab, thus we now may close this children tab\n        return false;\n      }\n\n      return isNonCloseable;\n    }\n\n    function getDefaultViewPanelIfNotDefined(viewPanel, navPath) {\n      if (!navPath) {\n        viewPanel = service.activeViewPanel();\n      }\n\n      return viewPanel;\n    }\n\n    function getDefaultNavPathIfNotDefined(navPath) {\n      if (!navPath) {\n        navPath = service.activeViewPanel().path;\n      }\n\n      return navPath;\n    }\n\n    function getDataFromNavPath(viewPanel, navPath) {\n      var tabIndexToRemove = null;\n\n      if (navPath) {\n        for (var i = 0; i < tabs.length; i++) {\n          if (tabs[i].path === navPath) {\n            tabIndexToRemove = i;\n            break;\n          }\n        }\n\n        if (tabIndexToRemove !== undefined) {\n          viewPanel = tabs[tabIndexToRemove];\n        }\n      }\n\n      return {\n        viewPanel: viewPanel,\n        tabIndexToRemove: tabIndexToRemove\n      };\n    }\n\n    function closeViewPanel(viewPanel, navPath, tabIndexToRemove) {\n      var tabToFocus = null;\n      var deferred = $q.defer();\n\n      if (viewPanel) {\n        viewPanel.$isClosing = true;\n\n        var promise = publishViewPanelCloseIntent(viewPanel, navPath);\n\n        promise.then(function () {\n          // handle the case where another close call has been made before the current one ends\n          viewPanel = getDefaultViewPanelIfNotDefined(viewPanel, navPath);\n          navPath = getDefaultNavPathIfNotDefined(navPath);\n\n          tabToFocus = getTabFocusFromNavPath(navPath);\n          tabIndexToRemove = getTabIndexToRemove(tabIndexToRemove, navPath);\n\n          removeTabByIndex(viewPanel, navPath, tabIndexToRemove, tabToFocus);\n\n          deferred.resolve();\n        }, function () {\n          deferred.reject('Pos 3');\n        }).finally(function () {\n          // Had to use $timeout to wrap the publish call. Promises seems to behave in synchronous manner when\n          // resolved with non-promise values (returned by $q.when in fisPubSubService.publish code). Therefore\n          // when fisViewPanelCloseIntent is published, promise.then and promise.always is called immediately called\n          // and the fis-views directive doesn't get a chance to react to viewPanel.$isClosing change and add\n          // a loading indicator.\n          $timeout(function () {\n            viewPanel.$isClosing = false;\n          }, 0);\n        });\n      } else {\n        // The navPath was not open or invalid, so resolve it right away - there's nothing to close.\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }\n\n    function getTabFocusFromNavPath(navPath) {\n      var tabToFocus = null;\n\n      if (navPath !== selectedPanelPath) {\n        tabToFocus = selectedPanelPath;\n      }\n\n      return tabToFocus;\n    }\n\n    function getTabIndexToRemove(tabIndexToRemove, navPath) {\n      for (var i = 0; i < tabs.length; i++) {\n        if (tabs[i].path === navPath) {\n          tabIndexToRemove = i;\n          break;\n        }\n      }\n\n      return tabIndexToRemove;\n    }\n\n    function openDefaultEmptyView() {\n      $location.path('');\n      navigationUnderWay = true;\n    }\n\n    function openLastTab() {\n      // TODO: open last activated from a stack\n      var params = getLastTab() ? getLastTab().params : null;\n      service.open(getLastTab().path, null, params);\n    }\n\n    function removeViewPanel(tabIndexToRemove) {\n      tabs.splice(tabIndexToRemove, 1);\n    }\n\n    function openViewAfterClose(tabToFocus) {\n      if (tabs.length === 0) {\n        openDefaultEmptyView();\n      } else if (tabs.length > 0 && tabToFocus === null) {\n        openLastTab();\n      }\n    }\n\n    function copyClosingPanel(viewPanel) {\n      // create a copy of the closed view panel but without any functions\n      // or properties starting with '$' as we do not want the subscriber to modify the\n      // closed view panel\n      var viewPanelCopy = {};\n      Object.keys(viewPanel).forEach(function (key) {\n        if (!key.match(/^\\$/)) {\n          var value = viewPanel[key];\n          if (!angular.isFunction(value)) {\n            viewPanelCopy[key] = value;\n          }\n        }\n      });\n      return viewPanelCopy;\n    }\n\n    function removeTabByIndex(viewPanel, navPath, tabIndexToRemove, tabToFocus) {\n      if (tabIndexToRemove !== null) {\n        removeViewPanel(tabIndexToRemove);\n\n        openViewAfterClose(tabToFocus);\n\n        viewPanel = copyClosingPanel(viewPanel);\n\n        publishViewPanelClosed(viewPanel, navPath);\n      }\n    }\n\n    function publishViewPanelCloseIntent(viewPanel, navPath) {\n      return fisPubSubService.publish('fisViewPanelCloseIntent', {\n        path: navPath,\n        viewPanel: viewPanel\n      });\n    }\n\n    function publishViewPanelClosed(viewPanel, navPath) {\n      return fisPubSubService.publish('fisViewPanelClosed', {\n        path: navPath,\n        viewPanel: viewPanel\n      });\n    }\n\n    /**\r\n     * @name open\r\n     * @methodOf fisViewPanelService\r\n     * @param {string} navPath Navigation Path to open. Undefined or empty string will load the default view.\r\n     * @param {Object} [event] Optional triggering event (For example, click), can be 'true' or 'false' :\r\n     *         True means we want to force opening in a new tab (and bypass the strategy) and false means we force opening in the same tab.\r\n     * @param {Object} [params] Optional Additional parameters\r\n     * @description Opens a ViewPanel using the configured strategy (or framework defaults 'mdi' strategy if none is configured.)\r\n     */\n    service.open = function (_navPath, event, params) {\n      // Hash must be removed when moving between pages (no event is fired when pages are loaded from a bookmark,\n      // an event is defined when navigating the menu or moving between tabs.\n      if (angular.isDefined(event)) {\n        resetLocationHash();\n      }\n      var relativeData = null;\n      var parameters = null;\n      var navPath = getDefaultIfNoPath(_navPath);\n      var normalized = normalizeOpenArguments(arguments, event, params);\n      var localEvent = normalized.localEvent;\n      var localParams = normalized.localParams;\n      var previousViewPanel = service.activeViewPanel(false);\n      var presentData = checkIfTabIsAlreadyPresent(navPath, event, params);\n      var navItem = presentData.navItem;\n      var tabFound = presentData.tabFound;\n      var navItemExist = false;\n      navigationUnderWay = true;\n      var resolvedPath;\n\n      navItem = tryOpenViewBasedOnDefaultParams(navItem, navPath, tabFound, event, params, localParams);\n\n      navItem = findNavItemIfNotDefined(navItem, navPath);\n\n      if (DEFAULT_OPEN_STRAT === provider.getViewOpeningStrategy() && angular.isDefined(event)) {\n        if (event && event.shiftKey && event.shiftKey === true) {\n          if (angular.isDefined(navItem)) {\n            /* The original code, which only checks whether the \"last\" item in the array matches in the path property:\r\n            _.each(tabs,function(tab){\r\n                navItemExist = tab.path === navItem.path;\r\n            });\r\n             During the removal of underscore, the code has been adjusted\r\n             */\n            navItemExist = tabs.some(function (tab) {\n              return tab.path === navItem.path;\n            });\n            if (navItemExist === false) {\n              tabs.push(new provider.ViewPanel(navItem, $filter));\n              return;\n            }\n          }\n        }\n      }\n\n      // if navItem not found, check for possibility of the navPath having relative url.\n      if (hasNoItemButTabs(navItem)) {\n        relativeData = extractRelativeUrlData(navItem, navPath);\n\n        parameters = relativeData.params;\n        navItem = relativeData.navItem;\n        resolvedPath = relativeData.resolvedPath;\n      }\n\n      parameters = getParametersIfUndefined(parameters, params);\n\n      navItem = getNavItemCopyIfParams(navItem, parameters, resolvedPath);\n\n      if (navItem !== undefined && navItem !== null && navItem.parentTitle !== undefined) {\n        navItem.isStatic = true;\n      }\n\n      validateNavItem(navItem, navPath);\n\n      if (angular.isDefined(navItem) && angular.isUndefined(navItem.partial)) {\n        if (fisConfig.widgets && fisConfig.widgets.fisTabsBar) {\n          var openFirstChildIfEmpty = fisConfig.widgets.fisTabsBar.openFirstChildIfEmpty;\n\n          if (angular.isUndefined(openFirstChildIfEmpty) || openFirstChildIfEmpty) {\n            var firstChildWithPartial = findFirstChildWithPartial(navItem);\n\n            if (firstChildWithPartial !== null) {\n              $timeout(function () {\n                service.open(firstChildWithPartial.path, event, params);\n                fisPubSubService.publish('fisFirstSecondaryItemOpened');\n              });\n            }\n          }\n        }\n      }\n\n      if (!getSecondaryNavParent(navPath)) {\n        callRelevantStrategy(navItem, localEvent, localParams);\n      }\n\n      // Passing the event object through here allows listeners of this to determine the origin of the open\n      // e.g. was it a mega menu link or a tabbar link?\n      publishViewPanelChange(navItem, previousViewPanel, event);\n\n      if (navItem !== undefined && (navItem.closeable === true || navItem.closeable === 'true' || navItem.closeable === undefined)) {\n        // broadcast on the rootscope, so other external modules can listen for this\n        $rootScope.$broadcast('fisTabOpened', { path: _navPath });\n      }\n\n      $timeout(function () {\n        navigationUnderWay = false;\n      });\n    };\n\n    function findFirstChildWithPartial(navItem) {\n      if (angular.isDefined(navItem.children) && navItem.children.length > 0) {\n        if (angular.isUndefined(navItem.children[0].partial)) {\n          return findFirstChildWithPartial(navItem.children[0]);\n        }\n        return navItem.children[0];\n      }\n      return null;\n    }\n\n    /**\r\n     * @name viewPanels\r\n     * @methodOf fisViewPanelService\r\n     * @returns {Array} Open ViewPanels\r\n     * @description Returns array of open view panels\r\n     */\n    service.viewPanels = function () {\n      return tabs;\n    };\n\n    /**\r\n     * @name viewPanelByPath\r\n     * @methodOf fisViewPanelService\r\n     * @param {String} Navigation Path of the open View Panel\r\n     * @returns {Object} View Panel for the navigation path passed in\r\n     * @description Returns the view panel corresponding to the given nav path\r\n     */\n    service.viewPanelByPath = function (navPath) {\n      var viewPanel;\n\n      for (var i = 0; i < tabs.length; i++) {\n        if (tabs[i].path === navPath) {\n          viewPanel = tabs[i];\n\n          break;\n        }\n      }\n\n      return viewPanel;\n    };\n\n    /**\r\n     * @name reloadActiveViewPanel\r\n     * @methodOf fisViewPanelService\r\n     * @param {String} Navigation Path of the panel that needs to be reloaded - optional, if not provided, then the current active panel is used\r\n     * @description Reloads the current active panel\r\n     */\n    service.reloadActiveViewPanel = function (navPath, params) {\n      var panelPath = getPanelPath(navPath);\n      var parameters = null;\n\n      for (var j = 0; j < tabs.length; j++) {\n        if (tabs[j].path === panelPath) {\n          var navItem = fisViewService.findNavItem(panelPath);\n          // handling parameterized navigation item with resolved path\n          if (!navItem) {\n            var relativeData = extractRelativeUrlData(navItem, panelPath);\n            navItem = relativeData.navItem;\n            parameters = relativeData.params;\n          } else if (angular.isUndefined(params) || params.length === 0) {\n            // if params are undefined, try to use params from the active view panel in this case; since the view to be opened is a relative view.\n            parameters = service.activeViewPanel().params;\n          }\n\n          parameters = mergeParametersIfRequired(parameters, params);\n          navItem = getNavItemCopyIfParams(navItem, parameters);\n          // Replace ViewPanel - ng-repeat will detect change and destroy DOM (div and scope)\n          tabs[j] = new provider.ViewPanel(navItem, $filter);\n\n          service.open(panelPath, null, parameters);\n\n          break;\n        }\n      }\n    };\n\n    /**\r\n     * @name activeViewPanel\r\n     * @methodOf fisViewPanelService\r\n     * @returns {Object} Active View Panel\r\n     * @description Returns the active View Panel. This will always return an activeViewPanel\r\n     *      if there are opened view panels because it will select one.\r\n     * @param force undefined or a truthy value will force selection of the last tab.\r\n     */\n    service.activeViewPanel = function (force) {\n      var activeViewPanel = null;\n\n      forceSelectionOfLastPanel(force);\n\n      for (var i = 0; i < tabs.length; i++) {\n        if (tabs[i].path === selectedPanelPath) {\n          activeViewPanel = tabs[i];\n\n          break;\n        }\n      }\n\n      createParamsIfNotDefined(activeViewPanel);\n\n      return activeViewPanel;\n    };\n\n    /**\r\n     * @name activeViewPanelIndex\r\n     * @methodOf fisViewPanelService\r\n     * @returns {int} Active View Panel index\r\n     * @description Returns the active View Panel index\r\n     */\n    service.activeViewPanelIndex = function () {\n      for (var i = 0; i < tabs.length; i++) {\n        if (tabs[i].path === selectedPanelPath) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    /**\r\n     * @name viewPanelParams\r\n     * @methodOf fisViewPanelService\r\n     * @returns {Object} params for active view panel\r\n     * @description Returns the params for active View Panel\r\n     */\n    service.viewPanelParams = function () {\n      var params = {};\n\n      if (service.activeViewPanel()) {\n        params = service.activeViewPanel().params;\n      }\n\n      return params;\n    };\n\n    /**\r\n     * @name selectedViewPanelPath\r\n     * @methodOf fisViewPanelService\r\n     * @returns {String} Active View Panel path\r\n     * @description Returns the active View Panel path\r\n     */\n    service.selectedViewPanelPath = function (path) {\n      if (arguments.length === 0) {\n        return selectedPanelPath;\n      }\n      service.selectedPanelPath = path;\n      service.open(path);\n    };\n\n    /**\r\n     * @name resetSelectedViewPanelPath\r\n     * @methodOf fisViewPanelService\r\n     * @description Removes the selected panel path reference\r\n     */\n    service.resetSelectedViewPanelPath = function () {\n      selectedPanelPath = undefined;\n    };\n\n    /**\r\n     * @name isNonCloseable\r\n     * @methodOf fisViewPanelService\r\n     * @param {Object} item View Panel\r\n     * @returns {boolean} true if the View Panel is non-closeable else false\r\n     * @description Returns if a View Panel is closeable or not. View Panels corresponding to top level\r\n     * Navigation Items that have partials attached to them are considered non-closeable.\r\n     */\n    service.isNonCloseable = function (item) {\n      var isNonCloseable = false;\n\n      if (isNavItemDefined(item)) {\n        if (angular.isDefined(item.closeable)) {\n          isNonCloseable = !item.closeable;\n        }\n\n        var parent = getItemParentRefIfValid(item);\n\n        if (parent !== item) {\n          isNonCloseable = isSecondaryNavItemReplacingPrimary(item, isNonCloseable);\n        }\n\n        if (isNavItemDefined(item) && hasDropdownSecondaryMenu(item)) {\n          isNonCloseable = true;\n        }\n      }\n\n      return isNonCloseable;\n    };\n\n    /**\r\n     * @name close\r\n     * @methodOf fisViewPanelService\r\n     * @param {String} _navPath Path corresponding to a View Panel\r\n     * @description Closes a View Panel associated to the nav Path\r\n     */\n    service.close = function (_navPath) {\n      var viewPanel = getDefaultViewPanelIfNotDefined(null, _navPath);\n      var navPath = getDefaultNavPathIfNotDefined(_navPath);\n      var navPathData = getDataFromNavPath(viewPanel, navPath);\n      var tabIndexToRemove = navPathData.tabIndexToRemove;\n\n      viewPanel = navPathData.viewPanel;\n\n      // broadcast on the rootscope, so other external modules can listen for this\n      $rootScope.$broadcast('fisTabClosed', { path: _navPath });\n\n      return closeViewPanel(viewPanel, navPath, tabIndexToRemove);\n    };\n\n    function findScopeForEvaluation(context, element) {\n      // check if the context is a scope (that's the case when the service function is invoked from an angular expression)\n      if (context.$eval) {\n        // it quacks like one\n        return context;\n      }\n\n      // no luck try with the element, if present\n      if (element && element.scope) {\n        return element.scope();\n      }\n\n      throw new Error('Cannot find a scope to evaluate expression in.');\n    }\n\n    function findElementFromEvent(event) {\n      return angular.isObject(event) && angular.isDefined(event.target) && angular.element(event.target);\n    }\n\n    function processActionView(context, viewDef, event, params) {\n      var locals;\n      var ret;\n      var destroyScope = false;\n      var element = findElementFromEvent(event);\n      var evalScope = findScopeForEvaluation(context, element);\n\n      if (angular.isObject(params)) {\n        locals = angular.copy(params);\n      } else {\n        locals = {};\n      }\n\n      locals.view = viewDef;\n      locals.$scope = evalScope;\n\n      if (angular.isString(viewDef.actionController)) {\n        // create a new child scope on which to attach the controller\n        locals.$scope = evalScope = evalScope.$new();\n        locals.$element = element;\n        $controller(viewDef.actionController, locals);\n        destroyScope = true;\n      }\n\n      // elements can't be referenced in angualr expressions\n      delete locals.$element;\n      // event put in locals only for the expression evaluation\n      locals.$event = event;\n\n      ret = evalScope.$eval(viewDef.action, locals);\n\n      if (destroyScope) {\n        evalScope.$destroy();\n      }\n\n      return ret;\n    }\n\n    service.openView = function (viewDef, event, params) {\n      var context = this;\n\n      if (viewDef.action) {\n        return processActionView(context, viewDef, event, params);\n      } else if (viewDef.path) {\n        return service.open.call(context, viewDef.path, event, params);\n      } else if (angular.isString(viewDef)) {\n        return service.open.call(context, viewDef, event, params);\n      }\n\n      throw new Error('Cannot open provided view definition object');\n    };\n\n    /* service.setNavigationComplete = function() {\r\n        $timeout (function () {\r\n            navigationUnderWay = false;\r\n        });\r\n    };*/\n\n    var activePanel;\n\n    fisPubSubService.subscribe('fisBeforeNavItemAdd', function () {\n      activePanel = service.activeViewPanel();\n    });\n\n    fisPubSubService.subscribe('fisAfterNavItemAdd', function (params) {\n      if (params.rootNav === 'main' && params.itemToAdd.partial) {\n        tabs.push(new provider.ViewPanel(params.itemToAdd, $filter));\n      }\n      if (params.openItemAfterAdd) {\n        service.open(params.itemToAdd.path, null, params.openParams);\n      } else {\n        service.open(activePanel.path, null, params.openParams);\n      }\n      fisPubSubService.publish('fisAfterNavItemAdded');\n    });\n\n    fisPubSubService.subscribe('fisBeforeNavItemRemove', function () {\n      activePanel = service.activeViewPanel();\n    });\n\n    fisPubSubService.subscribe('fisAfterNavItemRemove', function (params) {\n      var tabToClose = null;\n      var secondaryNavParent;\n\n      for (var i = 0; i < tabs.length; i++) {\n        if (tabs[i].id === params.itemToRemove.id) {\n          tabToClose = tabs[i];\n          break;\n        }\n      }\n      if (!params.openParentNode && tabToClose) {\n        service.close(tabToClose.path);\n      }\n\n      // see if the item to be removed is part of the currently open secondary menu bar\n      // if it is, the secondary menu bar should refresh irrespective of the openParentNode param value\n      if (params.itemToRemove.id !== service.activeViewPanel().id && service.activeViewPanel() && (service.activeViewPanel().unresolvedPath || service.activeViewPanel().path)) {\n        var activePanelPath = service.activeViewPanel().unresolvedPath ? service.activeViewPanel().unresolvedPath : service.activeViewPanel().path;\n        secondaryNavParent = getSecondaryNavParent(params.itemToRemove.path);\n        var secondaryNavParentForActiveTab = getSecondaryNavParent(activePanelPath);\n        if (secondaryNavParent && secondaryNavParentForActiveTab && secondaryNavParent.path === secondaryNavParentForActiveTab.path) {\n          if (tabToClose) {\n            service.close(tabToClose.path);\n          }\n          service.open(service.activeViewPanel().path, null, params.openParams);\n        }\n      }\n\n      if (params.openParentNode && params.parentItem && params.parentItem.partial) {\n        service.open(params.parentItem.path, null, params.openParams);\n      } else if (params.openParentNode && params.parentItem && !params.parentItem.partial) {\n        secondaryNavParent = getSecondaryNavParent(params.itemToRemove.path);\n        if (secondaryNavParent) {\n          service.open(secondaryNavParent.path, null, params.openParams);\n        } else if (tabToClose) {\n          service.close(tabToClose.path);\n        }\n      }\n\n      fisPubSubService.publish('fisAfterNavItemRemoved');\n    });\n\n    init();\n\n    return service;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./views/view-panel-service.provider.js","/* jshint maxparams:12 */\r\n/**\r\n * @class\r\n * @name fisViewPanelService\r\n * @requires $locatio* @requires $timeout\r\n * @requires fisViewService\r\n * @description\r\n <p>Provides ViewPanel management functionality to the application.<p>\r\n <p>This service subscribes to <em>shell.navReady</em> event to get a list of\r\n top-level Navigation Items with partials configured and opens up non-closeable ViewPanels for these\r\n as the landing view for a user.</p>\r\n <p>The provider for this service, <em>fisViewPanelServiceProvider</em>, can be configured with View opening\r\n strategy during the module configuration phase. This can be a function or string. Possible value for string argument\r\n is <em>mdi</em> at the moment, while <em>sdi</em> and <em>hybrid</em> options would be made available in future.</p>\r\n */\r\nexport default function () {\r\n  'use strict';\r\n\r\n  var DEFAULT_OPEN_STRAT = 'mdi';\r\n  var CUSTOM_OPEN_STRAT = 'custom function';\r\n\r\n  var provider = this;\r\n  var openStratStr = null;\r\n  var customStrategyFn = null;\r\n  var preventBrowserNavigation = true;\r\n\r\n  /**\r\n   * @name setViewOpeningStrategy\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @param {String | Function} Function reference of custom view opening strategy or string from enum (only 'mdi' and 'browser' at this point in time)\r\n   * @description\r\n   * <p>Configures the provider with a View Panel Opening strategy that is then used by the <em>fisViewPanelService</em> to open\r\n   * View Panels.</p>\r\n   */\r\n  this.setViewOpeningStrategy = function (fn) {\r\n    if (angular.isFunction(fn)) {\r\n      openStratStr = CUSTOM_OPEN_STRAT;\r\n      customStrategyFn = fn;\r\n    } else if (angular.isString(fn)) {\r\n      openStratStr = fn;\r\n    } else {\r\n      openStratStr = DEFAULT_OPEN_STRAT;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @name getViewOpeningStrategy\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @description\r\n   * <p>Get the view opening strategy string reference or custom function if one was set.</p>\r\n   */\r\n  this.getViewOpeningStrategy = function () {\r\n    if (openStratStr === null) {\r\n      return DEFAULT_OPEN_STRAT;\r\n    } else if (openStratStr === CUSTOM_OPEN_STRAT) {\r\n      return customStrategyFn;\r\n    }\r\n    return openStratStr;\r\n  };\r\n\r\n  /**\r\n   * @name setPreventBrowserNavigation\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @param {Boolean} True for preventing browser reloading while navigating\r\n   * @description\r\n   * <p>Set a flag to prevent browser default navigation while using <em>fisViewPanelService</em>.</p>\r\n   */\r\n  this.setPreventBrowserNavigation = function (val) {\r\n    preventBrowserNavigation = Boolean(val);\r\n  };\r\n\r\n  /**\r\n   * @name getPreventBrowserNavigation\r\n   * @methodOf fisViewPanelServiceProvider\r\n   * @description\r\n   * <p>Get if the view panel should prevent the default browser navigation.</p>\r\n   */\r\n  this.getPreventBrowserNavigation = function () {\r\n    return preventBrowserNavigation;\r\n  };\r\n\r\n  /**\r\n   * @name ViewPanel\r\n   * @methodOf fisViewPanelService\r\n   * @param {viewDef} navigation Item\r\n   * @description extends and decorates the nav item with a label and ability to change this via method call.\r\n   */\r\n  var ViewPanel = function (viewDef, $filter) {\r\n    angular.extend(this, viewDef);\r\n\r\n    this.$filter = $filter;\r\n    this.navItem = angular.copy(viewDef);\r\n    this.title = viewDef.label;\r\n  };\r\n\r\n  ViewPanel.prototype.setTitle = function (stringOrObject) {\r\n    if (typeof stringOrObject !== 'object') { // eslint-disable-line\r\n      this.navItem.customTitle = stringOrObject;\r\n    } else {\r\n      var tl = '';\r\n      var sep = '|';\r\n\r\n      if (stringOrObject.sep) {\r\n        sep = stringOrObject.sep;\r\n      }\r\n\r\n      if (stringOrObject.prefix) {\r\n        tl = stringOrObject.prefix;\r\n        tl += sep;\r\n      }\r\n\r\n      tl += this.$filter('interpolate')(this.navItem.label, stringOrObject);\r\n\r\n      if (stringOrObject.suffix) {\r\n        tl += sep;\r\n        tl += stringOrObject.suffix;\r\n      }\r\n\r\n      this.navItem.customTitle = tl;\r\n    }\r\n  };\r\n\r\n  ViewPanel.prototype.setIcon = function (cssClass) {\r\n    this.navItem.customIcon = cssClass;\r\n  };\r\n\r\n  ViewPanel.prototype.resetIcon = function () {\r\n    this.navItem.customIcon = undefined;\r\n  };\r\n\r\n        // Returns the title the view want's to be shown in the tab.\r\n        // (fisTabsBar may display parentTitle due to config if no customTitle supplied)\r\n  ViewPanel.prototype.getTitle = function () {\r\n    if (this.navItem && this.navItem.customTitle) {\r\n      return this.navItem.customTitle;\r\n    }\r\n\r\n    return this.title;\r\n  };\r\n\r\n        // Returns the icon the view want's to be shown in the tab.\r\n        // (fisTabsBar may display parentIcon due to config if no customIcon supplied)\r\n  ViewPanel.prototype.getIcon = function () {\r\n    if (this.navItem && this.navItem.customIcon) {\r\n      return this.navItem.customIcon;\r\n    }\r\n\r\n    return this.icon;\r\n  };\r\n\r\n        // we merge properties from the routeParams with the already manually set params.\r\n        // jQuery.extend(this.params, $routeParams);\r\n  ViewPanel.prototype.resetTitle = function () {\r\n    this.navItem.customTitle = undefined;\r\n  };\r\n\r\n  this.ViewPanel = ViewPanel;\r\n\r\n        /**\r\n         * @name $get\r\n         * @methodOf fisViewPanelServiceProvider\r\n         * @description\r\n         * <p>Factory method to create instance of fisViewPanelService.</p>\r\n         */\r\n  this.$get = [\r\n\r\n    '$location',\r\n    '$timeout',\r\n    'fisViewService',\r\n    'fisConfig',\r\n    '$filter',\r\n    '$route',\r\n    'fisPubSubService',\r\n    'fisI18nService',\r\n    '$routeParams',\r\n    '$rootScope',\r\n    '$q',\r\n    '$controller',\r\n\r\n    function ($location, $timeout, fisViewService, fisConfig, $filter, $route, fisPubSubService, fisI18nService, $routeParams, $rootScope, $q, $controller) {\r\n      var service = {};\r\n      var selectedPanelPath;\r\n      var selectedPanelUnresolvedPath;\r\n      var selectedPanelParams;\r\n      var tabs = [];\r\n      var navigationUnderWay = false;\r\n      var changeLocationNavigationUnderway = false;\r\n      var strategies = {};\r\n      var keepSameTabsOpenOnReload;\r\n      var keepTabsOpenVariableLoaded;\r\n      var tabsAfterNavReadySet;\r\n      var preventBrowserNavigationSet;\r\n      var refreshInterval;\r\n\r\n      function init() {\r\n        startAvailableStrategies();\r\n\r\n        loadKeepTabsOpenVariable();  // sets keepSameTabsOpenOnReload variable\r\n\r\n        setupTabsAfterNavReady();\r\n\r\n        setupPreventBrowserNavigation();\r\n\r\n        setupLocaleChangeHandle();\r\n\r\n        refreshInterval = setInterval(publishNavComplete, 100);\r\n      }\r\n\r\n      function publishNavComplete() {\r\n        if (keepTabsOpenVariableLoaded && tabsAfterNavReadySet && preventBrowserNavigationSet) {\r\n          // publish event navigation done...\r\n          clearInterval(refreshInterval);\r\n          fisPubSubService.publish('shell.viewPanelReady');\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Setup the initially available opening strategies\r\n       * by placing them in the private strategies object\r\n       */\r\n      function startAvailableStrategies() {\r\n        strategies = {\r\n          mdi: mdiFunction,\r\n          browser: browserFunction\r\n        };\r\n      }\r\n\r\n      function isDuplicatePath(path, items) {\r\n        return items.some(function (item) {\r\n          return path === item.path;\r\n        });\r\n      }\r\n\r\n      function loadKeepTabsOpenVariable() {\r\n        if (angular.isUndefined(keepSameTabsOpenOnReload)) {\r\n          if (fisConfig.widgets && fisConfig.widgets.fisTabsBar && angular.isDefined(fisConfig.widgets.fisTabsBar.keepSameTabsOpenOnReload)) {\r\n            keepSameTabsOpenOnReload = fisConfig.widgets.fisTabsBar.keepSameTabsOpenOnReload;\r\n          } else {\r\n            keepSameTabsOpenOnReload = false;\r\n          }\r\n          keepTabsOpenVariableLoaded = true;\r\n          return keepSameTabsOpenOnReload;\r\n        }\r\n\r\n        keepTabsOpenVariableLoaded = true;\r\n        return keepSameTabsOpenOnReload;\r\n      }\r\n\r\n      function setupTabsAfterNavReady() {\r\n        fisPubSubService.subscribe('shell.navReady', function (nav) {\r\n          if (keepSameTabsOpenOnReload) {\r\n            // Clearing all tabs not in new nav structure\r\n            if (tabs.length > 0) {\r\n              for (var i = tabs.length; i-- > 0;) {\r\n                var tabItem = tabs[i];\r\n                var item = fisViewService.findNavItem(tabItem.path);\r\n\r\n                // remove tab not in new nav structure but do not remove untitled tab (':vmcount')\r\n                if (!item && tabItem.id !== ':vmCount') {\r\n                  tabs.splice(i, 1);\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            tabs = [];\r\n          }\r\n\r\n          // Get static tabs from nav structure\r\n          var newTabs = getNewTabs(nav.main);\r\n\r\n          // Checks to see which static pages need to be added or which static pages already in tabs\r\n          newTabs.forEach(function (newTab, index) {\r\n            // Checks to see if newTab exists in current or new nav structure\r\n            var item = fisViewService.findNavItem(newTab.path);\r\n\r\n            // it exists in nav structure\r\n            if (item) {\r\n              // Checking if newTab already in tabs\r\n              if (!isDuplicatePath(item.path, tabs)) {\r\n                // Adds static page to tabs\r\n                var newStaticPage = new provider.ViewPanel(item, $filter);\r\n                tabs.splice(index, 0, newStaticPage);\r\n              }\r\n            }\r\n          });\r\n\r\n          resetSelectedPanelPath();\r\n          tabsAfterNavReadySet = true;\r\n        }, true);\r\n      }\r\n\r\n      function getNewTabs(items) {\r\n        var tabs = [];\r\n        var count = 0;\r\n\r\n        items.forEach(function (item) {\r\n          item.location = 'main';\r\n          if (isValidTab(item)) {\r\n            tabs[count++] = new provider.ViewPanel(item, $filter);\r\n          }\r\n        });\r\n\r\n        return tabs;\r\n      }\r\n\r\n      function isValidTab(item) {\r\n        return hasNonCloseableFlag(item) || hasDropdownSecondaryMenu(item);\r\n      }\r\n\r\n      function hasNonCloseableFlag(item) {\r\n        return angular.isDefined(item.closeable) && !item.closeable;\r\n      }\r\n\r\n      function hasDropdownSecondaryMenu(item) {\r\n        return item.secondaryNav === 'dropdown';\r\n      }\r\n\r\n      function resetSelectedPanelPath() {\r\n        // This is important when reloading navigation at runtime.\r\n        selectedPanelPath = undefined;\r\n        selectedPanelUnresolvedPath = undefined;\r\n        selectedPanelParams = undefined;\r\n      }\r\n\r\n      function setupPreventBrowserNavigation() {\r\n        if (provider.getPreventBrowserNavigation()) {\r\n          $rootScope.$on('$locationChangeStart', onLocationChangeStart);\r\n        } else {\r\n          $rootScope.$on('$locationChangeStart', onLocationChangeStartNavigate);\r\n        }\r\n      }\r\n\r\n      var shellReady = false;\r\n\r\n      function onLocationChangeStartNavigate() {\r\n        fisPubSubService.subscribe('shell.navReady', function () {\r\n          shellReady = true;\r\n        });\r\n\r\n        if (!navigationUnderWay && shellReady) {\r\n          changeLocationNavigationUnderway = true;\r\n          service.open($location.path());\r\n        }\r\n\r\n        navigationUnderWay = false;\r\n\r\n        preventBrowserNavigationSet = true;\r\n      }\r\n\r\n      function onLocationChangeStart(event, newPath, oldPath) {\r\n        if (!navigationUnderWay) { // eslint-disable-line\r\n          var newUrl = getUrlWithoutHash(newPath);\r\n          var oldUrl = getUrlWithoutHash(oldPath);\r\n\r\n          if (newUrl !== oldUrl) {\r\n            // Old and new path are not the same, which means that someone is trying to navigate away from the current page.\r\n            // prevent the location change (this will revert the url in the address bar to what it was\r\n            event.preventDefault();\r\n          }\r\n        } else {\r\n          navigationUnderWay = false;\r\n        }\r\n\r\n        preventBrowserNavigationSet = true;\r\n      }\r\n\r\n      function setupLocaleChangeHandle() {\r\n        fisPubSubService.subscribe('fisLocaleChanged', function () {\r\n          // Reload the navigation if the locale setting changed\r\n          var activePanel = service.activeViewPanel();\r\n          fisViewService.load().then(function () {\r\n            $timeout(function () {\r\n              if (activePanel) {\r\n                // get the path the to take care of unicode path\r\n                var item = fisViewService.getItemFromPath2Item(activePanel.path);\r\n                if (item) {\r\n                  service.open(item.path, null, activePanel.params);// Open active one last.\r\n                } else { // untitled tab\r\n                  service.open(activePanel.path, null, activePanel.params);// Open active one last.\r\n                }\r\n              }\r\n            }, 0);\r\n          });\r\n        });\r\n      }\r\n\r\n      function checkAndSetForSecondaryNavItem(navItem, event, params) {\r\n        var navParent = getSecondaryNavThroughPaths(navItem);\r\n\r\n        if (navParent) {\r\n          // set the parent title for display\r\n          var paramsToUse = params ? params : navParent.params;\r\n\r\n          // check if tab is already present - if it is, do not update parentTitle, as it can mess up with tab title\r\n          var tabAlreadyPresent = false;\r\n\r\n          tabs.forEach(function (tab) {\r\n            if (tab.path === navItem.path) {\r\n              tabAlreadyPresent = true;\r\n            }\r\n          });\r\n\r\n          // change parent title only if tab is not already present and there are parameters\r\n          if (!tabAlreadyPresent && paramsToUse) {\r\n            navItem.parentTitle = $filter('interpolate')(navParent.label, paramsToUse);\r\n          } else if (!tabAlreadyPresent && !paramsToUse && navParent.label && navParent.label.indexOf('{') < 0 && navParent.label.indexOf('}') < 0) {\r\n            navItem.parentTitle = navParent.label;\r\n          }\r\n\r\n          navItem.parentIcon = navParent.icon ? navParent.icon : null;\r\n          var newNavItem = openSecNavItem(navItem, event, params);\r\n          if (newNavItem) {\r\n            navItem = newNavItem;\r\n          }\r\n        }\r\n      }\r\n\r\n      function getSecondaryNavThroughPaths(navItem) {\r\n        var navParent = null;\r\n\r\n        if (navItem !== undefined && navItem !== null) {\r\n          if (navItem.unresolvedPath) {\r\n            navParent = getSecondaryNavParent(navItem.unresolvedPath);\r\n          }\r\n\r\n          if (navParent === null) {\r\n            navParent = getSecondaryNavParent(navItem.path);\r\n          }\r\n        }\r\n        return navParent;\r\n      }\r\n\r\n      function publishViewPanelChange(navItem, previousViewPanel, event) {\r\n        if (navItem && navItem.params) {\r\n          navItem.decodedParams = addDecodedParams(navItem.params);\r\n        }\r\n\r\n        fisPubSubService.publish('fisActiveViewPanelChanged', {\r\n          before: previousViewPanel,\r\n          after: selectedPanelPath,\r\n          currentNavItem: navItem,\r\n          event: event\r\n        });\r\n      }\r\n\r\n      function addDecodedParams(params) {\r\n        var decodedParams = {};\r\n        if (params) {\r\n          for (var key in params) {\r\n            if (params.hasOwnProperty(key)) {\r\n              var paramValue = params[key];\r\n              // decode only if url contains : or / characters\r\n              if (paramValue && typeof paramValue === 'string' && (paramValue.indexOf('%2F') > -1 || paramValue.indexOf('%3A') > -1)) {\r\n                decodedParams[key] = decodeURIComponent(paramValue);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return decodedParams;\r\n      }\r\n\r\n      /**\r\n       * Call the appropriate opening strategy which decides whether to open\r\n       * a new tab or reuse the current one\r\n       * @param navItem object containing information about the view to be opened\r\n       * @param localEvent\r\n       */\r\n      function callRelevantStrategy(navItem, localEvent, parameters) {\r\n        // Check for boolean values as localEvent to override strategy\r\n        if (typeof (localEvent) === 'boolean') {\r\n          if (localEvent) {\r\n            openInNewTab(navItem, null, parameters);\r\n          } else {\r\n            openInSameTab(navItem, null, parameters);\r\n          }\r\n        } else {\r\n          // No overriding, continue as usual\r\n          var openingStrategy = provider.getViewOpeningStrategy();\r\n\r\n          if (angular.isFunction(customStrategyFn) && openStratStr === CUSTOM_OPEN_STRAT) {\r\n            // We've got a custom strategy and should use it\r\n            customStrategyFn.call(service, navItem, localEvent, parameters);\r\n          } else {\r\n            // Use one of the framework pre-implemented strategies\r\n            var stratFn = strategies[openingStrategy];\r\n\r\n            if (angular.isFunction(stratFn)) {\r\n              stratFn.call(service, navItem, localEvent, parameters);\r\n            } else {\r\n              // Framework default/Fallback if we do not have a strategy function\r\n              // matching this name or one at all\r\n              strategies[DEFAULT_OPEN_STRAT].call(service, navItem, localEvent, parameters);\r\n              console.warn('Unable to find opening strategy ' + openingStrategy + ', will use default ' + DEFAULT_OPEN_STRAT);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      function validateNavItem(navItem, navPath) {\r\n        setPathNotFoundError(navItem, navPath);\r\n\r\n        setPartialNotFoundError(navItem);\r\n      }\r\n\r\n      function setPathNotFoundError(navItem, navPath) {\r\n        // if (hasNoItemButTabs(navItem)) {\r\n        // we need to display path-not-found error even if there are no tabs open\r\n        if (!navItem && navPath !== '' && navPath !== '/') {\r\n          throwNoItemDefinedError(fisI18nService.translate('error-path-not-found', ''));\r\n        }\r\n      }\r\n\r\n      function hasNoItemButTabs(navItem) {\r\n        return !navItem && tabs.length > 0;\r\n      }\r\n\r\n      function throwNoItemDefinedError(userMessage) {\r\n        // TODO: replace with a fisMessageCenterService\r\n        var err = new Error('No nav item defined for this path');\r\n        err.userMessage = userMessage;\r\n        throw err;\r\n      }\r\n\r\n      function setPartialNotFoundError(navItem) {\r\n        if (hasTabsButNoPartial(navItem)) {\r\n          throwNoPartialFoundError(navItem, fisI18nService.translate('error-partial-not-found', ''));\r\n        }\r\n      }\r\n\r\n      function hasTabsButNoPartial(navItem) {\r\n        return navItem && // item exists\r\n          !navItem.partial && // but no partial\r\n          !navItem.secondaryNav && // neither secondary nav\r\n          !navItem.action &&// or action\r\n          tabs.length > 0; // and the service has tabs\r\n      }\r\n\r\n      function throwNoPartialFoundError(navItem, userMessage) {\r\n        // TODO: replace with a fisMessageCenterService\r\n        var err = new Error('Nav item \"' + navItem.label + '\" does not have a partial to load');\r\n        err.userMessage = userMessage;\r\n        throw err;\r\n      }\r\n\r\n      function substituteParams(path, localParams) {\r\n        while (path.indexOf(':') > -1) {\r\n          path = getReplacedPath(path, localParams);\r\n        }\r\n\r\n        return path;\r\n      }\r\n\r\n      function removeExtraParamsFromLocalParams(path, localParams) {\r\n        var localParamsToKeep = {};\r\n        while (path.indexOf(':') > -1) {\r\n          var paramStr = path.substring(path.indexOf(':') + 1);\r\n          var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\r\n          localParamsToKeep[param] = localParams[param];\r\n          path = path.substring(path.indexOf(':' + paramStr) + 1);\r\n        }\r\n        return localParamsToKeep;\r\n      }\r\n\r\n      function hasSpecialCharacter(paramVal) {\r\n        return !/^[a-zA-Z0-9-% ]*$/.test(paramVal);\r\n      }\r\n\r\n      function getReplacedPath(path, localParams) {\r\n        var paramStr = path.substring(path.indexOf(':') + 1);\r\n        var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\r\n        var remainingStr = paramStr.substring(param.length);\r\n\r\n        var paramValue;\r\n        var paramValueOrig = localParams[param];\r\n        if (paramValueOrig && (paramValueOrig.toString().indexOf('/') > -1 || paramValueOrig.toString().indexOf(':') > -1)) {\r\n          paramValue = encodeURIComponent(paramValueOrig);\r\n        } else if (hasSpecialCharacter(paramValueOrig)) {\r\n          paramValue = encodeURIComponent(paramValueOrig);\r\n          paramValue = decodeURIComponent(paramValue);\r\n        } else {\r\n          paramValue = decodeURIComponent(paramValueOrig);\r\n        }\r\n\r\n        if (localParams[param] !== paramValue) { // This Is a reload\r\n          localParams[param] = paramValue;// Set Local param to decoded value so it can found\r\n        }\r\n        return path.substring(0, path.indexOf(':')) + paramValue + remainingStr;\r\n      }\r\n\r\n      // Updating tabs[] array with the data received from the translation object\r\n      // This is required to update the tab title correctly in case translation data is loading asynchronously\r\n      function updateTabsArray(path, navItem) {\r\n        if (tabs) {\r\n          for (var count = 0; count < tabs.length; count++) {\r\n            if (tabs[count].path === path) {\r\n              if (navItem && navItem.label) {\r\n                tabs[count].label = navItem.label;\r\n                tabs[count].title = navItem.label;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      function getSecondaryNavParent(navPath) {\r\n        var tempPath = navPath;\r\n        var navItemParent = null;\r\n        var itemWithSecNav = null;\r\n\r\n        while (!itemWithSecNav) {\r\n          if (tempPath) {\r\n            navItemParent = fisViewService.findNavItem(tempPath);\r\n            updateTabsArray(tempPath, navItemParent);\r\n            itemWithSecNav = getItemParentRefIfValid(navItemParent);\r\n            tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        // clear params from the item, since it may contain stale value\r\n        if (itemWithSecNav) {\r\n          itemWithSecNav.params = null;\r\n        }\r\n        return itemWithSecNav;\r\n      }\r\n\r\n      // Expose getSecondaryNavParent functionality required by breadcrumbs container to check for a tab\r\n      // whether its a secondary navigation tab or not\r\n      service._getSecondaryNavParent = getSecondaryNavParent;\r\n\r\n      function getItemParentRefIfValid(navItemParent) {\r\n        var value = null;\r\n        if (navItemParent && (navItemParent.secondaryNav === 'menubar' || navItemParent.secondaryNav === 'dropdown')) {\r\n          value = navItemParent;\r\n        }\r\n        return value;\r\n      }\r\n\r\n      function openSecNavItem(item, event, params) {\r\n        var navItem = getNavItemFromViewPanel(item);\r\n        var parameters = getParamsOrNavItemParams(params, navItem);\r\n        var substitutedNavItem = getSubstitutedUrlIfContainsParams(parameters, navItem);\r\n\r\n        openTestingByGroupOpened(substitutedNavItem, event, parameters);\r\n\r\n        if (isValidSecondaryMenuItem(navItem)) {\r\n          var itemWithSecNav = getSecondaryNavThroughPaths(navItem);\r\n          var children = getChildrenFromNavItem(navItem, itemWithSecNav);\r\n          var newNavItem = null;\r\n\r\n          updateAllChildren(itemWithSecNav);\r\n\r\n          setParamsAcessedBySecondaryMenu(itemWithSecNav, substitutedNavItem);\r\n\r\n          newNavItem = getNewNavItem(navItem, itemWithSecNav, children);\r\n\r\n          fisPubSubService.publish('fisSecondaryMenuClicked', itemWithSecNav);\r\n\r\n          return newNavItem;\r\n        }\r\n      }\r\n\r\n      function getNavItemFromViewPanel(item) {\r\n        var navItem = item;\r\n\r\n        if (navItem instanceof provider.ViewPanel) {\r\n          navItem = navItem.navItem;\r\n          if (navItem.params && navItem.unresolvedPath) {\r\n            navItem.path = navItem.unresolvedPath;\r\n          }\r\n        }\r\n\r\n        return navItem;\r\n      }\r\n\r\n      function getParamsOrNavItemParams(params, navItem) {\r\n        var parameters = params;\r\n\r\n        if (!parameters && navItem.params !== null) {\r\n          parameters = navItem.params;\r\n        }\r\n\r\n        return parameters;\r\n      }\r\n\r\n      function getSubstitutedUrlIfContainsParams(parameters, navItem) {\r\n        var substitutedNavItem = angular.copy(navItem);\r\n\r\n        if (parameters && navItem) {\r\n          // set the original parameterized path\r\n          if (!substitutedNavItem.unresolvedPath) {\r\n            substitutedNavItem.unresolvedPath = navItem.path;\r\n          }\r\n          substitutedNavItem.path = substituteParams(navItem.path, parameters);\r\n          substitutedNavItem.label = $filter('interpolate')(navItem.label, parameters);\r\n          substitutedNavItem.params = parameters;\r\n        }\r\n\r\n        return substitutedNavItem;\r\n      }\r\n\r\n      function openTestingByGroupOpened(substitutedNavItem, event, parameters) {\r\n        if ((isTrue(event) || angular.isUndefined(event) || angular.isObject(event)) && !isSecNavItemGroupOpen(substitutedNavItem) && !isPartOfSecondaryNav(getSecondaryNavParent(substitutedNavItem.path), service.activeViewPanel())) {\r\n          openInNewTab(substitutedNavItem, event);\r\n        } else {\r\n          openInSameTab(substitutedNavItem, event, parameters);\r\n        }\r\n      }\r\n\r\n      function isPartOfSecondaryNav(navItem, currentNavItem) {\r\n        var containsNavItem = false;\r\n        if (navItem !== null && currentNavItem !== null) {\r\n          if ((navItem.id === currentNavItem.id)) {\r\n            return true;\r\n          } else if (angular.isDefined(navItem.children) && angular.isArray(navItem.children)) {\r\n            navItem.children.forEach(function (childNavItem) {\r\n              if (containsNavItem !== true) {\r\n                containsNavItem = isPartOfSecondaryNav(childNavItem, currentNavItem);\r\n              }\r\n            });\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n        return containsNavItem;\r\n      }\r\n\r\n      function isValidSecondaryMenuItem(navItem) {\r\n        return navItem &&\r\n          (navItem.secondaryNav ||\r\n            getSecondaryNavParent(navItem.path) ||\r\n            getSecondaryNavParent(navItem.unresolvedPath));\r\n      }\r\n\r\n      function getChildrenFromNavItem(navItem, itemWithSecNav) {\r\n        var children = null;\r\n\r\n        if (navItem.secondaryNav) {\r\n          children = navItem.children;\r\n        } else if (itemWithSecNav) {\r\n          children = itemWithSecNav.children;\r\n        }\r\n\r\n        return children;\r\n      }\r\n\r\n      function setParamsAcessedBySecondaryMenu(itemWithSecNav, substitutedNavItem) {\r\n        if (itemWithSecNav) {\r\n          itemWithSecNav.params = substitutedNavItem.params;\r\n        }\r\n      }\r\n\r\n      function getNewNavItem(navItem, itemWithSecNav, children) {\r\n        var newNavItem = angular.extend({}, navItem);\r\n        newNavItem.children = children;\r\n        newNavItem.secondaryNav = itemWithSecNav.secondaryNav;\r\n\r\n        return newNavItem;\r\n      }\r\n\r\n      function updateAllChildren(navItem) {\r\n        if (navItem && navItem.children) {\r\n          navItem.children.forEach(function (child) {\r\n            updateChildData(child);\r\n\r\n            updateAllChildren(child);\r\n          });\r\n        }\r\n      }\r\n\r\n      function updateChildData(child) {\r\n        if (child.partial) {\r\n          child.isStatic = true;\r\n        }\r\n\r\n        child.text = child.label;\r\n        child.items = child.children;\r\n\r\n        if (child.partial) {\r\n          child.url = child.path;\r\n        }\r\n      }\r\n\r\n      function isSecNavItemGroupOpen(navItem) {\r\n        var itemWithSecNav = getSecondaryNavThroughPaths(navItem);\r\n        var secNavItemGroupPresent = false;\r\n\r\n        if (itemWithSecNav !== null) {\r\n          // attach a property secondaryNavParent to the navItem in case the parent secondary navigation item has secondaryNav as dropdown\r\n          if (hasDropdownSecondaryMenu(itemWithSecNav)) {\r\n            navItem.secondaryNavParent = itemWithSecNav;\r\n          }\r\n\r\n          for (var i = 0; i < tabs.length; i++) {\r\n            if (isTabPathValid(tabs[i], navItem, itemWithSecNav)) {\r\n              secNavItemGroupPresent = true;\r\n              selectedPanelPath = tabs[i].path;\r\n              selectedPanelUnresolvedPath = tabs[i].unresolvedPath;\r\n              selectedPanelParams = tabs[i].params;\r\n\r\n              return secNavItemGroupPresent;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      function isTabPathValid(tab, navItem, itemWithSecNav) {\r\n        if (navItem.unresolvedPath) {\r\n          return tabPathHasNavItemParams(tab, navItem, itemWithSecNav);\r\n        }\r\n        return tab.path.indexOf(itemWithSecNav.path) > -1;\r\n      }\r\n\r\n      function tabPathHasNavItemParams(tab, navItem/* , itemWithSecNav*/) {\r\n        var continueLooping = true;\r\n        var unresolvedPath = navItem.unresolvedPath;\r\n        var navPathUptoResolvedParam;\r\n        var paramValue;\r\n\r\n        while (continueLooping) {\r\n          var paramStr = unresolvedPath.substring(unresolvedPath.indexOf(':') + 1);\r\n          var param = paramStr.indexOf('/') > -1 ? paramStr.substring(0, paramStr.indexOf('/')) : paramStr;\r\n          var remainingStr = paramStr.substring(param.length);\r\n          paramValue = navItem.params[param];\r\n          navPathUptoResolvedParam = unresolvedPath.substring(0, unresolvedPath.indexOf(':')) + paramValue;\r\n          if (remainingStr.indexOf(':') > -1) {\r\n            unresolvedPath = unresolvedPath.substring(0, unresolvedPath.indexOf(':')) + paramValue + remainingStr;\r\n          } else {\r\n            continueLooping = false;\r\n          }\r\n        }\r\n\r\n        // check for the token length of navPathUptoResolvedParam and tab.path\r\n        // if the length of tokens of navPathUptoResolvedParam is greater than tab.path length and navPathUptoResolvedParam begins with tab.path,\r\n        // it means the current nav item to open is a child of the existing tab),\r\n        // If the length of tokens is same, it means the current nav item to open is not a child of the existing tab\r\n        // This check is needed for cases where the name of the new tab to open contains the name of the already open tab, for example Bank_of_Pune and Bank_of_Pune1\r\n        var navPathUptoResolvedParamTokens = getTokensFromNavPath(navPathUptoResolvedParam);\r\n        var tabPathTokens = getTokensFromNavPath(tab.path);\r\n        var navPathContainsTabPath = false;\r\n        if (navPathUptoResolvedParamTokens.length > tabPathTokens.length && navPathUptoResolvedParam.indexOf(tab.path) > -1) {\r\n          navPathContainsTabPath = true;\r\n        }\r\n\r\n        return ((tab.path.indexOf(navPathUptoResolvedParam) > -1) && paramValue === tab.label) || navPathContainsTabPath;\r\n      }\r\n\r\n      function openInNewTab(navItem, event, parameters) {\r\n        if (isFalse(event)) {\r\n          openInSameTab(navItem, event, parameters);\r\n        }\r\n\r\n        if (navItem) {\r\n          if (!isAlreadyInTabs(navItem)) {\r\n            addNewTab(navItem);\r\n          }\r\n\r\n          setPathAndNavigateTo(navItem);\r\n        }\r\n      }\r\n      // Expose opening in a new tab functionality so custom opening strategies may use it\r\n      /**\r\n       * @name _openInNewTab\r\n       * @methodOf fisViewPanelService\r\n       * @param {Object} Navigation Item to be opened\r\n       * @param\r\n       * @description\r\n       * <p>Configures the provider with a View Panel Opening strategy that is then used by the <em>fisViewPanelService</em> to open\r\n       * View Panels.</p>\r\n       */\r\n      service._openInNewTab = openInNewTab;\r\n\r\n      function isAlreadyInTabs(navItem) {\r\n        return tabs.some(function (tab) {\r\n          return tab.path === navItem.path;\r\n        });\r\n      }\r\n\r\n      function addNewTab(navItem) {\r\n        tabs.push(new provider.ViewPanel(navItem, $filter));\r\n        publishViewPanelOpened(navItem, getLastTab());\r\n      }\r\n\r\n      function publishViewPanelOpened(navItem, tab) {\r\n        fisPubSubService.publish('fisViewPanelOpened', {\r\n          path: navItem.path,\r\n          viewPanel: tab\r\n        });\r\n      }\r\n\r\n      function getFirstTab() {\r\n        return tabs[0];\r\n      }\r\n\r\n      function getLastTab() {\r\n        return tabs[tabs.length - 1];\r\n      }\r\n\r\n      function openInSameTab(navItem, event, parameters) {\r\n        if (!isSecNavItemGroupOpen(navItem) && hasItemButNoTabsOrEvent(navItem, event)) {\r\n          openInNewTab(navItem, event, parameters);\r\n        } else if (hasItemAndTabs(navItem)) {\r\n          if (!shouldOpenInSameTab(navItem)) {\r\n            setPathAndNavigateTo(navItem, parameters);\r\n          }\r\n        }\r\n      }\r\n                // Expose opening in same tab functionality so custom opening strategies may use it\r\n      service._openInSameTab = openInSameTab;\r\n\r\n      function hasItemButNoTabsOrEvent(navItem, event) {\r\n        return hasItemButNoTabs(navItem) || isTrue(event);\r\n      }\r\n\r\n      function hasItemButNoTabs(navItem) {\r\n        return navItem && tabs.length === 0;\r\n      }\r\n\r\n      function hasItemAndTabs(navItem) {\r\n        return navItem && tabs.length > 0;\r\n      }\r\n\r\n      function shouldOpenInSameTab(navItem, parameters) {\r\n        var activeViewPanel = service.activeViewPanel();\r\n        var isOpeningAction = false;\r\n\r\n        if (isActiveAndNonCloseable(activeViewPanel, navItem)) {\r\n          openInNewTab(navItem, parameters);\r\n          isOpeningAction = true;\r\n        } else if (shouldReplaceViewPanel(activeViewPanel, navItem, parameters)) {\r\n          isOpeningAction = true;\r\n        }\r\n\r\n        return isOpeningAction;\r\n      }\r\n\r\n      function isActiveAndNonCloseable(activeViewPanel, navItem) {\r\n        return activeViewPanel &&\r\n                        service.isNonCloseable(activeViewPanel) &&\r\n                        !getSecondaryNavParent(navItem.path);\r\n      }\r\n\r\n      function findCurrentlyOpenedTab(activeViewPanel) {\r\n        if (!activeViewPanel) {\r\n          return null;\r\n        }\r\n\r\n        var activeViewPanelIndex = null;\r\n\r\n        tabs.forEach(function (tab, index) {\r\n          if (activeViewPanel.path === tab.path) {\r\n            activeViewPanelIndex = index;\r\n          }\r\n        });\r\n\r\n        return activeViewPanelIndex;\r\n      }\r\n\r\n      function shouldReplaceViewPanel(activeViewPanel, navItem, parameters) {\r\n        var navItemInTabs = isNavItemInTabs(navItem);\r\n        var activeViewPanelIndex = findCurrentlyOpenedTab(activeViewPanel);\r\n\r\n        if (activeViewPanel && !navItemInTabs) {\r\n          replaceViewPanel(activeViewPanel, navItem, parameters, activeViewPanelIndex);\r\n\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      function isNavItemInTabs(navItem) {\r\n        return tabs.some(function (tab) {\r\n          return tab.path === navItem.path;\r\n        });\r\n      }\r\n\r\n      function replaceViewPanel(activeViewPanel, navItem, parameters, index) {\r\n        var promise = publishViewPanelReplaceIntent(navItem, activeViewPanel);\r\n        promise.then(function () {\r\n          onViewPanelReplaceIntentSuccess(navItem, parameters, index);\r\n        }, function () {\r\n                        // publish an event if view panel replacement has been vetoed.\r\n          fisPubSubService.publish('fisViewPanelReplaceVetoed', {\r\n            navItem: navItem,\r\n            viewPanel: activeViewPanel\r\n          });\r\n        });\r\n      }\r\n\r\n      function publishViewPanelReplaceIntent(navItem, activeViewPanel) {\r\n        return fisPubSubService.publish('fisViewPanelReplaceIntent', {\r\n          path: navItem.path,\r\n          viewPanel: activeViewPanel\r\n        });\r\n      }\r\n\r\n      function onViewPanelReplaceIntentSuccess(navItem, parameters, index) {\r\n        var tab = tabs[index] = new provider.ViewPanel(navItem, $filter);\r\n\r\n        publishViewPanelOpened(navItem.path, tab);\r\n        publishViewReplaced(navItem);\r\n\r\n        setPathAndNavigateTo(navItem);\r\n      }\r\n\r\n      function setPathAndNavigateTo(navItem) {\r\n        selectedPanelPath = navItem.path;\r\n        selectedPanelUnresolvedPath = navItem.unresolvedPath;\r\n        selectedPanelParams = navItem.params;\r\n        navigateTo(navItem);\r\n      }\r\n\r\n      function publishViewReplaced(navItem) {\r\n        fisPubSubService.publish('fisViewPanelReplaced', { path: navItem.path });\r\n      }\r\n\r\n      function getUrlWithoutHash(url) {\r\n        // Use the provided URL as the default value,\r\n        // this will ensure a correct return value even\r\n        // if it doesn't contain a trailing hash (anchor)\r\n        var iPound = url.lastIndexOf('#');\r\n        var iSlash = url.lastIndexOf('/');\r\n        var noHash = url;\r\n\r\n        // Only cut off the hash if the hash sign was\r\n        // found after the last slash in the path.\r\n        if (iPound > iSlash) {\r\n          // Take everything before the hash sign\r\n          noHash = url.substring(0, iPound);\r\n        }\r\n\r\n        return noHash;\r\n      }\r\n\r\n      function navigateTo(navItem) {\r\n        // Give time to angular to complete it's $apply cycle and then update path\r\n        // Reference - https://groups.google.com/d/msg/angular/FJwxJ-XbJaE/584zbwBjbU8J\r\n        $timeout(function () {\r\n          // Route change only occurs when $location.path changes\r\n          // In some cases, we want the route to be refreshed even if the path doesn't change:\r\n          // 1. The user clicks on a bookmark containing #/welcome for example. In this case,\r\n          //    open is called with #/welcome but $location.path() is already #/welcome\r\n          // 2. The navigation structure is changed with fisViewService.load and the current path is\r\n          //    #/welcome and the new path to open is also #/welcome. In this case, the paths may be the\r\n          //    same but they are referring to different views so we need to reload.\r\n          // Note that fisViews will not drop the current view panel and reload the route's template:\r\n          // it will notice the view panel is for the same route and will not do anything\r\n          // since it only means the user is navigating to the same page again, in which case we don't\r\n          // want the view to be reloaded.\r\n          if ($location.path() === navItem.path) {\r\n            $route.reload();\r\n          } else {\r\n            $location.path(navItem.path);\r\n          }\r\n\r\n          if (!changeLocationNavigationUnderway) { // eslint-disable-line\r\n            /*\r\n                This variable is explicitly set to true because it is checked while updating the view\r\n                The '$locationChangeStart' event handler checks for this flag to be set to true, else it will\r\n                prevent the location change.\r\n                Since this function is called by the open method of framework, we want the $location to change\r\n            */\r\n            navigationUnderWay = true;\r\n          } else {\r\n            changeLocationNavigationUnderway = false;\r\n          }\r\n        }, 0);\r\n      }\r\n\r\n      function mdiFunction(navItem, event, parameters) {\r\n        if (isFalse(event)) {\r\n          openInSameTab(navItem, event, parameters);\r\n        } else {\r\n          openInNewTab(navItem, event, parameters);\r\n        }\r\n      }\r\n\r\n      function browserFunction(navItem, event, parameters) {\r\n        if (!event || (event && !event.ctrlKey && !event.metaKey)) {\r\n          // to open child page in the current tab.\r\n          openInSameTab(navItem, null, parameters);\r\n        } else {\r\n          // to open child page in new tab.\r\n          openInNewTab(navItem, null, parameters);\r\n        }\r\n      }\r\n\r\n      function isTrue(e) {\r\n        return e === true || e === 'true';\r\n      }\r\n\r\n      function isFalse(e) {\r\n        return e === false || e === 'false';\r\n      }\r\n\r\n      function resetLocationHash() {\r\n        // This is done to avoid carrying over the anchor\r\n        // location (hash, e.g. \"#toc_3\") to the new tab.\r\n\r\n        // We might have to revisit this if we want to\r\n        // support opening tabs and jumping to a\r\n        // specific location at the same time.\r\n        $location.hash('');\r\n      }\r\n\r\n      function getDefaultIfNoPath(navPath) {\r\n        if (navPath === undefined) {\r\n          return '';\r\n        }\r\n        return navPath;\r\n      }\r\n\r\n      function normalizeOpenArguments(args, event, params) {\r\n        var localEvent = null;\r\n        var localParams = {};\r\n\r\n        if (args.length === 2) {\r\n          localEvent = getValidatedEvent(args[1]);\r\n\r\n          if (isStrategyOverride(event)) {\r\n            localEvent = event;\r\n          } else { // it's a params object, set it to localParams\r\n            localParams = args[1];\r\n          }\r\n        } else if (args.length === 3) {\r\n          localEvent = event;\r\n          localParams = params;\r\n        }\r\n\r\n        return {\r\n          localEvent: localEvent,\r\n          localParams: localParams\r\n        };\r\n      }\r\n\r\n      function getValidatedEvent(value) {\r\n        if (isEvent(value)) {\r\n          return value;\r\n        }\r\n        return null;\r\n      }\r\n\r\n      function isEvent(value) {\r\n        return value && value.target;\r\n      }\r\n\r\n      function isStrategyOverride(value) {\r\n        return value === 'true' || value === 'false' || value === true || value === false;\r\n      }\r\n\r\n      function checkIfTabIsAlreadyPresent(navPath, event, params) {\r\n        var navItem = null;\r\n        var tabFound = false;\r\n\r\n        tabs.forEach(function (tab) {\r\n          if (tab.path === navPath) {\r\n            tabFound = true;\r\n            navItem = tab;\r\n            checkAndSetForSecondaryNavItem(tab, event, params);\r\n          }\r\n        });\r\n\r\n        return {\r\n          navItem: navItem,\r\n          tabFound: tabFound\r\n        };\r\n      }\r\n\r\n      function tryOpenViewBasedOnDefaultParams(navItem, navPath, tabFound, event, params, localParams) {\r\n        if (isNavPathNotDefined(navPath, tabFound)) {\r\n          navItem = openDefaultView(event, params);\r\n        } else if (isRelativePath(navPath, tabFound)) {\r\n          navItem = openRelativeView(navPath, event, params, localParams);\r\n          if (navItem) {\r\n            navPath = navItem.path;\r\n          }\r\n        } else if (isSecondaryNavigation(navPath, tabFound)) {\r\n          navItem = openSecondaryView(navPath, event, params);\r\n        }\r\n\r\n        // When navItem has parameterized url, a copy of the navItem is created and processed. Hence, the\r\n        // isStatic property is not set even if secondary navigation is present.\r\n        // Hence, setting this property after all the processing is done\r\n        if (navItem && getSecondaryNavParent(navItem.path) && navItem.partial) {\r\n          navItem.isStatic = true;\r\n        }\r\n\r\n        return navItem;\r\n      }\r\n\r\n      function openDefaultView(event, params) {\r\n        // TODO: default if no root tab.\r\n        // Provide a way to configure default and open tabs if necessary?\r\n\r\n        var navItem = getFirstTab();\r\n\r\n        if (isNavItemDefined(navItem)) {\r\n          checkAndSetForSecondaryNavItem(navItem, event, params);\r\n          return navItem;\r\n        }\r\n        return null;\r\n      }\r\n\r\n      function isNavPathNotDefined(navPath, tabFound) {\r\n        return !navPath && tabFound === false;\r\n      }\r\n\r\n      function isNavItemDefined(navItem) {\r\n        return navItem && navItem.path;\r\n      }\r\n\r\n      function isRelativePath(navPath, tabFound) {\r\n        return navPath &&\r\n          navPath.indexOf('/') !== 0 &&\r\n          tabFound === false;\r\n      }\r\n\r\n      function openRelativeView(navPath, event, params, localParams) {\r\n        var navItemTemp = fisViewService.findNavItem(navPath, selectedPanelPath);\r\n        var key;\r\n\r\n        // if navItemTemp not found, look it up using selectedPanelUnresolvedPath\r\n        if (!navItemTemp) {\r\n          navItemTemp = fisViewService.findNavItem(navPath, selectedPanelUnresolvedPath);\r\n\r\n          // add the selectedPanelParams to localParams for substitution.\r\n          for (key in selectedPanelParams) {\r\n            if (selectedPanelParams.hasOwnProperty(key)) {\r\n              localParams[key] = selectedPanelParams[key];\r\n            }\r\n          }\r\n        }\r\n\r\n        // Add the selectedPanelParams to localParams for substitution in case navItemTemp is found.\r\n        // In this case add the param only if localParams does not have the key\r\n        if (navItemTemp) {\r\n          for (key in selectedPanelParams) {\r\n            if (selectedPanelParams.hasOwnProperty(key) && !localParams.hasOwnProperty(key)) {\r\n              localParams[key] = selectedPanelParams[key];\r\n            }\r\n          }\r\n        }\r\n\r\n        if (navItemTemp && navItemTemp.params && Object.keys(localParams).length === 0) {\r\n          localParams = navItemTemp.params;\r\n        }\r\n\r\n        // if no local params are defined, try to use params from the active view panel in this case; since the view to be opened is a relative view.\r\n        if (angular.isUndefined(localParams) || localParams === null || Object.keys(localParams).length === 0) {\r\n          if (service.activeViewPanel()) {\r\n            localParams = service.activeViewPanel().params;\r\n          }\r\n        }\r\n\r\n        // when a parent page is called from child page without giving any parameters, child page params are also added in localParams\r\n        // we need to remove such extra params from localParams\r\n        var navItem = null;\r\n        if (navItemTemp) {\r\n          localParams = removeExtraParamsFromLocalParams(navItemTemp.path, localParams);\r\n\r\n          var path = substituteParams(navItemTemp.path, localParams);\r\n\r\n          navItem = getNavItemForRelativePath(navItemTemp, path, localParams);\r\n          navItem.unresolvedPath = navItemTemp.path;\r\n\r\n          checkAndSetForSecondaryNavItem(navItem, event, params);\r\n        }\r\n\r\n        return navItem;\r\n      }\r\n\r\n      function getNavItemForRelativePath(navItem, path, localParams) {\r\n        var newItem = {};\r\n\r\n        angular.copy(navItem, newItem);\r\n\r\n        newItem.path = path;\r\n        newItem.label = $filter('interpolate')(newItem.label, localParams);\r\n        newItem.params = localParams;\r\n\r\n        return newItem;\r\n      }\r\n\r\n      function isSecondaryNavigation(navPath, tabFound) {\r\n        return getSecondaryNavParent(navPath) && tabFound === false;\r\n      }\r\n\r\n      function openSecondaryView(navPath, event, params) {\r\n        var navItem = fisViewService.findNavItem(navPath);\r\n\r\n        // case of handling parameterized navigation item with secondary menu\r\n        if (!navItem) {\r\n          var relativeData = extractRelativeUrlData(navItem, navPath);\r\n          params = relativeData.params;\r\n          navItem = relativeData.navItem;\r\n        }\r\n        checkAndSetForSecondaryNavItem(navItem, event, params);\r\n        if (navItem) {\r\n          navItem.params = params;\r\n        }\r\n        return navItem;\r\n      }\r\n\r\n      function findNavItemIfNotDefined(navItem, navPath) {\r\n        // TODO: should it instead just call navigation.navigate(navPath) and have tabs handled in view service?\r\n\r\n        if (!isNavItemDefined(navItem)) {\r\n          navItem = fisViewService.findNavItem(navPath, selectedPanelPath);\r\n        }\r\n\r\n        return navItem;\r\n      }\r\n\r\n      function extractRelativeUrlData(navItem, navPath) {\r\n        var tempPath = navPath;\r\n        var tokens = getTokensFromNavPath(navPath);\r\n        var parameters = {};\r\n        var tempNavPath = navPath;\r\n        var parsedData = null;\r\n        var hasMoreTokens = true;\r\n\r\n        while (hasMoreTokens) {\r\n          if (!hasPathToParse(tempNavPath)) {\r\n            break;\r\n          }\r\n\r\n          tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\r\n          if (tempPath.length === 0) {\r\n            break;\r\n          }\r\n          var tempNavItem = fisViewService.findNavItem(tempPath);\r\n\r\n          if (tempNavItem) {\r\n            var parsedDataCopy = angular.copy(parsedData);\r\n\r\n            parsedData = findMatchedChildThroughNavPath({\r\n              navItem: navItem,\r\n              tokens: tokens,\r\n              tempPath: tempPath,\r\n              tempNavPath: tempNavPath,\r\n              tempNavItem: tempNavItem,\r\n              hasMoreTokens: true,\r\n              parameters: parameters\r\n            });\r\n\r\n            if (parsedData && parsedDataCopy && parsedData.navItem && parsedDataCopy.navItem && parsedData.navItem.id === parsedDataCopy.navItem.id) {\r\n              hasMoreTokens = false;\r\n              return {\r\n                params: null,\r\n                navItem: null\r\n              };\r\n            }\r\n\r\n            navItem = parsedData.navItem;\r\n            tokens = parsedData.tokens;\r\n            tempPath = parsedData.tempPath;\r\n            tempNavPath = parsedData.tempNavPath;\r\n            tempNavItem = parsedData.tempNavItem;\r\n            parameters = parsedData.parameters;\r\n\r\n            if (!parsedData.hasMoreTokens) {\r\n              break;\r\n            }\r\n          } else if (noMoreItems(tempNavItem, tempPath)) {\r\n            parsedData = findMatchedNoChild(navItem, parameters, tempPath, tempNavPath);\r\n\r\n            navItem = parsedData.navItem;\r\n            parameters = parsedData.parameters;\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        var resolvedPath;\r\n        // compute resolvedPath only for cases when navPath contains tempPath -- this is needed in case there is a parameterized url,\r\n        // in which case, this navPath will have unresolved path (with ':' character), and tempPath will have resolved path with substituted parameters.\r\n        if (navItem) {\r\n          var navItemIdTokens = getTokensFromNavPath(navItem.id) || [];\r\n          if (navPath.indexOf(tempPath) > -1 && navItemIdTokens.length > 2) {\r\n            resolvedPath = navPath.substring(tempPath.length + 1);\r\n          }\r\n        }\r\n\r\n        return {\r\n          params: parameters,\r\n          navItem: navItem,\r\n          resolvedPath: resolvedPath\r\n        };\r\n      }\r\n\r\n                // exposing this method since it is used internally by breadcrumb widget to extract relative data\r\n      service._extractRelativeUrlData = extractRelativeUrlData;\r\n\r\n      function noMoreItems(tempNavItem, tempPath) {\r\n        return !tempNavItem && tempPath.lastIndexOf('/') === 0;\r\n      }\r\n\r\n      function hasSomeEquivalentParam(child, childPath) {\r\n        var childPathWithoutParam = child.id;\r\n        var withoutParamWord = childPathWithoutParam.substring(0, childPathWithoutParam.indexOf('/'));\r\n        var originalWord = childPath.substring(0, childPath.indexOf('/'));\r\n        return withoutParamWord === originalWord;\r\n      }\r\n\r\n      function getTokensFromNavPath(navPath) {\r\n        var tokens = [];\r\n\r\n        if (navPath && navPath.indexOf('/') > -1) {\r\n          tokens = navPath.split('/');\r\n        }\r\n\r\n        return tokens;\r\n      }\r\n\r\n      function hasPathToParse(path) {\r\n        return path && path.substring(0, path.lastIndexOf('/'));\r\n      }\r\n\r\n      function getChildTokens(childPath) {\r\n        return childPath.split('/');\r\n      }\r\n\r\n      function getChildDataFromPath(child, childPath, tokensLength, tempPath, tempNavPath, hasMoreTokens) {\r\n        var childData = {};\r\n        var childTokens = getChildTokens(childPath);\r\n        var itemTokens = child.path.split('/');\r\n\r\n        childData.paramName = child.id.substring(child.id.indexOf(':') + 1);\r\n        childData.paramVal = getParameterValue(child, childPath, childTokens);\r\n        childData.navItem = angular.copy(child);\r\n\r\n        if (tokensLength === itemTokens.length) {\r\n          childData.hasMoreTokens = false;\r\n          childData.tempPath = tempPath;\r\n          childData.tempNavPath = tempNavPath;\r\n        } else {\r\n          childData.hasMoreTokens = hasMoreTokens;\r\n                        // remove tokens already resolved\r\n          spliceChildTokens(child, childTokens);\r\n                        // Add to tempPath the resolved tokens and the unresolved tokens and start again :-)\r\n          childData.tempPath = tempPath + '/' + child.id + '/' + childTokens.join('/');\r\n          childData.tempNavPath = childData.tempPath; // start again - but with one token resolved\r\n        }\r\n\r\n        return childData;\r\n      }\r\n\r\n      function spliceChildTokens(child, childTokens) {\r\n        if (child.id.indexOf(':') === 0) {\r\n          childTokens.splice(0, 1);\r\n        } else {\r\n          childTokens.splice(0, 2);\r\n        }\r\n      }\r\n\r\n      function findMatchedChildThroughNavPath(defaultData) {\r\n        var childPath = defaultData.tempNavPath.substring(defaultData.tempPath.length + 1);\r\n        var cont = true;\r\n\r\n        while (cont) {\r\n          if (!defaultData.tempNavItem.children) {\r\n            break;\r\n          }\r\n\r\n          var parsedDataCopy = angular.copy(parsedData); // eslint-disable-line\r\n\r\n          var parsedData = parseChildDataFrom({\r\n            cont: cont,\r\n            navItem: defaultData.navItem,\r\n            childPath: childPath,\r\n            tokens: defaultData.tokens,\r\n            tempPath: defaultData.tempPath,\r\n            tempNavPath: defaultData.tempNavPath,\r\n            tempNavItem: defaultData.tempNavItem,\r\n            hasMoreTokens: defaultData.hasMoreTokens,\r\n            parameters: defaultData.parameters\r\n          });\r\n\r\n          if (parsedData && parsedDataCopy && parsedData.navItem && parsedDataCopy.navItem && parsedData.navItem.id === parsedDataCopy.navItem.id) {\r\n            cont = false;\r\n            return defaultData;\r\n          }\r\n\r\n          cont = parsedData.cont;\r\n          childPath = parsedData.childPath;\r\n          defaultData.navItem = parsedData.navItem;\r\n          defaultData.tokens = parsedData.tokens;\r\n          defaultData.tempPath = parsedData.tempPath;\r\n          defaultData.tempNavPath = parsedData.tempNavPath;\r\n          defaultData.tempNavItem = parsedData.tempNavItem;\r\n          defaultData.hasMoreTokens = parsedData.hasMoreTokens;\r\n          defaultData.parameters = parsedData.parameters;\r\n        }\r\n\r\n        return defaultData;\r\n      }\r\n\r\n      function findMatchedNoChild(_navItem, parameters, tempPath, tempNavPath) {\r\n        var navItem = fisViewService.getItemFromPath2Item(tempPath);\r\n        var navigationPanelParamValue = createUrlFillingParams(tempPath, tempNavPath);\r\n        var paramNameString;\r\n        if (navItem !== null) {\r\n          paramNameString = findParamName(navItem);\r\n        }\r\n\r\n        parameters[paramNameString] = navigationPanelParamValue;\r\n\r\n        return {\r\n          navItem: navItem,\r\n          parameters: parameters\r\n        };\r\n      }\r\n\r\n      function createUrlFillingParams(tempPath, tempNavPath) {\r\n        return tempNavPath.substring(tempPath.length + 1);\r\n      }\r\n\r\n      function findParamName(navItem) {\r\n        return navItem.id.substring(navItem.id.indexOf(':') + 1);\r\n      }\r\n\r\n      function parseChildDataFrom(defaultData) {\r\n        var i = 0;\r\n        var child = null;\r\n        var childData = null;\r\n\r\n        for (i = 0; i < defaultData.tempNavItem.children.length; i++) {\r\n          child = defaultData.tempNavItem.children[i];\r\n\r\n          if (child && child.id.indexOf(':') !== -1) {\r\n            var proceed = child.id.indexOf(':') === 0 ? true : hasSomeEquivalentParam(child, defaultData.childPath);\r\n            if (proceed) {\r\n              childData = getChildDataFromPath(\r\n                              child,\r\n                              defaultData.childPath,\r\n                              defaultData.tokens.length,\r\n                              defaultData.tempPath,\r\n                              defaultData.tempNavPath,\r\n                              defaultData.hasMoreTokens\r\n                          );\r\n\r\n              defaultData.cont = false;\r\n              defaultData.navItem = childData.navItem;\r\n              defaultData.hasMoreTokens = childData.hasMoreTokens;\r\n              defaultData.tempPath = childData.tempPath;\r\n              defaultData.tempNavPath = childData.tempNavPath;\r\n              defaultData.parameters[childData.paramName] = childData.paramVal;\r\n\r\n              break;\r\n            }\r\n          } else {\r\n            for (var j = 0; j < defaultData.tokens.length; j++) {\r\n              if (child.id === defaultData.tokens[j]) {\r\n                var itemTokens = child.path.split('/');\r\n                // commented below line otherwise it continously loops for the case mentioned in SDHTML-5237\r\n                // defaultData.tempPath = defaultData.tempPath + '/' + child.path + '/';\r\n                defaultData.tempNavPath = defaultData.tempPath;\r\n                if (defaultData.tokens.length === itemTokens.length) {\r\n                  defaultData.hasMoreTokens = false;\r\n                  defaultData.cont = false;\r\n                  defaultData.navItem = angular.copy(child);\r\n                }\r\n                break;\r\n              }\r\n            }\r\n            defaultData.cont = false;\r\n          }\r\n        }\r\n        return defaultData;\r\n      }\r\n\r\n      function getParameterValue(child, childPath, childTokens) {\r\n        var paramVal;\r\n\r\n        if (child.id.indexOf(':') === 0) {\r\n          paramVal = childTokens[0];\r\n        } else {\r\n          paramVal = childTokens[1];\r\n        }\r\n\r\n        return paramVal;\r\n      }\r\n\r\n      function getParametersIfUndefined(parameters, params) {\r\n        if (parameters === null && angular.isDefined(params)) {\r\n          parameters = params;\r\n        }\r\n\r\n        return parameters;\r\n      }\r\n\r\n      function mergeParametersIfRequired(parameters, params) {\r\n        if (parameters === null && angular.isDefined(params)) {\r\n          parameters = params;\r\n        } else if (angular.isDefined(params)) {\r\n          $.extend(true, parameters, params);\r\n        }\r\n\r\n        return parameters;\r\n      }\r\n\r\n      function getNavItemCopyIfParams(navItem, parameters, resolvedPath) {\r\n        if (parameters && navItem) {\r\n          if (navItem instanceof provider.ViewPanel) {\r\n            navItem = navItem.navItem;\r\n          }\r\n          // if it is a parameterized URL, substitue the params in the navItem's path\r\n          navItem = angular.copy(navItem);\r\n          if (!navItem.unresolvedPath) {\r\n            navItem.unresolvedPath = navItem.path;\r\n          }\r\n          navItem.path = substituteParams(navItem.path, parameters);\r\n          if (navItem.path && navItem.path.indexOf('/undefined/') > -1 && resolvedPath) {\r\n            navItem = fisViewService.findNavItem(resolvedPath);\r\n            navItem.path = substituteParams(navItem.path, navItem.params);\r\n          }\r\n          navItem.label = $filter('interpolate')(navItem.label, parameters);\r\n          if (!resolvedPath) {\r\n            navItem.params = parameters;\r\n          }\r\n        }\r\n\r\n        return navItem;\r\n      }\r\n\r\n      function getPanelPath(navPath) {\r\n        var panelPath = null;\r\n\r\n        if (angular.isDefined(navPath)) {\r\n          panelPath = navPath;\r\n        } else {\r\n          panelPath = service.activeViewPanel().path;\r\n        }\r\n\r\n        return panelPath;\r\n      }\r\n\r\n      function forceSelectionOfLastPanel(force) {\r\n        if (hasNoSelectedPanelPathButTabs()) {\r\n          if (force === undefined || force) {\r\n            // TODO: is this needed? is it only used when closing a tab? could it be moved there?\r\n            selectedPanelPath = getLastTab().path;\r\n          } else {\r\n            // no opened view panel (tab) available to select and we don't force selection.\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n\r\n      function hasNoSelectedPanelPathButTabs() {\r\n        return !selectedPanelPath && tabs && tabs.length > 0;\r\n      }\r\n\r\n      function createParamsIfNotDefined(activeViewPanel) {\r\n        if (activeViewPanel !== null) {\r\n          if (angular.isUndefined(activeViewPanel.params) || activeViewPanel.params === null) {\r\n            activeViewPanel.params = {}; // we create a new object\r\n          } else if (angular.isUndefined(activeViewPanel.decodedParams) || activeViewPanel.decodedParams === null) {\r\n            activeViewPanel.decodedParams = addDecodedParams(activeViewPanel.params);\r\n          }\r\n        }\r\n      }\r\n\r\n      function isSecondaryNavItemReplacingPrimary(item, isNonCloseable) {\r\n        var primaryItem = getSecondaryNavParent(item.path);\r\n\r\n        if (primaryItem === item) {\r\n          return false;\r\n        }\r\n        if (primaryItem) {\r\n          var stillOpenPrimaryItem = service.viewPanels().filter(function (panel) {\r\n            return panel.path === primaryItem.path;\r\n          });\r\n          if (stillOpenPrimaryItem.length === 0) {\r\n            // The parent is not open in another tab, the closability depends on the parents closability\r\n            return service.isNonCloseable(primaryItem);\r\n          }\r\n          // The parent is open in another tab, thus we now may close this children tab\r\n          return false;\r\n        }\r\n\r\n        return isNonCloseable;\r\n      }\r\n\r\n      function getDefaultViewPanelIfNotDefined(viewPanel, navPath) {\r\n        if (!navPath) {\r\n          viewPanel = service.activeViewPanel();\r\n        }\r\n\r\n        return viewPanel;\r\n      }\r\n\r\n      function getDefaultNavPathIfNotDefined(navPath) {\r\n        if (!navPath) {\r\n          navPath = service.activeViewPanel().path;\r\n        }\r\n\r\n        return navPath;\r\n      }\r\n\r\n      function getDataFromNavPath(viewPanel, navPath) {\r\n        var tabIndexToRemove = null;\r\n\r\n        if (navPath) {\r\n          for (var i = 0; i < tabs.length; i++) {\r\n            if (tabs[i].path === navPath) {\r\n              tabIndexToRemove = i;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (tabIndexToRemove !== undefined) {\r\n            viewPanel = tabs[tabIndexToRemove];\r\n          }\r\n        }\r\n\r\n        return {\r\n          viewPanel: viewPanel,\r\n          tabIndexToRemove: tabIndexToRemove\r\n        };\r\n      }\r\n\r\n      function closeViewPanel(viewPanel, navPath, tabIndexToRemove) {\r\n        var tabToFocus = null;\r\n        var deferred = $q.defer();\r\n\r\n        if (viewPanel) {\r\n          viewPanel.$isClosing = true;\r\n\r\n          var promise = publishViewPanelCloseIntent(viewPanel, navPath);\r\n\r\n          promise\r\n            .then(function () {\r\n              // handle the case where another close call has been made before the current one ends\r\n              viewPanel = getDefaultViewPanelIfNotDefined(viewPanel, navPath);\r\n              navPath = getDefaultNavPathIfNotDefined(navPath);\r\n\r\n              tabToFocus = getTabFocusFromNavPath(navPath);\r\n              tabIndexToRemove = getTabIndexToRemove(tabIndexToRemove, navPath);\r\n\r\n              removeTabByIndex(viewPanel, navPath, tabIndexToRemove, tabToFocus);\r\n\r\n              deferred.resolve();\r\n            },\r\n            function () {\r\n              deferred.reject('Pos 3');\r\n            })\r\n            .finally(function () {\r\n              // Had to use $timeout to wrap the publish call. Promises seems to behave in synchronous manner when\r\n              // resolved with non-promise values (returned by $q.when in fisPubSubService.publish code). Therefore\r\n              // when fisViewPanelCloseIntent is published, promise.then and promise.always is called immediately called\r\n              // and the fis-views directive doesn't get a chance to react to viewPanel.$isClosing change and add\r\n              // a loading indicator.\r\n              $timeout(function () {\r\n                viewPanel.$isClosing = false;\r\n              }, 0);\r\n            });\r\n        } else {\r\n          // The navPath was not open or invalid, so resolve it right away - there's nothing to close.\r\n          deferred.resolve();\r\n        }\r\n\r\n        return deferred.promise;\r\n      }\r\n\r\n      function getTabFocusFromNavPath(navPath) {\r\n        var tabToFocus = null;\r\n\r\n        if (navPath !== selectedPanelPath) {\r\n          tabToFocus = selectedPanelPath;\r\n        }\r\n\r\n        return tabToFocus;\r\n      }\r\n\r\n      function getTabIndexToRemove(tabIndexToRemove, navPath) {\r\n        for (var i = 0; i < tabs.length; i++) {\r\n          if (tabs[i].path === navPath) {\r\n            tabIndexToRemove = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        return tabIndexToRemove;\r\n      }\r\n\r\n      function openDefaultEmptyView() {\r\n        $location.path('');\r\n        navigationUnderWay = true;\r\n      }\r\n\r\n      function openLastTab() {\r\n                    // TODO: open last activated from a stack\r\n        var params = getLastTab() ? getLastTab().params : null;\r\n        service.open(getLastTab().path, null, params);\r\n      }\r\n\r\n      function removeViewPanel(tabIndexToRemove) {\r\n        tabs.splice(tabIndexToRemove, 1);\r\n      }\r\n\r\n      function openViewAfterClose(tabToFocus) {\r\n        if (tabs.length === 0) {\r\n          openDefaultEmptyView();\r\n        } else if (tabs.length > 0 && tabToFocus === null) {\r\n          openLastTab();\r\n        }\r\n      }\r\n\r\n      function copyClosingPanel(viewPanel) {\r\n                    // create a copy of the closed view panel but without any functions\r\n                    // or properties starting with '$' as we do not want the subscriber to modify the\r\n                    // closed view panel\r\n        var viewPanelCopy = {};\r\n        Object.keys(viewPanel).forEach(function (key) {\r\n          if (!key.match(/^\\$/)) {\r\n            var value = viewPanel[key];\r\n            if (!angular.isFunction(value)) {\r\n              viewPanelCopy[key] = value;\r\n            }\r\n          }\r\n        });\r\n        return viewPanelCopy;\r\n      }\r\n\r\n      function removeTabByIndex(viewPanel, navPath, tabIndexToRemove, tabToFocus) {\r\n        if (tabIndexToRemove !== null) {\r\n          removeViewPanel(tabIndexToRemove);\r\n\r\n          openViewAfterClose(tabToFocus);\r\n\r\n          viewPanel = copyClosingPanel(viewPanel);\r\n\r\n          publishViewPanelClosed(viewPanel, navPath);\r\n        }\r\n      }\r\n\r\n      function publishViewPanelCloseIntent(viewPanel, navPath) {\r\n        return fisPubSubService.publish('fisViewPanelCloseIntent', {\r\n          path: navPath,\r\n          viewPanel: viewPanel\r\n        });\r\n      }\r\n\r\n      function publishViewPanelClosed(viewPanel, navPath) {\r\n        return fisPubSubService.publish('fisViewPanelClosed', {\r\n          path: navPath,\r\n          viewPanel: viewPanel\r\n        });\r\n      }\r\n\r\n      /**\r\n       * @name open\r\n       * @methodOf fisViewPanelService\r\n       * @param {string} navPath Navigation Path to open. Undefined or empty string will load the default view.\r\n       * @param {Object} [event] Optional triggering event (For example, click), can be 'true' or 'false' :\r\n       *         True means we want to force opening in a new tab (and bypass the strategy) and false means we force opening in the same tab.\r\n       * @param {Object} [params] Optional Additional parameters\r\n       * @description Opens a ViewPanel using the configured strategy (or framework defaults 'mdi' strategy if none is configured.)\r\n       */\r\n      service.open = function (_navPath, event, params) {\r\n        // Hash must be removed when moving between pages (no event is fired when pages are loaded from a bookmark,\r\n        // an event is defined when navigating the menu or moving between tabs.\r\n        if (angular.isDefined(event)) {\r\n          resetLocationHash();\r\n        }\r\n        var relativeData = null;\r\n        var parameters = null;\r\n        var navPath = getDefaultIfNoPath(_navPath);\r\n        var normalized = normalizeOpenArguments(arguments, event, params);\r\n        var localEvent = normalized.localEvent;\r\n        var localParams = normalized.localParams;\r\n        var previousViewPanel = service.activeViewPanel(false);\r\n        var presentData = checkIfTabIsAlreadyPresent(navPath, event, params);\r\n        var navItem = presentData.navItem;\r\n        var tabFound = presentData.tabFound;\r\n        var navItemExist = false;\r\n        navigationUnderWay = true;\r\n        var resolvedPath;\r\n\r\n        navItem = tryOpenViewBasedOnDefaultParams(navItem, navPath, tabFound, event, params, localParams);\r\n\r\n        navItem = findNavItemIfNotDefined(navItem, navPath);\r\n\r\n        if ((DEFAULT_OPEN_STRAT === provider.getViewOpeningStrategy()) && angular.isDefined(event)) {\r\n          if (event && event.shiftKey && event.shiftKey === true) {\r\n            if (angular.isDefined(navItem)) {\r\n                                /* The original code, which only checks whether the \"last\" item in the array matches in the path property:\r\n                                _.each(tabs,function(tab){\r\n                                    navItemExist = tab.path === navItem.path;\r\n                                });\r\n                                 During the removal of underscore, the code has been adjusted\r\n                                 */\r\n              navItemExist = tabs.some(function (tab) {\r\n                return tab.path === navItem.path;\r\n              });\r\n              if (navItemExist === false) {\r\n                tabs.push(new provider.ViewPanel(navItem, $filter));\r\n                return;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n                    // if navItem not found, check for possibility of the navPath having relative url.\r\n        if (hasNoItemButTabs(navItem)) {\r\n          relativeData = extractRelativeUrlData(navItem, navPath);\r\n\r\n          parameters = relativeData.params;\r\n          navItem = relativeData.navItem;\r\n          resolvedPath = relativeData.resolvedPath;\r\n        }\r\n\r\n        parameters = getParametersIfUndefined(parameters, params);\r\n\r\n        navItem = getNavItemCopyIfParams(navItem, parameters, resolvedPath);\r\n\r\n        if (navItem !== undefined && navItem !== null && navItem.parentTitle !== undefined) {\r\n          navItem.isStatic = true;\r\n        }\r\n\r\n        validateNavItem(navItem, navPath);\r\n\r\n        if (angular.isDefined(navItem) && angular.isUndefined(navItem.partial)) {\r\n          if (fisConfig.widgets && fisConfig.widgets.fisTabsBar) {\r\n            var openFirstChildIfEmpty = fisConfig.widgets.fisTabsBar.openFirstChildIfEmpty;\r\n\r\n            if (angular.isUndefined(openFirstChildIfEmpty) || openFirstChildIfEmpty) {\r\n              var firstChildWithPartial = findFirstChildWithPartial(navItem);\r\n\r\n              if (firstChildWithPartial !== null) {\r\n                $timeout(function () {\r\n                  service.open(firstChildWithPartial.path, event, params);\r\n                  fisPubSubService.publish('fisFirstSecondaryItemOpened');\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!getSecondaryNavParent(navPath)) {\r\n          callRelevantStrategy(navItem, localEvent, localParams);\r\n        }\r\n\r\n        // Passing the event object through here allows listeners of this to determine the origin of the open\r\n        // e.g. was it a mega menu link or a tabbar link?\r\n        publishViewPanelChange(navItem, previousViewPanel, event);\r\n\r\n        if (navItem !== undefined && (navItem.closeable === true || navItem.closeable === 'true' || navItem.closeable === undefined)) {\r\n                        // broadcast on the rootscope, so other external modules can listen for this\r\n          $rootScope.$broadcast('fisTabOpened', { path: _navPath });\r\n        }\r\n\r\n        $timeout(function () {\r\n          navigationUnderWay = false;\r\n        });\r\n      };\r\n\r\n      function findFirstChildWithPartial(navItem) {\r\n        if (angular.isDefined(navItem.children) && navItem.children.length > 0) {\r\n          if (angular.isUndefined(navItem.children[0].partial)) {\r\n            return findFirstChildWithPartial(navItem.children[0]);\r\n          }\r\n          return navItem.children[0];\r\n        }\r\n        return null;\r\n      }\r\n\r\n      /**\r\n       * @name viewPanels\r\n       * @methodOf fisViewPanelService\r\n       * @returns {Array} Open ViewPanels\r\n       * @description Returns array of open view panels\r\n       */\r\n      service.viewPanels = function () {\r\n        return tabs;\r\n      };\r\n\r\n      /**\r\n       * @name viewPanelByPath\r\n       * @methodOf fisViewPanelService\r\n       * @param {String} Navigation Path of the open View Panel\r\n       * @returns {Object} View Panel for the navigation path passed in\r\n       * @description Returns the view panel corresponding to the given nav path\r\n       */\r\n      service.viewPanelByPath = function (navPath) {\r\n        var viewPanel;\r\n\r\n        for (var i = 0; i < tabs.length; i++) {\r\n          if (tabs[i].path === navPath) {\r\n            viewPanel = tabs[i];\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        return viewPanel;\r\n      };\r\n\r\n      /**\r\n       * @name reloadActiveViewPanel\r\n       * @methodOf fisViewPanelService\r\n       * @param {String} Navigation Path of the panel that needs to be reloaded - optional, if not provided, then the current active panel is used\r\n       * @description Reloads the current active panel\r\n       */\r\n      service.reloadActiveViewPanel = function (navPath, params) {\r\n        var panelPath = getPanelPath(navPath);\r\n        var parameters = null;\r\n\r\n        for (var j = 0; j < tabs.length; j++) {\r\n          if (tabs[j].path === panelPath) {\r\n            var navItem = fisViewService.findNavItem(panelPath);\r\n            // handling parameterized navigation item with resolved path\r\n            if (!navItem) {\r\n              var relativeData = extractRelativeUrlData(navItem, panelPath);\r\n              navItem = relativeData.navItem;\r\n              parameters = relativeData.params;\r\n            } else if (angular.isUndefined(params) || params.length === 0) {\r\n                // if params are undefined, try to use params from the active view panel in this case; since the view to be opened is a relative view.\r\n              parameters = service.activeViewPanel().params;\r\n            }\r\n\r\n            parameters = mergeParametersIfRequired(parameters, params);\r\n            navItem = getNavItemCopyIfParams(navItem, parameters);\r\n            // Replace ViewPanel - ng-repeat will detect change and destroy DOM (div and scope)\r\n            tabs[j] = new provider.ViewPanel(navItem, $filter);\r\n\r\n            service.open(panelPath, null, parameters);\r\n\r\n            break;\r\n          }\r\n        }\r\n      };\r\n\r\n                /**\r\n                 * @name activeViewPanel\r\n                 * @methodOf fisViewPanelService\r\n                 * @returns {Object} Active View Panel\r\n                 * @description Returns the active View Panel. This will always return an activeViewPanel\r\n                 *      if there are opened view panels because it will select one.\r\n                 * @param force undefined or a truthy value will force selection of the last tab.\r\n                 */\r\n      service.activeViewPanel = function (force) {\r\n        var activeViewPanel = null;\r\n\r\n        forceSelectionOfLastPanel(force);\r\n\r\n        for (var i = 0; i < tabs.length; i++) {\r\n          if (tabs[i].path === selectedPanelPath) {\r\n            activeViewPanel = tabs[i];\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        createParamsIfNotDefined(activeViewPanel);\r\n\r\n        return activeViewPanel;\r\n      };\r\n\r\n      /**\r\n       * @name activeViewPanelIndex\r\n       * @methodOf fisViewPanelService\r\n       * @returns {int} Active View Panel index\r\n       * @description Returns the active View Panel index\r\n       */\r\n      service.activeViewPanelIndex = function () {\r\n        for (var i = 0; i < tabs.length; i++) {\r\n          if (tabs[i].path === selectedPanelPath) {\r\n            return i;\r\n          }\r\n        }\r\n\r\n        return -1;\r\n      };\r\n\r\n      /**\r\n       * @name viewPanelParams\r\n       * @methodOf fisViewPanelService\r\n       * @returns {Object} params for active view panel\r\n       * @description Returns the params for active View Panel\r\n       */\r\n      service.viewPanelParams = function () {\r\n        var params = {};\r\n\r\n        if (service.activeViewPanel()) {\r\n          params = service.activeViewPanel().params;\r\n        }\r\n\r\n        return params;\r\n      };\r\n\r\n      /**\r\n       * @name selectedViewPanelPath\r\n       * @methodOf fisViewPanelService\r\n       * @returns {String} Active View Panel path\r\n       * @description Returns the active View Panel path\r\n       */\r\n      service.selectedViewPanelPath = function (path) {\r\n        if (arguments.length === 0) {\r\n          return selectedPanelPath;\r\n        }\r\n        service.selectedPanelPath = path;\r\n        service.open(path);\r\n      };\r\n\r\n      /**\r\n       * @name resetSelectedViewPanelPath\r\n       * @methodOf fisViewPanelService\r\n       * @description Removes the selected panel path reference\r\n       */\r\n      service.resetSelectedViewPanelPath = function () {\r\n        selectedPanelPath = undefined;\r\n      };\r\n\r\n      /**\r\n       * @name isNonCloseable\r\n       * @methodOf fisViewPanelService\r\n       * @param {Object} item View Panel\r\n       * @returns {boolean} true if the View Panel is non-closeable else false\r\n       * @description Returns if a View Panel is closeable or not. View Panels corresponding to top level\r\n       * Navigation Items that have partials attached to them are considered non-closeable.\r\n       */\r\n      service.isNonCloseable = function (item) {\r\n        var isNonCloseable = false;\r\n\r\n        if (isNavItemDefined(item)) {\r\n          if (angular.isDefined(item.closeable)) {\r\n            isNonCloseable = !item.closeable;\r\n          }\r\n\r\n          var parent = getItemParentRefIfValid(item);\r\n\r\n          if (parent !== item) {\r\n            isNonCloseable = isSecondaryNavItemReplacingPrimary(item, isNonCloseable);\r\n          }\r\n\r\n          if (isNavItemDefined(item) && hasDropdownSecondaryMenu(item)) {\r\n            isNonCloseable = true;\r\n          }\r\n        }\r\n\r\n        return isNonCloseable;\r\n      };\r\n\r\n      /**\r\n       * @name close\r\n       * @methodOf fisViewPanelService\r\n       * @param {String} _navPath Path corresponding to a View Panel\r\n       * @description Closes a View Panel associated to the nav Path\r\n       */\r\n      service.close = function (_navPath) {\r\n        var viewPanel = getDefaultViewPanelIfNotDefined(null, _navPath);\r\n        var navPath = getDefaultNavPathIfNotDefined(_navPath);\r\n        var navPathData = getDataFromNavPath(viewPanel, navPath);\r\n        var tabIndexToRemove = navPathData.tabIndexToRemove;\r\n\r\n        viewPanel = navPathData.viewPanel;\r\n\r\n        // broadcast on the rootscope, so other external modules can listen for this\r\n        $rootScope.$broadcast('fisTabClosed', { path: _navPath });\r\n\r\n        return closeViewPanel(viewPanel, navPath, tabIndexToRemove);\r\n      };\r\n\r\n      function findScopeForEvaluation(context, element) {\r\n        // check if the context is a scope (that's the case when the service function is invoked from an angular expression)\r\n        if (context.$eval) {\r\n          // it quacks like one\r\n          return context;\r\n        }\r\n\r\n        // no luck try with the element, if present\r\n        if (element && element.scope) {\r\n          return element.scope();\r\n        }\r\n\r\n        throw new Error('Cannot find a scope to evaluate expression in.');\r\n      }\r\n\r\n      function findElementFromEvent(event) {\r\n        return angular.isObject(event) &&\r\n                        angular.isDefined(event.target) &&\r\n                        angular.element(event.target);\r\n      }\r\n\r\n      function processActionView(context, viewDef, event, params) {\r\n        var locals;\r\n        var ret;\r\n        var destroyScope = false;\r\n        var element = findElementFromEvent(event);\r\n        var evalScope = findScopeForEvaluation(context, element);\r\n\r\n        if (angular.isObject(params)) {\r\n          locals = angular.copy(params);\r\n        } else {\r\n          locals = {};\r\n        }\r\n\r\n        locals.view = viewDef;\r\n        locals.$scope = evalScope;\r\n\r\n        if (angular.isString(viewDef.actionController)) {\r\n          // create a new child scope on which to attach the controller\r\n          locals.$scope = evalScope = evalScope.$new();\r\n          locals.$element = element;\r\n          $controller(viewDef.actionController, locals);\r\n          destroyScope = true;\r\n        }\r\n\r\n        // elements can't be referenced in angualr expressions\r\n        delete locals.$element;\r\n        // event put in locals only for the expression evaluation\r\n        locals.$event = event;\r\n\r\n        ret = evalScope.$eval(viewDef.action, locals);\r\n\r\n        if (destroyScope) {\r\n          evalScope.$destroy();\r\n        }\r\n\r\n        return ret;\r\n      }\r\n\r\n      service.openView = function (viewDef, event, params) {\r\n        var context = this;\r\n\r\n        if (viewDef.action) {\r\n          return processActionView(context, viewDef, event, params);\r\n        } else if (viewDef.path) {\r\n          return service.open.call(context, viewDef.path, event, params);\r\n        } else if (angular.isString(viewDef)) {\r\n          return service.open.call(context, viewDef, event, params);\r\n        }\r\n\r\n        throw new Error('Cannot open provided view definition object');\r\n      };\r\n\r\n      /* service.setNavigationComplete = function() {\r\n          $timeout (function () {\r\n              navigationUnderWay = false;\r\n          });\r\n      };*/\r\n\r\n      var activePanel;\r\n\r\n      fisPubSubService.subscribe('fisBeforeNavItemAdd', function () {\r\n        activePanel = service.activeViewPanel();\r\n      });\r\n\r\n      fisPubSubService.subscribe('fisAfterNavItemAdd', function (params) {\r\n        if (params.rootNav === 'main' && params.itemToAdd.partial) {\r\n          tabs.push(new provider.ViewPanel(params.itemToAdd, $filter));\r\n        }\r\n        if (params.openItemAfterAdd) {\r\n          service.open(params.itemToAdd.path, null, params.openParams);\r\n        } else {\r\n          service.open(activePanel.path, null, params.openParams);\r\n        }\r\n        fisPubSubService.publish('fisAfterNavItemAdded');\r\n      });\r\n\r\n      fisPubSubService.subscribe('fisBeforeNavItemRemove', function () {\r\n        activePanel = service.activeViewPanel();\r\n      });\r\n\r\n      fisPubSubService.subscribe('fisAfterNavItemRemove', function (params) {\r\n        var tabToClose = null;\r\n        var secondaryNavParent;\r\n\r\n        for (var i = 0; i < tabs.length; i++) {\r\n          if (tabs[i].id === params.itemToRemove.id) {\r\n            tabToClose = tabs[i];\r\n            break;\r\n          }\r\n        }\r\n        if (!params.openParentNode && tabToClose) {\r\n          service.close(tabToClose.path);\r\n        }\r\n\r\n        // see if the item to be removed is part of the currently open secondary menu bar\r\n        // if it is, the secondary menu bar should refresh irrespective of the openParentNode param value\r\n        if (params.itemToRemove.id !== service.activeViewPanel().id &&\r\n                        service.activeViewPanel() && (service.activeViewPanel().unresolvedPath || service.activeViewPanel().path)) {\r\n          var activePanelPath = service.activeViewPanel().unresolvedPath ? service.activeViewPanel().unresolvedPath : service.activeViewPanel().path;\r\n          secondaryNavParent = getSecondaryNavParent(params.itemToRemove.path);\r\n          var secondaryNavParentForActiveTab = getSecondaryNavParent(activePanelPath);\r\n          if (secondaryNavParent && secondaryNavParentForActiveTab && secondaryNavParent.path === secondaryNavParentForActiveTab.path) {\r\n            if (tabToClose) {\r\n              service.close(tabToClose.path);\r\n            }\r\n            service.open(service.activeViewPanel().path, null, params.openParams);\r\n          }\r\n        }\r\n\r\n        if (params.openParentNode && params.parentItem && params.parentItem.partial) {\r\n          service.open(params.parentItem.path, null, params.openParams);\r\n        } else if (params.openParentNode && params.parentItem && !params.parentItem.partial) {\r\n          secondaryNavParent = getSecondaryNavParent(params.itemToRemove.path);\r\n          if (secondaryNavParent) {\r\n            service.open(secondaryNavParent.path, null, params.openParams);\r\n          } else if (tabToClose) {\r\n            service.close(tabToClose.path);\r\n          }\r\n        }\r\n\r\n        fisPubSubService.publish('fisAfterNavItemRemoved');\r\n      });\r\n\r\n      init();\r\n\r\n      return service;\r\n    }\r\n  ];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./views/view-panel-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  'use strict';\n\n  var self = this;\n  // filters allow modifying the incoming nav structure before it gets\n  // processed. It could be used to define the nav structure on the client\n  // instead of on the server.\n  // filter signature: function( items, params )\n  // item: array of root nav items\n  // params: params sent to navigation.refresh method.\n  var filters = [];\n  self.addFilter = function (filter) {\n    return filters.push(filter);\n  };\n\n  self.removeFilter = function (idx) {\n    delete filters[idx];\n  };\n\n  // set to false to prevent service from invoking the navigation rest endpoint\n  self.remote = true;\n\n  var staticViews = null;\n  self.setViews = function (views) {\n    staticViews = views;\n  };\n\n  // the default RESTful resource endpoint\n  var defaultEndpoint = 'api/navigation.json';\n  var endpoint = null;\n  self.endpoint = function (ep) {\n    if (ep) {\n      endpoint = ep;\n    }\n    return endpoint;\n  };\n\n  // reference to angular's $routeProvider\n  self.$routeProvider = null;\n\n  self.$get = ['$templateCache', '$resource', '$route', '$rootScope', '$log', 'fisConfig', '$q', 'fisPubSubService', 'fisUtilService', '$injector', 'fisNavigationService', 'fisI18nService', function ($templateCache, $resource, $route, $rootScope, $log, fisConfig, $q, fisPubSubService, fisUtilService, $injector, fisNavigationService, fisI18nService) {\n    var nav = null;\n    var path2Item = {};\n    var id2Item = {};\n    var serv = {};\n\n    /**\r\n     * @name applyFilter\r\n     * @description Utility function to filter navigation model.\r\n     * @param model model to apply filters to\r\n     * @param params filter parameters\r\n     * @return\r\n     * @methodOf fisViewService\r\n     * @private\r\n     */\n    function applyFilters(model, params) {\n      for (var i = 0; i < filters.length; i++) {\n        filters[i](model, params);\n      }\n    }\n\n    /**\r\n     * @name traverse\r\n     * @description Utility function to traverse and process navigation\r\n     * structure\r\n     * @param items structure to traverse\r\n     * @param cb calback to apply during traversal\r\n     * @param navPath tracks position in structure.\r\n     * @return\r\n     * @methodOf fisViewService\r\n     * @private\r\n     */\n    function traverse(items, cb, navPath) {\n      var path = navPath || [];\n      angular.forEach(items, function (itm /* , key*/) {\n        var ret = cb.apply(this, [itm, path]);\n        if (ret === false) {\n          return false;\n        }\n        if (itm.children) {\n          path.push(itm);\n          traverse(itm.children, cb, path);\n          path.pop();\n        }\n        if (itm.quickLinks) {\n          angular.forEach(itm.quickLinks, function (quickLinks) {\n            path.push(itm);\n            path.push(quickLinks); // include quicklinks in path\n            traverse(quickLinks.children, cb, path);\n            path.pop();\n            path.pop();\n          });\n        }\n      }, items);\n    }\n\n    /**\r\n     * @name normalizeLabel\r\n     * @description Normalises text to acceptable characters\r\n     * @param label text to normalise\r\n     * @return normalized text\r\n     * @methodOf fisViewService\r\n     * @private\r\n     */\n    function normalizeLabel(label) {\n      return label.toLowerCase().replace(' ', '-');\n    }\n\n    function updatePath2Item(itm, path) {\n      if (!itm.id) {\n        itm.id = normalizeLabel(itm.label);\n      }\n      if (!itm.path) {\n        var a = [];\n        for (var i = 0; i < path.length; i++) {\n          a.push(path[i].id);\n        }\n        a.push(itm.id);\n        itm.path = '/' + a.join('/');\n        path2Item[itm.path] = itm;\n      }\n      // In case, translation data is loading asynchronously, updating the label and title in path2Item[] array\n      if (path2Item[itm.path] !== undefined) {\n        path2Item[itm.path].label = itm.label;\n        path2Item[itm.path].title = itm.title;\n      }\n    }\n\n    function updateId2Item(itm) {\n      if (itm.id.indexOf('/') > -1) {\n        var isAlreadyIncluded = Object.keys(id2Item).some(function (key) {\n          return id2Item[key] === itm;\n        });\n        if (!isAlreadyIncluded) {\n          id2Item[itm.id] = itm;\n        }\n      }\n    }\n\n    /**\r\n     * @name normalizeModel\r\n     * @description Normalizes text to acceptable characters for model\r\n     * @param model structure with labels to normalize\r\n     * @methodOf fisViewService\r\n     * @private\r\n     */\n    function normalizeModel(model) {\n      angular.forEach(model, function (navItems /* , key*/) {\n        traverse(navItems, function (itm, path) {\n          updatePath2Item(itm, path);\n          updateId2Item(itm);\n\n          // i18n support of navigation item's label and title\n          if (itm.label && itm.label.indexOf('i18n(') === 0) {\n            itm.label = itm.label.substring(itm.label.indexOf('(') + 2, itm.label.indexOf(')') - 1);\n            // In case, translations are available for the selected language then we can directly translate label and titles\n            if (fisI18nService.isTranslationReady()) {\n              itm.label = fisI18nService.translate(itm.label);\n              updatePath2Item(itm, path);\n              updateId2Item(itm);\n            } else {\n              // In case, translations are loading asynchronously, we need to use promise api to update\n              // labels and titles on receiving data for translation\n              fisI18nService.translateAsync(itm.label).then(function (resolvedLabel) {\n                itm.label = resolvedLabel;\n                updatePath2Item(itm, path);\n                updateId2Item(itm);\n              });\n            }\n          }\n          if (itm.title && itm.title.indexOf('i18n(') === 0) {\n            itm.title = itm.title.substring(itm.title.indexOf('(') + 2, itm.title.indexOf(')') - 1);\n            // In case, translations are available for the selected language then we can directly translate label and titles\n            if (fisI18nService.isTranslationReady()) {\n              itm.title = fisI18nService.translate(itm.title);\n              updatePath2Item(itm, path);\n              updateId2Item(itm);\n            } else {\n              // In case, translations are loading asynchronously, we need to use promise api to update\n              // labels and titles on receiving data for translation\n              fisI18nService.translateAsync(itm.title).then(function (resolvedTitle) {\n                itm.title = resolvedTitle;\n                updatePath2Item(itm, path);\n                updateId2Item(itm);\n              });\n            }\n          }\n          // support definitions that only contain a template\n          if (itm.template && !itm.partial) {\n            itm.partial = itm.path + '.tpl.html';\n          }\n        });\n      });\n    }\n\n    /**\r\n     * @name createRoutes\r\n     * @description Creates angular routes from navigation structure\r\n     * @param model navigation structure\r\n     * @methodOf fisViewService\r\n     * @private\r\n     */\n    function createRoutes(model) {\n      angular.forEach(model, function (navItems /* , key*/) {\n        traverse(navItems, function (itm /* , path*/) {\n          if (itm.partial) {\n            var opts = {\n              templateUrl: fisUtilService.appendCacheQueryParameter(itm.partial)\n            };\n\n            if (itm.template) {\n              // prefill $templateCache with provided template\n              $templateCache.put(itm.partial, itm.template);\n            }\n\n            if (itm.controller) {\n              // TODO: Controllers need to be loaded on demand\n              opts.controller = itm.controller;\n            }\n            opts.resolve = createResolveProperty(itm);\n            self.$routeProvider.when(itm.path, opts);\n          } else if (!itm.children && !itm.action) {\n            $log.warn('Leaf nav item without a partial: ' + itm.label);\n          }\n        });\n      });\n    }\n\n    function createResolveProperty(itm) {\n      var ret = {};\n\n      // find the constructor in the registry\n      var ctrl = itm.controller && fis.__controllers[itm.controller];\n\n      angular.forEach(ctrl, function (val, key) {\n        if (key.indexOf('$') !== 0) {\n          ret[key] = createResolveValue(val, itm.args);\n        }\n      });\n\n      if (itm.args) {\n        ret.args = function () {\n          return itm.args;\n        };\n      }\n\n      return ret;\n    }\n\n    function createResolveValue(toResolve, args) {\n      if (angular.isFunction(toResolve) || angular.isArray(toResolve) && angular.isFunction(toResolve[toResolve.length - 1])) {\n        return function resolveFunction() {\n          return $injector.invoke(toResolve, this, { args: args });\n        };\n      }\n      return toResolve; // a simple object/array/native we want to pass\n    }\n\n    /**\r\n     * @name processMenu\r\n     * @description Process navigation structure for use in shell\r\n     * @param model navigation structure\r\n     * @param params filter parameters\r\n     * @methodOf fisViewService\r\n     * @private\r\n     */\n    function processMenu(model, params) {\n      // TODO: execute all into a single traversal for speed.\n      // add the default workspace\n      applyFilters(model, params);\n      normalizeModel(model);\n      createRoutes(model);\n\n      return model;\n    }\n\n    /**\r\n     * @name fetchNavigation\r\n     * @description Fetches navigation structure from backend and processes it\r\n     * @param endpoint Serverside RESTful endpoint that serves navigation structure\r\n     * @param params filter parameters\r\n     * @methodOf fisViewService\r\n     * @private\r\n     */\n    function fetchNavigation(endpoint, params) {\n      var deferred = $q.defer();\n      $resource(endpoint).get(params, function (results) {\n        var finalResult = {};\n        for (var key in results) {\n          if (results.hasOwnProperty(key)) {\n            var value = results[key];\n            if (key.indexOf('$') !== 0) {\n              finalResult[key] = value;\n            }\n          }\n        }\n        resolveViews(deferred, finalResult, params);\n      }, function () {\n        deferred.reject('Could not load navigation from ' + endpoint);\n      });\n      return deferred.promise;\n    }\n\n    function resolveViews(deferred, views, params) {\n      // assign the processed views to the internal nav var\n      nav = processMenu(views, params);\n\n      // resolve the deferred object to the processed views\n      deferred.resolve(nav);\n\n      // publish it on the 'shell.navReady' topic so that nav widgets can render the views\n      fisPubSubService.publish('shell.navReady', nav);\n      fisNavigationService.setNavigation(nav);\n      return deferred.promise;\n    }\n\n    /**\r\n     * @name load\r\n     * @description Loads and initializes navigation\r\n     * @param params filter parameters\r\n     * @param model existing navigation structure(optional)\r\n     * @methodOf fisViewService\r\n     */\n    serv.load = function (params, model) {\n      // TODO: use fisConfig to get default params and extend with received params\n      params = params || {};\n      path2Item = params.path2Item || {};\n\n      fisPubSubService.publish('shell.navLoading', true);\n      if (model || staticViews) {\n        // views provided as an argument or at config time; make it the new nav structure\n        return resolveViews($q.defer(), angular.copy(model || staticViews), params);\n      } else if (self.endpoint()) {\n        // an endpoint was provided at config time, it takes precedence over config service\n        return fetchNavigation(self.endpoint(), params);\n      }\n      return fetchNavigation(fisConfig.endpoints && fisConfig.endpoints.navigation || defaultEndpoint, params);\n    };\n\n    serv.loadOnNavChange = function (params, model) {\n      // TODO: use fisConfig to get default params and extend with received params\n      params = params || {};\n      path2Item = params.path2Item || {};\n\n      var deferred = $q.defer();\n\n      // assign the processed views to the internal nav var\n      nav = processMenu(angular.copy(model), params);\n\n      // resolve the deferred object to the processed views\n      deferred.resolve(nav);\n\n      fisPubSubService.publish('shell.navChanged', nav);\n\n      fisNavigationService.setNavigation(nav);\n      return deferred.promise;\n    };\n\n    /**\r\n     * @name findNavItem\r\n     * @description Retrieves item at specified path.\r\n     * @param navPath Navigation Path for required item\r\n     * @param fromPath Path to search from if navPath is relative (doesn't start with '/').\r\n     *          If not provided and navPath is relative, the function will return undefined.\r\n     * @methodOf fisViewService\r\n     */\n    /* serv.findNavItem = function (navPath, fromPath) {\r\n     console.log('Processing for navPath...', navPath);\r\n     console.log('fromPath...', fromPath);\r\n     fromPath = fromPath || '';\r\n     if( navPath && navPath.indexOf('/') !== 0 ) {\r\n     // navPath is relative, search from fromPath\r\n     var item, idx = fromPath.lastIndexOf('/') + 1;\r\n     console.log('index...', idx);\r\n     console.log('path2Item...', path2Item);\r\n     while(idx > 1) {\r\n     console.log('path...', fromPath.substring(0, idx) + navPath);\r\n     item = path2Item[fromPath.substring(0, idx) + navPath];\r\n     console.log('item...', item);\r\n     if( item ) {\r\n     return item;\r\n     }\r\n     idx = fromPath.lastIndexOf('/', idx - 2) + 1;\r\n     console.log('index after...', idx);\r\n     }\r\n     }\r\n     return path2Item[navPath];\r\n     };*/\n\n    serv.findNavItem = function (navPath, fromPath) {\n      var item = null;\n      fromPath = fromPath || '';\n\n      if (navPath && navPath.indexOf('/') !== 0) {\n        // navPath is relative, search from fromPath\n        // var idx = fromPath.lastIndexOf('/') + 1;\n        // console.log('index...', idx);\n        // console.log('path2Item...', path2Item);\n        // console.log('path...', fromPath.substring(0, idx) + navPath);\n        item = path2Item[fromPath + '/' + navPath];\n        // console.log('item...', item);\n        if (item) {\n          return item;\n        }\n        // item not found relative to fromPath.\n        item = serv.getItemFromPath2Item(navPath);\n        // item still not found. Try to find if the path is just id. check with ids that contain '/' character\n        if (!item) {\n          item = getItemFromId2Item(navPath);\n        }\n        return item;\n      }\n\n      item = path2Item[navPath];\n\n      return item;\n    };\n\n    function getItemFromId2Item(navPath) {\n      var item = null;\n\n      for (var id in id2Item) {\n        // eslint-disable-line\n        var idArr = id.split('/');\n        var navPathArr = navPath.split('/');\n        if (idArr.length === navPathArr.length) {\n          var paramArr = matchTokens(idArr, navPathArr);\n          if (paramArr) {\n            item = id2Item[id];\n            item.params = paramArr;\n            break;\n          }\n        }\n      }\n      return item;\n    }\n\n    function matchTokens(idArr, navPathArr) {\n      var paramArr = {};\n\n      for (var i = 0; i < idArr.length; i++) {\n        if (idArr[i] !== navPathArr[i] && idArr[i].indexOf(':') !== 0) {\n          paramArr = null;\n          return false;\n        } else if (idArr[i] !== navPathArr[i] && idArr[i].indexOf(':') === 0) {\n          var paramName = idArr[i].substring(1);\n          var paramValue = navPathArr[i];\n          paramArr[paramName] = paramValue;\n        }\n      }\n\n      return paramArr;\n    }\n\n    // returns the last part of the navItem, excluding those those which include a ':', in which case the second last part will be returned\n    function getNavPathEnd(navItem) {\n      var parts = navItem.split('/');\n      var size = parts.length;\n\n      if (size < 2) {\n        return navItem;\n      }\n\n      if (parts[size - 1].indexOf(':') === -1) {\n        return parts[size - 1];\n      } else if (parts[size - 2].indexOf(':') === -1) {\n        return parts[size - 2];\n      }\n\n      // more than one parameters in id\n      for (var i = size - 1; i > 0; i--) {\n        if (parts[i].indexOf(':') === -1) {\n          return parts[i];\n        }\n      }\n    }\n\n    serv.getItemFromPath2Item = function (navPath) {\n      var navItem = null;\n\n      for (var path in path2Item) {\n        if (path2Item.hasOwnProperty(path)) {\n          var item = path2Item[path];\n\n          var pathTokenLength = path.split('/').length;\n          var navPathTokenLength = navPath.split('/').length;\n\n          if ((pathTokenLength > 2 && navPathTokenLength > 2 && pathTokenLength === navPathTokenLength || pathTokenLength <= 2 || navPathTokenLength <= 2) && getNavPathEnd(path) === getNavPathEnd(navPath)) {\n            navItem = item;\n            return navItem;\n          }\n        }\n      }\n      return navItem;\n    };\n\n    serv.addDynamicItem = function (item, opts) {\n      path2Item[item.path] = item;\n      self.$routeProvider.when(item.path, opts);\n    };\n\n    /**\r\n     * @name addItemToMenu\r\n     * @description Add a node to existing navigation structure dynamically\r\n     * @param parentItemId id or path of the node to which the new node needs to be appended\r\n     * @param itemToAdd new node to be added\r\n     * @methodOf fisViewService\r\n     */\n    serv.addNavItem = function (parentItemId, itemToAdd, openItemAfterAdd, openParams, addAfterItemId) {\n      if (itemToAdd && itemToAdd.id) {\n        var deferred = $q.defer();\n        openItemAfterAdd = openItemAfterAdd === 'true' || openItemAfterAdd === true;\n        openParams = jQuery.isEmptyObject(openParams) ? undefined : openParams;\n        fisPubSubService.publish('fisBeforeNavItemAdd', true);\n        var parentItem = serv.findNavItem(parentItemId);\n        if (parentItem) {\n          itemToAdd.path = parentItem.path + '/' + itemToAdd.id;\n          path2Item[itemToAdd.path] = itemToAdd;\n          if (!parentItem.children) {\n            parentItem.children = [];\n          }\n\n          if (isItemAlreadyPresentInParent(parentItem.children, itemToAdd)) {\n            deferred.reject();\n          } else {\n            // add item after the specified sibling - if this item is not found, the new item will be added at the end\n            if (addAfterItemId) {\n              var siblingItem = serv.findNavItem(addAfterItemId);\n              if (siblingItem) {\n                var siblingIndex = -1;\n                for (var i = 0; i < parentItem.children.length; i++) {\n                  if (parentItem.children[i].path === siblingItem.path) {\n                    siblingIndex = i;\n                    break;\n                  }\n                }\n                if (siblingIndex > -1) {\n                  parentItem.children.splice(siblingIndex + 1, 0, itemToAdd);\n                }\n              }\n            } else {\n              parentItem.children.push(itemToAdd);\n            }\n            updateModel(parentItem, function (navItems, matchedItem) {\n              matchedItem.children = parentItem.children;\n            });\n\n            serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\n              fisPubSubService.publish('fisAfterNavItemAdd', { nav: nav, itemToAdd: itemToAdd, parentItem: parentItem, openItemAfterAdd: openItemAfterAdd, openParams: openParams });\n              deferred.resolve(nav);\n            });\n          }\n        } else if (!parentItem && nav[parentItemId]) {\n          // if item needs to be added directly at root level (for ex. directly under main, footer etc.)\n          itemToAdd.path = '/' + itemToAdd.id;\n          path2Item[itemToAdd.path] = itemToAdd;\n          if (isItemAlreadyPresentInParent(nav[parentItemId], itemToAdd)) {\n            deferred.reject();\n          } else {\n            nav[parentItemId].push(itemToAdd);\n            serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\n              var rootNav = parentItemId;\n              fisPubSubService.publish('fisAfterNavItemAdd', { nav: nav, itemToAdd: itemToAdd, parentItem: parentItem, openItemAfterAdd: openItemAfterAdd, openParams: openParams, rootNav: rootNav });\n              deferred.resolve(nav);\n            });\n          }\n        }\n        return deferred.promise;\n      }\n    };\n\n    function isItemAlreadyPresentInParent(children, itemToAdd) {\n      return children.some(function (child) {\n        return child.id === itemToAdd.id;\n      });\n    }\n\n    // TODO: There should not be a need for traversing the nav and updating it separately\n    // However in case when we add an item first and then remove it, the changes are not\n    // getting reflected in the model.\n    // Need to look into the cause of this.\n    function updateModel(itemToLookup, cb) {\n      angular.forEach(nav, function (navItems /* , key*/) {\n        traverse(navItems, function (itm) {\n          if (itm.path === itemToLookup.path) {\n            cb.apply(this, [navItems, itm]);\n          }\n        });\n      });\n    }\n\n    function getIndexOfChild(childItem, parentItem) {\n      var index = -1;\n      if (parentItem && parentItem.children) {\n        for (var i = 0; i < parentItem.children.length; i++) {\n          var child = parentItem.children[i];\n          if (child.id === childItem.id) {\n            index = i;\n            break;\n          }\n        }\n      }\n      return index;\n    }\n\n    serv.removeNavItem = function (itemToRemoveId, openParentNode, openParams) {\n      var deferred = $q.defer();\n      var parentItem;\n\n      openParentNode = openParentNode === 'true' || openParentNode === true;\n      fisPubSubService.publish('fisBeforeNavItemRemove', true);\n      var itemToRemove = serv.findNavItem(itemToRemoveId);\n      if (itemToRemove) {\n        var parentPath = itemToRemove.path.substring(0, itemToRemove.path.lastIndexOf('/'));\n        if (parentPath) {\n          parentItem = serv.findNavItem(parentPath);\n\n          // if parent item not found, tokenize the path and try to find the parent\n          if (!parentItem) {\n            var hasMoreTokens = true;\n            var tempPath = parentPath;\n\n            while (hasMoreTokens) {\n              tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\n              if (tempPath && tempPath.length === 0) {\n                hasMoreTokens = false;\n              } else {\n                parentItem = serv.findNavItem(tempPath);\n                if (parentItem) {\n                  hasMoreTokens = false;\n                }\n              }\n            }\n          }\n\n          if (parentItem) {\n            var itmToRemIndex = getIndexOfChild(itemToRemove, parentItem);\n            if (itmToRemIndex > -1) {\n              parentItem.children.splice(itmToRemIndex, 1);\n              path2Item[parentItem.path] = parentItem;\n\n              delete path2Item[itemToRemove.path];\n              delete id2Item[itemToRemove.id];\n\n              updateModel(parentItem, function (navItems, matchedItem) {\n                matchedItem.children = parentItem.children;\n              });\n            }\n          }\n        } else {\n          // no parent path means the node is at root level\n          updateModel(itemToRemove, function (navItems, matchedItem) {\n            navItems.splice(navItems.indexOf(matchedItem), 1);\n          });\n        }\n\n        serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\n          fisPubSubService.publish('fisAfterNavItemRemove', { nav: nav, itemToRemove: itemToRemove, parentItem: parentItem, openParentNode: openParentNode, openParams: openParams });\n          deferred.resolve(nav);\n        });\n      } else {\n        deferred.reject();\n      }\n\n      return deferred.promise;\n    };\n\n    return serv;\n  }];\n};\n\n\n// WEBPACK FOOTER //\n// ./views/view-service.provider.js","/**\r\n * @class\r\n * @name fisViewService\r\n * @description View service, retrieves navigation structure.\r\n * @namespace navigation\r\n */\r\nexport default function () {\r\n  'use strict';\r\n  var self = this;\r\n  // filters allow modifying the incoming nav structure before it gets\r\n  // processed. It could be used to define the nav structure on the client\r\n  // instead of on the server.\r\n  // filter signature: function( items, params )\r\n  // item: array of root nav items\r\n  // params: params sent to navigation.refresh method.\r\n  var filters = [];\r\n  self.addFilter = function (filter) {\r\n    return filters.push(filter);\r\n  };\r\n\r\n  self.removeFilter = function (idx) {\r\n    delete filters[idx];\r\n  };\r\n\r\n  // set to false to prevent service from invoking the navigation rest endpoint\r\n  self.remote = true;\r\n\r\n  var staticViews = null;\r\n  self.setViews = function (views) {\r\n    staticViews = views;\r\n  };\r\n\r\n  // the default RESTful resource endpoint\r\n  var defaultEndpoint = 'api/navigation.json';\r\n  var endpoint = null;\r\n  self.endpoint = function (ep) {\r\n    if (ep) {\r\n      endpoint = ep;\r\n    }\r\n    return endpoint;\r\n  };\r\n\r\n  // reference to angular's $routeProvider\r\n  self.$routeProvider = null;\r\n\r\n  self.$get = ['$templateCache', '$resource', '$route', '$rootScope', '$log', 'fisConfig', '$q', 'fisPubSubService', 'fisUtilService', '$injector', 'fisNavigationService', 'fisI18nService',\r\n    function ($templateCache, $resource, $route, $rootScope, $log, fisConfig, $q, fisPubSubService, fisUtilService, $injector, fisNavigationService, fisI18nService) {\r\n      var nav = null;\r\n      var path2Item = {};\r\n      var id2Item = {};\r\n      var serv = {};\r\n\r\n      /**\r\n       * @name applyFilter\r\n       * @description Utility function to filter navigation model.\r\n       * @param model model to apply filters to\r\n       * @param params filter parameters\r\n       * @return\r\n       * @methodOf fisViewService\r\n       * @private\r\n       */\r\n      function applyFilters(model, params) {\r\n        for (var i = 0; i < filters.length; i++) {\r\n          filters[i](model, params);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * @name traverse\r\n       * @description Utility function to traverse and process navigation\r\n       * structure\r\n       * @param items structure to traverse\r\n       * @param cb calback to apply during traversal\r\n       * @param navPath tracks position in structure.\r\n       * @return\r\n       * @methodOf fisViewService\r\n       * @private\r\n       */\r\n      function traverse(items, cb, navPath) {\r\n        var path = navPath || [];\r\n        angular.forEach(items, function (itm/* , key*/) {\r\n          var ret = cb.apply(this, [itm, path]);\r\n          if (ret === false) {\r\n            return false;\r\n          }\r\n          if (itm.children) {\r\n            path.push(itm);\r\n            traverse(itm.children, cb, path);\r\n            path.pop();\r\n          }\r\n          if (itm.quickLinks) {\r\n            angular.forEach(itm.quickLinks, function (quickLinks) {\r\n              path.push(itm);\r\n              path.push(quickLinks);// include quicklinks in path\r\n              traverse(quickLinks.children, cb, path);\r\n              path.pop();\r\n              path.pop();\r\n            });\r\n          }\r\n        }, items);\r\n      }\r\n\r\n      /**\r\n       * @name normalizeLabel\r\n       * @description Normalises text to acceptable characters\r\n       * @param label text to normalise\r\n       * @return normalized text\r\n       * @methodOf fisViewService\r\n       * @private\r\n       */\r\n      function normalizeLabel(label) {\r\n        return label.toLowerCase().replace(' ', '-');\r\n      }\r\n\r\n      function updatePath2Item(itm, path) {\r\n        if (!itm.id) {\r\n          itm.id = normalizeLabel(itm.label);\r\n        }\r\n        if (!itm.path) {\r\n          var a = [];\r\n          for (var i = 0; i < path.length; i++) {\r\n            a.push(path[i].id);\r\n          }\r\n          a.push(itm.id);\r\n          itm.path = '/' + a.join('/');\r\n          path2Item[itm.path] = itm;\r\n        }\r\n        // In case, translation data is loading asynchronously, updating the label and title in path2Item[] array\r\n        if (path2Item[itm.path] !== undefined) {\r\n          path2Item[itm.path].label = itm.label;\r\n          path2Item[itm.path].title = itm.title;\r\n        }\r\n      }\r\n\r\n      function updateId2Item(itm) {\r\n        if (itm.id.indexOf('/') > -1) {\r\n          var isAlreadyIncluded = Object.keys(id2Item).some(function (key) {\r\n            return id2Item[key] === itm;\r\n          });\r\n          if (!isAlreadyIncluded) {\r\n            id2Item[itm.id] = itm;\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       * @name normalizeModel\r\n       * @description Normalizes text to acceptable characters for model\r\n       * @param model structure with labels to normalize\r\n       * @methodOf fisViewService\r\n       * @private\r\n       */\r\n      function normalizeModel(model) {\r\n        angular.forEach(model, function (navItems/* , key*/) {\r\n          traverse(navItems, function (itm, path) {\r\n            updatePath2Item(itm, path);\r\n            updateId2Item(itm);\r\n\r\n            // i18n support of navigation item's label and title\r\n            if (itm.label && itm.label.indexOf('i18n(') === 0) {\r\n              itm.label = itm.label.substring(itm.label.indexOf('(') + 2, itm.label.indexOf(')') - 1);\r\n              // In case, translations are available for the selected language then we can directly translate label and titles\r\n              if (fisI18nService.isTranslationReady()) {\r\n                itm.label = fisI18nService.translate(itm.label);\r\n                updatePath2Item(itm, path);\r\n                updateId2Item(itm);\r\n              } else {\r\n                // In case, translations are loading asynchronously, we need to use promise api to update\r\n                // labels and titles on receiving data for translation\r\n                fisI18nService.translateAsync(itm.label).then(function (resolvedLabel) {\r\n                  itm.label = resolvedLabel;\r\n                  updatePath2Item(itm, path);\r\n                  updateId2Item(itm);\r\n                });\r\n              }\r\n            }\r\n            if (itm.title && itm.title.indexOf('i18n(') === 0) {\r\n              itm.title = itm.title.substring(itm.title.indexOf('(') + 2, itm.title.indexOf(')') - 1);\r\n              // In case, translations are available for the selected language then we can directly translate label and titles\r\n              if (fisI18nService.isTranslationReady()) {\r\n                itm.title = fisI18nService.translate(itm.title);\r\n                updatePath2Item(itm, path);\r\n                updateId2Item(itm);\r\n              } else {\r\n                // In case, translations are loading asynchronously, we need to use promise api to update\r\n                // labels and titles on receiving data for translation\r\n                fisI18nService.translateAsync(itm.title).then(function (resolvedTitle) {\r\n                  itm.title = resolvedTitle;\r\n                  updatePath2Item(itm, path);\r\n                  updateId2Item(itm);\r\n                });\r\n              }\r\n            }\r\n            // support definitions that only contain a template\r\n            if (itm.template && !itm.partial) {\r\n              itm.partial = itm.path + '.tpl.html';\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      /**\r\n       * @name createRoutes\r\n       * @description Creates angular routes from navigation structure\r\n       * @param model navigation structure\r\n       * @methodOf fisViewService\r\n       * @private\r\n       */\r\n      function createRoutes(model) {\r\n        angular.forEach(model, function (navItems /* , key*/) {\r\n          traverse(navItems, function (itm/* , path*/) {\r\n            if (itm.partial) {\r\n              var opts = {\r\n                templateUrl: fisUtilService.appendCacheQueryParameter(itm.partial)\r\n              };\r\n\r\n              if (itm.template) {\r\n                // prefill $templateCache with provided template\r\n                $templateCache.put(itm.partial, itm.template);\r\n              }\r\n\r\n              if (itm.controller) {\r\n                // TODO: Controllers need to be loaded on demand\r\n                opts.controller = itm.controller;\r\n              }\r\n              opts.resolve = createResolveProperty(itm);\r\n              self.$routeProvider.when(itm.path, opts);\r\n            } else if (!itm.children && !itm.action) {\r\n              $log.warn('Leaf nav item without a partial: ' + itm.label);\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      function createResolveProperty(itm) {\r\n        var ret = {};\r\n\r\n        // find the constructor in the registry\r\n        var ctrl = itm.controller && fis.__controllers[itm.controller];\r\n\r\n        angular.forEach(ctrl, function (val, key) {\r\n          if (key.indexOf('$') !== 0) {\r\n            ret[key] = createResolveValue(val, itm.args);\r\n          }\r\n        });\r\n\r\n        if (itm.args) {\r\n          ret.args = function () {\r\n            return itm.args;\r\n          };\r\n        }\r\n\r\n        return ret;\r\n      }\r\n\r\n      function createResolveValue(toResolve, args) {\r\n        if (angular.isFunction(toResolve) || (angular.isArray(toResolve) && angular.isFunction(toResolve[toResolve.length - 1]))) {\r\n          return function resolveFunction() {\r\n            return $injector.invoke(toResolve, this, { args: args });\r\n          };\r\n        }\r\n        return toResolve; // a simple object/array/native we want to pass\r\n      }\r\n\r\n      /**\r\n       * @name processMenu\r\n       * @description Process navigation structure for use in shell\r\n       * @param model navigation structure\r\n       * @param params filter parameters\r\n       * @methodOf fisViewService\r\n       * @private\r\n       */\r\n      function processMenu(model, params) {\r\n        // TODO: execute all into a single traversal for speed.\r\n        // add the default workspace\r\n        applyFilters(model, params);\r\n        normalizeModel(model);\r\n        createRoutes(model);\r\n\r\n        return model;\r\n      }\r\n\r\n      /**\r\n       * @name fetchNavigation\r\n       * @description Fetches navigation structure from backend and processes it\r\n       * @param endpoint Serverside RESTful endpoint that serves navigation structure\r\n       * @param params filter parameters\r\n       * @methodOf fisViewService\r\n       * @private\r\n       */\r\n      function fetchNavigation(endpoint, params) {\r\n        var deferred = $q.defer();\r\n        $resource(endpoint).get(params,\r\n          function (results) {\r\n            var finalResult = {};\r\n            for (var key in results) {\r\n              if (results.hasOwnProperty(key)) {\r\n                var value = results[key];\r\n                if (key.indexOf('$') !== 0) {\r\n                  finalResult[key] = value;\r\n                }\r\n              }\r\n            }\r\n            resolveViews(deferred, finalResult, params);\r\n          },\r\n          function () {\r\n            deferred.reject('Could not load navigation from ' + endpoint);\r\n          }\r\n        );\r\n        return deferred.promise;\r\n      }\r\n\r\n      function resolveViews(deferred, views, params) {\r\n        // assign the processed views to the internal nav var\r\n        nav = processMenu(views, params);\r\n\r\n        // resolve the deferred object to the processed views\r\n        deferred.resolve(nav);\r\n\r\n        // publish it on the 'shell.navReady' topic so that nav widgets can render the views\r\n        fisPubSubService.publish('shell.navReady', nav);\r\n        fisNavigationService.setNavigation(nav);\r\n        return deferred.promise;\r\n      }\r\n\r\n      /**\r\n       * @name load\r\n       * @description Loads and initializes navigation\r\n       * @param params filter parameters\r\n       * @param model existing navigation structure(optional)\r\n       * @methodOf fisViewService\r\n       */\r\n      serv.load = function (params, model) {\r\n        // TODO: use fisConfig to get default params and extend with received params\r\n        params = params || {};\r\n        path2Item = params.path2Item || {};\r\n\r\n        fisPubSubService.publish('shell.navLoading', true);\r\n        if (model || staticViews) {\r\n          // views provided as an argument or at config time; make it the new nav structure\r\n          return resolveViews($q.defer(), angular.copy(model || staticViews), params);\r\n        } else if (self.endpoint()) {\r\n          // an endpoint was provided at config time, it takes precedence over config service\r\n          return fetchNavigation(self.endpoint(), params);\r\n        }\r\n        return fetchNavigation(fisConfig.endpoints && fisConfig.endpoints.navigation || defaultEndpoint, params);\r\n      };\r\n\r\n      serv.loadOnNavChange = function (params, model) {\r\n            // TODO: use fisConfig to get default params and extend with received params\r\n        params = params || {};\r\n        path2Item = params.path2Item || {};\r\n\r\n        var deferred = $q.defer();\r\n\r\n            // assign the processed views to the internal nav var\r\n        nav = processMenu(angular.copy(model), params);\r\n\r\n            // resolve the deferred object to the processed views\r\n        deferred.resolve(nav);\r\n\r\n        fisPubSubService.publish('shell.navChanged', nav);\r\n\r\n        fisNavigationService.setNavigation(nav);\r\n        return deferred.promise;\r\n      };\r\n\r\n        /**\r\n         * @name findNavItem\r\n         * @description Retrieves item at specified path.\r\n         * @param navPath Navigation Path for required item\r\n         * @param fromPath Path to search from if navPath is relative (doesn't start with '/').\r\n         *          If not provided and navPath is relative, the function will return undefined.\r\n         * @methodOf fisViewService\r\n         */\r\n        /* serv.findNavItem = function (navPath, fromPath) {\r\n         console.log('Processing for navPath...', navPath);\r\n         console.log('fromPath...', fromPath);\r\n         fromPath = fromPath || '';\r\n         if( navPath && navPath.indexOf('/') !== 0 ) {\r\n         // navPath is relative, search from fromPath\r\n         var item, idx = fromPath.lastIndexOf('/') + 1;\r\n         console.log('index...', idx);\r\n         console.log('path2Item...', path2Item);\r\n         while(idx > 1) {\r\n         console.log('path...', fromPath.substring(0, idx) + navPath);\r\n         item = path2Item[fromPath.substring(0, idx) + navPath];\r\n         console.log('item...', item);\r\n         if( item ) {\r\n         return item;\r\n         }\r\n         idx = fromPath.lastIndexOf('/', idx - 2) + 1;\r\n         console.log('index after...', idx);\r\n         }\r\n         }\r\n         return path2Item[navPath];\r\n         };*/\r\n\r\n      serv.findNavItem = function (navPath, fromPath) {\r\n        var item = null;\r\n        fromPath = fromPath || '';\r\n\r\n        if (navPath && navPath.indexOf('/') !== 0) {\r\n          // navPath is relative, search from fromPath\r\n          // var idx = fromPath.lastIndexOf('/') + 1;\r\n          // console.log('index...', idx);\r\n          // console.log('path2Item...', path2Item);\r\n          // console.log('path...', fromPath.substring(0, idx) + navPath);\r\n          item = path2Item[fromPath + '/' + navPath];\r\n          // console.log('item...', item);\r\n          if (item) {\r\n            return item;\r\n          }\r\n          // item not found relative to fromPath.\r\n          item = serv.getItemFromPath2Item(navPath);\r\n          // item still not found. Try to find if the path is just id. check with ids that contain '/' character\r\n          if (!item) {\r\n            item = getItemFromId2Item(navPath);\r\n          }\r\n          return item;\r\n        }\r\n\r\n        item = path2Item[navPath];\r\n\r\n        return item;\r\n      };\r\n\r\n      function getItemFromId2Item(navPath) {\r\n        var item = null;\r\n\r\n        for (var id in id2Item) { // eslint-disable-line\r\n          var idArr = id.split('/');\r\n          var navPathArr = navPath.split('/');\r\n          if (idArr.length === navPathArr.length) {\r\n            var paramArr = matchTokens(idArr, navPathArr);\r\n            if (paramArr) {\r\n              item = id2Item[id];\r\n              item.params = paramArr;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        return item;\r\n      }\r\n\r\n      function matchTokens(idArr, navPathArr) {\r\n        var paramArr = {};\r\n\r\n        for (var i = 0; i < idArr.length; i++) {\r\n          if (idArr[i] !== navPathArr[i] && idArr[i].indexOf(':') !== 0) {\r\n            paramArr = null;\r\n            return false;\r\n          } else if (idArr[i] !== navPathArr[i] && idArr[i].indexOf(':') === 0) {\r\n            var paramName = idArr[i].substring(1);\r\n            var paramValue = navPathArr[i];\r\n            paramArr[paramName] = paramValue;\r\n          }\r\n        }\r\n\r\n        return paramArr;\r\n      }\r\n\r\n      // returns the last part of the navItem, excluding those those which include a ':', in which case the second last part will be returned\r\n      function getNavPathEnd(navItem) {\r\n        var parts = navItem.split('/');\r\n        var size = parts.length;\r\n\r\n        if (size < 2) {\r\n          return navItem;\r\n        }\r\n\r\n        if (parts[size - 1].indexOf(':') === -1) {\r\n          return parts[size - 1];\r\n        } else if (parts[size - 2].indexOf(':') === -1) {\r\n          return parts[size - 2];\r\n        }\r\n\r\n        // more than one parameters in id\r\n        for (var i = size - 1; i > 0; i--) {\r\n          if (parts[i].indexOf(':') === -1) {\r\n            return parts[i];\r\n          }\r\n        }\r\n      }\r\n\r\n      serv.getItemFromPath2Item = function (navPath) {\r\n        var navItem = null;\r\n\r\n        for (var path in path2Item) {\r\n          if (path2Item.hasOwnProperty(path)) {\r\n            var item = path2Item[path];\r\n\r\n            var pathTokenLength = path.split('/').length;\r\n            var navPathTokenLength = navPath.split('/').length;\r\n\r\n            if (((pathTokenLength > 2 && navPathTokenLength > 2 && pathTokenLength === navPathTokenLength) ||\r\n                    (pathTokenLength <= 2 || navPathTokenLength <= 2)) &&\r\n                    getNavPathEnd(path) === getNavPathEnd(navPath)) {\r\n              navItem = item;\r\n              return navItem;\r\n            }\r\n          }\r\n        }\r\n        return navItem;\r\n      };\r\n\r\n      serv.addDynamicItem = function (item, opts) {\r\n        path2Item[item.path] = item;\r\n        self.$routeProvider.when(item.path, opts);\r\n      };\r\n\r\n      /**\r\n       * @name addItemToMenu\r\n       * @description Add a node to existing navigation structure dynamically\r\n       * @param parentItemId id or path of the node to which the new node needs to be appended\r\n       * @param itemToAdd new node to be added\r\n       * @methodOf fisViewService\r\n       */\r\n      serv.addNavItem = function (parentItemId, itemToAdd, openItemAfterAdd, openParams, addAfterItemId) {\r\n        if (itemToAdd && itemToAdd.id) {\r\n          var deferred = $q.defer();\r\n          openItemAfterAdd = (openItemAfterAdd === 'true' || openItemAfterAdd === true);\r\n          openParams = jQuery.isEmptyObject(openParams) ? undefined : openParams;\r\n          fisPubSubService.publish('fisBeforeNavItemAdd', true);\r\n          var parentItem = serv.findNavItem(parentItemId);\r\n          if (parentItem) {\r\n            itemToAdd.path = parentItem.path + '/' + itemToAdd.id;\r\n            path2Item[itemToAdd.path] = itemToAdd;\r\n            if (!parentItem.children) {\r\n              parentItem.children = [];\r\n            }\r\n\r\n            if (isItemAlreadyPresentInParent(parentItem.children, itemToAdd)) {\r\n              deferred.reject();\r\n            } else {\r\n              // add item after the specified sibling - if this item is not found, the new item will be added at the end\r\n              if (addAfterItemId) {\r\n                var siblingItem = serv.findNavItem(addAfterItemId);\r\n                if (siblingItem) {\r\n                  var siblingIndex = -1;\r\n                  for (var i = 0; i < parentItem.children.length; i++) {\r\n                    if (parentItem.children[i].path === siblingItem.path) {\r\n                      siblingIndex = i;\r\n                      break;\r\n                    }\r\n                  }\r\n                  if (siblingIndex > -1) {\r\n                    parentItem.children.splice(siblingIndex + 1, 0, itemToAdd);\r\n                  }\r\n                }\r\n              } else {\r\n                parentItem.children.push(itemToAdd);\r\n              }\r\n              updateModel(parentItem, function (navItems, matchedItem) {\r\n                matchedItem.children = parentItem.children;\r\n              });\r\n\r\n              serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\r\n                fisPubSubService.publish('fisAfterNavItemAdd', { nav: nav, itemToAdd: itemToAdd, parentItem: parentItem, openItemAfterAdd: openItemAfterAdd, openParams: openParams });\r\n                deferred.resolve(nav);\r\n              });\r\n            }\r\n          } else if (!parentItem && nav[parentItemId]) {\r\n            // if item needs to be added directly at root level (for ex. directly under main, footer etc.)\r\n            itemToAdd.path = '/' + itemToAdd.id;\r\n            path2Item[itemToAdd.path] = itemToAdd;\r\n            if (isItemAlreadyPresentInParent(nav[parentItemId], itemToAdd)) {\r\n              deferred.reject();\r\n            } else {\r\n              nav[parentItemId].push(itemToAdd);\r\n              serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\r\n                var rootNav = parentItemId;\r\n                fisPubSubService.publish('fisAfterNavItemAdd', { nav: nav, itemToAdd: itemToAdd, parentItem: parentItem, openItemAfterAdd: openItemAfterAdd, openParams: openParams, rootNav: rootNav });\r\n                deferred.resolve(nav);\r\n              });\r\n            }\r\n          }\r\n          return deferred.promise;\r\n        }\r\n      };\r\n\r\n      function isItemAlreadyPresentInParent(children, itemToAdd) {\r\n        return children.some(function (child) {\r\n          return child.id === itemToAdd.id;\r\n        });\r\n      }\r\n\r\n      // TODO: There should not be a need for traversing the nav and updating it separately\r\n      // However in case when we add an item first and then remove it, the changes are not\r\n      // getting reflected in the model.\r\n      // Need to look into the cause of this.\r\n      function updateModel(itemToLookup, cb) {\r\n        angular.forEach(nav, function (navItems/* , key*/) {\r\n          traverse(navItems, function (itm) {\r\n            if (itm.path === itemToLookup.path) {\r\n              cb.apply(this, [navItems, itm]);\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      function getIndexOfChild(childItem, parentItem) {\r\n        var index = -1;\r\n        if (parentItem && parentItem.children) {\r\n          for (var i = 0; i < parentItem.children.length; i++) {\r\n            var child = parentItem.children[i];\r\n            if (child.id === childItem.id) {\r\n              index = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        return index;\r\n      }\r\n\r\n      serv.removeNavItem = function (itemToRemoveId, openParentNode, openParams) {\r\n        var deferred = $q.defer();\r\n        var parentItem;\r\n\r\n        openParentNode = (openParentNode === 'true' || openParentNode === true);\r\n        fisPubSubService.publish('fisBeforeNavItemRemove', true);\r\n        var itemToRemove = serv.findNavItem(itemToRemoveId);\r\n        if (itemToRemove) {\r\n          var parentPath = itemToRemove.path.substring(0, itemToRemove.path.lastIndexOf('/'));\r\n          if (parentPath) {\r\n            parentItem = serv.findNavItem(parentPath);\r\n\r\n            // if parent item not found, tokenize the path and try to find the parent\r\n            if (!parentItem) {\r\n              var hasMoreTokens = true;\r\n              var tempPath = parentPath;\r\n\r\n              while (hasMoreTokens) {\r\n                tempPath = tempPath.substring(0, tempPath.lastIndexOf('/'));\r\n                if (tempPath && tempPath.length === 0) {\r\n                  hasMoreTokens = false;\r\n                } else {\r\n                  parentItem = serv.findNavItem(tempPath);\r\n                  if (parentItem) {\r\n                    hasMoreTokens = false;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            if (parentItem) {\r\n              var itmToRemIndex = getIndexOfChild(itemToRemove, parentItem);\r\n              if (itmToRemIndex > -1) {\r\n                parentItem.children.splice(itmToRemIndex, 1);\r\n                path2Item[parentItem.path] = parentItem;\r\n\r\n                delete path2Item[itemToRemove.path];\r\n                delete id2Item[itemToRemove.id];\r\n\r\n                updateModel(parentItem, function (navItems, matchedItem) {\r\n                  matchedItem.children = parentItem.children;\r\n                });\r\n              }\r\n            }\r\n          } else {\r\n            // no parent path means the node is at root level\r\n            updateModel(itemToRemove, function (navItems, matchedItem) {\r\n              navItems.splice(navItems.indexOf(matchedItem), 1);\r\n            });\r\n          }\r\n\r\n          serv.loadOnNavChange({ path2Item: path2Item }, nav).then(function () {\r\n            fisPubSubService.publish('fisAfterNavItemRemove', { nav: nav, itemToRemove: itemToRemove, parentItem: parentItem, openParentNode: openParentNode, openParams: openParams });\r\n            deferred.resolve(nav);\r\n          });\r\n        } else {\r\n          deferred.reject();\r\n        }\r\n\r\n        return deferred.promise;\r\n      };\r\n\r\n      return serv;\r\n    }];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./views/view-service.provider.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($routeProvider, $locationProvider, fisViewServiceProvider) {\n  'ngInject';\n  // Reset the location hashPrefix to the pre-1.6 default value of empty string for backward compatibility reasons\n  // https://docs.angularjs.org/guide/migration#commit-aa077e8\n  // https://github.com/angular/angular.js/commit/aa077e81129c740041438688dff2e8d20c3d7b52\n\n  $locationProvider.hashPrefix('');\n\n  // Store a reference to the routeProvider for further use once the menu items are loaded.\n  fisViewServiceProvider.$routeProvider = $routeProvider;\n};\n\n\n// WEBPACK FOOTER //\n// ./views/views.config.js","export default function ($routeProvider, $locationProvider, fisViewServiceProvider) {\r\n  'ngInject';\r\n  // Reset the location hashPrefix to the pre-1.6 default value of empty string for backward compatibility reasons\r\n  // https://docs.angularjs.org/guide/migration#commit-aa077e8\r\n  // https://github.com/angular/angular.js/commit/aa077e81129c740041438688dff2e8d20c3d7b52\r\n  $locationProvider.hashPrefix('');\r\n\r\n  // Store a reference to the routeProvider for further use once the menu items are loaded.\r\n  fisViewServiceProvider.$routeProvider = $routeProvider;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./views/views.config.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function ($route, $anchorScroll, $compile, $controller, $animate, fisI18nService, $timeout) {\n  'ngInject';\n  // Makes a scope \"freezable\". This means it can be detached and re-attached\n  // to the scope hierarchy. This code is specific to the fisView and can't be reused\n  // for any scope. A frozen scope will not participate in the $apply cycle so\n  // watches inside it will not be checked.\n  // The scope keeps the same prototype so it could still modify models in the parent.\n  // It will not be able to $emit events to the parent and the parent will not be able to $broadcast to it.\n  // The reason we are freezing the scope is to prevent performance degradation when\n  // multiple tabs are opened.\n\n  function makeFreezable(s) {\n    // make sure that when the parent scope is destroyed,\n    // we re-attach the scope so that it can also be destroyed\n    s.$parent.$on('$destroy', function () {\n      if (s.$$frozen) {\n        s.$freeze(false);\n      }\n      // tell fisViews that if the lastSelectedPanel was destroyed, ignore it and lose the reference on it so it can be GC'd\n      s.$$fisGC = true;\n    });\n\n    s.$freeze = function (freeze) {\n      if (freeze && !this.$$frozen) {\n        // let the scope know it is about to be frozen\n        this.$broadcast('fisFreezing');\n\n        // marker to indicate the scope is frozen\n        this.$$frozen = {};\n        // preserve the parent (ngRepeat scope)\n        this.$$frozen.$parent = this.$parent;\n\n        // detach from the parent\n        this.$parent.$$childHead = null;\n        this.$parent.$$childTail = null;\n\n        this.$parent = null;\n        // let the scope know it has been frozen\n        this.$broadcast('fisFrozen');\n      } else if (!freeze && this.$$frozen) {\n        // let the scope know it is about to be unfrozen\n        this.$broadcast('fisUnfreezing');\n\n        // re-attach the scope to its parent\n        this.$parent = this.$$frozen.$parent;\n        this.$parent.$$childHead = this;\n        this.$parent.$$childTail = this;\n        this.$$frozen = null;\n\n        // let the scope know it has been unfrozen\n        this.$broadcast('fisUnfrozen');\n      }\n    };\n\n    return s;\n  }\n\n  return {\n    restrict: 'EA',\n    scope: true, // needed because we now put stuff in the scope\n    replace: true,\n    controller: ['$scope', '$attrs', 'fisPubSubService', function ($scope, $attrs, fisPubSubService) {\n      /**\r\n       * Provides translation for the view displayed in the view panel.\r\n       * This overrides the shell controller's i18n function and provides\r\n       * automatic namespacing based on the current view panel's module and id.\r\n       * e.g. for a view panel in the \"desktop-ui\" module and an id of \"dashboard\", the key,\r\n       * if it doesn't already contain dots \".\", will be prefixed by \"desktop-ui.dashboard.\".\r\n       * @param {string} key the i18n key to provide a translation for\r\n       * @param {string} def t{{item.label}}he default value, if the key can't be found\r\n       */\n      var unsubscribe = fisPubSubService.subscribe('shell.i18nReady', function () {\n        $scope.i18n = function (key, def) {\n          if (angular.isDefined(key)) {\n            if (key.indexOf('.') === -1) {\n              // TODO: when we allow reuse of viewPanels, the view panel should not be the active view panel\n              //      because this fisViewPanel directive will occur multiple times in the dom (once for each tab).\n              //      If we leave it like that, all strings of all views will get changed each time the active view is changed.\n              var view = $scope.activeViewPanel();\n              if (view) {\n                key = [view.module, view.id, key];\n              }\n            }\n            return fisI18nService.translate(key, def);\n          }\n        };\n        // Un-subscribing shell.i18nReady event\n        unsubscribe();\n      });\n\n      $scope.setTitle = function (value) {\n        $scope.activeViewPanel().setTitle(value);\n      };\n\n      $scope.resetTitle = function () {\n        $scope.activeViewPanel().resetTitle();\n      };\n\n      $scope.setIcon = function (value) {\n        $scope.activeViewPanel().setIcon(value);\n      };\n\n      if ($attrs.fisStacked && $attrs.fisStacked === 'false') {\n        $scope.fisStacked = false;\n      } else {\n        $scope.fisStacked = true;\n      }\n    }],\n    template: '<div fis-message-container>\\n                  <div class=\"fis-info-panel\"></div>\\n                  <div ng-repeat=\"panel in panels\" class=\"fis-panel-container ng-hide\" fis-element=\"panel\" fis-pub-sub></div>\\n                  <div class=\"default-panel\"></div>\\n                </div>',\n    link: function link(scope, element, attrs) {\n      // the default panel is used if none of the provided panels are selected or if no panels are provided\n      var defaultPanel;\n      // the previously selected panel\n      var lastSelectedPanel;\n      // expression to evaluate when contents is loaded\n      var onloadExp = attrs.fisOnLoad || '';\n      var updateTimeout;\n      // start with no panels\n      scope.panels = undefined;\n\n      function matchingPathParams(currentParams, panelParams) {\n        if (Object.keys(currentParams).length > 0) {\n          for (var prop in currentParams) {\n            if (currentParams[prop] != panelParams[prop]) {\n              // eslint-disable-line\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n\n      function updatePanel(panel) {\n        lastSelectedPanel = panel;\n        // we need the current route...\n        var current = $route.current;\n        // and the current route's local variables\n        var locals = current && current.locals;\n        // and the template for that route\n        var template = locals && locals.$template;\n\n        var activePanel = scope.activeViewPanel();\n\n        if (current && current.templateUrl && activePanel && current.templateUrl.indexOf(activePanel.partial) !== -1 && matchingPathParams(current.pathParams, activePanel.params)) {\n          // if the selected panel is for the current route, simply unfreeze its scope\n          if (current && panel.$route && panel.$route.originalPath === current.$$route.originalPath) {\n            // detach the scope from the scope hierarchy\n            panel.$scope.$freeze(false);\n            // panel already loaded, just broadcast it\n            panel.$scope.$broadcast('$panelContentLoaded');\n          } else if (template) {\n            // The panel is not for the current route, replace its contents with the route's template\n            // Clear the contents of the selected panel\n            clearContent(panel, false);\n            // associate with the current route\n            panel.$route = current.$$route;\n            // make the route template the panel's content in an animatable way\n            $animate.enter(angular.element('<div></div>').html(template).contents(), panel.$element);\n\n            // compile the panel's content\n            var link = $compile(panel.$element.contents());\n            var controller;\n            // grab a hold of the scope that the ng-repeat created for the panel div\n            var repeatScope = panel.$element.scope();\n            // create a child scope and make it freezable\n            panel.$scope = current.scope = makeFreezable(repeatScope.$new());\n            // if args are present in the item, make it available on the scope as viewArgs\n            if (panel.args) {\n              panel.$scope.viewArgs = panel.args;\n            }\n\n            // if the current route declares a controller\n            if (current.controller) {\n              // add the current panel's scope to the route's local variables\n              locals.$scope = panel.$scope;\n              // add the panel's element to the route's local variables\n              locals.$element = panel.$element;\n              // create the controller with the injectable locals\n              controller = $controller(current.controller, locals);\n              // attach to the panel\n              panel.$element.children().data('$ngControllerController', controller);\n            }\n\n            // link the compiled contents with the panel's scope\n            link(panel.$scope);\n            // emit the $viewContentLoaded event like ng-view does\n            panel.$scope.$emit('$viewContentLoaded');\n\n            // execute the onload handler\n            panel.$scope.$eval(onloadExp);\n\n            // $anchorScroll might listen on event...\n            $anchorScroll();\n          } else if (panel.$scope && panel.args.targetScope.location.$$url) {\n            // check for presence of scope.alert and scope.open: these are defined in the shell\n            // and this could be used outside the shell since it is in fis-components.\n            // no template for this route, display relevant message alert box (if a message is available)\n            var msg;\n            if (scope.alert && (msg = fisI18nService.translate('error-path-not-found', ''))) {\n              scope.alert(msg, { title: fisI18nService.translate('error-dialog-title') });\n            }\n            // open the last open panel\n            if (scope.open) {\n              scope.open(lastSelectedPanel.path);\n            }\n          }\n        }\n      }\n\n      function update() {\n        // find the selected panel\n        var panel = getSelectedPanel();\n        // ensure we are not dealing with a lastSelectedPanel that was destroyed\n        // this can happen when switching menus\n        if (lastSelectedPanel && lastSelectedPanel.$scope && lastSelectedPanel.$scope.$$fisGC) {\n          // the scope (and therefore the panel) was destroyed. Lose the references\n          clearContent(lastSelectedPanel, true);\n          lastSelectedPanel = null;\n        }\n\n        if (lastSelectedPanel !== panel) {\n          // eslint-disable-line\n          // we are changing panel, or the last panel was destroyed...\n          if (lastSelectedPanel) {\n            // hide the previous one if it still exists\n            $animate.addClass(lastSelectedPanel.$element, 'ng-hide');\n            lastSelectedPanel.$element.removeClass('fis-selected');\n\n            if (lastSelectedPanel.saveState === false) {\n              // View doesn't want state saving. Destroy the scope.\n              clearContent(lastSelectedPanel, false);\n            } else if (lastSelectedPanel.$scope) {\n              // freeze the scope on the previous panel\n              // scope may not be there for nav item without partial and secondary menu\n              lastSelectedPanel.$scope.$freeze(true);\n            }\n          }\n          // show the selected one\n          if (panel.$element) {\n            $animate.removeClass(panel.$element, 'ng-hide').then(function () {\n              panel.$element.addClass('fis-selected');\n              if (updateTimeout) {\n                $timeout.cancel(updateTimeout);\n              }\n              updateTimeout = $timeout(function () {\n                updatePanel(panel);\n              }, 0);\n            });\n          }\n        } else {\n          updatePanel(panel);\n        }\n      }\n\n      // This function is invoked when a panel is already opened but\n      // the route it is currently associated to needs to change\n      function clearContent(panel, removeElementRef) {\n        // remove the contents, if any, in an animatable way\n        var contents = panel.$element.contents();\n\n        if (contents.length > 0) {\n          $animate.leave(contents);\n        }\n\n        if (panel.$scope) {\n          // destroy the scope associated to the panel's content\n          panel.$scope.$destroy();\n          // make sure we don't keep a reference on it for GC\n          panel.$scope = null;\n          // make sure no route is associated to this panel\n          panel.$route = null;\n          // make sure no element is associated to this panel\n          if (removeElementRef) {\n            panel.$element = null;\n          }\n        }\n      }\n\n      function getSelectedPanel() {\n        if (angular.isNumber(scope.selectedIndex) && scope.selectedIndex !== -1) {\n          return scope.panels[scope.selectedIndex];\n        }\n\n        return getDefaultPanel();\n      }\n\n      function getDefaultPanel() {\n        if (!defaultPanel) {\n          // initialize default panel since we need it.\n          defaultPanel = {};\n          defaultPanel.$element = angular.element(element[0].getElementsByClassName('default-panel')[0]);\n        }\n        return defaultPanel;\n      }\n\n      if (scope.fisStacked && attrs.fisViews && attrs.fisSelectedIndex) {\n        // if a fisViews attribute is provided, operate in state preservation mode\n        scope.$watchCollection(attrs.fisViews, function (value) {\n          // don't need to find out what was added; scopes will be added if selected and a route is followed\n          scope.panels = value;\n        });\n        scope.$watch(attrs.fisSelectedIndex, function (idx) {\n          scope.selectedIndex = idx;\n        });\n      }\n\n      element.addClass('fis-view-panel');\n\n      scope.$on('$routeChangeSuccess', update);\n    }\n  };\n};\n\n\n// WEBPACK FOOTER //\n// ./views/views.directive.js","export default function ($route, $anchorScroll, $compile, $controller, $animate, fisI18nService, $timeout) {\r\n  'ngInject';\r\n  // Makes a scope \"freezable\". This means it can be detached and re-attached\r\n  // to the scope hierarchy. This code is specific to the fisView and can't be reused\r\n  // for any scope. A frozen scope will not participate in the $apply cycle so\r\n  // watches inside it will not be checked.\r\n  // The scope keeps the same prototype so it could still modify models in the parent.\r\n  // It will not be able to $emit events to the parent and the parent will not be able to $broadcast to it.\r\n  // The reason we are freezing the scope is to prevent performance degradation when\r\n  // multiple tabs are opened.\r\n  function makeFreezable(s) {\r\n    // make sure that when the parent scope is destroyed,\r\n    // we re-attach the scope so that it can also be destroyed\r\n    s.$parent.$on('$destroy', function () {\r\n      if (s.$$frozen) {\r\n        s.$freeze(false);\r\n      }\r\n      // tell fisViews that if the lastSelectedPanel was destroyed, ignore it and lose the reference on it so it can be GC'd\r\n      s.$$fisGC = true;\r\n    });\r\n\r\n    s.$freeze = function (freeze) {\r\n      if (freeze && !this.$$frozen) {\r\n        // let the scope know it is about to be frozen\r\n        this.$broadcast('fisFreezing');\r\n\r\n        // marker to indicate the scope is frozen\r\n        this.$$frozen = {};\r\n        // preserve the parent (ngRepeat scope)\r\n        this.$$frozen.$parent = this.$parent;\r\n\r\n        // detach from the parent\r\n        this.$parent.$$childHead = null;\r\n        this.$parent.$$childTail = null;\r\n\r\n        this.$parent = null;\r\n        // let the scope know it has been frozen\r\n        this.$broadcast('fisFrozen');\r\n      } else if (!freeze && this.$$frozen) {\r\n        // let the scope know it is about to be unfrozen\r\n        this.$broadcast('fisUnfreezing');\r\n\r\n        // re-attach the scope to its parent\r\n        this.$parent = this.$$frozen.$parent;\r\n        this.$parent.$$childHead = this;\r\n        this.$parent.$$childTail = this;\r\n        this.$$frozen = null;\r\n\r\n        // let the scope know it has been unfrozen\r\n        this.$broadcast('fisUnfrozen');\r\n      }\r\n    };\r\n\r\n    return s;\r\n  }\r\n\r\n  return {\r\n    restrict: 'EA',\r\n    scope: true, // needed because we now put stuff in the scope\r\n    replace: true,\r\n    controller: ['$scope', '$attrs', 'fisPubSubService', function ($scope, $attrs, fisPubSubService) {\r\n      /**\r\n       * Provides translation for the view displayed in the view panel.\r\n       * This overrides the shell controller's i18n function and provides\r\n       * automatic namespacing based on the current view panel's module and id.\r\n       * e.g. for a view panel in the \"desktop-ui\" module and an id of \"dashboard\", the key,\r\n       * if it doesn't already contain dots \".\", will be prefixed by \"desktop-ui.dashboard.\".\r\n       * @param {string} key the i18n key to provide a translation for\r\n       * @param {string} def t{{item.label}}he default value, if the key can't be found\r\n       */\r\n      var unsubscribe = fisPubSubService.subscribe('shell.i18nReady', function () {\r\n        $scope.i18n = function (key, def) {\r\n          if (angular.isDefined(key)) {\r\n            if (key.indexOf('.') === -1) {\r\n              // TODO: when we allow reuse of viewPanels, the view panel should not be the active view panel\r\n              //      because this fisViewPanel directive will occur multiple times in the dom (once for each tab).\r\n              //      If we leave it like that, all strings of all views will get changed each time the active view is changed.\r\n              var view = $scope.activeViewPanel();\r\n              if (view) {\r\n                key = [view.module, view.id, key];\r\n              }\r\n            }\r\n            return fisI18nService.translate(key, def);\r\n          }\r\n        };\r\n        // Un-subscribing shell.i18nReady event\r\n        unsubscribe();\r\n      });\r\n\r\n      $scope.setTitle = function (value) {\r\n        $scope.activeViewPanel().setTitle(value);\r\n      };\r\n\r\n      $scope.resetTitle = function () {\r\n        $scope.activeViewPanel().resetTitle();\r\n      };\r\n\r\n      $scope.setIcon = function (value) {\r\n        $scope.activeViewPanel().setIcon(value);\r\n      };\r\n\r\n      if ($attrs.fisStacked && $attrs.fisStacked === 'false') {\r\n        $scope.fisStacked = false;\r\n      } else {\r\n        $scope.fisStacked = true;\r\n      }\r\n    }],\r\n    template: `<div fis-message-container>\r\n                  <div class=\"fis-info-panel\"></div>\r\n                  <div ng-repeat=\"panel in panels\" class=\"fis-panel-container ng-hide\" fis-element=\"panel\" fis-pub-sub></div>\r\n                  <div class=\"default-panel\"></div>\r\n                </div>`,\r\n    link: function (scope, element, attrs) {\r\n      // the default panel is used if none of the provided panels are selected or if no panels are provided\r\n      var defaultPanel;\r\n        // the previously selected panel\r\n      var lastSelectedPanel;\r\n        // expression to evaluate when contents is loaded\r\n      var onloadExp = attrs.fisOnLoad || '';\r\n      var updateTimeout;\r\n      // start with no panels\r\n      scope.panels = undefined;\r\n\r\n      function matchingPathParams(currentParams, panelParams) {\r\n        if (Object.keys(currentParams).length > 0) {\r\n          for (var prop in currentParams) {\r\n            if (currentParams[prop] != panelParams[prop]) { // eslint-disable-line\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n      function updatePanel(panel) {\r\n        lastSelectedPanel = panel;\r\n        // we need the current route...\r\n        var current = $route.current;\r\n        // and the current route's local variables\r\n        var locals = current && current.locals;\r\n        // and the template for that route\r\n        var template = locals && locals.$template;\r\n\r\n        var activePanel = scope.activeViewPanel();\r\n\r\n        if (current && current.templateUrl && activePanel && current.templateUrl.indexOf(activePanel.partial) !== -1 && matchingPathParams(current.pathParams, activePanel.params)) {\r\n          // if the selected panel is for the current route, simply unfreeze its scope\r\n          if (current && panel.$route && panel.$route.originalPath === current.$$route.originalPath) {\r\n            // detach the scope from the scope hierarchy\r\n            panel.$scope.$freeze(false);\r\n            // panel already loaded, just broadcast it\r\n            panel.$scope.$broadcast('$panelContentLoaded');\r\n          } else if (template) {\r\n            // The panel is not for the current route, replace its contents with the route's template\r\n            // Clear the contents of the selected panel\r\n            clearContent(panel, false);\r\n            // associate with the current route\r\n            panel.$route = current.$$route;\r\n            // make the route template the panel's content in an animatable way\r\n            $animate.enter(angular.element('<div></div>').html(template).contents(), panel.$element);\r\n\r\n            // compile the panel's content\r\n            var link = $compile(panel.$element.contents());\r\n            var controller;\r\n            // grab a hold of the scope that the ng-repeat created for the panel div\r\n            var repeatScope = panel.$element.scope();\r\n            // create a child scope and make it freezable\r\n            panel.$scope = current.scope = makeFreezable(repeatScope.$new());\r\n            // if args are present in the item, make it available on the scope as viewArgs\r\n            if (panel.args) {\r\n              panel.$scope.viewArgs = panel.args;\r\n            }\r\n\r\n            // if the current route declares a controller\r\n            if (current.controller) {\r\n              // add the current panel's scope to the route's local variables\r\n              locals.$scope = panel.$scope;\r\n              // add the panel's element to the route's local variables\r\n              locals.$element = panel.$element;\r\n              // create the controller with the injectable locals\r\n              controller = $controller(current.controller, locals);\r\n              // attach to the panel\r\n              panel.$element.children().data('$ngControllerController', controller);\r\n            }\r\n\r\n            // link the compiled contents with the panel's scope\r\n            link(panel.$scope);\r\n            // emit the $viewContentLoaded event like ng-view does\r\n            panel.$scope.$emit('$viewContentLoaded');\r\n\r\n            // execute the onload handler\r\n            panel.$scope.$eval(onloadExp);\r\n\r\n            // $anchorScroll might listen on event...\r\n            $anchorScroll();\r\n          } else if (panel.$scope && panel.args.targetScope.location.$$url) {\r\n            // check for presence of scope.alert and scope.open: these are defined in the shell\r\n            // and this could be used outside the shell since it is in fis-components.\r\n            // no template for this route, display relevant message alert box (if a message is available)\r\n            var msg;\r\n            if (scope.alert && (msg = fisI18nService.translate('error-path-not-found', ''))) {\r\n              scope.alert(msg, { title: fisI18nService.translate('error-dialog-title') });\r\n            }\r\n            // open the last open panel\r\n            if (scope.open) {\r\n              scope.open(lastSelectedPanel.path);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      function update() {\r\n        // find the selected panel\r\n        var panel = getSelectedPanel();\r\n        // ensure we are not dealing with a lastSelectedPanel that was destroyed\r\n        // this can happen when switching menus\r\n        if (lastSelectedPanel && lastSelectedPanel.$scope && lastSelectedPanel.$scope.$$fisGC) {\r\n          // the scope (and therefore the panel) was destroyed. Lose the references\r\n          clearContent(lastSelectedPanel, true);\r\n          lastSelectedPanel = null;\r\n        }\r\n\r\n        if (lastSelectedPanel !== panel) { // eslint-disable-line\r\n          // we are changing panel, or the last panel was destroyed...\r\n          if (lastSelectedPanel) {\r\n            // hide the previous one if it still exists\r\n            $animate.addClass(lastSelectedPanel.$element, 'ng-hide');\r\n            lastSelectedPanel.$element.removeClass('fis-selected');\r\n\r\n            if (lastSelectedPanel.saveState === false) {\r\n              // View doesn't want state saving. Destroy the scope.\r\n              clearContent(lastSelectedPanel, false);\r\n            } else if (lastSelectedPanel.$scope) {\r\n              // freeze the scope on the previous panel\r\n              // scope may not be there for nav item without partial and secondary menu\r\n              lastSelectedPanel.$scope.$freeze(true);\r\n            }\r\n          }\r\n          // show the selected one\r\n          if (panel.$element) {\r\n            $animate.removeClass(panel.$element, 'ng-hide').then(function () {\r\n              panel.$element.addClass('fis-selected');\r\n              if (updateTimeout) {\r\n                $timeout.cancel(updateTimeout);\r\n              }\r\n              updateTimeout = $timeout(function () {\r\n                updatePanel(panel);\r\n              }, 0);\r\n            });\r\n          }\r\n        } else {\r\n          updatePanel(panel);\r\n        }\r\n      }\r\n\r\n      // This function is invoked when a panel is already opened but\r\n      // the route it is currently associated to needs to change\r\n      function clearContent(panel, removeElementRef) {\r\n        // remove the contents, if any, in an animatable way\r\n        var contents = panel.$element.contents();\r\n\r\n        if (contents.length > 0) {\r\n          $animate.leave(contents);\r\n        }\r\n\r\n        if (panel.$scope) {\r\n          // destroy the scope associated to the panel's content\r\n          panel.$scope.$destroy();\r\n          // make sure we don't keep a reference on it for GC\r\n          panel.$scope = null;\r\n          // make sure no route is associated to this panel\r\n          panel.$route = null;\r\n          // make sure no element is associated to this panel\r\n          if (removeElementRef) {\r\n            panel.$element = null;\r\n          }\r\n        }\r\n      }\r\n\r\n      function getSelectedPanel() {\r\n        if (angular.isNumber(scope.selectedIndex) && scope.selectedIndex !== -1) {\r\n          return scope.panels[scope.selectedIndex];\r\n        }\r\n\r\n        return getDefaultPanel();\r\n      }\r\n\r\n      function getDefaultPanel() {\r\n        if (!defaultPanel) {\r\n          // initialize default panel since we need it.\r\n          defaultPanel = {};\r\n          defaultPanel.$element = angular.element(element[0].getElementsByClassName('default-panel')[0]);\r\n        }\r\n        return defaultPanel;\r\n      }\r\n\r\n      if (scope.fisStacked && attrs.fisViews && attrs.fisSelectedIndex) {\r\n        // if a fisViews attribute is provided, operate in state preservation mode\r\n        scope.$watchCollection(attrs.fisViews, function (value) {\r\n          // don't need to find out what was added; scopes will be added if selected and a route is followed\r\n          scope.panels = value;\r\n        });\r\n        scope.$watch(attrs.fisSelectedIndex, function (idx) {\r\n          scope.selectedIndex = idx;\r\n        });\r\n      }\r\n\r\n      element.addClass('fis-view-panel');\r\n\r\n      scope.$on('$routeChangeSuccess', update);\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./views/views.directive.js","module.exports = 'ngResource';\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"'ngResource'\"\n// module id = 61\n// module chunks = 0","module.exports = 'ngRoute';\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"'ngRoute'\"\n// module id = 62\n// module chunks = 0","module.exports = 'ngSanitize';\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"'ngSanitize'\"\n// module id = 63\n// module chunks = 0","module.exports = _;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"_\"\n// module id = 64\n// module chunks = 0","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 65\n// module chunks = 0"],"sourceRoot":""}