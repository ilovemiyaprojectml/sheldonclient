export default function ($q) {
  'ngInject';
  var listeners = {};
  var count = 0;

  function addListener(topic, callback, sticky) {
    var id = count++;
    if (!callback || !topic) {
      return;
    }
    listeners[topic] = (listeners[topic] || {});
    listeners[topic]._sticky = sticky || listeners[topic]._sticky;
    listeners[topic][id] = callback;

    if (sticky && listeners[topic]._lastPayload !== undefined) {
      // invoke callback immediately with the last payload
      callback.call(listeners[topic]._lastPayload, listeners[topic]._lastPayload, topic);
    }
    var ret = function () {
      // handle allows removing the listener
      if (listeners[topic] && listeners[topic][id]) {
        delete listeners[topic][id];
      }
    };
    // add properties to function to allow inspecting the topic it is attached to.
    ret.topic = topic;
    ret.id = id;
    return ret;
  }

  /**
   * @name publish
   * @description Publish to a topic
   * @param [topic, payload] Passing the topic information and payload information.
   */
  this.publish = function (topic, payload) {
    var deferred = $q.defer();
    var retPromises = [];
    var l = listeners[topic] || {};

    if (l._sticky) {
      l._lastPayload = payload;
    }
    for (var i in l) {
      if (i.indexOf('_') !== 0) {
        // Wrap every returned value into a promise. Non-promise return values will be resolved
        // immediately.
        retPromises.push($q.when(l[i].call(payload, payload, topic)));
      }
    }

    $q.all(retPromises).then(function (retVals) {
      if (retVals.indexOf(false) > -1) {
        deferred.reject();
      } else {
        deferred.resolve(retVals);
      }
    }, function () {
      deferred.reject();
    });

    return deferred.promise;
  };

  /**
   * @name subscribe
   * @description Subscribe to a topic
   * @param [topic, callback, sticky]
   * @memberOf sungard.event
   * @returns Adds the listener and passes the handle.
   */
  this.subscribe = function (topic, callback, sticky) {
    return addListener(topic, callback, sticky);
  };

  /**
   * @name unsubscribe
   * @description Unsubscribe to a topic
   * @param [handle] Passing the handle to find out the topic information from the handle.
   * @memberOf sungard.event
   */
  this.unsubscribe = function (handle) {
    if (typeof (handle) === 'function') {
      handle();
    } else if (listeners[handle.topic] && listeners[handle.topic][handle.id]) {
      delete listeners[handle.topic][handle.id];
    }
  };
}
