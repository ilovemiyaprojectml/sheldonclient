describe('fis-hook directive', function () {
  const tplId = 'hook.directive.test.js.tpl';
  let scope;
  let compile;

  beforeEach(angular.mock.module('fis.core'));

  beforeEach(inject((fisTemplateCacheService, $rootScope, $compile) => {
    scope = $rootScope.$new();
    compile = $compile;
    fisTemplateCacheService.addTemplate(tplId, '<div>{{fisHookData}}</div>');
  }));

  afterEach(() => {
    scope.$destroy();
  });

  it('should insert template by id', () => {
    scope.fisHookData = 'hello';
    const elem = compile(`<fis-hook id="${tplId}"></fis-hook>`)(scope);
    scope.$apply();
    expect(elem.text()).toBe('hello');
  });

  it('should make fisHookData available on scope', () => {
    scope.myData = '\'A\'';

    // fis-hook both watches the attribute for change but also parses the attribute value... bad
    const elem = compile(`<fis-hook id="${tplId}" fis-hook-data="{{myData}}"></fis-hook>`)(scope);
    scope.$apply();
    expect(elem.text()).toBe('A');

    // should change
    scope.myData = '\'B\'';
    scope.$apply();
    expect(elem.text()).toBe('B');
  });
});
