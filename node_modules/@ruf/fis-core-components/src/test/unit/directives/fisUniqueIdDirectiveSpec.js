'use strict';

/**
 * Test for fisUniqueId directive
 * Tests that ensure the right ids are generated may be found in fisUniqueIdServiceSpec.js
 */
describe('fis-unique-id', function () {
  beforeEach(angular.mock.module('fis.core'));
  beforeEach(function () {
    fis.initParams().appStage = 'T';
  });

  afterEach(function () {
    fis.initParams().appStage = 'P';
  });

  it('Should set fisId in scope to model identifier if bound to a model', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var element = $compile('<div fis-unique-id type="text" ng-model="expected.value" ng-click="open(item.path, $event)"></div>')($rootScope);
      $rootScope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('expected_value_1');
    });
  });

  it('Should set fisId if fisNoIncrement is given and true', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var element = $compile('<p fis-unique-id="idBase" fis-id-no-increment="true"></p><p fis-unique-id="idBase" fis-id-no-increment="true"></p>')($rootScope);
      $rootScope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('idBase');
      expect(element[1].attributes.fisId.value).toEqual('idBase');
    });
  });

  it('Should set fisId if fisNoIncrement is given but no value', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var element = $compile('<p fis-unique-id="idBase" fis-id-no-increment></p>')($rootScope);
      $rootScope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('_1');
    });
  });

  it('Should set fisId in scope to ng-click action if it exists and element not bound to a model', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      scope.i18n = jasmine.createSpy('i18n');
      var element = $compile('<div fis-unique-id type="text" ng-click="open(item.path, $event)" fis-i18n="i18n.key"></div>')(scope);
      scope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('open_item_path_event__1');
    });
  });

  it('Should set fisId in scope to item.path if it exists, and ng-click exists and element not bound to a model', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      scope.i18n = jasmine.createSpy('i18n');
      scope.item = {};
      scope.item.path = 'path';
      var element = $compile('<div fis-unique-id type="text" ng-click="open(item.path, $event)" fis-i18n="i18n.key"></div>')(scope);
      scope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('path_1');
    });
  });

  it('Should set fisId in scope to i18n key if it exists and element not bound to a model nor has an ng-click action', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      scope.i18n = jasmine.createSpy('i18n');
      var element = $compile('<div fis-unique-id type="text" fis-i18n="title"></div>')(scope);
      scope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('title_1');
    });
  });

  it('Should generate unique ids for more than one element with same model binding', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      scope.i18n = jasmine.createSpy('i18n');
      var element = $compile('<div fis-unique-id type="text" fis-i18n="i18n.key"></div><div fis-unique-id type="text" fis-i18n="i18n.key"></div><div fis-unique-id type="text" fis-i18n="i18n.newkey"></div>')(scope);
      scope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('i18n_key_1');
      expect(element[1].attributes.fisId.value).toEqual('i18n_key_2');
      expect(element[2].attributes.fisId.value).toEqual('i18n_newkey_1');
    });
  });
    // seed tests
  it('Should use the seed to influence ids on children', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var element = $compile('<div fis-seed="simple" fis-unique-id="child1" type="text">' +
                                        '<div fis-unique-id="child2" type="text"></div>' +
                                    '</div>')(scope);
      scope.$apply();
      expect(element[0].attributes.fisId.value).toEqual('child1_simple_1');
      expect(element.children()[0].attributes.fisId.value).toEqual('child2_simple_1');
    });
  });
  it('Should use the correct seed to influence ids on children', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var element = $compile('<div>' +
                                        '<div fis-seed="right" type="text">' +
                                        '   <div fis-unique-id="child1" type="text"></div>' +
                                        '</div>' +
                                        '<div fis-seed="wrong" type="text"></div>' +
                                    '</div>')(scope);
      scope.$apply();
      expect(element.children().first().children()[0].attributes.fisId.value).toEqual('child1_right_1');
    });
  });
  it('Should apply the seeds consistantly and in order and to both children and increment the same unique id', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var element = $compile('<div fis-seed="first">' +
                                        '<div fis-seed="second" type="text">' +
                                        '   <div fis-seed="third" fis-unique-id="child1" type="text"></div>' +
                                        '   <div fis-seed="third" fis-unique-id="child1" type="text"></div>' +
                                        '</div>' +
                                        '<div fis-seed="wrong" type="text"></div>' +
                                    '</div>')(scope);
      scope.$apply();
      expect(element.children().first().children()[0].attributes.fisId.value).toEqual('child1_third_second_first_1');
      expect(element.children().first().children()[1].attributes.fisId.value).toEqual('child1_third_second_first_2');
    });
  });
});
