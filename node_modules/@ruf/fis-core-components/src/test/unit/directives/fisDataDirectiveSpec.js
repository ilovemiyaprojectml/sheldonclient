describe('fis-data', function () {
  'use strict';
  var $httpBackend;
  var $compile;
  var $timeout;
  var $rootScope;
  var $q;

  var userList = [
    {
      id: 1,
      firstName: 'Peter',
      lastName: 'Gelderbloem'
    },
    {
      id: 2,
      email: 'user2@sungard.com',
      firstName: 'user2',
      lastName: 'user2'
    }
  ];

  var userListObject = {
    data: userList,
    total: 10
  };

  var customListObject = {
    data1: userList,
    total1: 10
  };

  var additionalData = {
    data1: userList,
    total1: 10,
    additionalData: 'yes'
  };

  var userSchema = {
    data1: userList,
    total1: 2
  };

  beforeEach(angular.mock.module('fis.core'));
  beforeEach(angular.mock.inject(function (_$httpBackend_, _$compile_, _$timeout_, _$rootScope_, _$q_) {
    $httpBackend = _$httpBackend_;
    $compile = _$compile_;
    $timeout = _$timeout_;
    $rootScope = _$rootScope_;
    $q = _$q_;
    $httpBackend.when('GET', 'api/grid/users').respond(userList);
    $httpBackend.when('GET', 'api/grid/userSchema').respond(userSchema);
  }));

  function flushAndApply() {
    $timeout.flush();
    $httpBackend.flush();
    $rootScope.$apply();
  }

  function getController(scope, fisData) {
    var elem;
    if (angular.isString(fisData)) {
      elem = $compile(fisData)(scope);
      return elem.controller('fisData');
    } else if (fisData.controller) {
      return fisData.controller('fisData');
    }
    return fisData;
  }

  function callFetchData(scope, fisData, params, expectationsFn) {
    var ctrl = getController(scope, fisData);

    if (angular.isFunction(params)) {
      expectationsFn = params;
      params = undefined;
    }

    ctrl.fetchData(params).then(expectationsFn);

    return ctrl;
  }

  describe('controller', function () {
    it('should fail if no expression is given to the fis-data attribute', function () {
      var scope = $rootScope.$new();
      var msg = 'should have thrown';

      try {
        getController(scope, '<div fis-data=""></div>');
      } catch (err) {
        msg = err.message;
      }
      expect(msg).toEqual('You must provide a value to the fis-data attribute');
    });

    it('getSchema should return a default schema for the data it expects', function () {
      var scope = $rootScope.$new();
      scope.userList = userList;
      var ctrl = getController(scope, '<div fis-data="userList"></div>');
      expect(ctrl.getSchema()).toEqual({ data: undefined, total: undefined });
    });

    it('should fetch data from backend service', function () {
      var scope = $rootScope.$new();
      callFetchData(scope, '<div fis-data="api/grid/users"></div>', function (resp) {
        expect(resp.data.length).toBe(2);
      });
      flushAndApply();
    });

    it('should accept data coming from a scope variable', function () {
      var scope = $rootScope.$new();
      scope.userList = userList;
      callFetchData(scope, '<div fis-data="userList"></div>', function (resp) {
        expect(resp).not.toBe(userList);
        expect(resp.data).toBe(userList);
      });
    });

    it('should accept a function reference that returns data immediately', function () {
      var scope = $rootScope.$new();
      scope.userList = userList;
      scope.change = 0;
      var count = 0;
      scope.getData = function (params) {
        expect(params).toEqual({});
        count++;
        return userList;
      };

      callFetchData(scope, '<div fis-data="getData" fis-refresh="change"></div>', function (resp) {
        expect(resp).not.toBe(userList);
        expect(resp.data).toBe(userList);
      });

      expect(count).toBe(1);
    });

    it('should accept a function reference that returns a promise', function () {
      var scope = $rootScope.$new();
      scope.userList = userList;
      scope.change = 0;
      var count = 0;
      var deferred = $q.defer();
      scope.getData = function (params) {
        expect(params).toEqual({});
        count++;
        $timeout(function () {
          deferred.resolve(userList);
        }, 0);
        return deferred.promise;
      };

      callFetchData(scope, '<div fis-data="getData" fis-refresh="change"></div>', function (resp) {
        expect(resp).not.toBe(userList);
        expect(resp.data).toBe(userList);
      });

      $timeout.flush();

      expect(count).toBe(1);
    });

    it('should accept a function reference that receives params', function () {
      var scope = $rootScope.$new();
      scope.change = 0;
      var count = 0;

      scope.getData = function (params) {
        expect(params).toEqual({ test: 'value' });
        count++;
        return userList;
      };

      callFetchData(scope, '<div fis-data="getData" fis-refresh="change" fis-param-test="value"></div>', angular.noop);

      expect(count).toBe(1);
    });

    it('should normalize data using a custom fis-schema-data and fis-schema-total', function () {
      var scope = $rootScope.$new();

      scope.userSchema = userSchema;

      callFetchData(scope, '<div fis-data="userSchema" fis-schema-data="data1" fis-schema-total="total1"></div>', function (resp) {
        expect(resp.data).toEqual(userSchema.data1);
        expect(resp.total).toBe(userSchema.total1);
      });
    });

    it('should preserve custom properties in received data object', function () {
      var scope = $rootScope.$new();

      scope.extraData = additionalData;

      callFetchData(scope, '<div fis-data="extraData" fis-schema-data="data1" fis-schema-total="total1"></div>', function (resp) {
        expect(resp.data).toEqual(additionalData.data1);
        expect(resp.total).toBe(additionalData.total1);
        expect(resp.additionalData).toBe(additionalData.additionalData);
      });
    });

    it('fetchData should normalize data received from backend with custom fis-schema-data and fis-schema-total', function () {
      var scope = $rootScope.$new();

      callFetchData(scope, '<div fis-data="api/grid/userSchema" fis-schema-data="data1" fis-schema-total="total1"></div>', function (resp) {
        expect(resp.data).toEqual(userSchema.data1);
        expect(resp.total).toBe(userSchema.total1);
      });
      $httpBackend.flush();
    });

    it('should provide empty values when data from backend does not have matching fis-schema-data and fis-schema-total', function () {
      var scope = $rootScope.$new();

      callFetchData(scope, '<div fis-data="api/grid/userSchema" fis-schema-data="nil" fis-schema-total="nil"></div>', function (resp) {
        expect(resp.data).toEqual([]);
        expect(resp.total).toBeUndefined();
      });
      $httpBackend.flush();
    });

    it('should provide empty values when data from scope does not have matching fis-schema-data and fis-schema-total', function () {
      var scope = $rootScope.$new();
      scope.list = customListObject;

      callFetchData(scope, '<div fis-data="list" fis-schema-data="nil" fis-schema-total="nil"></div>', function (resp) {
        expect(resp.data).toEqual([]);
        expect(resp.total).toBeUndefined();
      });
    });

    it('should disregard provided schema if data uses standard properties (data & total)', function () {
      var scope = $rootScope.$new();
      scope.list = userListObject;

      callFetchData(scope, '<div fis-data="list" fis-schema-data="nil" fis-schema-total="nil"></div>', function (resp) {
        expect(resp.data).toEqual(userListObject.data);
        expect(resp.total).toBe(userListObject.total);
      });
    });

    it('should disregard provided schema if data received is an array', function () {
      var scope = $rootScope.$new();
      scope.list = userList;

      callFetchData(scope, '<div fis-data="list" fis-schema-data="nil" fis-schema-total="nil"></div>', function (resp) {
        expect(resp.data).toEqual(userList);
        expect(resp.total).toBeUndefined();
      });
    });
  });

  describe('fis-sort', function () {
    var userList2SortedStateAsc = [
      { id: 3, state: 'Florida', country: 'USA' },
      { id: 2, state: 'New Jersey', country: 'USA' },
      { id: 1, state: 'Western Cape', country: 'South Africa' }
    ];

    var userList2SortedStateAscCountryAsc = [
      { id: 3, state: 'Florida', country: 'USA' },
      { id: 4, state: 'New Jersey', country: 'The USA' },
      { id: 2, state: 'New Jersey', country: 'USA' },
      { id: 1, state: 'Western Cape', country: 'South Africa' }
    ];

    var userList2SortedStateDesc = [
      { id: 1, state: 'Western Cape', country: 'South Africa' },
      { id: 5, state: 'Vermont', country: 'USA' },
      { id: 7, state: 'Ohio', country: 'USA' },
      { id: 2, state: 'New Jersey', country: 'USA' },
      { id: 3, state: 'Florida', country: 'USA' }
    ];

    beforeEach(angular.mock.inject(function () {
      $httpBackend.when('GET', 'api/grid/users?sort=state,asc').respond(userList2SortedStateAsc);
      $httpBackend.when('GET', 'api/grid/users?sort=state,desc').respond(userList2SortedStateDesc);
      $httpBackend.when('GET', 'api/grid/users?sort=state,asc&sort=country,asc').respond(userList2SortedStateAscCountryAsc);
    }));

    it('should use change the assignable expression if different sorting is applied', function () {
      var scope = $rootScope.$new();
      var sortBy = ['state,asc'];

      $httpBackend.expectGET('api/grid/users?sort=state,asc');

      var ctrl = callFetchData(scope, '<div fis-data="api/grid/users" fis-sort="results"></div>', { sort: sortBy }, function (resp) {
        expect(resp.data.length).toBe(3);
        expect(scope.results).toEqual({ field: 'state', dir: 'asc' });
      });
      flushAndApply();

      $httpBackend.expectGET('api/grid/users?sort=state,desc');

      sortBy = ['state,desc'];
      callFetchData(scope, ctrl, { sort: sortBy }, function (resp) {
        expect(resp.data.length).toBe(5);
        expect(scope.results).toEqual({ field: 'state', dir: 'desc' });
      });
      flushAndApply();
    });

    it('should allow sorting by one or more fields', function () {
      var scope = $rootScope.$new();
      var sortBy = ['state,asc'];

      $httpBackend.expectGET('api/grid/users?sort=state,asc');

      var ctrl = callFetchData(scope, '<div fis-data="api/grid/users" fis-sort="results"></div>', { sort: sortBy }, function (resp) {
        expect(resp.data.length).toBe(3);
        expect(scope.results).toEqual({ field: 'state', dir: 'asc' });
      });
      flushAndApply();

      $httpBackend.expectGET('api/grid/users?sort=state,asc&sort=country,asc');

      sortBy.push('country,asc');
      callFetchData(scope, ctrl, { sort: sortBy }, function (resp) {
        expect(resp.data.length).toBe(4);
        expect(scope.results).toEqual([{ field: 'state', dir: 'asc' }, { field: 'country', dir: 'asc' }]);
      });
      flushAndApply();
    });
  });

  describe('fis-param-* attributes', function () {
    'use strict';

    var userList = [
      {
        id: '1',
        name: 'user1'
      },
      {
        id: '2',
        name: 'user2'
      }
    ];

    beforeEach(angular.mock.inject(function () {
      $httpBackend.when('GET', 'api/grid/users?foo1=bar1&foo2=bar2').respond(userList);
      $httpBackend.when('GET', 'api/grid/users?foo1=bar1&foo2=bar3').respond([1, 2, 3]);
      $httpBackend.when('GET', 'api/grid/users?foo1=bar1&foo2=bar2&q=user').respond([1, 2, 3, 4]);
    }));

    it('should add additional fisParam attributes to the Resource call', function () {
      var scope = $rootScope.$new();

      $httpBackend.expectGET('api/grid/users?foo1=bar1&foo2=bar2');

      callFetchData(scope, '<div fis-data="api/grid/users" fis-param-foo1="bar1" fis-param-foo2="bar2"></div>', function (resp) {
        expect(resp.data.length).toBe(2);
      });

      flushAndApply();
    });

    it('should add additional fisParam attributes using scope values to the Resource call', function () {
      var scope = $rootScope.$new();
      scope.foo = {
        id1: 'bar1',
        id2: 'bar2'
      };

      $httpBackend.expectGET('api/grid/users?foo1=bar1&foo2=bar2');

      var ctrl = callFetchData(scope, '<div fis-data="api/grid/users" fis-param-foo1="{{foo.id1}}" fis-param-foo2="{{foo.id2}}"></div>', function (resp) {
        expect(resp.data.length).toBe(2);
      });

      flushAndApply();

      // if values change, next fetchData call should reflect change
      $httpBackend.expectGET('api/grid/users?foo1=bar1&foo2=bar3');
      scope.foo.id2 = 'bar3';
      scope.$apply();

      ctrl.fetchData().then(function (resp) {
        expect(resp.data.length).toBe(3);
      });

      flushAndApply();
    });

    it('should add additional fisParam attributes with literal values to the Resource call, even when used within an isolated scope', function () {
      var parent = $rootScope.$new();
      var isolate = parent.$new(true);

      expect(isolate.hasOwnProperty('$$isolateBindings')).toBe(true);

      $httpBackend.expectGET('api/grid/users?foo1=bar1&foo2=bar2');

      callFetchData(isolate, '<div fis-data="api/grid/users" fis-param-foo1="bar1" fis-param-foo2="bar2"></div>', function (resp) {
        expect(resp.data.length).toBe(2);
      });

      flushAndApply();
    });

    it('fisParam attributes should add to provided params object', function () {
      var scope = $rootScope.$new();
      $httpBackend.expectGET('api/grid/users?foo1=bar1&foo2=bar2&q=user');

      callFetchData(scope, '<div fis-data="api/grid/users" fis-param-foo1="bar1" fis-param-foo2="bar2"></div>',
        { q: 'user', foo1: 'overwritten' },
        function (resp) {
          expect(resp.data.length).toBe(4);
        }
      );

      flushAndApply();
    });
  });

  afterEach(function () {
    $httpBackend.verifyNoOutstandingExpectation();
    $httpBackend.verifyNoOutstandingRequest();
  });
});

describe('fis-data using custom directive', function () {
  'use strict';
  var $httpBackend;
  var userList = [
    {
      id: 1,
      state: 'Western Cape',
      country: 'South Africa',
      dateOfBirth: null,
      email: 'peter.gelderbloem@sungard.com',
      firstName: 'Peter',
      lastName: 'Gelderbloem',
      gender: 'male',
      city: 'Cape Town',
      dateOfJoining: null,
      countryOfBirth: 'South Africa',
      mothersCountry: 'Germany',
      fathersCountry: 'India',
      favouriteCountry: 'Botswana'
    },
    {
      id: 2,
      state: 'Western Cape',
      country: 'South Africa',
      dateOfBirth: null,
      email: 'peter.gelderbloem@sungard.com',
      firstName: 'user1',
      lastName: 'user1',
      gender: 'male',
      city: 'Cape Town',
      dateOfJoining: null,
      countryOfBirth: 'South Africa',
      mothersCountry: 'Germany',
      fathersCountry: 'India',
      favouriteCountry: 'Botswana'
    }
  ];
  beforeEach(angular.mock.module('fis.core'));
  beforeEach(angular.mock.inject(function (_$httpBackend_) {
    $httpBackend = _$httpBackend_;
    $httpBackend.when('GET', 'api/grid/users').respond(userList);
  }));

  beforeEach(angular.mock.inject(function () {
    angular.module('fis.core').directive('testData', [
      function () {
        return {
          restrict: 'ACE',
          require: 'fisData',
          link: function (scope, elem, attrs, fisData) {
            elem.addClass('fis-test-data');
            if (attrs.fisSchemaData) {
              var schema = fisData.getSchema();
              if (attrs.fisSchemaData === schema.data) {
                elem.addClass('schemaDataCorrect');
              }
            }
            if (attrs.fisSchemaTotal) {
              var schema1 = fisData.getSchema();
              if (attrs.fisSchemaTotal === schema1.total) {
                elem.addClass('schemaTotalCorrect');
              }
            }
            if (attrs.changeListener && attrs.changeListener === 'true') {
              fisData.addDataChangedListener(function () {
                elem.addClass('DataChangedListenerCalled');
              });
            }
            if (attrs.beforeListener && attrs.beforeListener === 'true') {
              fisData.addBeforeFetchListener(function () {
                elem.addClass('BeforeFetchListenerCalled');
              });
            }
            if (attrs.afterListener && attrs.afterListener === 'true') {
              fisData.addAfterFetchListener(function () {
                elem.addClass('AfterFetchListenerCalled');
              });
            }

            if (attrs.changeListener || attrs.beforeListener || attrs.afterListener) {
              var promise = fisData.fetchData({});
              promise.then(function () {
                if (attrs.changeListener && attrs.changeListener === 'true') {
                  fisData.fireDataChanged({});
                }
              });
            }
          }
        };
      }]);
  }));

  it('should not call before fetch listener function if it is not added', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var elem = $compile('<div test-data fis-data="api/grid/users"></div>')(scope);
      $rootScope.$apply();
      // $httpBackend.flush();
      expect(elem.hasClass('BeforeFetchListenerCalled')).toBeFalsy();
    });
  });

  it('should call before fetch listener function before the fetchFn is called', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var elem = $compile('<div test-data fis-data="api/grid/users" before-listener="true"></div>')(scope);
      $rootScope.$apply();
      $httpBackend.flush();
      expect(elem.hasClass('BeforeFetchListenerCalled')).toBeTruthy();
    });
  });

  it('should call after fetch listener function after the fetchFn is called', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var elem = $compile('<div test-data fis-data="api/grid/users" after-listener="true"></div>')(scope);
      $rootScope.$apply();
      $httpBackend.flush();
      expect(elem.hasClass('AfterFetchListenerCalled')).toBeTruthy();
    });
  });

  it('should not call after fetch listener function if it is not added', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var elem = $compile('<div test-data fis-data="api/grid/users"></div>')(scope);
      $rootScope.$apply();
      // $httpBackend.flush();
      expect(elem.hasClass('AfterFetchListenerCalled')).toBeFalsy();
    });
  });

  it('should call data changed listener function when fireDataChanged function is called', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var elem = $compile('<div test-data fis-data="api/grid/users" change-listener="true"></div>')(scope);
      $rootScope.$apply();
      $httpBackend.flush();
      expect(elem.hasClass('DataChangedListenerCalled')).toBeTruthy();
    });
  });

  it('should not call before fetch listener function if it is not added', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var elem = $compile('<div test-data fis-data="api/grid/users"></div>')(scope);
      $rootScope.$apply();
      // $httpBackend.flush();
      expect(elem.hasClass('DataChangedListenerCalled')).toBeFalsy();
    });
  });

  afterEach(function () {
    $httpBackend.verifyNoOutstandingExpectation();
    $httpBackend.verifyNoOutstandingRequest();
  });
});

describe('fis-data using custom directive for additional properties', function () {
  'use strict';
  var $httpBackend;
  var userListComplex = {
    data1: [
      {
        id: 1,
        state: 'Western Cape',
        country: 'South Africa',
        dateOfBirth: null,
        email: 'peter.gelderbloem@sungard.com',
        firstName: 'Peter',
        lastName: 'Gelderbloem',
        gender: 'male',
        city: 'Cape Town',
        dateOfJoining: null,
        countryOfBirth: 'South Africa',
        mothersCountry: 'Germany',
        fathersCountry: 'India',
        favouriteCountry: 'Botswana'
      },
      {
        id: 2,
        state: 'Western Cape',
        country: 'South Africa',
        dateOfBirth: null,
        email: 'peter.gelderbloem@sungard.com',
        firstName: 'user1',
        lastName: 'user1',
        gender: 'male',
        city: 'Cape Town',
        dateOfJoining: null,
        countryOfBirth: 'South Africa',
        mothersCountry: 'Germany',
        fathersCountry: 'India',
        favouriteCountry: 'Botswana'
      }
    ], total1: 2, currentStep: 1, extraParams: ['param1', 'param2', 'param3']
  };
  beforeEach(angular.mock.module('fis.core'));
  beforeEach(angular.mock.inject(function (_$httpBackend_) {
    $httpBackend = _$httpBackend_;
    $httpBackend.when('GET', 'api/grid/usersComplex').respond(userListComplex);
  }));

  beforeEach(angular.mock.inject(function () {
    angular.module('fis.core').directive('testComplex', [
      function () {
        return {
          restrict: 'ACE',
          require: 'fisData',
          scope: true,
          link: function (scope, elem, attrs, fisData) {
            var promise = fisData.fetchData();
            promise.then(function (result) {
              if (result.currentStep && result.extraParams) {
                elem.addClass('additionalPropertiesAdded');
              }
            });
          }
        };
      }]);
  }));

  it('should construct grid with fisData from scope object that returns additional properties along with data and total', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      scope.user = [
        {
          id: 1
        }
      ];
      $compile('<div test-complex fis-data="user" fis-columns="firstName,lastName,email,city,state,country"></div>')(scope);
      $rootScope.$apply();
    });
  });

  it('should construct grid with fisData from resource url that returns additional properties along with data and total', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      var elem = $compile('<div test-complex fis-data="api/grid/usersComplex" fis-columns="firstName,lastName,email,city,state,country"  fis-schema-data="data1" fis-schema-total="total1"></div>')(scope);
      $rootScope.$apply();
      $httpBackend.flush();
      expect(elem.hasClass('additionalPropertiesAdded')).toBeTruthy();
    });
  });

  it('should construct grid with fisData from scope object that returns additional properties along with data and total', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      scope.userComplex = {
        data1: [
          {
            id: 1,
            state: 'Western Cape',
            country: 'South Africa',
            dateOfBirth: null,
            email: 'peter.gelderbloem@sungard.com',
            firstName: 'Peter',
            lastName: 'Gelderbloem',
            gender: 'male',
            city: 'Cape Town',
            dateOfJoining: null,
            countryOfBirth: 'South Africa',
            mothersCountry: 'Germany',
            fathersCountry: 'India',
            favouriteCountry: 'Botswana'
          },
          {
            id: 2,
            state: 'Western Cape',
            country: 'South Africa',
            dateOfBirth: null,
            email: 'peter.gelderbloem@sungard.com',
            firstName: 'user1',
            lastName: 'user1',
            gender: 'male',
            city: 'Cape Town',
            dateOfJoining: null,
            countryOfBirth: 'South Africa',
            mothersCountry: 'Germany',
            fathersCountry: 'India',
            favouriteCountry: 'Botswana'
          }
        ], total1: 2, currentStep: 1, extraParams: ['param1', 'param2', 'param3']
      };
      var elem = $compile('<div test-complex fis-data="userComplex" fis-columns="firstName,lastName,email,city,state,country"  fis-schema-data="data1" fis-schema-total="total1"></div>')(scope);
      $rootScope.$apply();
      expect(elem.hasClass('additionalPropertiesAdded')).toBeTruthy();
    });
  });

  it('should construct grid with fisData from scope function that returns additional properties along with data and total', function () {
    angular.mock.inject(function ($compile, $rootScope) {
      var scope = $rootScope.$new();
      scope.getComplexData = function () {
        return {
          data1: [
            {
              id: 1,
              state: 'Western Cape',
              country: 'South Africa',
              dateOfBirth: null,
              email: 'peter.gelderbloem@sungard.com',
              firstName: 'Peter',
              lastName: 'Gelderbloem',
              gender: 'male',
              city: 'Cape Town',
              dateOfJoining: null,
              countryOfBirth: 'South Africa',
              mothersCountry: 'Germany',
              fathersCountry: 'India',
              favouriteCountry: 'Botswana'
            },
            {
              id: 2,
              state: 'Western Cape',
              country: 'South Africa',
              dateOfBirth: null,
              email: 'peter.gelderbloem@sungard.com',
              firstName: 'user1',
              lastName: 'user1',
              gender: 'male',
              city: 'Cape Town',
              dateOfJoining: null,
              countryOfBirth: 'South Africa',
              mothersCountry: 'Germany',
              fathersCountry: 'India',
              favouriteCountry: 'Botswana'
            }
          ], total1: 2, currentStep: 1, extraParams: ['param1', 'param2', 'param3']
        };
      };
      var elem = $compile('<div test-complex fis-data="getComplexData" fis-columns="firstName,lastName,email,city,state,country"  fis-schema-data="data1" fis-schema-total="total1"></div>')(scope);
      $rootScope.$apply();
      expect(elem.hasClass('additionalPropertiesAdded')).toBeTruthy();
    });
  });

  afterEach(function () {
    $httpBackend.verifyNoOutstandingExpectation();
    $httpBackend.verifyNoOutstandingRequest();
  });
});
