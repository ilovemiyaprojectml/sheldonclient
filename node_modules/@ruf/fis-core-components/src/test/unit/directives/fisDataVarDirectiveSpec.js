'use strict';

/**
 * Test for fisDataVar widget.
 */
describe('fis-dataVar', function () {
  'use strict';

  var $httpBackend;

  var superman = {
    id: 1,
    firstName: 'Clark',
    lastName: 'Kent'
  };

  var batman = {
    id: 2,
    firstName: 'Bruce',
    lastName: 'Wayne'
  };

  var thor = {
    id: 3,
    firstName: 'Thor',
    lastName: 'The thundergod'
  };

  var loki = {
    id: 4,
    firstName: 'loki',
    lastName: 'Trickster'
  };

  var userList = [superman, batman];
  var userList2 = [thor, loki];

  beforeEach(angular.mock.module('fis.core'));

  beforeEach(angular.mock.inject(function (_$httpBackend_) {
    $httpBackend = _$httpBackend_;
    $httpBackend.when('GET', 'api/users').respond(userList);
    $httpBackend.when('GET', 'api/users').respond(userList);
    $httpBackend.when('GET', 'api/users2').respond(userList2);
    $httpBackend.when('GET', 'api/users?lang=en&userId=2').respond([batman]);
    $httpBackend.when('GET', 'api/users?lang=en&userId=1').respond([superman]);
  }));

  it('Data should be placed on the scope', function () {
    angular.mock.inject(function ($compile, $rootScope, $timeout) {
      $rootScope.userId = 2;

      $compile(' <div fis-data-var="myAccount"  fis-data="api/users"/>')($rootScope);

      $rootScope.$apply();
      $timeout.flush();
      $httpBackend.flush();

      var users = $rootScope.myAccount;
      expect(users.length).toBe(2);

      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });
  });

  it('Data should be placed in nested object on the scope', function () {
    angular.mock.inject(function ($compile, $rootScope, $timeout) {
      $rootScope.userId = 2;

      $compile(' <div fis-data-var="user.myAccount"  fis-data="api/users"/>')($rootScope);

      $rootScope.$apply();
      $timeout.flush();
      $httpBackend.flush();

      var users = $rootScope.user.myAccount;
      expect(users.length).toBe(2);

      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });
  });

  it('Parameters should be added to the GET', function () {
    angular.mock.inject(function ($compile, $rootScope, $timeout) {
      $rootScope.userId = 2;
      $rootScope.lang = 'en';

      $compile(' <div fis-data-var="myAccount2"  fis-data="api/users" fis-param-user-id="{{userId}}" fis-param-lang="{{ lang }}" />')($rootScope);

      $rootScope.$apply();
      $timeout.flush();
      $httpBackend.flush();

      var users = $rootScope.myAccount2;
      expect(users.length).toBe(1);
      expect(users[0].firstName).toBe('Bruce');

      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });
  });

  it('Refresh event must be triggered when certain variable on scope is changed', function () {
    angular.mock.inject(function ($compile, $rootScope, $timeout) {
      var microScope = $rootScope.$new(false);
      microScope.abc = 0;
      microScope.userId = 1;
      microScope.lang = 'en';

      $compile(' <div fis-data-var="myAccount3" fis-refresh="abc" fis-data="api/users" fis-param-user-id="{{userId}}" fis-param-lang="{{ lang }}" />')(microScope);

      microScope.$apply();
      $timeout.flush();
      $httpBackend.flush();

      var users = microScope.myAccount3;
      expect(users.length).toBe(1);
      expect(users[0].firstName).toBe('Clark');

      microScope.userId = 2;  // so that different user will be 'fetched'
      microScope.abc ++;    // will trigger the refresh event

      microScope.$apply();
      $timeout.flush();
      $httpBackend.flush();

      users = microScope.myAccount3;
      expect(users.length).toBe(1);
      expect(users[0].firstName).toBe('Bruce');

      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });
  });

  it('New data must be loaded when sgdata endPoint changes', function () {
    angular.mock.inject(function ($compile, $rootScope, $timeout) {
      var microScope = $rootScope.$new(false);
      microScope.lang = 'en';
      microScope.endPoint = 'api/users';

      $compile(' <div fis-data-var="myAccount4" fis-data="endPoint" />')(microScope);

      microScope.$apply();
      $timeout.flush();
      $httpBackend.flush();

      var users = microScope.myAccount4;
      expect(users.length).toBe(2);
      expect(users[0].firstName).toBe('Clark');

      microScope.endPoint = 'api/users2';

      microScope.$apply();
      $timeout.flush();
      $httpBackend.flush();

      users = microScope.myAccount4;
      expect(users.length).toBe(2);
      expect(users[0].firstName).toBe('Thor');

      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });
  });
});
