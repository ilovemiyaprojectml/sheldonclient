describe('Trigger directives', function () {
  var $scope;
  var element;
  var $isolateScope;
  var isolateElement;

  beforeEach(angular.mock.module('fis.core'));

  function setValue(value) {
    $scope.value = value;
    $scope.$digest();
  }

  function setTriggerFn(ctrl, fn) {
    element.controller(ctrl).trigger = fn;
    $scope.$digest();
  }

  angular.forEach([
        { att: 'fis-reinit', name: 'fisReinit' },
        { att: 'fis-refresh', name: 'fisRefresh' }
  ], function (directive) {
    describe(directive.name + ' directive', function () {
      beforeEach(inject(function ($compile, $rootScope) {
        $scope = $rootScope.$new();
        $isolateScope = $scope.$new(true);
        element = angular.element('<div ' + directive.att + '="value"></div>');
        isolateElement = angular.element('<div ' + directive.att + '="isolateValue"></div>');
        $scope.value = undefined;
        $scope.isolateValue = undefined;
        $compile(element)($scope);
        $compile(isolateElement)($isolateScope);
        $scope.$digest();
      }));

      afterEach(function () {
        $scope.$destroy();
        $isolateScope.$destroy();
      });

      it('should broadcast ' + directive.name + ' event in the scope', function () {
        $scope.$on(directive.name, function (event, result) {
          $scope.result = result;
        });
        setValue(100);
                // presence of $scope.result confirms the event was broadcast on the $scope
        expect($scope.result.value).toBe(100);
        expect($scope.result.oldValue).toBeUndefined();
      });

      it('should not broadcast when trigger function is provided', function () {
                // put listener on parent scope
        $scope.listener = 'ok';
        $scope.invoked = 'error';
        $scope.$on(directive.name, function () {
          $scope.listener = 'error';
        });

        setTriggerFn(directive.name, function () {
          $scope.invoked = 'ok';
        });
        setValue('changed!');
                // presence of $scope.result confirms the event was broadcast on the $scope
        expect($scope.invoked).toBe('ok');
        expect($scope.listener).toBe('ok');
      });
    });
  });
});
