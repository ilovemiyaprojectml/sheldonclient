'use strict';

/* jasmine specs for filters go here */
describe('FieldDirective', function () {
  var $scope;
  var factory;
  var FieldControllerConstructor;

  beforeEach(angular.mock.module('fis.core'));
  beforeEach(angular.mock.inject(function ($rootScope, $controller, $compile, fisFieldDirectiveFactory) {
    $scope = $rootScope.$new();
    factory = fisFieldDirectiveFactory;
    FieldControllerConstructor = factory._FieldController;
    $controller(['$scope', '$element', '$attrs', '$transclude', '$parse', FieldControllerConstructor], {
      $scope: $scope,
      $element: angular.element('<div></div>'),
      $attrs: {},
      $transclude: undefined
    });
  }));

  describe('Directive Properties', function () {
    var defaultDirective;

    beforeEach(function () {
      defaultDirective = factory.create();
    });

    it('should allow overriding priority property', function () {
      var directive = factory.create({
        priority: 700
      });

      expect(defaultDirective.priority).toEqual(0);
      expect(directive.priority).toEqual(700);
    });

    it('should allow overriding restrict property', function () {
      var directive = factory.create({
        restrict: 'A'
      });

      expect(defaultDirective.restrict).toEqual('ACE');
      expect(directive.restrict).toEqual('A');
    });

    it('should allow overriding require property', function () {
      var directive = factory.create({
        require: 'ngModel'
      });

      expect(defaultDirective.require).toBeUndefined();
      expect(directive.require).toEqual('ngModel');
    });

    it('should allow overriding transclude property', function () {
      var directive = factory.create({
        transclude: true
      });

      expect(defaultDirective.transclude).toEqual(false);
      expect(directive.transclude).toEqual(true);
    });

    it('should NOT allow overriding the scope property', function () {
      var directive = factory.create({
        scope: false
      });

      expect(defaultDirective.scope).toEqual(true);
      expect(directive.scope).toEqual(true);
    });

    it('should allow overriding the editTemplate property', function () {
      var editTpl = '<div></div>';
      var directive = factory.create({
        editTemplate: editTpl
      });

      expect(defaultDirective.editTemplate).toEqual('');
      expect(directive.editTemplate).toEqual('<div></div>');
    });

    it('should allow overriding the viewTemplate property', function () {
      var viewTpl = '<div></div>';
      var directive = factory.create({
        viewTemplate: viewTpl
      });

      expect(defaultDirective.viewTemplate).toEqual('{{fieldValue()}}');
      expect(directive.viewTemplate).toEqual('<div></div>');
    });

    it('should allow overriding the fieldValue property', function () {
      var fieldVal = angular.noop;
      var directive = factory.create({
        fieldValue: fieldVal
      });

      expect(defaultDirective.fieldValue).not.toEqual(angular.noop);
      expect(directive.fieldValue).toEqual(angular.noop);
    });

    it('should allow overriding the controller property', function () {
      var directive = factory.create({
        controller: angular.noop
      });

      expect(defaultDirective.controller).toEqual(['$scope', '$element', '$attrs', '$transclude', '$parse', FieldControllerConstructor]);
      expect(directive.controller).toEqual(angular.noop);
    });

    it('should call the compile function of the directive', function () {
      angular.mock.inject(function () {
        var element = angular.element(document.createElement('input')[0]);
        var compileFn = function () {
        };
        compileFn = jasmine.createSpy('compileFn');

        var directive = factory.create({
          compile: compileFn
        });
        directive.compile(element, { $attr: {} }, {});
        expect(compileFn).toHaveBeenCalled();
      });
    });

    it('should call the link function of the directive', function () {
      angular.mock.inject(function ($compile, $rootScope) {
        var scope = $rootScope.$new();
        var element = angular.element(document.createElement('input')[0]);
        var attrs = { $observe: angular.noop };
        var linkFn = function () {
        };
        linkFn = jasmine.createSpy('linkFn');

        var directive = factory.create({
          link: linkFn
        });
        var fn = directive.compile(element, { $attr: {} }, {});
        fn(scope, element, attrs);
        expect(linkFn).toHaveBeenCalled();
      });
    });
  });
});
