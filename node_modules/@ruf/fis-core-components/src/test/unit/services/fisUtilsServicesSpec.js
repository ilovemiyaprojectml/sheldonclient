'use strict';

describe('fisUtilService', function () {
  var fisUtilService;
  beforeEach(angular.mock.module('fis.core'));

    // Inject fisUtilService
  beforeEach(angular.mock.inject(function (_fisUtilService_) {
    fisUtilService = _fisUtilService_;
  }));

  describe('queryParams', function () {
    it('should add query params to an existing url without any parameters', function () {
      var url = 'http://sungard.com/aboutsungard.aspx';
      expect(fisUtilService.appendQueryParameters(url, { test: 'demo' })).toBe('http://sungard.com/aboutsungard.aspx?test=demo');
    });

    it('should add query params to an existing url that has parameters already', function () {
      var url = 'http://sungard.com/aboutsungard.aspx?foo=bar';
      expect(fisUtilService.appendQueryParameters(url, { test: 'demo' })).toBe('http://sungard.com/aboutsungard.aspx?foo=bar&test=demo');
    });

    it('should add query params to an existing url without any parameters and keep the anchor', function () {
      var url = 'http://sungard.com/aboutsungard.aspx#foo';
      expect(fisUtilService.appendQueryParameters(url, { test: 'demo' })).toBe('http://sungard.com/aboutsungard.aspx?test=demo#foo');
    });

    it('should add query params to an existing url that has parameters already and keep the anchor', function () {
      var url = 'http://sungard.com/aboutsungard.aspx?foo=bar#foo';
      expect(fisUtilService.appendQueryParameters(url, { test: 'demo' })).toBe('http://sungard.com/aboutsungard.aspx?foo=bar&test=demo#foo');
    });

    it('should add query params to an existing relative url', function () {
      var url = 'file.html';
      expect(fisUtilService.appendQueryParameters(url, { test: 'demo', foo: 'bar' })).toBe('file.html?test=demo&foo=bar');
    });

    it('should add empty query params to an existing relative url', function () {
      var url = 'file.html';
      expect(fisUtilService.appendQueryParameters(url, { test: undefined, foo: 'bar' })).toBe('file.html?test=&foo=bar');
    });

    it('should remove empty query params from an existing relative url', function () {
      var url = 'file.html?test=demo#anchor';
      expect(fisUtilService.appendQueryParameters(url, { test: null, foo: 'bar' })).toBe('file.html?foo=bar#anchor');
    });

    it('should add the caching parameters to an url', function () {
      var url = 'file.html?test=demo#anchor';
      fis.initParams({ appStage: 'D' });
      expect(fisUtilService.appendCacheQueryParameter(url)).toBe('file.html?test=demo&version=' + fis.getCacheQuery().version + '&appStage=D#anchor');
    });
  });

  describe('booleanCheck', function () {
    it('should return true if a true boolean is provided', function () {
      expect(fisUtilService.booleanCheck(true, false)).toBe(true);
    });

    it('should return false if a false boolean is provided', function () {
      expect(fisUtilService.booleanCheck(false, true)).toBe(false);
    });

    it('should return true if a true string is provided', function () {
      expect(fisUtilService.booleanCheck('true', false)).toBe(true);
    });

    it('should return false if a false string is provided', function () {
      expect(fisUtilService.booleanCheck('false', true)).toBe(false);
    });

    it('should return true if default is set to true and an unrecognized string is provided', function () {
      expect(fisUtilService.booleanCheck('unknown', true)).toBe(true);
    });

    it('should return true if default is set to false and an unrecognized string is provided', function () {
      expect(fisUtilService.booleanCheck('unknown', false)).toBe(false);
    });

    it('should return true if default is set to true and undefined is provided', function () {
      var _undefined;
      expect(fisUtilService.booleanCheck(_undefined, true)).toBe(true);
    });

    it('should return false if default is set to false and undefined is provided', function () {
      var _undefined;
      expect(fisUtilService.booleanCheck(_undefined, false)).toBe(false);
    });

    it('should return true if default is set to true and null is provided', function () {
      var _null = null;
      expect(fisUtilService.booleanCheck(_null, true)).toBe(true);
    });

    it('should return false if default is set to false and null is provided', function () {
      var _null = null;
      expect(fisUtilService.booleanCheck(_null, false)).toBe(false);
    });

    it('should return true if a true string with the first letter as a capital is provided', function () {
      expect(fisUtilService.booleanCheck('True', false)).toBe(true);
    });

    it('should return false if a false string with the first letter as a capital is provided', function () {
      expect(fisUtilService.booleanCheck('False', true)).toBe(false);
    });

    it('should return false if a false string with the mixed capitals is provided', function () {
      expect(fisUtilService.booleanCheck('FaLsE', true)).toBe(false);
    });

    it('should return true if a true string with the mixed capitals is provided', function () {
      expect(fisUtilService.booleanCheck('TrUe', false)).toBe(true);
    });
  });
});
