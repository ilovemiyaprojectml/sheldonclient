'use strict';

describe('fisTranslateService', function () {
  beforeEach(angular.mock.module('fis.core'));

  var testTranslateProvider;

  beforeEach(function () {
    var myApp = angular.module('testApp', ['fis.core']);
    myApp.config(function ($translateProvider) {
      testTranslateProvider = $translateProvider;
    });
    angular.mock.module('fis.core', 'testApp');
    inject(function () {});
  });

  it('tests the internal functions of $translateProvider', function () {
    expect(testTranslateProvider.addInterpolation).toBeUndefined();
    expect(testTranslateProvider.useInterpolation).toBeUndefined();
    expect(testTranslateProvider.preferredLanguage).toBeDefined();
    expect(testTranslateProvider.fallbackLanguage).toBeUndefined();
    expect(testTranslateProvider.use).toBeDefined();
    expect(testTranslateProvider.useUrlLoader).toBeUndefined();
    expect(testTranslateProvider.useStaticFilesLoader).toBeUndefined();
    expect(testTranslateProvider.useLoader).toBeUndefined();
    expect(testTranslateProvider.translations).toBeDefined();
  });

  it('should test if $translate is available when service is injected', function () {
    angular.mock.inject(function ($translate, $rootScope) {
      $translate('key').then(function (val) {
        expect(val).toBe('key');
      });
      $rootScope.$apply();
      expect($translate.instant('key')).toBe('key');
    });
  });

  it('should test if $translate functions are available when service is injected', function () {
    angular.mock.inject(function ($translate) {
      expect($translate.use).toBeDefined();
      expect($translate.instant).toBeDefined();
      expect($translate.proposedLanguage).toBeDefined();
      expect($translate.preferredLanguage).toBeUndefined();
      expect($translate.fallbackLanguage).toBeUndefined();
      expect($translate.useFallbackLanguage).toBeUndefined();
      expect($translate.refresh).toBeUndefined();
      expect($translate.isReady).toBeUndefined();
      expect($translate.onReady).toBeUndefined();
    });
  });
});
