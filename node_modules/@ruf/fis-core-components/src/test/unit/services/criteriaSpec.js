describe('criteria', function () {
  'use strict';
  beforeEach(angular.mock.module('fis.core'));

  it('Should test simple criteria', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR)
        .add(new fisCriteriaService.Criterion('name', 'aaa', fisCriteriaService.constraints.CONTAINS, undefined, false))
        .add(new fisCriteriaService.Criterion('dob', '2005-03-02T15:17:52.746Z', fisCriteriaService.constraints.GE, undefined, false));

      expect(crit.toString()).toEqual('substringof(\'aaa\',name) eq true or dob ge \'2005-03-02T15:17:52.746Z\'');
    });
  });

  it('Should test complex criteria', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);

      var criterion1 = new fisCriteriaService.Criterion('name', 'aaa', fisCriteriaService.constraints.CONTAINS, undefined, false);
      var criteria1 = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      var criterion2 = new fisCriteriaService.Criterion('dob', '2005-03-02T15:17:52.746Z', fisCriteriaService.constraints.GE, undefined, false);
      criterion2.type = 'date';
      var criterion3 = new fisCriteriaService.Criterion('amount', '145', fisCriteriaService.constraints.LE, undefined, false);
      criterion3.type = 'integer';
      criteria1.add(criterion2).add(criterion3);

      var criteria2 = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);
      var criterion4 = new fisCriteriaService.Criterion('age', '25', fisCriteriaService.constraints.GE, undefined, false);
      var criterion5 = new fisCriteriaService.Criterion('price', '10000', fisCriteriaService.constraints.GE, undefined, false);

      criteria2.add(criterion4).add(criterion5);

      crit.add(criterion1).add(criteria1).add(criteria2);
      expect(crit.toString()).toEqual('substringof(\'aaa\',name) eq true or (dob ge datetime\'2005-03-02T15:17:52.746Z\' and amount le 145) or (age ge \'25\' or price ge \'10000\')');
    });
  });

  it('Should test complex criteria for integer and string fields', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);

      var criterion1 = new fisCriteriaService.Criterion('amount', '1', fisCriteriaService.constraints.CONTAINS, undefined, false);
      criterion1.type = 'integer';
      var criteria1 = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      var criterion2 = new fisCriteriaService.Criterion('price', '', fisCriteriaService.constraints.IS_NULL, undefined, false);
      criterion2.type = 'integer';
      var criterion3 = new fisCriteriaService.Criterion('age', '', fisCriteriaService.constraints.NOT_NULL, undefined, false);
      criterion3.type = 'integer';
      criteria1.add(criterion2).add(criterion3);

      var criteria2 = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);
      var criterion4 = new fisCriteriaService.Criterion('name', '', fisCriteriaService.constraints.IS_EMPTY, undefined, false);
      var criterion5 = new fisCriteriaService.Criterion('company', 'aa', fisCriteriaService.constraints.STARTS_WITH, undefined, false);

      criteria2.add(criterion4).add(criterion5);

      crit.add(criterion1).add(criteria1).add(criteria2);
      expect(crit.toString()).toEqual('substringof(1,amount) eq true or (price eq null and age ne null) or (name eq \'\' or startswith(company,\'aa\'))');
    });
  });

  it('Should test complex criteria for double and string fields', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);

      var criterion1 = new fisCriteriaService.Criterion('amount', '1.23', fisCriteriaService.constraints.CONTAINS, undefined, false);
      criterion1.type = 'double';
      var criteria1 = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      var criterion2 = new fisCriteriaService.Criterion('price', '', fisCriteriaService.constraints.IS_NULL, undefined, false);
      criterion2.type = 'integer';
      var criterion3 = new fisCriteriaService.Criterion('age', '', fisCriteriaService.constraints.NOT_NULL, undefined, false);
      criterion3.type = 'integer';
      criteria1.add(criterion2).add(criterion3);

      var criteria2 = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);
      var criterion4 = new fisCriteriaService.Criterion('name', '', fisCriteriaService.constraints.IS_EMPTY, undefined, false);
      var criterion5 = new fisCriteriaService.Criterion('company', 'aa', fisCriteriaService.constraints.STARTS_WITH, undefined, false);

      criteria2.add(criterion4).add(criterion5);

      crit.add(criterion1).add(criteria1).add(criteria2);
      console.log('\nabc');
      console.log(crit.toString());
      console.log('\ndef');
      expect(crit.toString()).toEqual('substringof(1.23,amount) eq true or (price eq null and age ne null) or (name eq \'\' or startswith(company,\'aa\'))');
    });
  });

  it('Should test complex criteria for string fields', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);

      var criterion1 = new fisCriteriaService.Criterion('amount', '1', fisCriteriaService.constraints.NOT_CONTAINS, undefined, false);
      criterion1.type = 'string';
      var criteria1 = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      var criterion2 = new fisCriteriaService.Criterion('price', 'a', fisCriteriaService.constraints.NOT_ENDS_WITH, undefined, false);
      criterion2.type = 'string';
      var criterion3 = new fisCriteriaService.Criterion('age', 'b', fisCriteriaService.constraints.NOT_STARTS_WITH, undefined, false);
      criterion3.type = 'string';
      criteria1.add(criterion2).add(criterion3);

      var criteria2 = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);
      var criterion4 = new fisCriteriaService.Criterion('name', '', fisCriteriaService.constraints.IS_EMPTY, undefined, false);
      var criterion5 = new fisCriteriaService.Criterion('company', 'aa', fisCriteriaService.constraints.STARTS_WITH, undefined, false);

      criteria2.add(criterion4).add(criterion5);

      crit.add(criterion1).add(criteria1).add(criteria2);
      expect(crit.toString()).toEqual('substringof(\'1\',amount) eq false or (not endswith(price,\'a\') and not startswith(age,\'b\')) or (name eq \'\' or startswith(company,\'aa\'))');
    });
  });

  it('Should test invalid criteria', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);

      var criterion1 = new fisCriteriaService.Criterion('name', 'aaa', fisCriteriaService.constraints.CONTAINS, false, false);
      var criteria1 = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      var criterion2 = new fisCriteriaService.Criterion('dob', '2005-03-02T15:17:52.746Z', fisCriteriaService.constraints.GE, undefined, false);
      var criterion3 = new fisCriteriaService.Criterion('amount', '145', fisCriteriaService.constraints.LE);

      criteria1.add(criterion2).add(criterion3);

      var criteria2 = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);
      var criterion4 = new fisCriteriaService.Criterion('age', '25', fisCriteriaService.constraints.GE, undefined, false);
      var criterion5 = new fisCriteriaService.Criterion(null, '10000', fisCriteriaService.constraints.GE, undefined, false);

      var isErrorThrown = false;
      try {
        criteria2.add(criterion4).add(criterion5);
        crit.add(criterion1).add(criteria1).add(criteria2);
        crit.validate();
      } catch (e) {
        isErrorThrown = true;
      }
      expect(isErrorThrown).toBe(true);
    });
  });

  it('Should test invalid criteria for string', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);

      var criterion1 = new fisCriteriaService.Criterion('name', 'aaa', fisCriteriaService.constraints.CONTAINS, false, false);
      var criteria1 = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      var criterion2 = new fisCriteriaService.Criterion('dob', '2005-03-02T15:17:52.746Z', fisCriteriaService.constraints.GE, undefined, false);
      var criterion3 = new fisCriteriaService.Criterion('amount', '145', fisCriteriaService.constraints.LE);

      criteria1.add(criterion2).add(criterion3);

      var criteria2 = fisCriteriaService.newCriteria(fisCriteriaService.operators.OR);
      var criterion4 = new fisCriteriaService.Criterion('age', '', fisCriteriaService.constraints.NOT_STARTS_WITH, undefined, false);
      var criterion5 = new fisCriteriaService.Criterion('amount', '', fisCriteriaService.constraints.NOT_ENDS_WITH, undefined, false);

      var isErrorThrown = false;
      try {
        criteria2.add(criterion4).add(criterion5);
        crit.add(criterion1).add(criteria1).add(criteria2);
        crit.validate();
      } catch (e) {
        isErrorThrown = true;
      }
      expect(isErrorThrown).toBe(true);
    });
  });

  it('Should test invalid criteria in case of empty "Any/All group" constraint', function () {
    angular.mock.inject(function ($rootScope, fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      var isErrorThrown = false;
      var criterion = new fisCriteriaService.Criterion('name', 'aaa', fisCriteriaService.constraints.CONTAINS, false, false);
      try {
        crit.add(criterion);
        crit.validate();
      } catch (e) {
        isErrorThrown = true;
      }
      var crit1 = fisCriteriaService.newCriteria(fisCriteriaService.operators.AND);
      crit1.skipValidation = false;
      try {
        crit.add(crit1);
        crit.validate();
      } catch (e) {
        isErrorThrown = true;
      }
      expect(isErrorThrown).toBe(true);
    });
  });

  it('Should be valid when empty', function () {
    angular.mock.inject(function (fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria();
      expect(crit.isValid()).toBe(true);
    });
  });

  it('Should allow creating a new Criteria from a Criteria-like object', function () {
    angular.mock.inject(function (fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria({
        operator: 'or',
        operands: [
          {
            property: 'firstName',
            value: 'InitialValue',
            constraint: 'eq'
          }
        ]
      });
      expect(crit.isValid()).toBe(true);
      expect(crit.operator).toEqual(fisCriteriaService.operators.OR);
      expect(crit.operands[0].property).toEqual('firstName');
      expect(crit.operands[0].value).toEqual('InitialValue');
      expect(crit.operands[0].constraint).toBe(fisCriteriaService.constraints.EQ);
    });
  });

  it('Should allow creating a new Criteria from a an empty object', function () {
    angular.mock.inject(function (fisCriteriaService) {
      var crit = fisCriteriaService.newCriteria({});
      expect(crit.isValid()).toBe(true);

      crit = fisCriteriaService.newCriteria(null);
      expect(crit.isValid()).toBe(true);

      crit = fisCriteriaService.newCriteria(undefined);
      expect(crit.isValid()).toBe(true);
    });
  });

  it('Should NOT allow creating an invalid Criteria from a Criteria-like object', function () {
    angular.mock.inject(function (fisCriteriaService) {
      var test = function () {
        fisCriteriaService.newCriteria({
          fake: 'object',
          operands: [
            { not: 'a real criterion', skipValidation: false }
          ]
        });
      };

      expect(test).toThrow();
    });
  });

  it('Should NOT be strict about the input object', function () {
    angular.mock.inject(function (fisCriteriaService) {
      var crit1 = fisCriteriaService.newCriteria({
        fake: 'object',
        will: 'will be same as',
        creating: 'an empty criteria'
      });

      var crit2 = fisCriteriaService.newCriteria();

      expect(crit1).toEqual(crit2);
    });
  });
});
