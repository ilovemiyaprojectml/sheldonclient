describe('exceptionHandler decorator', function () {
  'use strict';

  var $exceptionHandler;
  var DEFAULT_MESSAGE = 'FAILURE';
  var userMessageError;
  var plainError;
  var docLink = 'https://www.csa.sungard.com/wiki/x/9xVMB';

  function createError(prop, value) {
    var ret = new Error(DEFAULT_MESSAGE);
    if (prop) {
      ret[prop] = value;
    }
    return ret;
  }

  beforeEach(angular.mock.module('fis.core'));

  beforeEach(inject(function (_$exceptionHandler_) {
    $exceptionHandler = _$exceptionHandler_;

    userMessageError = createError('userMessage', 'This is a message that could be displayed to the user');
    plainError = createError();
  }));

  function exceptionHandlerInvocation(err) {
    return function () {
      $exceptionHandler(err);
    };
  }

  it('should define an intercept method', function () {
    expect(angular.isFunction($exceptionHandler.intercept)).toBe(true);
  });

  it('should show link for errors with userMessage by default', function () {
    expect(exceptionHandlerInvocation(userMessageError)).toThrow(userMessageError);

    expect(userMessageError.message.indexOf(docLink) !== -1).toBe(true);
  });

  it('should not show link for errors WITHOUT userMessage', function () {
    expect(exceptionHandlerInvocation(plainError)).toThrow(plainError);

    expect(plainError.message.indexOf(docLink) === -1).toBe(true);
  });

  it('should allow intercepting exceptions based on presence of property', function () {
    var invoked = 'interceptor not invoked!';

    $exceptionHandler.intercept('userMessage', function (exception) {
      invoked = exception.userMessage;
    });

    expect(exceptionHandlerInvocation(userMessageError)).toThrow(userMessageError);

    expect(invoked).toBe(userMessageError.userMessage);

        // default interceptor for userMessage should have been overridden
    expect(userMessageError.message.indexOf(docLink) === -1).toBe(true);
  });

  it('should allow intercepting any exception and reset interceptor', function () {
    var invoked = 'interceptor not invoked!';

    $exceptionHandler.intercept(function (exception) {
      invoked = exception;
    });

    expect(exceptionHandlerInvocation(userMessageError)).toThrow(userMessageError);
    expect(invoked).toBe(userMessageError);
  });

  it('should allow removing global interceptor', function () {
    var invoked;

    $exceptionHandler.intercept(function (exception) {
      invoked = exception;
    });

    expect(exceptionHandlerInvocation(userMessageError)).toThrow(userMessageError);
    expect(invoked).toBe(userMessageError);

    invoked = null;

    $exceptionHandler.intercept(null);

    expect(exceptionHandlerInvocation(userMessageError)).toThrow(userMessageError);
    expect(invoked).toBe(null);
  });

  it('should allow removing property interceptor', function () {
    var invoked;

    $exceptionHandler.intercept('userMessage', function (exception) {
      invoked = exception;
    });

    expect(exceptionHandlerInvocation(userMessageError)).toThrow(userMessageError);
    expect(invoked).toBe(userMessageError);

    invoked = null;

    $exceptionHandler.intercept('userMessage', null);

    expect(exceptionHandlerInvocation(userMessageError)).toThrow(userMessageError);
    expect(invoked).toBe(null);
  });
});
