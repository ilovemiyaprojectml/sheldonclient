describe('fisPubSubService', function () {
  'use strict';

  beforeEach(angular.mock.module('fis.core'));

  it('should invoke a non-sticky subscriber', function () {
    inject(function (fisPubSubService) {
      var callbackFn = jasmine.createSpy('callbackFn');
      fisPubSubService.subscribe('testTopic', callbackFn, false);
      fisPubSubService.publish('testTopic', { data: 'data' });
      expect(callbackFn).toHaveBeenCalled();
      expect(callbackFn).toHaveBeenCalledWith({ data: 'data' }, 'testTopic');
    });
  });

  it('should invoke a sticky subscriber', function () {
    inject(function (fisPubSubService) {
      var callbackFn = jasmine.createSpy('callbackFn');
            // Counter-intuitive existing behavior. Need to add a sticky subscriber first to mark the topic as sticky
      fisPubSubService.subscribe('testTopic', angular.noop, true);
            // This will setup last payload
      fisPubSubService.publish('testTopic', { data: 'data' });
      fisPubSubService.subscribe('testTopic', callbackFn, true);

      expect(callbackFn).toHaveBeenCalled();
      expect(callbackFn).toHaveBeenCalledWith({ data: 'data' }, 'testTopic');
    });
  });

  it('should invoke subscribers without regards to promise returned', function () {
    inject(function (fisPubSubService) {
      var callbackFn = jasmine.createSpy('callbackFn').and.returnValue(true);

      fisPubSubService.subscribe('testTopic', callbackFn, false);
      fisPubSubService.subscribe('testTopic', callbackFn, false);

      fisPubSubService.publish('testTopic', { data: 'data' });

      expect(callbackFn).toHaveBeenCalled();
      expect(callbackFn.calls.count()).toEqual(2);

      expect(callbackFn).toHaveBeenCalledWith({ data: 'data' }, 'testTopic');
    });
  });

  it('should invoke subscribers without regards to promise returned', function () {
    inject(function (fisPubSubService) {
      var callbackFn = jasmine.createSpy('callbackFn').and.returnValue(true);

      fisPubSubService.subscribe('testTopic', callbackFn, false);
      fisPubSubService.subscribe('testTopic', callbackFn, false);

      fisPubSubService.publish('testTopic', { data: 'data' });

      expect(callbackFn).toHaveBeenCalled();
      expect(callbackFn.calls.count()).toEqual(2);

      expect(callbackFn).toHaveBeenCalledWith({ data: 'data' }, 'testTopic');
    });
  });

  it('publish should resolve promise for subscribers returning anything but false', function () {
    inject(function ($rootScope, fisPubSubService) {
      var callbackFn1 = jasmine.createSpy('callbackFn1').and.returnValue(true);
      var callbackFn2 = jasmine.createSpy('callbackFn2').and.returnValue(1);
      var callbackFn3 = jasmine.createSpy('callbackFn3').and.returnValue('one');
      var callbackFn4 = jasmine.createSpy('callbackFn4').and.returnValue(undefined);

      fisPubSubService.subscribe('testTopic', callbackFn1, false);
      fisPubSubService.subscribe('testTopic', callbackFn2, false);
      fisPubSubService.subscribe('testTopic', callbackFn3, false);
      fisPubSubService.subscribe('testTopic', callbackFn4, false);

      var promise = fisPubSubService.publish('testTopic', { data: 'data' });

      promise.then(function () {
        expect(true);
      });

      $rootScope.$apply();
    });
  });

  it('publish should reject promise if one of the subscriber returns false', function () {
    inject(function ($rootScope, fisPubSubService) {
      var callbackFn1 = jasmine.createSpy('callbackFn1').and.returnValue(true);
      var callbackFn2 = jasmine.createSpy('callbackFn2').and.returnValue(false);
      var callbackFn3 = jasmine.createSpy('callbackFn3').and.returnValue('one');

      fisPubSubService.subscribe('testTopic', callbackFn1, false);
      fisPubSubService.subscribe('testTopic', callbackFn2, false);
      fisPubSubService.subscribe('testTopic', callbackFn3, false);

      var promise = fisPubSubService.publish('testTopic', { data: 'data' });

      promise.then(angular.noop, function () {
        expect(false);
      });

      $rootScope.$apply();
    });
  });

  it('Mixing subscribers returning promise and non-promise values - positive scenario', function () {
    inject(function ($rootScope, $q, $timeout, fisPubSubService) {
      var callbackFn1 = jasmine.createSpy('callbackFn1').and.returnValue(true);
      var callbackFn2 = jasmine.createSpy('callbackFn2').and.returnValue(undefined);
      var callbackFn3 = function () {
        var deferred = $q.defer();

        $timeout(function () {
          deferred.resolve();
        });

        return deferred.promise;
      };

      fisPubSubService.subscribe('testTopic', callbackFn1, false);
      fisPubSubService.subscribe('testTopic', callbackFn2, false);
      fisPubSubService.subscribe('testTopic', callbackFn3, false);

      var promise = fisPubSubService.publish('testTopic', { data: 'data' });

      promise.then(function () {
        expect(true);
      });

      $rootScope.$apply();
      $timeout.flush();
    });
  });

  it('Mixing subscribers returning promise and non-promise values - negative scenario', function () {
    inject(function ($rootScope, $q, $timeout, fisPubSubService) {
      var callbackFn1 = jasmine.createSpy('callbackFn1').and.returnValue(true);
      var callbackFn2 = jasmine.createSpy('callbackFn2').and.returnValue(undefined);
      var callbackFn3 = function () {
        var deferred = $q.defer();

        $timeout(function () {
          deferred.reject();
        });

        return deferred.promise;
      };

      fisPubSubService.subscribe('testTopic', callbackFn1, false);
      fisPubSubService.subscribe('testTopic', callbackFn2, false);
      fisPubSubService.subscribe('testTopic', callbackFn3, false);

      var promise = fisPubSubService.publish('testTopic', { data: 'data' });

      promise.then(angular.noop, function () {
        expect(false);
      });

      $rootScope.$apply();
      $timeout.flush();
    });
  });
});
