/* jasmine specs for services go here */

describe('fisConditionalLoaderService', function () {
  'use strict';

  var $httpBackend;
  var loader;
  var pubsub;

  function capturePublish(topic, cb) {
    var fired = [false, undefined];
    var unsub = pubsub.subscribe(topic, function (obj) {
      unsub();
      fired[0] = true;
      fired[1] = obj;

      if (cb) {
        cb(obj);
      }
    });

    return fired;
  }

  beforeEach(angular.mock.module('fis.core'));

  describe('with constant', function () {
    var constant = {
      foo: 'bar'
    };

    beforeEach(angular.mock.module('fis.core', function ($provide) {
      $provide.constant('CONSTANT', constant);
    }));

    beforeEach(inject(function (_$httpBackend_, fisConditionalLoaderService, fisPubSubService) {
      $httpBackend = _$httpBackend_;
      loader = fisConditionalLoaderService;
      pubsub = fisPubSubService;
    }));

    afterEach(function () {
      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });

    it('should already contain properties upon injection (no then needed)', function () {
      var result = loader('CONSTANT', 'not/fetched');
      expect(result).toBe(constant);
    });

    it('should invoke a provided "then" callback immediately (synchronously)', function () {
      var i = 0;
      loader('CONSTANT', 'not/fetched').then(function (result) {
        i = 1;
        expect(result).toBe(constant);
      });
      expect(i).toBe(1);
    });

    it('should fire an event when object is loaded', function () {
      var fired = capturePublish('CONSTANT.loaded');
      loader('CONSTANT', 'not/fetched');
      expect(fired[0]).toBe(true);
    });
  });

  describe('without constant', function () {
    var cfg = { itm: 'config' };
    var endpoint = 'api/myConfig/:id';
    var noConstant = 'NOCONSTANT';
    var params = { id: 1234, param: 'value' };

    beforeEach(inject(function (_$httpBackend_, fisConditionalLoaderService, fisPubSubService) {
      $httpBackend = _$httpBackend_;
      loader = fisConditionalLoaderService;
      pubsub = fisPubSubService;
      $httpBackend.when('GET', 'api/myConfig').respond(cfg);
      $httpBackend.when('GET', 'api/myConfig/1234?param=value').respond(404, {});
    }));

    afterEach(function () {
      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });

    it('should contain properties if the promise was resolved once', function () {
      $httpBackend.expectGET('api/myConfig');
      var result = loader(noConstant, endpoint);

      expect(result.itm).not.toBeDefined();
      $httpBackend.flush();
      expect(result.itm).toBe(cfg.itm);
    });

    it('should invoke the REST service', function () {
      loader(noConstant, endpoint);
      $httpBackend.expectGET('api/myConfig');
      $httpBackend.flush();
    });

    it('should act as an async promise', function () {
      var i = 0;
      loader(noConstant, endpoint).then(function (result) {
        i = 1;
        expect(result.itm).toEqual('config');
      });
      expect(i).toBe(0);
      $httpBackend.flush();
      expect(i).toBe(1);
    });

    it('should allow detecting no data is found', function () {
      var failed;
      $httpBackend.expectGET('api/myConfig/1234?param=value');
      var fired = capturePublish(noConstant + '.loaded');
      loader(noConstant, endpoint, params).then(angular.noop, function (resp) {
        failed = resp;
      });

      $httpBackend.flush();
      expect(failed.status).toBe(404);
      expect(fired[0]).toBe(false);
    });

    it('should fire an event when object is loaded', function () {
      $httpBackend.expectGET('api/myConfig');
      var fired = capturePublish(noConstant + '.loaded');
      loader(noConstant, endpoint);
      $httpBackend.flush();
      expect(fired[0]).toBe(true);
    });

    it('should fire a specified event when object is loaded', function () {
      $httpBackend.expectGET('api/myConfig');
      var fired = capturePublish('myevent');
      loader(noConstant, endpoint, undefined, 'myevent');
      $httpBackend.flush();
      expect(fired[0]).toBe(true);
    });
  });
});
