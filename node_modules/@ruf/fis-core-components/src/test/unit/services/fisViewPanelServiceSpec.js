/* eslint-disable */
describe('fisViewPanelService', function() {

    'use strict';


    var $httpBackend;

    var navModel = {
        main : [ {
            label : 'item1',
            id : 'item1'
        }, {
            label : 'item2',
            id : 'item2',
            partial: '/partials/dummy.html',
            closeable: false
        }, {
            label : 'item3',
            icon : 'sg_icon test',
            id : 'item3',
            partial: '/partials/dummy.html',
            closeable: false
        }, {
            label : 'item4',
            id : 'item4',
            partial: '/partials/dummy.html',
            closeable: false,
            secondaryNav: 'menubar',
            children: [{
                label : 'Sub Item 4',
                id : 'item4sub1',
                partial : '/partials/dummy.html'
            }]
        },
        {
            "label": "User Settings",
            "id": "userSettings",
            "partial": "/partials/dummy.html",
            "children": [
                {
                    "id": "viewSelectedBank",
                    "module": "desktop-ui",
                    "partial": "/partials/dummy.html",
                    "cls": "hide",
                    "secondaryNav": "menubar",
                    "children": [
                        {
                            "label": "{bankName}",
                            "id": ":bankName",
                            "partial": "/partials/dummy.html",
                            "cls": "hide",
                            "secondaryNav": "menubar",
                            "children": [
                                {
                                    "label": "Account Management",
                                    "id": "accountMgmt",
                                    "children": [
                                        {
                                            "label": "Accounts",
                                            "id": "accounts",
                                            "children": [
                                                {
                                                    "label": "Current/Savings Accounts",
                                                    "id": "currentSavingsAccounts",
                                                    "children": [
                                                        {
                                                            "label": "View Account Balance",
                                                            "id": "viewAccountBal",
                                                            "partial": "/partials/dummy.html"
                                                        },
                                                        {
                                                            "label": "View Cheque Status",
                                                            "id": "viewChequeStatus",
                                                            "partial": "/partials/dummy.html"
                                                        },
                                                        {
                                                            "label": "Download Statement",
                                                            "id": "downloadStmt",
                                                            "partial": "/partials/dummy.html"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            label : 'users',
            id : 'users',
            partial: '/partials/dummy.html',
            children:[{
                label : 'View Users',
                id : 'userlist',
                partial : '/partials/dummy.html',
                children:[{
                    label : 'User {userId}',
                    id : 'userDetails/:userId',
                    partial : '/partials/dummy.html'
                }]
            }]
        }, {
            label : 'item5',
            id : 'item5',
            children:[{
                label : 'Item5 Child',
                id : 'item5child',
                partial : '/partials/dummy.html'
            }]
        },{
            label : 'item6',
            id : 'item6',
            partial: '/partials/dummy.html',
            children:[{
                label : 'Item6 Child',
                id : 'item6child',
                partial : '/partials/dummy.html'
            }]
        }, {
            label : 'item7',
            id : 'item7',
            partial: '/partials/dummy.html',
            children:[{
                label : 'Item7 Child',
                id : 'item7child',
                partial : '/partials/dummy.html'
            }]
        }, {
            "label": "Parameterized Id",
            "title": "Parameterized Id",
            "id": "abc/def/ghi/jkl/:navId/test/:testId",
            "partial": "desktop-ui/partials/dummy.html",
        }],
        panel: [
            {
                id: 'VehiclePanel/:id',
                label: 'Vehicle: {id}',
                partial: 'desktop-ui/partials/dummy.html'
            }
        ]
    };

    var navModelNested = {
        main : [
            {
                'label': 'Demo',
                'id' : 'demo',
                'children': [
                    {
                        'label': 'Demo Pages',
                        'id' : 'pages',
                        'children':[
                            {
                                'label': 'Navigation between Links',
                                'id': 'nav',
                                'partial': 'desktop-ui/partials/dummyLinks.html',
                                'children' : [
                                    {
                                        'label' : 'Investor',
                                        'id' : 'investor',
                                        'partial':'desktop-ui/partials/dummyLinks.html',
                                        'children' : [
                                            {
                                                'label' : 'LE: {leId}',
                                                'id' : 'le/:leId',
                                                'children' : [
                                                    {
                                                        'label' : 'D: {dId}',
                                                        'id' : 'd/:dId',
                                                        'partial' : 'desktop-ui/partials/dummyLinks.html',
                                                        'children' : [
                                                            {
                                                                'label' : 'AB: {abId}',
                                                                'id' : 'ab/:abId',
                                                                'partial' : 'desktop-ui/partials/dummyLinks.html',
                                                                'children' : [
                                                                    {
                                                                        'label' : 'ABC: {abcId}',
                                                                        'id' : 'abc/:abcId',
                                                                        'partial' : 'desktop-ui/partials/dummyLinks.html'
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    };

    var navModelWithNoNonCloseableTabs = {
            main : [{
                label : 'users',
                id : 'users',
                children:[{
                    label : 'View Users',
                    id : 'userlist',
                    partial : '/partials/dummy.html',
                    children:[{
                        label : 'User {userId}',
                        id : 'userDetails/:userId',
                        partial : '/partials/dummy.html'
                    }]
                }]
            },
            {
                label : 'item5',
                id : 'item5',
                children:[{
                    label : 'Item5 Child',
                    id : 'item5child',
                    partial : '/partials/dummy.html'
                }]
            }]
        };

    var navModelWithSecondaryNav = {
        main: [
            {
                'label': 'Secondary Navigation',
                'id': 'secNav',
                'title': 'Secondary Navigation',
                'secondaryNav': 'menubar',
                'children': [
                    {
                        'label': 'L1',
                        'id': 'ch1',
                        'partial': 'desktop-ui/partials/dummy.html',
                        'children': [
                            {
                                'label': 'L11',
                                'id': 'ch11',
                                'children': [
                                    {
                                        'label': 'L111',
                                        'id': 'ch111',
                                        'partial': 'desktop-ui/partials/dummy.html'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        'label': 'L2',
                        'id': 'ch2',
                        'partial': 'desktop-ui/partials/dummy.html'
                    }
                ]
            }
        ]
    };

    var isPartialsURL = /partials/;

    beforeEach(function() {
        angular.mock.module('fis.core');
        angular.mock.module(function() {
            return function(_$httpBackend_) {
                $httpBackend = _$httpBackend_;
                $httpBackend.when('GET', 'api/config').respond({});
                $httpBackend.when('GET', 'api/navigation').respond(navModel);
                $httpBackend.when('GET', 'api/navigationNested').respond(navModelNested);
                $httpBackend.when('GET', 'api/navigationWithNoTabs').respond(navModelWithNoNonCloseableTabs);
                $httpBackend.when('GET', isPartialsURL).respond('');
            };
        });
    });

    afterEach(function() {
        if ($httpBackend) {
            $httpBackend.verifyNoOutstandingExpectation();
        }
    });

    describe('setViewOpeningStrategy', function() {

        it('should have mdi value if not set', function() {
            angular.mock.module(function(fisViewPanelServiceProvider) {
                expect(fisViewPanelServiceProvider.getViewOpeningStrategy()).toEqual('mdi');
            });

            angular.mock.inject(function(fisViewPanelService, $rootScope) {});
        });

        it('should set a custom function as an opening strategy', function() {
            var customFunc = function(navItem, event, params) {
                return;
            };
            angular.mock.module(function(fisViewPanelServiceProvider) {
                fisViewPanelServiceProvider.setViewOpeningStrategy(customFunc);
                expect(fisViewPanelServiceProvider.getViewOpeningStrategy()).toEqual(customFunc);
            });

            angular.mock.inject(function(fisViewPanelService, $rootScope) {});
        });

        it('should be able to set a string reference', function() {
            angular.mock.module(function(fisViewPanelServiceProvider) {
                fisViewPanelServiceProvider.setViewOpeningStrategy('browser');
                expect(fisViewPanelServiceProvider.getViewOpeningStrategy()).toEqual('browser');
            });

            angular.mock.inject(function(fisViewPanelService, $rootScope) {});
        });

        it('should set mdi strategy as default', function() {
            angular.mock.module(function(fisViewPanelServiceProvider) {
                fisViewPanelServiceProvider.setViewOpeningStrategy();
                expect(fisViewPanelServiceProvider.getViewOpeningStrategy()).toEqual('mdi');
                fisViewPanelServiceProvider.setViewOpeningStrategy(15);
                expect(fisViewPanelServiceProvider.getViewOpeningStrategy()).toEqual('mdi');
            });

            angular.mock.inject(function(fisViewPanelService, $rootScope) {});
        });

    });


    describe('setPreventBrowserNavigation', function() {

        var provider;

        beforeEach(function() {
            var fakeModule = angular.module('browserNavModule.config', []);
            fakeModule.config(function(fisViewPanelServiceProvider) {
                provider = fisViewPanelServiceProvider;
            });

            angular.mock.module('browserNavModule.config');

            inject(function() {});
        });

        it('should be true by default', function() {
            expect(provider).not.toBeUndefined();
            expect(provider.getViewOpeningStrategy()).toEqual('mdi');
        });

        it('should assume any truthy value as true', function() {
            provider.setPreventBrowserNavigation(true);
            expect(provider.getPreventBrowserNavigation()).toEqual(true);
            provider.setPreventBrowserNavigation('1');
            expect(provider.getPreventBrowserNavigation()).toEqual(true);
            provider.setPreventBrowserNavigation(5);
            expect(provider.getPreventBrowserNavigation()).toEqual(true);
            provider.setPreventBrowserNavigation(!undefined);
            expect(provider.getPreventBrowserNavigation()).toEqual(true);
        });

        it('should be able to set as false', function() {
            provider.setPreventBrowserNavigation(false);
            expect(provider.getPreventBrowserNavigation()).toEqual(false);
        });

        it('should prevent the user to navigate from the current page', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, $location) {
                $httpBackend.expectGET('api/navigation');
                fisViewService.load();
                $rootScope.$digest();
                $httpBackend.flush();

                $httpBackend.expect('GET', /partials/);
                fisViewPanelService.open('/users/userlist');
                $rootScope.$apply();
                expect(fisViewPanelService.viewPanels().length).toEqual(4);
                expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');
                expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist');

                // Try to change the URL
                $location.path('/users/userlist/userDetails/1');
                $rootScope.$apply();

                // It shouldn't have changed
                expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist');

                // Try to change the URL
                $location.path('/users/userlist/userDetails/2');
                $rootScope.$apply();

                // It shouldn't have changed
                expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist');
            });
        });

        describe('Allow browser navigation', function() {
            beforeEach(function() {
                provider.setPreventBrowserNavigation(false);
            });

            it('should allow the user to navigate away from the current page', function() {
                angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $location) {
                    $httpBackend.expectGET('api/navigation');
                    fisViewService.load();
                    $rootScope.$digest();
                    $httpBackend.flush();

                    fisViewPanelService.open('/users/userlist');
                    $location.path('/users/userlist');
                    $rootScope.$apply();
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist');

                    fisPubSubService.subscribe('shell.navReady', function() {
                        // Try to change the URL
                        $location.path('/users/userlist/userDetails/1');
                        $rootScope.$apply();
                        expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/1');
                        // Try to change the URL
                        $location.path('/users/userlist/userDetails/2');
                        $rootScope.$apply();

                        // It should have changed
                        expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/2');
                    });
                });
            });
        });
    });

    describe('apiNoTabs', function() {
        beforeEach(angular.mock.module(function(fisViewServiceProvider) {
            fisViewServiceProvider.endpoint('api/navigationWithNoTabs');
        }));
        it('should open a new ViewPanel for a given path in case there are no open tabs', function() {
            angular.mock.inject(function($rootScope, fisViewPanelService, fisViewService, fisNavigationService) {
                $httpBackend.expectGET('api/navigationWithNoTabs');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    expect(fisViewPanelService.viewPanels().length).toEqual(0);
                    fisViewPanelService.open('/users/userlist');
                    expect(fisViewPanelService.viewPanels().length).toEqual(1);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    beforeEach(angular.mock.module(function(fisConfigServiceProvider, fisViewServiceProvider) {
        //setting empty config prevents fisConfigService from calling httpBackend
        fisConfigServiceProvider.config({});
        fisViewServiceProvider.endpoint('api/navigation');
    }));

    describe('api', function() {
        it('should open a new ViewPanel for a given path', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    expect(fisViewService.findNavItem('/item2')).toBe(nav.main[1]);
                    fisViewPanelService.open('/item2');
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    expect(fisViewPanelService.viewPanelByPath('/item2').partial).toEqual('/partials/dummy.html');
                    //expect(fisViewPanelService.tabs[2].label).toEqual('test2');
                    /*expect(scope.selectedTabPath).toEqual('/parentNavItem');
                    expect(locationMock.hash).toEqual('/parentNavItem');*/

                    var isErrorThrown = false;
                    try {
                        fisViewPanelService.open('/item1');
                    } catch(e) {
                        isErrorThrown = true;
                        expect(e.message).toMatch(/Nav item ".*" does not have a partial to load/);
                    }
                    //expect(isErrorThrown).toBe(true);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should open a child view panel correctly for a given path', function() {
            var mockEvent = {
                'ctrlKey' : true // this means each tab thats opened, must be in a new tab
            };
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    fisViewPanelService.open('/users/userlist');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');
                    fisViewPanelService.open('userDetails/:userId', mockEvent, {
                        'userId' : '1'
                    });
                    expect(fisViewPanelService.viewPanels().length).toEqual(5);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('User 1');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/1');
                    fisViewPanelService.open('/users/userlist');
                    expect(fisViewPanelService.viewPanels().length).toEqual(5);
                    fisViewPanelService.open('userDetails/:userId', mockEvent, {
                        'userId' : '2'
                    });
                    expect(fisViewPanelService.viewPanels().length).toEqual(6);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('User 2');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/2');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should open a child view panel correctly for a given path with parameter that has Special Characters', function() {
            var mockEvent = {
                'ctrlKey' : true // this means each tab thats opened, must be in a new tab
            };
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    fisViewPanelService.open('/users/userlist');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');
                    fisViewPanelService.open('userDetails/:userId', mockEvent, {
                        'userId' : '/1'
                    });
                    expect(fisViewPanelService.viewPanels().length).toEqual(5);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('User %2F1');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/%2F1');
                    fisViewPanelService.open('/users/userlist');
                    expect(fisViewPanelService.viewPanels().length).toEqual(5);
                    fisViewPanelService.open('userDetails/:userId', mockEvent, {
                        'userId' : '++2'
                    });
                    expect(fisViewPanelService.viewPanels().length).toEqual(6);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('User ++2');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/++2');
                    //Mock page reload parameter will be sent Encoded
                    fisViewPanelService.open('userDetails/:userId', mockEvent, {
                        'userId' : '%2B%2B2'
                    });
                    expect(fisViewPanelService.viewPanels().length).toEqual(6);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('User ++2');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/++2');
                    fisViewPanelService.open('userDetails/:userId', mockEvent, {
                        'userId' : 'A%201'
                    });
                    expect(fisViewPanelService.viewPanels().length).toEqual(7);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('User A 1');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/users/userlist/userDetails/A 1');

                    fisViewPanelService.open('/userSettings/viewSelectedBank/:bankName', mockEvent, {
                        bankName: "Apple",
                        bankId: 1
                    });
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('Apple');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/userSettings/viewSelectedBank/Apple');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should open a view panel with parameterized url correctly', function() {
            var mockEvent = {
                'ctrlKey' : true // this means each tab thats opened, must be in a new tab
            };
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    fisViewPanelService.open('abc/def/ghi/jkl/:navId/test/:testId', mockEvent, {navId: 1, testId: 2});
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('Parameterized Id');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/abc/def/ghi/jkl/1/test/2');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should open a view panel with resolved parameterized url correctly', function() {
            var mockEvent = {
                'ctrlKey' : true // this means each tab thats opened, must be in a new tab
            };
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    fisViewPanelService.open('abc/def/ghi/jkl/1/test/2');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('Parameterized Id');
                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/abc/def/ghi/jkl/1/test/2');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should close the ViewPanel for a given path', function() {
            angular.mock.inject(function($rootScope, $timeout, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    expect(fisViewService.findNavItem('/item2')).toBe(nav.main[1]);

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisViewPanelService.selectedViewPanelPath('/item3');
                    fisViewPanelService.close('/item2').then(function(){
                        expect(fisViewPanelService.viewPanels().length).toEqual(2);
                        expect(fisViewPanelService.activeViewPanel().label).toEqual('item3');
                    });
                });
                $rootScope.$apply();
                $httpBackend.flush();
            });
        });

        it('should not throw an error when trying to close a ViewPanel for a path that is not open', function() {
            angular.mock.inject(function($rootScope, $timeout, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    expect(fisViewService.findNavItem('/item2')).toBe(nav.main[1]);

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisViewPanelService.selectedViewPanelPath('/item3');
                    fisViewPanelService.close('/item2Foo').then(function(){
                        expect(fisViewPanelService.viewPanels().length).toEqual(3);
                        expect(fisViewPanelService.activeViewPanel().label).toEqual('item3');
                    });
                });
                $rootScope.$apply();
                $httpBackend.flush();
            });
        });

        it('should close multiple ViewPanels when called close function sequentially', function() {
            angular.mock.inject(function($rootScope, $timeout, fisViewService, fisViewPanelService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    fisViewPanelService.open('/item2', true, true);
                    //need to add a try catch block because $timeout.flush() causes '$digest already in progress' error
                    try{
                        $timeout.flush();
                    }catch(e){
                    }
                    fisViewPanelService.open('/item3', true, true);
                    try{
                        $timeout.flush();
                    }catch(e){
                    }
                    fisViewPanelService.open('/item4', true, true);
                    try{
                        $timeout.flush();
                    }catch(e){
                    }

                    $q.all([fisViewPanelService.close('/item2'), fisViewPanelService.close('/item3'),fisViewPanelService.close('/item4')]).then(function(){
                        expect(fisViewPanelService.viewPanels().length).toBe(0);
                    });
                });
                $rootScope.$apply();
                $httpBackend.flush();
            });
        });

        it('should get active view panel', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/item2');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('item2');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should make existing child page ViewPanel as active panel when it is opened again', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    //view panels corresponding top level items to item2, item3 and item4
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    //open parent view panel
                    fisViewPanelService.open('/users/userlist');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');

                    //open child view panel
                    fisViewPanelService.open('/users/userlist/userDetails/1');

                    //Select the parent view panel again
                    fisViewPanelService.selectedViewPanelPath('/users/userlist');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');

                    //Now open the child page again. The view panel count should remain same and
                    //child page should become active panel
                    fisViewPanelService.open('/users/userlist/userDetails/1');
                    //expect(fisViewPanelService.activeViewPanel().label).toEqual("User 1");
                    expect(fisViewPanelService.viewPanels().length).toEqual(5);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });


        //commenting out this test case since now we clone the object received from fisViewService
        //and hence isStatic attribute is not attached to the originial item anymore.
        it('should mark all secondary menu items with a partial as static', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {

                var promise = fisViewService.load({},navModelWithSecondaryNav);
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();

                    fisViewPanelService.open('/secNav/ch1');
                    var item1 = fisViewService.findNavItem('/secNav/ch1');
                    expect(item1.isStatic).toBeTruthy();
                    var item2 = fisViewService.findNavItem(('/secNav/ch1/ch11/ch111'));
                    expect(item2.isStatic).toBeTruthy();
                    var item3 = fisViewService.findNavItem(('/secNav/ch2'));
                    expect(item3.isStatic).toBeTruthy();
                    var item4 = fisViewService.findNavItem(('/secNav/ch1/ch11'));
                    expect(item4.isStatic).toBeFalsy();
                });
            });
        });

        it('should mark main items with partials as non closeable', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/item2');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('item2');
                });
                $rootScope.$digest();
                $httpBackend.flush();

                var isNonCloseable = fisViewPanelService.isNonCloseable(fisViewPanelService.activeViewPanel());
                expect(isNonCloseable).toBe(true);
            });
        });

        it('should mark main items with children as closeable', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/users');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('users');
                });
                $rootScope.$digest();
                $httpBackend.flush();

                var isNonCloseable = fisViewPanelService.isNonCloseable(fisViewPanelService.activeViewPanel());
                expect(isNonCloseable).toBe(false);
            });
        });

        it('should mark main items with partials and secondaryNav as non closeable', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/item4');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('item4');
                });
                $rootScope.$digest();
                $httpBackend.flush();

                var isNonCloseable = fisViewPanelService.isNonCloseable(fisViewPanelService.activeViewPanel());
                expect(isNonCloseable).toBe(true);
            });
        });

        it('should mark main items with partials and secondaryNav as non closeable', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/item4');
                    fisViewPanelService.open('/item4/item4sub1');
                    //expect(fisViewPanelService.activeViewPanel().label).toEqual('Sub Item 4');
                });
                $rootScope.$digest();
                $httpBackend.flush();

                expect(fisViewPanelService.activeViewPanel().label).toEqual('Sub Item 4');

                var isNonCloseable = fisViewPanelService.isNonCloseable(fisViewPanelService.activeViewPanel());
                expect(isNonCloseable).toBe(true);
            });
        });
    });

    describe('Saved link with ids should resolve to path with generic id and open page', function() {
        beforeEach(angular.mock.module(function(fisConfigServiceProvider, fisViewServiceProvider) {
            fisConfigServiceProvider.config({});
            fisViewServiceProvider.endpoint('api/navigationNested');
        }));

        it('should call the configured custom open method', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {

                $httpBackend.expectGET('api/navigationNested');
                var promise = fisViewService.load();

                promise.then(function(nav) {

                    expect(nav.main).toBeDefined();
                    fisViewPanelService.open('/demo/pages/nav/investor');
                    fisViewPanelService.open('/demo/pages/nav/investor/le/2/d/1/ab/1/abc/1');
                    expect(fisViewPanelService.viewPanels().length).toEqual(2);

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Saved link with panel ids should resolve to path with generic id and open page', function() {
        beforeEach(angular.mock.module(function(fisConfigServiceProvider, fisViewServiceProvider) {
            fisConfigServiceProvider.config({});
            fisViewServiceProvider.endpoint('api/navigation');
        }));

        it('should call the configured custom open method', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {

                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();
                    fisViewPanelService.open('/VehiclePanel/103');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Open Strategy - function reference', function() {
        var test = {};
        test.customStrategyFn = function(serv, path, event) {};
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            spyOn(test, 'customStrategyFn');
            fisViewPanelServiceProvider.setViewOpeningStrategy(test.customStrategyFn);
        }));

        it('should call the configured custom open method', function() {
            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item2');
                    expect(test.customStrategyFn).toHaveBeenCalled();
                    expect(test.customStrategyFn.calls.mostRecent().args[0].id).toEqual('item2');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Open Strategy - existing strategy string argument', function() {
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            fisViewPanelServiceProvider.setViewOpeningStrategy('mdi');
        }));

        it('should call the mdi open method strategy from fisViewPanelService', function() {
            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item2');
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    expect(fisViewPanelService.viewPanelByPath('/item2').partial).toEqual('/partials/dummy.html');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Open Strategy - non-existant strategy string argument', function() {
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            fisViewPanelServiceProvider.setViewOpeningStrategy('test.customOpenFn');
        }));

        it('should call the default open method from fisViewPanelService', function() {
            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item2');

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    expect(fisViewPanelService.viewPanelByPath('/item2').partial).toEqual('/partials/dummy.html');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Open Strategy - Overriding strategy always works (using false)', function() {
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            fisViewPanelServiceProvider.setViewOpeningStrategy(
                function customOpeningStrategy(path, event){
                    // Assure that we don't even call the (custom) opening strategy when using strategy overriding
                    expect(path.id).not.toBe('item5');
                    // We're using a custom strategy that will open everything in a new tab!
                    this._openInNewTab(path, event);
                });
        }));

        it('should not call the custom strategy method when overriding the opening strategy', function() {
            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService, fisPubSubService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);

                    // Open first page (should be same, but all existing are non closable)
                    fisViewPanelService.open('/users');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('users');

                    fisPubSubService.subscribe('fisViewPanelReplaced', function(param, topic){
                        // We need to listen for that event as viewpanel replacing does not happen
                        // immediately due to the possibility to kill viewpanel replacing (veto)
                        expect(fisViewPanelService.viewPanels().length).toEqual(4);
                        expect(param.path).toBe('/item7');

                        // Opening another page without forcing anything should open in a new tab
                        fisViewPanelService.open('/item6');
                        expect(fisViewPanelService.viewPanels().length).toEqual(5);
                        expect(fisViewPanelService.activeViewPanel().label).toEqual('item6');
                    });
                    fisViewPanelService.open('/item7', false); // Force opening in the same tab!
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Open Strategy - Overriding strategy always works (using true)', function() {
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            fisViewPanelServiceProvider.setViewOpeningStrategy(
                function customOpeningStrategy(path, event){
                    // Assure that we don't even call the (custom) opening strategy when using strategy overriding
                    expect(path.item).not.toBe('item6');
                    // We're using a custom strategy that will open everything in a new tab!
                    this._openInSameTab(path, event);
                });
        }));

        it('should not call the custom strategy method when overriding the opening strategy', function() {
            angular.mock.inject(function($window, $rootScope, $timeout, fisViewService, fisViewPanelService, fisPubSubService) {
                var promise = fisViewService.load({}, navModel);

                promise.then(function(nav) {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);

                    // Open first page (should be same, but all existing are non closable, thus we get a new tab)
                    fisViewPanelService.open('/item6');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    expect(fisViewPanelService.viewPanelByPath('/item6').partial).toEqual('/partials/dummy.html');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('item6');

                    var pubSubFunc = function (param, topic) {
                        // We need to listen for that event as viewpanel replacing does not happen
                        // immediately due to the possibility to kill viewpanel replacing (veto)
                        expect(param.path).toBe('/users');
                        expect(fisViewPanelService.viewPanels().length).toEqual(4);

                        fisViewPanelService.open('/item7', true); // Force opening in the new tab!
                        expect(fisViewPanelService.viewPanels().length).toEqual(5);
                        expect(fisViewPanelService.viewPanelByPath('/item7').partial).toEqual('/partials/dummy.html');
                        expect(fisViewPanelService.activeViewPanel().label).toEqual('item7');

                    };

                    fisPubSubService.subscribe('fisViewPanelReplaced', pubSubFunc);
                    fisViewPanelService.open('/users');
                });
                $rootScope.$digest();
            });
        });
    });

    describe('Open Strategy - custom strategy function argument', function() {
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            fisViewPanelServiceProvider.setViewOpeningStrategy(
                function customOpeningStrategy(path, event){
                    // Open everything in the same tab except navItems whose label contains user
                    if ((angular.isString(path) && path.toLowerCase().indexOf('user') >= 0) || (angular.isDefined(path.label) && path.label.toLowerCase().indexOf('user') >= 0)){
                        this._openInNewTab(path, event);
                    } else {
                        this._openInSameTab(path, event);
                    }
                });
        }));

        it('should call the custom strategy method from fisViewPanelService', function() {
            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    // Open first page (should be same, but all existing are non closable)
                    fisViewPanelService.open('/item2');
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    expect(fisViewPanelService.viewPanelByPath('/item2').partial).toEqual('/partials/dummy.html');

                    fisViewPanelService.open('/item3');
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    expect(fisViewPanelService.viewPanelByPath('/item3').partial).toEqual('/partials/dummy.html');

                    // Open a user page, should be opened in a new tab
                    fisViewPanelService.open('/userDetails/:userId', undefined, {userId: 4});
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Open Strategy - custom strategy function should receive event and parameters', function() {
        var customStratCalled = false;
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            fisViewPanelServiceProvider.setViewOpeningStrategy(
                function customOpeningStrategy(path, event, params){
                    customStratCalled = true;
                    expect(event).toBeDefined();
                    expect(params).toBeDefined();
                    expect(event.very).toBe('special');
                    expect(params.param1).toBe(true);
                    expect(params.param2).toBe('param');

                    this._openInSameTab(path, event);
                });
        }));

        it('should call the custom strategy method and pass through parameters and event', function() {
            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    // Open first page (should be same, but all existing are non closable)
                    fisViewPanelService.open('/item2', {very: 'special', event: 0}, {param1: true, param2: 'param'});
                    expect(customStratCalled).toBe(true);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('Browser Strategy', function() {
        beforeEach(angular.mock.module(function(fisViewPanelServiceProvider) {
            fisViewPanelServiceProvider.setViewOpeningStrategy('browser');
        }));

        it('should open a navigation item in current view panel only', function() {
            var mockEvent = {
                ctrlKey : false,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    // item2, item3 and item4 are opened by default
                    // item2 and item3 are considered non-closable
                    expect(fisViewPanelService.viewPanels().length).toEqual(3); // basic 3 tabs expected to be open here

                    // set the selected panel, opens automatically
                    fisViewPanelService.open('/users/userlist', mockEvent); // ensure the panel is active
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');
                    //Panel number would be 4. 3 top level item2, item3 and item4 and userlist
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);

                    fisViewPanelService.open('/item5/item5child', mockEvent);
                    //ViewPanel number shouldn't change. item5child should be opened in place of userlist
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });

        it('should open a navigation item in new view panel', function() {
            var mockEvent = {
                ctrlKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    // item2, item3 and item4 are opened by default
                    // item2 and item3 are considered non-closable
                    expect(fisViewPanelService.viewPanels().length).toEqual(3); // basic 3 tabs expected to be open here

                    // set the selected panel, opens automatically
                    fisViewPanelService.open('/users/userlist', mockEvent); // ensure the panel is active
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');
                    //Panel number would be 4. 3 viewpanels for top level items item2, item3 and item4 and userlist
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);

                    fisViewPanelService.open('/item5/item5child', mockEvent);
                    //ViewPanel number should increase by 1.
                    expect(fisViewPanelService.viewPanels().length).toEqual(5);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });

        it('should open a navigation item in new view panel', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    // item2, item3 and item4 are opened by default
                    // item2 and item3 are considered non-closable
                    expect(fisViewPanelService.viewPanels().length).toEqual(3); // basic 3 tabs expected to be open here

                    // set the selected panel, opens automatically
                    fisViewPanelService.open('/users/userlist', mockEvent); // ensure the panel is active
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('View Users');
                    //Panel number would be 4. 3 viewpanels for top level items item2, item3 and item4 and userlist
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);

                    fisViewPanelService.open('/item5/item5child', mockEvent);
                    //ViewPanel number should increase by 1.
                    expect(fisViewPanelService.viewPanels().length).toEqual(5);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });

        it('should open a navigation item in new view panel if the strategy is overridden to true', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisViewPanelService.open('/users/userlist', true );
                    //ViewPanel number should increase by 1.
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });

        it('should open a navigation item in the existing panel if the strategy is overridden to false', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisViewPanelService.open('/item2', false );
                    //ViewPanel should open in same Panel.
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });

        it('should be able to update its title ', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item2', false );
                    fisViewPanelService.activeViewPanel().setTitle({prefix: 'Test', suffix: 'asdf', sep: ':'});
                    expect(fisViewPanelService.activeViewPanel().getTitle()).toEqual('Test:item2:asdf');

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });
        it('should be able to update its title with partial parameters or strings multiple times ', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item2', false );
                    fisViewPanelService.activeViewPanel().setTitle({ suffix: 'k0123'});
                    expect(fisViewPanelService.activeViewPanel().getTitle()).toEqual('item2|k0123');
                    fisViewPanelService.activeViewPanel().setTitle({ prefix: 'Bob'});
                    expect(fisViewPanelService.activeViewPanel().getTitle()).toEqual('Bob|item2');
                    fisViewPanelService.activeViewPanel().setTitle({ sep: 'Bob', suffix: 'tester'});
                    expect(fisViewPanelService.activeViewPanel().getTitle()).toEqual('item2Bobtester');
                    fisViewPanelService.activeViewPanel().setTitle('TEST');
                    expect(fisViewPanelService.activeViewPanel().getTitle()).toEqual('TEST');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });
        it('should be able to reset its title ', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item2', false );
                    fisViewPanelService.activeViewPanel().setTitle({prefix: 'Test', suffix: 'asdf', sep: ':'});
                    fisViewPanelService.activeViewPanel().resetTitle();
                    expect(fisViewPanelService.activeViewPanel().title).toEqual('item2');

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });
        it('should have an icon when an icon is specified ', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item3', false );
                    expect(fisViewPanelService.activeViewPanel().icon).toEqual('sg_icon test');

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });
        it('should set an icon when an icon is specified ', function() {
            var mockEvent = {
                metaKey : true,
                target : 'temp'
            };

            angular.mock.inject(function($window, $rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.open('/item3', false );
                    fisViewPanelService.activeViewPanel().setIcon('fis-legacy-icon fis-legacy-i-home');
                    expect(fisViewPanelService.activeViewPanel().getIcon()).toEqual('fis-legacy-icon fis-legacy-i-home');

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });

        });
    });

    describe('opening the default tab', function() {
        it('should open the default tab when no navPath or other argument is specified', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();

                    fisViewPanelService.open('/item4');
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    expect(fisViewPanelService.viewPanelByPath('/item4').partial).toEqual('/partials/dummy.html');

                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/item4');

                    fisViewPanelService.open();

                    expect(fisViewPanelService.activeViewPanel().path).toEqual('/item2');
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });


    describe('panel close with "fisViewPanelCloseIntent" subscribers', function() {
        //all test cases have initial 3 panels opened because they are top level nav items with partials

        it('should close the panel having "fisViewPanelCloseIntent" subscribers returning true', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(){
                        return true;
                    });

                    fisViewPanelService.close('/item2').then(function(){
                        //close call is resolved because fisViewPanelCloseIntent subscriber returns true
                        expect(fisViewPanelService.viewPanels().length).toBe(2);
                    });

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should not close the panel having "fisViewPanelCloseIntent" subscriber returning false', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(){
                        return false;
                    });

                    fisViewPanelService.close('/item2').then(
                        angular.noop,
                        function(){
                            //close call is rejected because fisViewPanelCloseIntent subscriber returns false
                            expect(fisViewPanelService.viewPanels().length).toBe(3);
                        });

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should close the panel having "fisViewPanelCloseIntent" subscriber resolving the promise', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    var item2Defer = $q.defer();
                    var item2Promise = item2Defer.promise;

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(){
                        return item2Promise;
                    });

                    fisViewPanelService.close('/item2').then(
                        function () {
                            //close call is resolved because fisViewPanelCloseIntent subscriber resolves the promise
                            expect(fisViewPanelService.viewPanels().length).toBe(2);
                        });

                    item2Defer.resolve();

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should not close the panel having "fisViewPanelCloseIntent" subscriber rejecting the promise', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    var item2Defer = $q.defer();
                    var item2Promise = item2Defer.promise.catch(angular.noop);
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(){
                        return item2Promise;
                    });

                    fisViewPanelService.close('/item2').then(
                        angular.noop,
                        function () {
                            //close call is rejected because fisViewPanelCloseIntent subscriber rejects the promise
                            expect(fisViewPanelService.viewPanels().length).toBe(3);
                        });

                    item2Defer.reject();

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should not close both panels if all intent handlers returns true', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item2'){
                            return true;
                        }
                    });
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item3'){
                            return true;
                        }
                    });

                    //$q.all is resolved only when the promises returned from both close calls are resolved
                    $q.all([fisViewPanelService.close('/item2'), fisViewPanelService.close('/item3')]).then(
                        function() {
                            //both close calls are resolved because both fisViewPanelCloseIntent subscriber returns true
                            expect(fisViewPanelService.viewPanels().length).toBe(1);
                        }
                    );

                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should not close both panels if all intent handlers resolves the promise or returns true', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    var item2Defer = $q.defer();
                    var item2Promise = item2Defer.promise;

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item2'){
                            return item2Promise;
                        }
                    });
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item3'){
                            return true;
                        }
                    });
                    //$q.all is resolved only when the promises returned from both close calls are resolved
                    $q.all([fisViewPanelService.close('/item2'), fisViewPanelService.close('/item3')]).then(
                        function() {
                            //both close calls are resolved because both fisViewPanelCloseIntent subscribers either resolves the promise or returns true
                            expect(fisViewPanelService.viewPanels().length).toBe(1);
                        }
                    );

                    item2Defer.resolve();
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should not close both panels if all intent handlers resolves the promise', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    var item2Defer = $q.defer();
                    var item2Promise = item2Defer.promise;
                    var item3Defer = $q.defer();
                    var item3Promise = item2Defer.promise;

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item2'){
                            return item2Promise;
                        }
                    });
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item3'){
                            return item3Promise;
                        }
                    });
                    //$q.all is resolved only when the promises returned from both close calls are resolved
                    $q.all([fisViewPanelService.close('/item2'), fisViewPanelService.close('/item3')]).then(
                        function() {
                            //both close calls are resolved because both fisViewPanelCloseIntent subscribers resolves the promise
                            expect(fisViewPanelService.viewPanels().length).toBe(1);
                        }
                    );

                    item2Defer.resolve();
                    item3Defer.resolve();
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should not close any panel if any one of the intent handler returns false', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item2'){
                            return true;
                        }
                    });
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item3'){
                            return false;
                        }
                    });
                    //$q.all is resolved only when the promises returned from both close calls are resolved
                    $q.all([fisViewPanelService.close('/item2'), fisViewPanelService.close('/item3')]).then(
                        angular.noop,
                        function() {
                            //$q.all is rejected because one of the fisViewPanelCloseIntent subscribers returns false
                            expect(fisViewPanelService.viewPanels().length).toBe(2);
                        }
                    );
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should not close any panel if any one of the intent handler rejects the promise', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    var item2Defer = $q.defer();
                    var item2Promise = item2Defer.promise;
                    var item3Defer = $q.defer();
                    var item3Promise = item3Defer.promise.catch(angular.noop);

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item2'){
                            return item2Promise;
                        }else{
                            return true;
                        }
                    });

                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item3'){
                            return item3Promise;
                        }
                        else{
                            return true;
                        }
                    });
                    //$q.all is resolved only when the promises returned from both close calls are resolved
                    $q.all([fisViewPanelService.close('/item2'), fisViewPanelService.close('/item3')]).then(
                        angular.noop,
                        function() {
                            //$q.all is rejected because one of the fisViewPanelCloseIntent subscribers rejects the promise
                            expect(fisViewPanelService.viewPanels().length).toBe(2);
                        }
                    );
                    item2Defer.resolve();
                    item3Defer.reject();
                });
                $rootScope.$apply();
                $httpBackend.flush();
            });
        });

        it('should not close the second panel whose close call is made on successful closing of first panel', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {

                    var item2Defer = $q.defer();
                    var item2Promise = item2Defer.promise;
                    var item3Defer = $q.defer();
                    var item3Promise = item3Defer.promise;

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item2'){
                            //This intent handler is specific for item2. If data path matches, then it should reject/resolve the promise
                            return item2Promise;
                        }else{
                            //if the data path does not match return true to indicate no vetoing
                            return true;
                        }
                    });

                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item3'){
                            //This intent handler is specific for item3. If data path matches, then it should reject/resolve the promise
                            return item3Promise;
                        }
                        else{
                            //if the data path does not match return true to indicate no vetoing
                            return true;
                        }
                    });
                    fisViewPanelService.close('/item2').then(function(){
                        var item3ClosePromise = fisViewPanelService.close('/item3');
                        item3ClosePromise.then(function(){
                            //second close call is also resolved because the subscriber returns true
                            expect(fisViewPanelService.viewPanels().length).toBe(1);
                        });
                    });
                    item2Defer.resolve();
                    item3Defer.resolve();
                });
                $rootScope.$apply();
                $httpBackend.flush();
            });
        });

        it('should not close the second panel whose close call is made on successful closing of first panel but the second panels intent handler rejects promise', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService, $q) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    var item2Defer = $q.defer();
                    var item2Promise = item2Defer.promise;
                    var item3Defer = $q.defer();
                    // use promise with catch method, otherwise angular reports unhandled exception for a rejected promises
                    var item3Promise = item3Defer.promise.catch(angular.noop);

                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item2'){
                            //This intent handler is specific for item2. If data path matches, then it should reject/resolve the promise
                            return item2Promise;
                        }else{
                            //if the data path does not match return true to indicate no vetoing
                            return true;
                        }
                    });

                     fisPubSubService.subscribe('fisViewPanelCloseIntent', function(data){
                        if(data.path === '/item3'){
                            //This intent handler is specific for item3. If data path matches, then it should reject/resolve the promise
                            return item3Promise;
                        }
                        else{
                            //if the data path does not match return true to indicate no vetoing
                            return true;
                        }
                    });
                    fisViewPanelService.close('/item2').then(function(){
                        var item3ClosePromise = fisViewPanelService.close('/item3');
                        item3ClosePromise.then(
                            angular.noop,
                            function(){
                                //second close call is rejected because the subscriber rejects the promise
                                expect(fisViewPanelService.viewPanels().length).toBe(2);
                            });
                    });
                  item2Defer.resolve();
                  item3Defer.reject();
                });
                $rootScope.$apply();
                $httpBackend.flush();
            });
        });
        it('should open a new ViewPanel for a given path with strategy is overridden to true and fire fisViewPanelOpened Event', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                var eventFired = false;
                promise.then(function() {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelOpened', function(data){
                        if (data.path === '/item5/item5child'){
                            eventFired = true;
                        }
                    });
                    fisViewPanelService.open('/item5/item5child');
                });
                $rootScope.$apply();
                $httpBackend.flush();

                expect(eventFired).toBe(true);
                expect(fisViewPanelService.viewPanels().length).toEqual(4);
            });
        });
        it('should not open a new ViewPanel for a given path already open and not fire fisViewPanelOpened Event', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                var eventFired = false;
                promise.then(function() {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    fisPubSubService.subscribe('fisViewPanelOpened', function(data){
                        eventFired = true;
                    });
                    fisViewPanelService.open('/item2');
                });
                $rootScope.$apply();
                $httpBackend.flush();

                expect(eventFired).toBe(false);
                expect(fisViewPanelService.viewPanels().length).toEqual(3);
            });
        });

    });

    describe('panel replace with "fisViewPanelReplaceIntent" subscribers', function() {

        it('should replace the panel having "fisViewPanelReplaceIntent" subscribers returning true', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    fisViewPanelService.open('/item7');
                    expect(fisViewPanelService.viewPanels()[3].label).toEqual('item7');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    fisPubSubService.subscribe('fisViewPanelReplaceIntent', function(){
                        return true; // OPEN NEW PANEL
                    });
                    fisViewPanelService.open('/item6', 'false');

                });
                $rootScope.$apply();
                $httpBackend.flush();

                //Check to make sure new panel (item6) replaced previous panel (item7)
                expect(fisViewPanelService.viewPanels().length).toEqual(4);
                expect(fisViewPanelService.viewPanels()[3].label).toEqual('item6');

            });
        });

        it('should NOT replace the panel having "fisViewPanelReplaceIntent" subscribers returning false', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService, fisPubSubService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function() {
                    fisViewPanelService.open('/item7');
                    expect(fisViewPanelService.viewPanels()[3].label).toEqual('item7');
                    expect(fisViewPanelService.viewPanels().length).toEqual(4);
                    fisPubSubService.subscribe('fisViewPanelReplaceIntent', function(){
                        return false; // DO NOT OPEN NEW PANEL
                    });
                    fisViewPanelService.open('/item6', 'false');

                });
                $rootScope.$apply();
                $httpBackend.flush();

                //Check to make sure new panel (item6) did not replace previous panel (item7)
                expect(fisViewPanelService.viewPanels().length).toEqual(4);
                expect(fisViewPanelService.viewPanels()[3].label).toEqual('item7');

            });
        });

    });

    describe('tab renaming', function() {

        it('should set and reset custom title', function(){
            // Showing the right title in the DOM is related to the fisTabsBar
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {

                var promise = fisViewService.load({}, navModelWithSecondaryNav);
                promise.then(function(nav) {
                    expect(nav.main).toBeDefined();

                    fisViewPanelService.open('/secNav/ch1');
                    expect(fisViewPanelService.activeViewPanel().title).toBe('L1');
                    expect(fisViewPanelService.activeViewPanel().navItem.customTitle).toBeUndefined();

                    fisViewPanelService.activeViewPanel().setTitle('Replace title');

                    expect(fisViewPanelService.activeViewPanel().title).toBe('L1');
                    expect(fisViewPanelService.activeViewPanel().navItem.customTitle).toBe('Replace title');

                    fisViewPanelService.activeViewPanel().resetTitle();

                    expect(fisViewPanelService.activeViewPanel().navItem.customTitle).toBeUndefined();
                });
            });
        });

    });


    describe('tab reload fisActivePanel with argument', function() {
        var test = {};
        test.open = function() {};

        it('should call the reloadActivePanel method', function() {
            spyOn(test, 'open');
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                fisViewPanelService.open = test.open;
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();

                promise.then(function(nav) {
                    fisViewPanelService.reloadActiveViewPanel('/item2');
                    expect(test.open).toHaveBeenCalledWith('/item2',null, {});
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('tab reload fisActivePanel without argument', function() {
        var test = {};
        test.open = function() {};

        it('should call the reloadActivePanel method with no arguments', function() {
            spyOn(test, 'open');
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                fisViewPanelService.open = test.open;
                $httpBackend.expectGET('api/navigation');

                var promise = fisViewService.load();

                promise.then(function(nav) {

                    fisViewPanelService.reloadActiveViewPanel();
                    expect(test.open).toHaveBeenCalledWith('/item4',null, {});
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('add node dynamically', function() {
        var test = {};
        test.open = function() {};
        it('should add a node dynamically to the menu', function() {
            angular.mock.inject(function($rootScope, $timeout, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/item2');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('item2');
                    var node = {'label': 'MyMenu',
                        'id': 'newNode',
                        'module': 'desktop-ui',
                        'title':'New Node',
                        'partial': '/partials/dummy.html'};
                    fisViewService.addNavItem('item4', node).then(function (nav) {
                        expect(fisViewService.findNavItem('item4').children[1]).toBe(node);
                        expect(fisViewPanelService.activeViewPanel().label).toEqual('item2');
                    });
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should remove a node dynamically from the menu', function() {
            angular.mock.inject(function($rootScope, $timeout, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/item2');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('item2');
                    var node = {'label': 'MyMenu',
                        'id': 'newNode',
                        'module': 'desktop-ui',
                        'title':'New Node',
                        'partial': '/partials/dummy.html'};
                    fisViewService.addNavItem('item4', node).then(function (nav) {
                        expect(fisViewService.findNavItem('item4').children[1]).toBe(node);
                        expect(fisViewService.findNavItem('item4').children.length).toBe(2);
                        expect(fisViewPanelService.activeViewPanel().label).toEqual('item2');
                        fisViewService.removeNavItem('newNode').then(function (nav) {
                            expect(fisViewService.findNavItem('item4').children.length).toBe(1);
                            expect(fisViewPanelService.activeViewPanel().label).toEqual('item2');
                        });
                    });
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });

        it('should add a node dynamically to the secondary menu', function() {
            angular.mock.inject(function($rootScope, fisViewService, fisViewPanelService) {
                $httpBackend.expectGET('api/navigation');
                var promise = fisViewService.load();
                promise.then(function(nav) {
                    fisViewPanelService.open('/item4');
                    expect(fisViewPanelService.activeViewPanel().label).toEqual('item4');
                    var node = {'label': 'MyMenu',
                        'id': 'newNode',
                        'module': 'desktop-ui',
                        'title':'New Node',
                        'partial': '/partials/dummy.html'};
                    fisViewService.addNavItem('item4/item4sub1', node).then(function (nav) {
                        expect(fisViewPanelService.activeViewPanel().label).toEqual('item4');
                        expect(fisViewService.findNavItem('item4sub1').children[0]).toBe(node);
                        expect(fisViewService.findNavItem('item4sub1').children.length).toBe(1);
                        fisViewService.removeNavItem('item4/item4sub1/newNode').then(function (nav) {
                            expect(fisViewPanelService.activeViewPanel().label).toEqual('item4');
                            expect(fisViewService.findNavItem('item4sub1').children.length).toBe(0);
                        });
                    });
                });
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('test shell viewPanelReady event', function() {
        var log = '';

        it('should publish the shell.navReady event when navigation gets loaded', function() {
            angular.mock.inject(function(fisViewService, $rootScope, fisPubSubService, fisViewPanelService) {
                var unsubscribe = fisPubSubService.subscribe('shell.viewPanelReady', function() {
                    expect(fisViewPanelService.viewPanels().length).toEqual(3);
                    unsubscribe();
                });

                $httpBackend.expectGET('api/navigation');
                fisViewService.load();
                $rootScope.$digest();
                $httpBackend.flush();
            });
        });
    });

    describe('openView API method', function() {

        var service,
            $compile,
            $controller,
            parentScope,
            empty = {},
            log = null,
            logCtrl = null,
            viewWithPath = { path: 'test' },
            viewWithLogAction = { action: 'log()', path: 'test' },
            viewWithLogActionController = { actionController: 'myActions', action: 'log()', path: 'test' };

        function logFn() {

            log = [].slice.call(arguments);

        }

        function createClickable(scope, exp, createChild) {

            var elem = $compile('<a href="" ng-click="' + exp + '">Go</a>')(createChild ? scope.$new() : scope);

            return elem;

        }

        beforeEach( angular.mock.module(function ($controllerProvider) {

            $controllerProvider.register('myActions', function($scope, $element, view) {

                $scope.logFromCtrl = function() {
                    logCtrl = [$scope, $element, view].concat([].slice.call(arguments));
                }

            });

        }) );

        beforeEach( inject( function(_fisViewPanelService_, _$compile_, _$controller_, $rootScope )  {

            service = _fisViewPanelService_;
            spyOn(service, 'open');
            $compile = _$compile_;
            $controller = _$controller_;
            parentScope = $rootScope.$new();
            parentScope.log = logFn;
            parentScope.viewWithPath = viewWithPath;
            parentScope.viewWithLogAction = viewWithLogAction;
            parentScope.viewWithLogActionController = viewWithLogActionController;
            log = null;
            logCtrl = null;

        }));

        it('should delegate to open method if viewDef has no action but has path', function() {

            var viewDef = viewWithPath;
            service.openView(viewDef, true, empty);

            expect(service.open).toHaveBeenCalledWith(viewWithPath.path, true, empty);

        } );

        it('should delegate to open method if viewDef is a string', function() {

            service.openView(viewWithPath.path, true, empty);

            expect(service.open).toHaveBeenCalledWith(viewWithPath.path, true, empty);

        } );

        it('should throw if no action or path is provided in viewDef', function() {

            // no event (true is sent) and not invoked from an angular expression
            expect(function() {
                service.openView({}, true, empty);
            }).toThrowError('Cannot open provided view definition object');

        } );

        it('should throw if action is provided but no scope can be inferred', function() {

            var viewDef = {
                action: 'log()',
                path: 'test'
            };

            // no event (true is sent) and not invoked from an angular expression
            expect(function() {
                service.openView(viewDef, true, empty);
            }).toThrowError('Cannot find a scope to evaluate expression in.');

        } );

        it('should evaluate the action if one is provided and event is provided', function() {

            parentScope.doSomething = function(event) {

                // here, this = scope, but we are not using
                // Function.apply or Function.call below so the context is not
                // passed to the openView function. An event is therefore needed to infer scope.
                service.openView(viewWithLogAction, event, empty);

            }

            var link = createClickable(parentScope, 'doSomething($event)')
            angular.element(link).triggerHandler('click');

            expect(parentScope.$$childHead).toBe(null);
            expect(log).toBeDefined();
            expect(service.open).not.toHaveBeenCalled();

        } );

        it('should evaluate the action if one is provided and function\'s `this` is a scope', function() {

            // angular uses the expression's scope as the function's evaluation context (this)
            parentScope.openView = service.openView;


            var link = createClickable(parentScope, 'openView(viewWithLogAction)', true);
            angular.element(link).triggerHandler('click');

            var linkScope = link.scope();

            expect(linkScope.$$childHead).toBe(null);
            expect(log).toBeDefined();
            expect(service.open).not.toHaveBeenCalled();

        } );

        it('should provide locals accessible in the action expression', function() {

            parentScope.viewDef = {
                action: 'log($event, $scope, view)',
                id: 'myView'
            };
            parentScope.openView = service.openView;

            var link = createClickable(parentScope, 'openView(viewDef, $event)', true);
            angular.element(link).triggerHandler('click');

            var linkScope = link.scope();

            expect(log[0].type).toBe('click');
            expect(log[1].$id).toEqual(linkScope.$id);
            expect(log[2]).toBe(parentScope.viewDef);

            expect(linkScope.$$childHead).toBe(null);

        } );

        it('should allow passing locals as 3rd argument', function() {

            parentScope.viewDef = {
                action: 'log($event, $scope, view, param1)',
                id: 'myView'
            };
            parentScope.openView = service.openView;

            var link = createClickable(parentScope, 'openView(viewDef, $event, { param1: \'value1\' })', true);
            angular.element(link).triggerHandler('click');

            var linkScope = link.scope();

            expect(log[0].type).toBe('click');
            expect(log[1].$id).toEqual(linkScope.$id);
            expect(log[2]).toBe(parentScope.viewDef);
            expect(log[3]).toBe('value1');

            expect(linkScope.$$childHead).toBe(null);

        } );

        it('should instantiate actionController if one is provided', function() {

            parentScope.viewDef = {
                action: 'logFromCtrl(param1);log();',
                id: 'myView',
                actionController: 'myActions'
            };
            parentScope.openView = service.openView;

            var link = createClickable(parentScope, 'openView(viewDef, $event, { param1: \'value1\' })', true);
            angular.element(link).triggerHandler('click');

            var linkScope = link.scope();

            // the controller's scope should be a child scope of the click scope
            expect(logCtrl[0].$id).not.toEqual(linkScope.$id);
            expect(logCtrl[0].$$destroyed).toBe(true);

            expect(logCtrl[1][0]).toBe(link[0]);
            expect(logCtrl[2]).toBe(parentScope.viewDef);
            expect(logCtrl[3]).toBe('value1');

            // parentScope's log function should also have been invoked as per the second
            // part of the expression
            expect(log).toBeDefined();

            // important here: we create a temporary child scope for the actionController
            // it should be destroyed immediatly after evaluation to avoid leaks
            expect(linkScope.$$childHead).toBe(null);

        } );

    });
});
/* eslint-enable */
