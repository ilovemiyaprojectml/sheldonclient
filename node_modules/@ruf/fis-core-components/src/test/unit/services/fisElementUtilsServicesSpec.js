'use strict';

describe('fisElementUtils copyProperties', function () {
  beforeEach(angular.mock.module('fis.core'));

  it('Should copy all properties starting with "a" to a new target object', function () {
    angular.mock.inject(function ($compile, $rootScope, fisElementUtils) {
      var sourceObject = {
        abc: 'abc',
        aaa: 'aaa',
        def: 'def'
      };

      var prefix = 'a';

      var returnValue = fisElementUtils.copyProperties(sourceObject, prefix);

      expect(returnValue).toBeDefined();
      expect(returnValue.bc).toEqual(sourceObject.abc);
      expect(returnValue.aa).toEqual(sourceObject.aaa);
      expect(Object.keys(returnValue).length).toBe(2);
    });
  });

  it('Should copy all properties starting with "a" to an existing target object', function () {
    angular.mock.inject(function ($compile, $rootScope, fisElementUtils) {
      var sourceObject = {
        abc: 'abc',
        aaa: 'aaa',
        def: 'def'
      };
      var targetObject = {
        foo: 'bar'
      };

      var prefix = 'a';

      var returnValue = fisElementUtils.copyProperties(sourceObject, prefix, targetObject);

      expect(returnValue).toBeDefined();
      expect(returnValue.bc).toEqual(sourceObject.abc);
      expect(returnValue.aa).toEqual(sourceObject.aaa);
      expect(returnValue.foo).toEqual(targetObject.foo);
      expect(Object.keys(returnValue).length).toBe(3);
    });
  });

  it('Should copy no property when the prefix does not match', function () {
    angular.mock.inject(function ($compile, $rootScope, fisElementUtils) {
      var sourceObject = {
        abc: 'abc',
        aaa: 'aaa',
        def: 'def'
      };
      var targetObject = {
        foo: 'bar'
      };

      var prefix = 'b';

      var returnValue = fisElementUtils.copyProperties(sourceObject, prefix, targetObject);

      expect(returnValue).toBeDefined();
      expect(returnValue.foo).toEqual(targetObject.foo);
      expect(Object.keys(returnValue).length).toBe(1);
    });
  });

  it('Should throw an error when the prefix is undefined', function () {
    angular.mock.inject(function ($compile, $rootScope, fisElementUtils) {
      var sourceObject = {
        abc: 'abc',
        aaa: 'aaa',
        def: 'def'
      };

      try {
        fisElementUtils.copyProperties(sourceObject);
      } catch (e) { /* Expected */
      }
    });
  });

  it('Should throw an error when the prefix is not a string', function () {
    angular.mock.inject(function ($compile, $rootScope, fisElementUtils) {
      var sourceObject = {
        abc: 'abc',
        aaa: 'aaa',
        def: 'def'
      };

      var prefix = {
        foo: 'bar'
      };

      try {
        fisElementUtils.copyProperties(sourceObject, prefix);
      } catch (e) { /* Expected */
      }
    });
  });

  it('Should throw an error when the prefix is empty', function () {
    angular.mock.inject(function ($compile, $rootScope, fisElementUtils) {
      var sourceObject = {
        abc: 'abc',
        aaa: 'aaa',
        def: 'def'
      };

      var prefix = '';

      try {
        fisElementUtils.copyProperties(sourceObject, prefix);
      } catch (e) { /* Expected */
      }
    });
  });

  it('Should throw an error when the source object is undefined', function () {
    angular.mock.inject(function ($compile, $rootScope, fisElementUtils) {
      var sourceObject;

      var prefix = 'a';

      try {
        fisElementUtils.copyProperties(sourceObject, prefix);
      } catch (e) { /* Expected */
      }
    });
  });
});

