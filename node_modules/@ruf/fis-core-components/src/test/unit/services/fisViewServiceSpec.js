'use strict';

/* jasmine specs for services go here */

describe('services', function () {
  var navModel = {
    main: [{
      label: 'item1',
      id: 'item1'
    }, {
      label: 'item2',
      id: 'item2',
      partial: '/partials/dummy.html'
    }, {
      label: 'item3',
      id: 'item3',
      partial: '/partials/dummy.html'
    }, {
      label: 'item4',
      id: 'item4',
      partial: '/partials/dummy.html'
    }, {
      label: 'AB: {abId}',
      title: 'AB',
      id: 'ab/:abId',
      module: 'desktop-ui',
      partial: 'desktop-ui/partials/dummy.html',
      tags: ['ab/:abId', 'AB']
    }, {
      label: 'Dashboard',
      id: 'abcd',
      partial: 'desktop-ui/partials/dummyLinks.html',
      children: [
        {
          label: 'Dashboard 1',
          title: 'Dashboard 1',
          id: 'cd',
          partial: 'desktop-ui/partials/dummy.html',
          renamable: true
        }
      ]
    }, {
      id: 'inbox1',
      label: 'Inbox 1',
      partial: 'inbox.html',
      controller: 'fakeController'
    }, {
      id: 'inbox2',
      label: 'Inbox 2',
      partial: 'inbox.html',
      args: { tabClass: 'myClass' },
      controller: 'fakeController'
    }, {
      label: 'Parameterized Id',
      title: 'Parameterized Id',
      id: 'abc/def/ghi/jkl/:navId/test/:testId',
      partial: 'desktop-ui/partials/dummy.html'
    }
     ]
  };

  beforeEach(angular.mock.module('fis.core'));

  describe('fisViewService', function () {
    var $httpBackend;

    beforeEach(angular.mock.module(function () {
      return function (_$httpBackend_) {
        $httpBackend = _$httpBackend_;
        $httpBackend.when('GET', 'api/config').respond({});
        $httpBackend.when('GET', 'api/navigation/404').respond(404);
        $httpBackend.when('GET', 'api/fromconfig/admin').respond(navModel);
        $httpBackend.when('GET', 'api/fromconfig').respond(navModel);
        $httpBackend.when('GET', 'api/navigation.json').respond(navModel);
        $httpBackend.when('GET', 'api/navigation/admin').respond(navModel);
        $httpBackend.when('GET', 'api/navigation.json?role=admin').respond(navModel);
      };
    }));

    beforeEach(angular.mock.module(function () {
      fis.__controllers.fakeController = function () {};
      // fisViewServiceProvider.endpoint('api/navigation');
    }));

    afterEach(function () {
      $httpBackend.verifyNoOutstandingExpectation();
      delete fis.__controllers.fakeController;
    });

    var log = '';
    var params = {
      role: 'admin'
    };
    describe('load', function () {
      it('should not add the args resolve function on the controller constructor', function () {
        angular.mock.module(function (fisViewServiceProvider) {
          fisViewServiceProvider.endpoint('api/navigation.json');
        });

        angular.mock.inject(function (fisViewService, $rootScope) {
          fisViewService.load();
          $rootScope.$digest();
          $httpBackend.flush();
          expect(fis.__controllers.fakeController.args).not.toBeDefined();
        });
      });
      it('should allow sending arbitrary path parameters', function () {
        angular.mock.module(function (fisViewServiceProvider) {
          fisViewServiceProvider.endpoint('api/navigation/:role');
        });

        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation/admin');
          fisViewService.load(params);
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
      it('should allow sending arbitrary request parameters', function () {
        angular.mock.module(function (fisViewServiceProvider) {
          fisViewServiceProvider.endpoint('api/navigation.json');
        });

        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json?role=admin');
          fisViewService.load(params);
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
      it('should should work without parameters', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          fisViewService.load();
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
      it('should publish the shell.navReady event when navigation gets loaded', function () {
        angular.mock.inject(function (fisViewService, $rootScope, fisPubSubService) {
          log = '';
          var unsubscribe = fisPubSubService.subscribe('shell.navReady', function (nav) {
            expect(nav.main[0].label).toEqual('item1');
            log = 'invoked';
            unsubscribe();
          });

          $httpBackend.expectGET('api/navigation.json?role=admin');
          fisViewService.load(params);
          $rootScope.$digest();
          $httpBackend.flush();
          expect(log).toEqual('invoked');
        });
      });
      it('should be able to define navigation structure on the client', function () {
        angular.mock.inject(function (fisViewService, $rootScope, fisPubSubService) {
          log = '';
          var unsubscribe = fisPubSubService.subscribe('shell.navReady', function (nav) {
            expect(nav.main[0].label).toEqual('client');
            log = 'invoked';
            unsubscribe();
          });

          fisViewService.load(params, { main: [{ label: 'client' }] });
          $rootScope.$digest();
          try {
            $httpBackend.flush();
          } catch (err) {
            log += '|nohttpcall';
          }
          expect(log).toEqual('invoked|nohttpcall');
        });
      });
      it('should invoke filters when navigation gets loaded', function () {
        angular.mock.module(function (fisViewServiceProvider) {
          log = '';
          fisViewServiceProvider.addFilter(function (model, p) {
            expect(p).toBe(params);
            expect(model.main[0].label).toEqual('item1');
            log = 'invoked';
          });
        });
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json?role=admin');
          fisViewService.load(params);
          $rootScope.$digest();
          $httpBackend.flush();
          expect(log).toEqual('invoked');
        });
      });
      it('should return a promise', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
      it('should return a promise with failure callback', function () {
        angular.mock.module(function (fisViewServiceProvider) {
          fisViewServiceProvider.endpoint('api/navigation/:ret');
        });
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation/404');
          var promise = fisViewService.load({ ret: '404' });
          promise.then(function () {
          }, function (reason) {
            expect(reason).toEqual('Could not load navigation from api/navigation/:ret');
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
      it('should allow defining the endpoint in the config service, with params', function () {
        angular.mock.module(function (fisConfig) {
          angular.extend(fisConfig, { endpoints: { navigation: 'api/fromconfig/:role' } });
        });
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/fromconfig/admin');
          fisViewService.load(params);
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
      it('should allow defining the endpoint in the config service, without params', function () {
        angular.mock.module(function (fisConfig) {
          angular.extend(fisConfig, { endpoints: { navigation: 'api/fromconfig/:role' } });
        });
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/fromconfig');
          fisViewService.load();
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
      it('should allow using views defined at config time', function () {
        var configNav = { main: [{ label: 'configtime' }] };
        angular.mock.module(function (fisViewServiceProvider) {
          fisViewServiceProvider.setViews(configNav);
        });
        angular.mock.inject(function (fisPubSubService, fisViewService, $rootScope) {
          log = '';
          var unsubscribe = fisPubSubService.subscribe('shell.navReady', function (nav) {
            expect(nav.main[0].label).toEqual('configtime');
                        // but it should be a clone
            expect(nav).not.toEqual(configNav);
            log = 'invoked';
            unsubscribe();
          });

          fisViewService.load(params);
          $rootScope.$digest();
          try {
            $httpBackend.flush();
          } catch (err) {
            log += '|nohttpcall';
          }
          expect(log).toEqual('invoked|nohttpcall');
        });
      });

      it('should prefill $templateCache if a view defines its template', function () {
        var providedTemplate = 'template';
        var providedId = 'tpl/:test';
        var configNav = {
          main: [
            {
              id: providedId,
              label: 'template view',
              template: providedTemplate
            }
          ]
        };

        angular.mock.module(function (fisViewServiceProvider) {
          fisViewServiceProvider.setViews(configNav);
        });

        angular.mock.inject(function ($templateCache, fisViewService, $rootScope) {
          fisViewService.load(params);
          $rootScope.$digest();
          var tpl = $templateCache.get('/' + providedId + '.tpl.html');
          expect(tpl).toEqual(providedTemplate);
        });
      });

            // it should normalize the received nav structure?
            // it should create routes (tested by findNavItem)?
    });

    describe('findNavItem', function () {
      it('should return a nav item for a given path', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            expect(fisViewService.findNavItem('/item2')).toBe(nav.main[1]);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
    });

    describe('findNavItem', function () {
      it('should return a nav item for a given path - uses getItemFromPath2Item', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            expect(fisViewService.findNavItem('ab/:abId', 'aaaaaa')).toBe(nav.main[4]);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should return a nav item for a given path - uses cd to search - should match on cd (exact match) - not abcd', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            expect(fisViewService.findNavItem('cd', 'aaaaaa')).toBe(nav.main[5].children[0]);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should return a nav item for a given id, where id is parameterized', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            expect(fisViewService.findNavItem('abc/def/ghi/jkl/:navId/test/:testId')).toBe(nav.main[8]);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should return a nav item for a given id, where id is parameterized and parameters are specified', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var navItem = fisViewService.findNavItem('abc/def/ghi/jkl/1/test/2');
            expect(navItem).toBe(nav.main[8]);
            expect(navItem.params.navId).toBe('1');
            expect(navItem.params.testId).toBe('2');
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
    });

    describe('addItemToMenu', function () {
      it('should add an item to the node selected by id dynamically', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var node = { label: 'MyMenu',
                            id: 'newNode',
                            module: 'desktop-ui',
                            title: 'New Node',
                            partial: '/partials/dummy.html' };
            expect(fisViewService.findNavItem('ab/:abId').children).toBe(undefined);
            fisViewService.addNavItem('ab/:abId', node);
            expect(fisViewService.findNavItem('ab/:abId').children[0]).toBe(node);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should add an item to the node selected by path dynamically', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var node = { label: 'MyMenu',
                            id: 'newNode',
                            module: 'desktop-ui',
                            title: 'New Node',
                            partial: '/partials/dummy.html' };
            expect(fisViewService.findNavItem('abcd/cd').children).toBe(undefined);
            fisViewService.addNavItem('abcd/cd', node);
            expect(fisViewService.findNavItem('abcd/cd').children[0]).toBe(node);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should remove an item by its id dynamically', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var node = { label: 'MyMenu',
                            id: 'newNode',
                            module: 'desktop-ui',
                            title: 'New Node',
                            partial: '/partials/dummy.html' };
            expect(fisViewService.findNavItem('abcd/cd').children).toBe(undefined);
            fisViewService.addNavItem('abcd/cd', node);
            expect(fisViewService.findNavItem('abcd/cd').children[0]).toBe(node);
            fisViewService.removeNavItem('newNode');
            expect(fisViewService.findNavItem('abcd/cd').children.length).toBe(0);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should remove an item by its path dynamically', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var node = { label: 'MyMenu',
                            id: 'newNode',
                            module: 'desktop-ui',
                            title: 'New Node',
                            partial: '/partials/dummy.html' };
            expect(fisViewService.findNavItem('abcd/cd').children).toBe(undefined);
            fisViewService.addNavItem('abcd/cd', node);
            expect(fisViewService.findNavItem('abcd/cd').children[0]).toBe(node);
            fisViewService.removeNavItem('abcd/cd/newNode');
            expect(fisViewService.findNavItem('abcd/cd').children.length).toBe(0);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should not add same item twice', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var node = { label: 'MyMenu',
                            id: 'newNode',
                            module: 'desktop-ui',
                            title: 'New Node',
                            partial: '/partials/dummy.html' };
            expect(fisViewService.findNavItem('abcd/cd').children).toBe(undefined);
            fisViewService.addNavItem('abcd/cd', node);
            expect(fisViewService.findNavItem('abcd/cd').children.length).toBe(1);
            expect(fisViewService.findNavItem('abcd/cd').children[0]).toBe(node);
            fisViewService.addNavItem('abcd/cd', node).then(angular.noop)
            .catch(function () {
              expect(fisViewService.findNavItem('abcd/cd').children.length).toBe(1);
            });
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

      it('should add an item directly under main', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var node = { label: 'MyMenu',
                            id: 'newNode',
                            module: 'desktop-ui',
                            title: 'New Node',
                            partial: '/partials/dummy.html' };
            expect(nav.main.length).toEqual(9);
            fisViewService.addNavItem('main', node);
            expect(nav.main.length).toEqual(10);
            expect(nav.main[9]).toBe(node);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });

            // need to uncomment after correcting the functionality
      xit('should remove an item directly under main', function () {
        angular.mock.inject(function (fisViewService, $rootScope) {
          $httpBackend.expectGET('api/navigation.json');
          var promise = fisViewService.load();
          promise.then(function (nav) {
            expect(nav.main).toBeDefined();
            var node = { label: 'MyMenu',
                            id: 'newNode',
                            module: 'desktop-ui',
                            title: 'New Node',
                            partial: '/partials/dummy.html' };
            expect(nav.main.length).toEqual(9);
            fisViewService.addNavItem('main', node);
            expect(nav.main.length).toEqual(10);
            expect(nav.main[9]).toBe(node);
            fisViewService.removeNavItem('newNode');
            expect(nav.main.length).toEqual(9);
          });
          $rootScope.$digest();
          $httpBackend.flush();
        });
      });
    });
  });
});
