'use strict';

describe('fisClientStorageService', function () {
  beforeEach(angular.mock.module('fis.core'));

  afterEach(function () {
    window.localStorage.clear();
    window.sessionStorage.clear();
  });

  it('should add simple item to the local storage with user key', function () {
    angular.mock.inject(function ($window, fisClientStorageService, fisUserContextService) {
      var user = { userId: 'User1' };
      fisUserContextService.context(user);
      fisClientStorageService.init('html5demo');
      fisClientStorageService.setItem('name', 'Frodo');

      var item = angular.fromJson($window.localStorage.getItem('html5demo_User1_name'));
      expect(item).toEqual('Frodo');
    });
  });

  it('should add an object to the local storage', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      fisClientStorageService.setItem('person', { firstName: 'Frodo', lastName: 'Baggins' });

      var item = angular.fromJson($window.localStorage.getItem('html5demo_person'));
      expect(item.firstName).toEqual('Frodo');
      expect(item.lastName).toEqual('Baggins');
    });
  });

  it('should retun null while looking up non-existent item', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      var item = angular.fromJson($window.localStorage.getItem('html5demo_nonexistent'));
      expect(item).toBe(null);
    });
  });

  it('should add item to sessionStorage for string opts equal to session', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      fisClientStorageService.setItem('name', 'Samwise', 'session');

      var item = angular.fromJson($window.sessionStorage.getItem('html5demo_name'));
      expect(item).toEqual('Samwise');
    });
  });

  it('should add item to localStorage for string opts not equal to session', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      fisClientStorageService.setItem('name', 'Meriadoc', 'custom');

      var localItem = angular.fromJson($window.localStorage.getItem('html5demo_name'));
      var sessionItem = angular.fromJson($window.sessionStorage.getItem('html5demo_name'));

      expect(localItem).toEqual('Meriadoc');
      expect(sessionItem).toBe(null);
    });
  });

  it('should add item to sessionStorage for object opts storageType equal to session', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      fisClientStorageService.setItem('name', 'Peregrin', { storageType: 'session' });

      var item = angular.fromJson($window.sessionStorage.getItem('html5demo_name'));
      expect(item).toEqual('Peregrin');
    });
  });

  it('should add item to localStorage for object opts storageType not equal to session', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      fisClientStorageService.setItem('name', 'Bilbo', { storageType: 'custom' });

      var localItem = angular.fromJson($window.localStorage.getItem('html5demo_name'));
      var sessionItem = angular.fromJson($window.sessionStorage.getItem('html5demo_name'));

      expect(localItem).toEqual('Bilbo');
      expect(sessionItem).toBe(null);
    });
  });

  it('should get item from localStorage/sessionStorage', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      $window.localStorage.setItem('html5demo_name', angular.toJson('Gandalf'));
      var localItem = fisClientStorageService.getItem('name');
      expect(localItem).toEqual('Gandalf');

      $window.sessionStorage.setItem('html5demo_name', 'Gandalf');
      var sessionItem = fisClientStorageService.getItem('name');
      expect(sessionItem).toEqual('Gandalf');
    });
  });

  it('should remove item from localStorage/sessionStorage', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init('html5demo');
      $window.localStorage.setItem('html5demo_name', 'Aragorn');
      fisClientStorageService.removeItem('name');
      expect($window.localStorage.getItem('html5demo_name')).toBe(null);

      $window.sessionStorage.setItem('html5demo_name', 'Aragorn');
      fisClientStorageService.removeItem('name');
      expect($window.sessionStorage.getItem('html5demo_name')).toBe(null);
    });
  });

  it('should throw error if init is not called', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      var exceptionThrown = false;
      try {
        fisClientStorageService.setItem('name', 'Legolas');
      } catch (ex) {
        exceptionThrown = true;
      }
      expect(exceptionThrown).toBe(true);
    });
  });

  it('should add key without app Id init is called without one', function () {
    angular.mock.inject(function ($window, fisClientStorageService) {
      fisClientStorageService.init();
      fisClientStorageService.setItem('name', 'Golum');
      var item = angular.fromJson($window.localStorage.getItem('name'));
      expect(item).toEqual('Golum');
    });
  });

  it('should add key without app Id and with userKey init is called without one', function () {
    angular.mock.inject(function ($window, fisClientStorageService, fisUserContextService) {
      var user = { userId: 'user2' };
      fisUserContextService.context(user);
      fisClientStorageService.init();
      fisClientStorageService.setItem('name', 'Golum');
      var item = angular.fromJson($window.localStorage.getItem('user2_name'));
      expect(item).toEqual('Golum');
    });
  });
});

