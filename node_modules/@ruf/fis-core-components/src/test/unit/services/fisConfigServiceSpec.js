/* jasmine specs for services go here */

describe('fisConfigService', function () {
  'use strict';

  var fisConfigService;
  var $httpBackend;

  beforeEach(angular.mock.module('fis.core'));

  beforeEach(angular.mock.module('fis.core', function (fisConfigServiceProvider) {
    fisConfigServiceProvider.config(null);
  }));

  describe('with fisConfig constant', function () {
    var fisConfig = {
      foo: 'bar'
    };

    beforeEach(angular.mock.module('fis.core', function ($provide) {
      $provide.constant('fisConfig', fisConfig);
    }));

    beforeEach(inject(function (_fisConfigService_, _$httpBackend_) {
      fisConfigService = _fisConfigService_;
      $httpBackend = _$httpBackend_;
    }));

    afterEach(function () {
      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });

    it('should already contain properties upon injection (no then needed)', function () {
      expect(fisConfigService.foo).toBe(fisConfig.foo);
    });

    it('should invoke a provided "then" callback immediately (synchronously)', function () {
      var i = 0;
      fisConfigService.then(function (config) {
        i = 1;
        expect(config.foo).toBe(fisConfig.foo);
        expect(fisConfigService.foo).toBe(fisConfig.foo);
      });

      expect(i).toBe(1);
    });
  });

  describe('with provider.config()', function () {
    var fisConfig = {
      foo: 'bar'
    };

    beforeEach(angular.mock.module('fis.core', function (fisConfigServiceProvider) {
      fisConfigServiceProvider.config(fisConfig);
    }));

    beforeEach(inject(function (_fisConfigService_, _$httpBackend_) {
      fisConfigService = _fisConfigService_;
      $httpBackend = _$httpBackend_;
    }));

    afterEach(function () {
      $httpBackend.verifyNoOutstandingExpectation();
      $httpBackend.verifyNoOutstandingRequest();
    });

    it('should already contain properties upon injection (no then needed)', function () {
      expect(fisConfigService.foo).toBe(fisConfig.foo);
    });

    it('should be the same as object provided', function () {
      expect(fisConfigService).toBe(fisConfig);
    });

    it('should invoke a provided "then" callback immediately (synchronously)', function () {
      var i = 0;
      fisConfigService.then(function (config) {
        i = 1;
        expect(config.foo).toBe(fisConfig.foo);
        expect(fisConfigService.foo).toBe(fisConfig.foo);
      });

      expect(i).toBe(1);
    });
  });

    /* describe('with HTTP GET', function() {

        var cfg = {itm: 'config'},
            endpoint = 'api/myConfig',
            fired;

        beforeEach( function() {
            fis.initParams().configEndpoint = endpoint;
        });

        beforeEach(inject(function (fisPubSubService) {

            pubsub = fisPubSubService;
            // capture event before fisConfigService get injected
            fired = capturePublish('shell.configReady');

        }));

        beforeEach(inject(function (_sgConfigService_, _$httpBackend_) {

            fisConfigService = _sgConfigService_;
            $httpBackend = _$httpBackend_;
            $httpBackend.when('GET', endpoint).respond(cfg);

        }));

        afterEach(function() {
            $httpBackend.verifyNoOutstandingExpectation();
            $httpBackend.verifyNoOutstandingRequest();
            // put back to default value;
            fis.initParams()figEndpoint = 'api/myConfig';
        });

        it('should contain properties if the promise was resolved once', function() {
            expect(fisConfigService.itm).not.toBeDefined();
            $httpBackend.flush();
            expect(fisConfigService.itm).toBe(cfg.itm);
        });

        it('should invoke the REST service upon injection', function() {
            $httpBackend.expectGET(endpoint);
            $httpBackend.flush();
        });

        it('should act as an async promise', function() {

            var i = 0;
            fisConfigService.then(function(config) {
                i = 1;
                expect(config.itm).toEqual('config');
            });
            expect(i).toBe(0);
            $httpBackend.flush();
            expect(i).toBe(1);

        });

        it('should fire shell.configReady', function() {

            $httpBackend.flush();
            expect(fired[0]).toBe(true);

        });

        it('should invoke the REST service only once when injected multiple times', function() {

            $httpBackend.expectGET(endpoint);

            inject(function(fisConfigService) {
                $httpBackend.flush();
            });

            inject(function(fisConfigService) {

                var log;

                try {
                    $httpBackend.flush();
                } catch (err) {
                    log = 'ok';
                }
                expect(log).toBeDefined();

            });

            // should still be asynchronous
            inject(function(fisConfigService, $timeout) {

                var log = 0;

                fisConfigService.then(function() {
                    log = 1;
                });

                expect(log).toBe(0);
                $timeout.flush();
                expect(log).toBe(1);

            });

        });
    });

    describe('with HTTP GET failure', function() {

        var cfg = {itm: 'config'},
            endpoint = 'api/myConfig';

        beforeEach( function() {
            sungard.fis.initParams()ndpoint = endpoint;
        });

        beforeEach(inject(function (_sgConfigService_, _$httpBackend_) {

            $httpBackend = _$httpBackend_;
            $httpBackend.when('GET', endpoint).respond(404);

        }));

        afterEach(function() {
            $httpBackend.verifyNoOutstandingRequest();
            // put back to default value;
            fis.initParams().configEndpoint = 'api/myConfig';
        });

        it('should throw', function() {

            var thrown;
            try {
                inject( function(fisConfigService) {
                    expect(fisConfigService.itm).not.toBeDefined();
                    $httpBackend.flush();
                    expect(fisConfigService.itm).toBe(cfg.itm);
                });
            } catch(err) {
                thrown = err;
                expect(err.message).toBe('Framework config is required!');
            }
            expect(thrown).toBeDefined();

        });

    });*/
});
