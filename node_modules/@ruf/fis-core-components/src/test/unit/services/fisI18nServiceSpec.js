'use strict';

describe('fisI18nService', function () {
  beforeEach(angular.mock.module('fis.core'));

  beforeEach(angular.mock.module(function (fisI18nServiceProvider) {
    fisI18nServiceProvider.setDefaultLocale('en');
  }));

  it('should return the same key on translate', function () {
    angular.mock.inject(function (fisI18nService) {
      fisI18nService.locale('de');
      var res = fisI18nService.translate('listPage');
      expect(res).toEqual('listPage');
    });
  });

  it('should return provided default when key is not found', function () {
    angular.mock.inject(function (fisI18nService) {
      var res = fisI18nService.translate('does.not.exist', 'default');
      expect(res).toEqual('default');
    });
  });

  it('should return the string key when no default provided and key not found', function () {
    angular.mock.inject(function (fisI18nService) {
      var res = fisI18nService.translate('does.not.exist');
      expect(res).toEqual('does.not.exist');
      res = fisI18nService.translate(['does', 'not', 'exist']);
      expect(res).toEqual('does.not.exist');
    });
  });

  it('should return an empty string when the default is an empty string and key is not found', function () {
    angular.mock.inject(function (fisI18nService) {
      var res = fisI18nService.translate('does.not.exist', '');
      expect(res).toEqual('');
    });
  });

  xit('should return the string when provided string contains white space after dot and key is not found', function () {
    angular.mock.inject(function (fisI18nService) {
      var string = 'Hi. How are you';
      var res = fisI18nService.translate(string);
      expect(res).toEqual(string);
    });
  });
});
