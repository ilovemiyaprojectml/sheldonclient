import 'jquery'; // making sure jquery gets loaded before angular
import 'angular';
import ngSanitize from 'angular-sanitize';
import ngResource from 'angular-resource';
import ngAnimate from 'angular-animate';

import './fis';
import './fis-angular-decorators';
import hook from './hook';
import data from './data';
import directives from './directives';
import filters from './filters';
import i18n from './i18n';
import pubsub from './pubsub';
import services from './services';
import utils from './utils';
import views from './views';

const ngModule = angular.module('fis.core', [
  ngAnimate,
  ngSanitize,
  ngResource,
  hook,
  data,
  directives,
  filters,
  i18n,
  pubsub,
  services,
  utils,
  views
]);

// for backward compatibility
angular.module('fisComponents', [ngModule.name]);

if (TEST) { // eslint-disable-line
  require('jasmine-jquery');
  require('jasmine-ajax');
  require('angular-mocks');
  require('@ruf/fis-mocks');
}

// SDHTML-14222: provide ability to disable angular's debug info while preserving the element.scope function.
// Code taken from angular's source
ngModule.decorator('$compile', ['$delegate', function ($delegate) {
  $delegate.$$addScopeInfo = function $$addScopeInfo($element, scope, isolated, noTemplate) {
    let dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
    $element.data(dataName, scope);
  };

  return $delegate;
}]);

// create an empty controllerArr here, so that any module that has to register a controller can push it to this array
// TODO: find where this is needed and move this code there.
ngModule.run(['$rootScope', function ($rootScope) {
  $rootScope.controllersArr = [];
}]);

/**
 * This fix moved from fisInput to prevent multiple invocations of this fix - shown cause memory leak otherwise.
 *
 * IE specific fix, IE triggering validation on Focus of inputs
 * If a placeholder is defined on an input element IE10 fires this event when
 * the placeholder is set during DOM loading and when it is removed when the user clicks into the input field so that error messages
 * which depend on the pristine condition are displayed although the user has not yet modified the input's value.
 */
ngModule.run(['$sniffer', function ($sniffer) {
  var msie = parseInt((/msie (\d+)/.exec(navigator.userAgent.toLowerCase()) || [])[1], 10);
  var _hasEvent = $sniffer.hasEvent;
  $sniffer.hasEvent = function (event) {
    if (event === 'input' && msie === 10) {
      return false;
    }
    return _hasEvent.call(this, event);
  };
}]);

module.exports = ngModule.name;
