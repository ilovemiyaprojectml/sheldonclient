/**
 * @name fisDataVar
 * @description Directive used to add the payload of a REST call to the current scope
 * @methodOf fis.core.directives
 */
export default function ($parse, $timeout, fisMemoryUtilService) {
  'ngInject';
  return {
    restrict: 'A',
    require: 'fisData',
    link: function (scope, elem, attrs, fisData) {
      if (angular.isUndefined(attrs.fisDataVar) || attrs.fisDataVar.length === 0) {
        throw new Error('The fisDataVar attribute must have a value.');
      }

      var fisDataVarAttr = attrs.fisDataVar;

      var loadData = function (event) {
                // do not execute the event if event.preventDefault() has been called before
        if (event && event.defaultPrevented) {
          return;
        }
        var timeout1 = $timeout(function () {
          var promise = fisData.fetchData();
          promise.then(
                        function (result) {
                          var dataVar = $parse(fisDataVarAttr);
                          dataVar.assign(scope, result.data);
                        },
                        function (result) {
                          console.warn('Problem loading data: ' + result);
                        }
                    );
        });
        fisMemoryUtilService.cancelTimeoutOnDestroy(scope, timeout1, $timeout);
      };

            // Refresh Event
      if (angular.isDefined(attrs.fisRefresh)) {
        scope.$on('fisRefresh', loadData);
      }

            // Adding listener on fisData, so that data is reloaded when fisData's endPoint changes
      var dataChangeListener = function () {
        loadData();
      };
      fisData.addDataChangedListener(dataChangeListener);

            // Does initial call to get data
      loadData();
    }
  };
}
