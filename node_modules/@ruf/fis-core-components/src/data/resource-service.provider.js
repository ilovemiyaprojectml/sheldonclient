/**
 * A service that extends the angular $resource service with methods that follow framework conventions
 */
export default function () {
  'use strict';
  var self = this;

  self.$get = ['$resource', 'fisUtilService', function ($resource, fisUtilService) {
    return function (url, paramDefaults, actions, schema) {
      var localResource = $resource(url, paramDefaults, actions);
      localResource.getData = function (params, success, failure) {
        var ret = {
          data: []
        };
        if (schema && schema.data) {
          localResource.get(params, function (d, headers) {
            ret.data.length = 0;
            angular.extend(ret, d);

            if (schema.data !== 'data') {
              if (schema.data === 'none') {
                var res = {};
                angular.forEach(d, function (key, val) {
                  if (val.toString().indexOf('$') !== 0) {
                    res[val] = key;
                  }
                });
                ret.data.push(res);
              } else {
                var results;
                if (angular.isString(schema.data)) {
                  results = fisUtilService.extractData(schema.data, d);
                } else if (angular.isFunction(schema.data)) {
                  results = schema.data(d);
                }
                angular.forEach(results, function (item) {
                  ret.data.push(item);
                });
              }
            }

            if (schema.total) {
              ret.total = d[schema.total];
            }
            if (schema.data !== 'data' && schema.data !== 'none') {
              delete ret[schema.data];
            }
            if (schema.total !== 'total') {
              delete ret[schema.total];
            }
            success(ret, headers);
          }, failure);
        } else {
          ret.data = localResource.query(params, function (d, headers) {
            // send normalized data structure to success callback
            success(ret, headers);
          }, failure);
        }
        // always returns an object with an empty data array that gets filled when request is successful
        return ret;
      };

      return localResource;
    };
  }];
}
