// TODO: reuse concept for navigation and i18n
// returns a promise resolved by a constant if present and if not, by an HTTP GET request
export default function ($resource, $q, fisPubSubService, $injector) {
  'ngInject';

  function publishEvent(name, value) {
    if (name) {
      fisPubSubService.publish(name, value);
    }
  }

  function conditionalLoader(constantName, urlTemplate, urlParams, eventName) {
    var deferred;
    var event = eventName || (constantName && constantName + '.loaded');
    var value;

    if ($injector.has(constantName)) {
      value = $injector.get(constantName);
      publishEvent(event, value);
      value.then = function syncThen(cb) {
        return cb(value);
      };
      return value;
    }
    // return an aync promise
    deferred = $q.defer();

    if (!urlTemplate) {
      deferred.reject('No ' + constantName + ' constant found and no URL to GET.');
      return deferred.promise;
    }

    $resource(urlTemplate).get(urlParams || {},

        function loadSuccess(value) {
          var prop;

          deferred.resolve(value);
          publishEvent(event, value);

          for (prop in value) {
            if (value.hasOwnProperty(prop)) {
              deferred.promise[prop] = value[prop];
            }
          }
        },

        function loadFailure(httpResponse) {
          deferred.reject(httpResponse);
        }

      );
    return deferred.promise;
  }

  return conditionalLoader;
}
