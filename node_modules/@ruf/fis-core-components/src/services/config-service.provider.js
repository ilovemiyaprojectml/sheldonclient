/**
 * @class
 * @name fisConfigService
 * @description Provides application-wide configuration to your application.
 */
export default function () {
  'use strict';
  var provider = this;
  var eventName = 'shell.configReady';
  var defaultFactory;

  provider.config = function setConfig(cfg) {
    if (angular.isObject(cfg)) {
      cfg.then = function (cb) {
        return cb(cfg);
      };
      provider.$get = function () {
        return cfg;
      };
    } else {
      provider.$get = defaultFactory;
    }
  };

  defaultFactory = provider.$get = [
    '$resource',
    '$q',
    'fisPubSubService',
    '$injector',
    'fisConditionalLoaderService',

    function ($resource, $q, fisPubSubService, $injector, loader) {
      var configPromise;

      if (!$injector.has('fisConfig')) {
        console.warn('DEPRECATED. Use a fisConfig constant instead to improve load speed.',
                    'https://www.csa.sungard.com/wiki/x/ggfNAg');
      }

      configPromise = loader('fisConfig', fis.initParams().configEndpoint, {}, eventName);

      configPromise.then(

        function success() {
          console.log('- Framework config loaded.');
        },

        function failure(err) {
            // If err is a http response object, throw an error to notify developer the
            // config endpoint used is not working.
            // If not a response object, it means the developer intentionally left the configEnpoint empty
            // and does not use the config service. This is not possible when using fis.start.
          if (err.status) {
            throw new Error('Framework config is required!');
          }
        }

      );

      return configPromise;
    }
  ];
}
