/**
 * @description fisHttpErrorInterceptor is an $http response interceptor that provides a
 * simple way for applications to listen for HTTP error events and provide the user with some feedback if necessary
 * (see http://docs.angularjs.org/api/ng.$http).
 */
export default function () {
  var provider = this;

  // default HTTP status for firing fisLoginRequired: 403 Forbidden
  var loginStatuses = [403];

  provider.setLoginRequiredStatus = function (httpStatuses) {
    var i;
    loginStatuses = [];
    if (angular.isNumber(httpStatuses)) {
      loginStatuses = [httpStatuses];
    } else if (angular.isArray(httpStatuses)) {
      for (i = 0; i < httpStatuses.length; i++) {
        if (angular.isNumber(httpStatuses[i])) {
          loginStatuses.push(httpStatuses[i]);
        }
      }
    }
  };

  provider.$get = ['$rootScope', '$q', 'fisPubSubService', function ($rootScope, $q, fisPubSubService) {
    var successFn = function success(response) {
      return response;
    };

    // default strategy is to reject but fire events.
    // Another strategy could be to allow trying requests again after app confirms login (https://github.com/witoldsz/angular-http-auth)
    var rejectNoRetry = function error(response) {
      // check if the received error is in the HTTP statuses configured to $broadcast a fisLoginRequired event
      if (loginStatuses.indexOf(response.status) !== -1) {
        $rootScope.$broadcast('fisLoginRequired', response);
      }

      // publish response to the fisHTTPError topic
      if (response.status >= 400 || response.status === 0) {
        fisPubSubService.publish('fisHTTPError', response);
      }
      // 3xx range statuses are also going through this error callback but are not errors
      // A strategy could try to load the location received in the response headers before rejecting the promise.

      // reject the response and continue in chain
      return $q.reject(response);
    };

    return {
      response: successFn,
      responseError: rejectNoRetry
    };
  }];
}
