export default function () {
  var self = this;

  self.$get = ['$window', 'fisUserContextService', function ($window, fisUserContextService) {
    var service = {};
    var separator = '_';
    var inited = false;
    var appId;

    service.init = function (id) {
      appId = id;
      inited = true;
    };

    function createStorageKey(key) {
      var userKey = fisUserContextService.context() ? fisUserContextService.context().userId : null;
      if (appId) {
        if (userKey) {
          return appId + separator + userKey + separator + key;
        }
        return appId + separator + key;
      } else if (userKey) {
        return userKey + separator + key;
      }
      return key;
    }

    /**
     * method to persist data in client storage
     * @param {String} key    key
     * @param {Object} val    Object to be stored in client storage
     * @param {Object|String} opts Optional additional attributes like scope (app or user) and storageType (session or default) | storageType
     */
    service.setItem = function (key, val, opts) {
      if (!inited) {
        throw new Error('Service not initialized with appId');
      }
      var storageKey = createStorageKey(key);
      if ($window.sessionStorage && $window.localStorage) {
        if (opts && (opts === 'session' || opts.storageType === 'session')) { // options present, work with it
          $window.sessionStorage.setItem(storageKey, angular.toJson(val));
        } else { // Add to localStorage
          $window.localStorage.setItem(storageKey, angular.toJson(val));
        }
      } else {
        throw new Error('localStorage/sessionStorage not supported by browser');
      }
    };

    /**
     * Method to get item from Client Storage
     * @param  {String} key   Key
     * @return {Object}       Object stored in Client storage
     */
    service.getItem = function (key) {
      if (!inited) {
        throw new Error('Service not initialized with appId');
      }
      if ($window.sessionStorage && $window.localStorage) {
        var storageKey = createStorageKey(key);
        return angular.fromJson($window.localStorage.getItem(storageKey)) || angular.fromJson($window.sessionStorage.getItem(storageKey));
      }
      throw new Error('localStorage/sessionStorage not supported by browser');
    };

    /**
     * Method to remove item from Client Storage
     * @param  {String} key   Key of the item to be removed
     */
    service.removeItem = function (key) {
      if (!inited) {
        throw new Error('Service not initialized with appId');
      }
      if ($window.sessionStorage && $window.localStorage) {
        var storageKey = createStorageKey(key);
        $window.localStorage.removeItem(storageKey);
        $window.sessionStorage.removeItem(storageKey);
      } else {
        throw new Error('localStorage/sessionStorage not supported by browser');
      }
    };

    return service;
  }];
}
