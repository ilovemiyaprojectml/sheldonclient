export default function () {
  /**
   * Replace all non alphanumeric characters by an underscore
   * @param value which should be cleaned up
   * @param spacesOnly boolean, whether only spaces should be replaced or all non alphanumeric characters
   * @returns {String}
   */
  function replaceNonAlphaNumeric(value, spacesOnly) {
    var pattern = /[^\w_\-]+/g;
    if (spacesOnly) {
      pattern = /[^\w]+/g;
    }
    return value.replace(pattern, '_');
  }

  /**
   * Append extend to base, separated by an underscore if base is a string of non-zero length
   * Otherwise extend gets returned
   * @param base
   * @param extend
   * @returns {String} concatenation of base and extend, separated by underscore
   */
  function appendOrReplace(base, extend) {
    var ret = base;
    if (angular.isString(extend)) {
      if (angular.isString(base) && base.length > 0) {
        ret = base + '_' + extend;
      } else {
        ret = extend;
      }
    }
    return ret;
  }

  var service = {

    generateUniqueId: (function () {
      return function (scope, element, attributes, idBase, allowOverride, seed) {
        if (angular.isString(idBase) && idBase.indexOf(' ') !== -1) {
          return service.generateIdWithStaticSeed(scope, element, attributes, undefined, undefined, replaceNonAlphaNumeric(idBase, true), seed);
        }

        if (fis.initParams().appStage === 'T' || fis.initParams().appStage === 'D') { // test appStage
          return service.generateUniqueIdForce(scope, element, attributes, idBase, allowOverride, seed);
        }
      };
    })(),

    generateUniqueIdForce: (function () {
      var idCounter = {};
      var initialized = false;

      return function (scope, element, attributes, idBase, allowOverride, seed) {
        if (!initialized) {
          scope.$root.$on('$routeChangeStart', function () {
            idCounter = {};
          });
          initialized = true;
        }

        // if the element already has an fisid we do not want to change it.
        if (!allowOverride && element && angular.isDefined(element.attr('fisid'))) {
          var nonGenId = element.attr('fisid');
          return nonGenId;
        }

        var returnValue = idBase || '';

        if (!returnValue) {
          if (attributes.ngModel) {
            returnValue = attributes.ngModel;
          } else if (attributes.ngClick) {
            if (scope.item && scope.item.path) {
              returnValue = scope.item.path;
            } else {
              returnValue = attributes.ngClick;
            }
          } else if (attributes.fisI18n) {
            returnValue = attributes.fisI18n;
          }
        }

        if (seed === undefined) {
          seed = '';
        }

        returnValue = replaceNonAlphaNumeric(returnValue) + seed;

        if (idCounter[returnValue]) {
          idCounter[returnValue] += 1;
        } else {
          idCounter[returnValue] = 1;
        }
        returnValue = returnValue + '_' + idCounter[returnValue];

        if (element && (allowOverride || !element.attr('fisid'))) {
          element.attr('fisid', returnValue);
        }

        return returnValue;
      };
    })(),

    generateIdWithStaticSeed: (function () {
      return function (scope, element, attributes, idBase, childIdBase, staticId, seed) {
        var idPrefix = attributes.fisUniqueIdSeed || idBase || '';

        if (childIdBase) {
          idPrefix += childIdBase;
        }

        idPrefix = appendOrReplace(idPrefix, angular.isArray(staticId) ? staticId.join('_') : staticId);

        idPrefix = replaceNonAlphaNumeric(idPrefix);

        if (seed === undefined) {
          seed = '';
        }
        idPrefix += seed;

        if (element && !element.attr('fisid')) {
          element.attr('fisid', idPrefix);
        }

        return idPrefix;
      };
    })()

  };

  return service;
}
