    export default function () {
      'ngInject';
      var service = {};

      /**
       * @description Allows filtering properties of a provided source object to set them without the provided prefix
       * on a target object.
       * @param {Object} sourceObject The object from which the properties should be taken.
       * @param {String} prefix The not empty prefix applied to filter the properties of the source object.
       * @param {Object} targetObject The optional target object on which to set the properties. If not provided, a new object is created.
       */
      service.copyProperties = function (sourceObject, prefix, targetObject) {
        if (sourceObject === undefined) {
          throw 'sourceObject must be provided'; // eslint-disable-line
        }

        if (prefix === undefined || typeof prefix !== 'string' || prefix.length < 1) {
          throw 'no not empty string prefix provided. Got ' + prefix; // eslint-disable-line
        }

        if (targetObject === undefined) {
          targetObject = {};
        }

        // Filter all object properties for the prefix
        var propertyNames = Object.keys(sourceObject).filter(function (property) {
          return property.substring(0, prefix.length) === prefix;
        });

        // Add the property values to the target object
        if (propertyNames !== undefined) {
          angular.forEach(propertyNames, function (propertyName) {
            // truncate the name, throw away the prefix
            var truncatedName = propertyName.substr(prefix.length);

            // Adjust the first letter to be lowerCase
            truncatedName = truncatedName.substring(0, 1).toLowerCase() + truncatedName.substring(1);

            targetObject[truncatedName] = sourceObject[propertyName];
          });
        }

        return targetObject;
      };

      /**
       * Helps in migrating attrs.$observe invocations from AngularJS 1.2.x to 1.3+.
       * 1.2 used to invoke the listener function once if the attribute is undefined.
       * IT IS PREFERABLE TO REFACTOR YOUR CODE THAN TO USE THIS FUNCTION.
       */
      service.invokeAndObserve = function (attrs, key, fn) {
        // if attribute is present, no need to invoke since observe will.
        if (!angular.isDefined(attrs[key])) {
          fn(undefined);
        }
        attrs.$observe(key, fn);
      };

      return service;
    }
