/**
 * @name fisInput
 * @description Sungard Input Component
	<p>This directive registers the sibling ngModelController to the parent FieldDirective by invoking
	its registerInput function.
	</p>
 */
export default function () {
  function extractProperty(path, sep, $scope) {
    var parts = path.split('.');

    // To handle component case where user provide ng-model like '$ctrl.user.name'
    if (parts.length > 1 && $scope && $scope.$ctrl && $scope.$ctrl.constructor.name !== 'AppComponentController') {
      parts.splice(0, 1);
    }

    if (parts.length > 1) {
      parts.splice(0, 1);
    }

    var result;
    if (sep) {
      result = parts.join(sep).replace(/[[\]]+/g, sep);
    } else {
      result = parts.join('.');
    }
    return result;
  }

  return {
    restrict: 'AC',
    priority: 400,
    require: 'ngModel',
    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
      // before the ngModel controller is loaded (directive priority is higher),
      // make sure there's a name assigned to the input so that the ngModel controller
      // can register itself to the form with that name.
      if (!$attrs.name && $attrs.ngModel) {
        $attrs.name = extractProperty($attrs.ngModel, '_', $scope);
      }
    }],
    link: function (scope, element, attrs, ngModel) {
      element.addClass('fis-input');

      if (scope.registerInput) {
        ngModel.fisProperty = extractProperty(attrs.ngModel, undefined, scope);
        // useful when passed to FieldDirective's fieldValueFn.
        ngModel.fisInput = attrs.fisInput || 'input';
        ngModel.fisLabel = attrs.fisLabel;
        if (attrs.name) {
          ngModel.fisName = attrs.name;
        }
        scope.registerInput(ngModel);
        element.on('$destroy', function () {
          scope.unregisterInput(ngModel);
        });
      }
    }
  };
}
