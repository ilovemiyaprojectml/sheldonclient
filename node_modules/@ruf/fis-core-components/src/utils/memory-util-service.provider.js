/**
 * Created by carl on 2014/03/06.
 */
export default function () {
  var self = this;

  self.$get = [function () {
    var service = {};

    service.enabled = true;
    service.logging = false;

    if (!service.enabled) {
      console.warn('fisMemoryUtilService has been disabled!');
    }

    /**
     * Convenience method attempty to clean off all references to enable garbage collection
     * @param node -  the element to be cleaned
     */
    service.callCleanAll = function (node) {
      service.removeListeners(node);
      service.destroyNode(node);
    };

    /**
     * Attempts to remove all listeners from node.
     * @param domNode
     */
    service.removeListeners = function (domNode) {
      if (angular.isDefined(domNode)) {
        var node = $(domNode);
        if (node.length === 1) {
          var children = node.children();
          if (angular.isDefined(children) && children.length > 0) {
            children.get().forEach(function (child) {
              service.removeListeners(child);
            });
          }
        }
        if (node.length > 1) {
          // node is a "jQuery" object
          node.get().forEach(function (child) {
            service.removeListeners(child);
          });
        } else {
          if (node.scope()) {
            node.scope().$destroy(); // in case this is implemented in scope.
          }
          node.unbind();
        }
      }
    };

    /**
     * Utility method to destroy node (html elements like dom nodes)
     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild
     * @param node to be destroyed.
     */
    service.destroyNode = function (node) {
      if (node) {
        service.destroyAllChildNodes(node);
        if (node.parent) {
          var parent = node.parent();
          service.destroyAllChildNodes(parent);
        }
        node = null;
      }
    };

    /**
     * Utility method to destroy All Children Nodes (html elements like dom nodes)
     * https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild
     * @param parentNode to be destroyed.
     */
    service.destroyAllChildNodes = function (parentNode) {
      if (angular.isUndefined(parentNode)) {
        return;
      }
      if (parentNode.length && parentNode.length === 1) {
        if (angular.isDefined(parentNode.children()) && parentNode.children().length > 0) {
          var child = parentNode.children();
          child.remove();
          child = null;
        }
      }
      if (parentNode.length && parentNode.length > 1) {
        angular.forEach(parentNode, function (child) {
          service.destroyAllChildNodes(child);
        });
      }
    };

    /**
     * Utility to cancel timeout
     * @param scope
     * @param timeout
     * @param $timeout
     */
    service.cancelTimeoutOnDestroy = function (scope, timeout, $timeout) {
      if (angular.isDefined(scope)) {
        scope.$on('$destroy', function () {
          if (timeout) {
            $timeout.cancel(timeout);
          }
        });
      } else {
        console.warn('Memory cleanup failed scope is undefined');
      }
    };

    /**
     * Utility to cancel timeout
     * @param compCtrl - the component controller instance
     * @param timeout
     * @param $timeout
     */
    service.cancelTimeoutOnComponentCtrlDestroy = function (compCtrl, timeout, $timeout) {
      if (compCtrl) {
        compCtrl.$onDestroy = function () {
          if (timeout) {
            $timeout.cancel(timeout);
          }
        };
      }
    };

    /**
     * Utility to cancel timeout
     * @param scope
     * @param watch
     */
    service.cancelWatchOnDestroy = function (scope, watch) {
      scope.$on('$destroy', function () {
        if (watch) {
          watch(); // unbinds watch
        }
      });
    };

    /**
     * Utility to destroy scope and data
     * @param scope
     * @param element
     */
    service.destroyScopeAndData = function (scope, element) {
      if (scope) {
        scope.$destroy();
      }
      if (element) {
        $(element)
          .removeData('$scope')
          .removeData('$isolateScope')
          .removeData('$isolateScopeNoTemplate')
          .removeClass('ng-scope');
      }
    };

    /**
     * Utility to destroy kendo widgets
     * @param widgets - kendo widgets to destroy
     * @param element
     */
    // https://github.com/telerik/kendo-ui-core/issues/99
    // https://github.com/kendo-labs/knockout-kendo/issues/140
    service.destroyKendoWidgets = function (widgets) {
      if (widgets) {
        try {
          widgets.destroy();
          widgets = null;
        } catch (e) {

        }
      }
    };

    service.purgeAttributes = function (elements) {
      if (elements !== undefined && elements.length > 0) {
        for (var e = 0; e < elements.length; e++) {
          var element = elements[e];
          angular.element(element).removeData().removeAttr(); // try clear jqlite / jquery cache
          if (element.attributes !== undefined && element.attributes.length > 0) {
            for (var a = element.attributes.length - 1; a >= 0; a--) {
              if (element.attributes[a].name !== 'class') { // so kendo doesnt break, we leave the classlist in
                element.removeAttribute(element.attributes[a].name);
              }
            }
          }
          if (element.children !== undefined && element.children.length > 0) {
            service.purgeAttributes(element.children);
          }
          a = undefined; // eslint-disable-line
        }
      }
    };

    return service;
  }];
}
