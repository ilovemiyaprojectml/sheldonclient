(function (fis, document) {
  'use strict';
  var params = null;
  var cacheQuery = {};
  var injector = null;

  angular.extend(fis, {
    // adding version this way so that grunt-bump can automatically update the version
    version: '4.5.1'
  });

  // this can be replaced by using applications to change the cache string sent in requests
  fis.cacheVersion = fis.version;

  /**
   * @name extend
   * @description Copies properties of the second object into the first
   * @param o1 Object to 'extend'. (Target)
   * @param o2 Object to copy properties from. (Source)
   * @returns The extended object.
   */
  function extend(o1, o2) {
    for (var itm in o2) {
      if (itm) {
        o1[itm] = o2[itm];
      }
    }
    return o1;
  }

  fis.paths = function () {
    return {};
  };
  fis.shim = function () {
    return {};
  };

  /**
   * @class
   * @name fis.initParams
   * @description Get/Set accessor function for initParameters. Would normally be invoked by app-setup.js
   * @param [opts] String
   * @returns initParams object populated with appStage, configEndpoint, baseElement, modules etc.
   * @namespace fis.initParams
   */
  fis.initParams = function (opts) {
    if (opts || params === null) {
      if (opts) {
        // Use this syntax over the object notation, otherwise grunt-bump will try to update the object and
        // destroy the file.
        cacheQuery = {};
        cacheQuery.version = fis.cacheVersion;
        cacheQuery.appStage = opts.appStage;
      }

      params = extend(params || {
        appStage: fis.utils.getRequestParam('appStage') || 'P',
        baseElement: document,
        modules: []
      }, opts || {});

      if (params.appStage === 'D') {
        console.log('- Development mode.');
      }
    }

    return params;
  };

  fis.getCacheQuery = function () {
    return cacheQuery;
  };

  // Keep the String Parameter function for backward compatibility
  fis.cacheQueryParameter = function (args) {
    console.warn('Please use fisUtilService appendCacheQueryParameter() function for adding cache query parameters to url');
    var version = cacheQuery.version;
    if (args) {
      version = args;
    }
    return `version=${version}&appStage=${cacheQuery.appStage}`;
    // 'version=' + version + '&appStage=' + cacheQuery.appStage + '';
  };

  fis.prefixContext = function (pathObj) {
    var modifiedPaths = extend({}, pathObj);
    var context = fis.getLocationPath();
    // context === / means no context root else context root like /myapp/
    if (context !== '/') {
      // check if it ends in resource extension like test.html, test.htm etc. Drop it if that's the case
      var arrContext = context.split('/');
      var arrContextLength = arrContext.length;
      if (arrContext[arrContextLength - 1].indexOf('.') !== -1) { // resource extension present
        arrContext.splice(arrContextLength - 1, 1);// drop the last part
      }
      context = arrContext.join('/');

      // remove the trailing / if it ends with one
      if (context.match(/\/$/)) {
        context = context.substr(0, context.length - 1);
      }
      for (var prop in modifiedPaths) {
        if (modifiedPaths[prop].indexOf('/') === 0) {
          modifiedPaths[prop] = context + modifiedPaths[prop];
        }
      }
    }
    return modifiedPaths;
  };

  // Extracting location path logic into separate method for testability
  fis.getLocationPath = function () {
    return window.location.pathname;
  };

  fis.packages = function (arr) {
    var i;
    var n = arr.length;
    var packages = [];

    if (params.appStage !== 'D') {
      return arr;
    }

    for (i = 0; i < n; i++) {
      packages.push({ name: arr[i], main: 'dev' });
    }

    return packages;
  };

  fis.bootstrapAngular = function (depModules) {
    // only bootstrap if it wasn't already done by ng-app
    if (!fis.utils.getInjector()) {
      injector = angular.bootstrap(document, depModules);
    }
  };
  /**
   * @class
   * @name fis.start
   * @description Boot starting the framework. Loading the required or necessary script files through this.
   * @param [init]
   * @namespace fis.start
   */
  fis.start = function (initParams) {
    if (angular.isObject(initParams)) {
      initParams = fis.initParams(initParams);
    } else {
      initParams = fis.initParams();
    }

    if (!angular.isObject(initParams)) {
      throw new Error('Init params need to be provided to fis.start.');
    }

    if (!angular.isArray(initParams.modules)) {
      throw new Error('Modules needs to be defined in init parameters.');
    }

    // apps that are using ng-app will not have a configEndpoint and would use the newer
    // fisConfig constant approach. For apps using fis.start, keep the old behavior of
    // providing a default configEndpoint
    if (!initParams.configEndpoint) {
      initParams.configEndpoint = 'api/config';
    }

    angular.element(document).ready(function () {
      // only bootstrap if it wasn't already done by ng-app
      fis.bootstrapAngular(initParams.modules);
    });
  };

  /**
   * @namespace fis.utils
   */
  fis.utils = {};

  /**
   * @name getRequestParam
   * @description Returns a single request parameter for the provided name
   * @param name The name of the request parameter you are looking for
   * @returns The value of the parameter if it is present only once or an array of values if it is present multiple times. Null is not found.
   * @memberOf fis.utils
   */
  fis.utils.getRequestParam = function (name) {
    var isString = function (value) {
      return typeof value === 'string' || value instanceof String;
    };
    var re = new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)', 'g');
    var res = [];
    var search = isString(this) ? this : window.location.search;
    var match = re.exec(search);

    while (match) {
      res.push(decodeURIComponent(match[1]));
      match = re.exec(search);
    }

    if (res.length === 0) {
      return null;
    } else if (res.length === 1) {
      return res[0];
    }

    return res;
  };

  fis.utils.getInjector = function () {
    return injector;
  };

  function findRootElement() {
    var rootElement = document.querySelector && document.querySelector('[ng-app]');
    if (rootElement) {
      return angular.element(rootElement);
    }
    return null;
  }

  function findInjector() {
    var root = findRootElement();
    if (root) {
      return root.injector();
    }
    return null;
  }

  angular.element(document).ready(function () {
    angular.element(document).find('body').removeClass('fis-loading-indicator');
    injector = findInjector();
  });

  console.log(
    '  ____  _   _ _____\n' +
    ' |  _ \\| | | |  ___|\n' +
    ' | |_) | | | | |_\n' +
    ' |  _ <| |_| |  _|\n' +
    ' |_| \\_\\\\___/|_|\n' +
    ' FIS Responsive UI Framework\n' +
    ' Version: ' + fis.version +
    '\n Â© 2012-' + (new Date().getYear() + 1900) + ', all rights reserved.\n'
  );
}(window.fis = window.sg = (window.fis || window.sg || {}), document));
