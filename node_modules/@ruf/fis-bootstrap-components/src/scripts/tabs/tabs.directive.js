(function () {
  'use strict';

  angular
    .module('fis.bootstrap.tabs')
    .directive('fisBsTabs', tabs);

  tabs.$inject = ['$timeout'];
  function tabs($timeout) {
    'use strict';
    return {
      restrict: 'AE',
      replace: 'true',

      scope: {
        tabs: '=',
        id: '&',
        remove: '&',
        select: '&',
        move: '&',
        active: '&',
        initialize: '&'
      },

      templateUrl: 'tabs/tabs.directive.html',

      link: function ($scope) {
        /* window resize listener */
        $scope.$on('resizable::resize', function () {
          if ($scope.responsive === 'yes') {
            $timeout(
              function () {
                $scope.resizeTabs();
              }, 100);
          }
        });

        /* Trigger an initial resize and place watch */
        if ($scope.responsive === 'yes') {
          /* Ugly, I know.  QA is reporting that the resize does not always get triggered in Firefox.  Hack for now. */
          $scope.incrementalResizeTabs();

          $scope.$watch('tabs',
            function () {
              $scope.incrementalResizeTabs();
            }, true);
        } else {
          $timeout(
            function () {
              /* 'display = none' in the partial was causing issues with the scope-element directive */
              $scope.elemTabsMoreMenu[0].style.display = 'none';
              $scope.setMinWidth();
            }, 100);

          /* 'display = none' in the partial was causing issues with the scope-element directive */
          $scope.elemTabsMoreMenu[0].style.display = 'none';
          $scope.setMinWidth();
        }

        /* If an application configured initialize exists then call it */
        if ($scope.initialize()) {
          $scope.initialize()($scope.elemNavTabs);
        }
      },

      controller: [
        '$scope',
        '$location',
        '$element',
        '$attrs',
        'TabsManager',

        function ($scope, $location, $element, $attrs, TabsManager) {
          /* set the responsive option for the tabs */
          $scope.responsive = $attrs.responsive;

          /* set the deleteOption for the tabs */
          $scope.deleteOption = $attrs.deleteOption;

          /* if supplied set the tab width */
          $scope.tabWidth = $attrs.tabWidth;
          $scope.currentTab = { id: $attrs.defaultTabId }; // default tab which will be selected first time
          var firstLoad = true; // to load the content for first time
          $scope.tabCounter = 1;
          $scope.showButtons = $attrs.showButtons;

          /* drag and drop */
          $scope.handleDrop = function (item, bin) {
            var tab = $scope.tabs[item];
            $scope.tabs.splice(item, 1);
            $scope.tabs.splice(bin, 0, tab);
          };

          $scope.incrementalResizeTabs = function () {
            $timeout(function () {
              $scope.resizeTabs();
            }, 100);

            $timeout(function () {
              $scope.resizeTabs();
            }, 200);

            $timeout(function () {
              $scope.resizeTabs();
              TabsManager.register($attrs.tabs_group_id, $scope.tabs);
            }, 500);
          };

          /* Resizes the tabs with the More menu functionality */
          $scope.setMinWidth =
            function () {
              var tabsWidth = 0;

              var tabElements = $scope.elemNavTabs.children();
              var tabElementsLength = tabElements.length;
              angular.forEach(tabElements,
                function (tab, index) {
                  /* this skips the last item which is the More menu */
                  if (index + 1 !== tabElementsLength) {
                    tabsWidth += tab.offsetWidth + 7;
                  }
                });

              $scope.elemNavTabs[0].style.minWidth = (tabsWidth + 30) + 'px';
            };

          /* Moves the tab to the first position in the array - used in the  More option */
          $scope.moveTab = function (index) {
            if ($scope.move()) {
              $scope.move()(index);
            } else {
              var tab = $scope.tabs.splice(index, 1);
              $scope.tabs.unshift(tab[0]);
              $scope.updateCurrentTabInfo(tab[0]);
            }
          };

          /* Removes the tab from the array - used in the delete tab option */
          $scope.removeTab = function (index, visibility) {
            if ($scope.remove()) {
              $scope.remove()(index, visibility);
            } else {
              $scope.tabs.splice(index, 1);
              if (visibility !== 'hidden') {
                $scope.currentTab = '';
                $scope.tabWorkspaceContent = '';
                $scope.template = { url: 'partials/tabs_delete.html' };
              }
            }
          };

          /* Selects the tab - generally onClick */
          $scope.selectTab = function (tab) {
            if ($scope.select()) {
              $scope.select()(tab);
            } else {
              $scope.updateCurrentTabInfo(tab);
            }
          };

          /* Selects the class for each tab */
          $scope.activeTab = function (tab) {
            if ($scope.active()) {
              return $scope.active()(tab);
            } else if ($scope.currentTab && tab.id === $scope.currentTab.id) {
              if (firstLoad) {
                $scope.tabWorkspaceContent = ' ' + tab.data;
                $scope.template = { url: tab.url };
                firstLoad = false;
              }
              return 'active';
            }
            return 'disable';
          };

          $scope.updateCurrentTabInfo = function (tab) {
            $scope.currentTab = tab;
            $scope.tabWorkspaceContent = ' ' + tab.data;
            $scope.template = { url: tab.url };
          };

          $scope.addTab = function () {
            $scope.tabWorkspaceContent = 'Dynamic tab ' + $scope.tabCounter;
            $scope.template = { url: 'partials/tabs/tab_default_partial.html' };
            $scope.currentTab = TabsManager.addTab($attrs.tabs_group_id, 'New Tab-' + $scope.tabCounter, $scope.tabWorkspaceContent, 'TabsController', $scope.template);
            $scope.tabCounter++;
          };

          $scope.addTabPartial = function () {
            $scope.tabWorkspaceContent = 'Tab that was added dynamically using "partials/tab2_single_workspace.html" partial';
            $scope.template = { url: 'partials/tabs_tab_single_workspace.html' };
            $scope.currentTab = TabsManager.addTabAsPartial($attrs.tabs_group_id, 'New Tab from partial-' + $scope.tabCounter, $scope.tabWorkspaceContent, 'TabsController', $scope.template);
            $scope.tabCounter++;
          };

          $scope.deleteTab = function () {
            if ($scope.tabs && $scope.tabs.length > 2) {
              TabsManager.removeTab($attrs.tabs_group_id, 2);
              $scope.currentTab = '';
              $scope.tabWorkspaceContent = '';
              $scope.template = { url: 'partials/tabs_delete.html' };
            }
          };

          /* Sets the More menu class */
          $scope.setMoreMenuClass = function () {
            return ($scope.deleteOption === 'yes') ? 'fis-bs-tabs-more-menu-with-delete' : '';
          };

          /* Resizes the tabs with the More menu functionality */
          $scope.resizeTabs = function () {
            var divTabsWidth = $scope.elemNavTabs[0].offsetWidth - 15;

            var tabWidth = 0;
            var tabsWidth = 0;
            /* needed to start with a small buffer */
            var tabsVisibleWidth = 10;
            var tabsVisibleCounter = 0;
            var tabsHiddenCounter = 0;

            $scope.elemTabsMoreMenu[0].style.display = 'none';

            /* array of More menu items */
            var moreMenuElements = $scope.elemTabsMoreMenuDropdown.children();

            /* array of all the Tabs */
            var tabElements = $scope.elemNavTabs.children();
            var tabElementsLength = tabElements.length;

            angular.forEach(tabElements,
              function (tab, index) {
                /* this skips the last item which is the More menu */
                if (index + 1 !== tabElementsLength) {
                  tab.style.display = 'block';

                  tabWidth = tab.offsetWidth + 7;
                  tabsWidth += tabWidth;

                  if (index === 0 || tabsWidth < divTabsWidth) {
                    moreMenuElements[index].style.display = 'none';
                    tabsVisibleCounter++;
                    tabsVisibleWidth += tabWidth;
                  } else {
                    tab.style.display = 'none';
                    moreMenuElements[index].style.display = 'block';
                    tabsHiddenCounter++;
                  }
                }
              });

            /* Final check to show More menu and adjust the visible tabs */
            if (tabsHiddenCounter > 0) {
              /* Show the More menu */
              $scope.elemTabsMoreMenu[0].style.display = 'block';
              /* And get the More menu width */
              var tabsMoreMenuWidth = $scope.elemTabsMoreMenu[0].offsetWidth;

              if (tabsVisibleCounter === 1) {
                $scope.elemNavTabs[0].style.minWidth =
                  (tabsVisibleWidth + tabsMoreMenuWidth + 30) + 'px';
              } else {
                /* Add More menu width */
                tabsVisibleWidth += tabsMoreMenuWidth;

                /* Check to hide the last visible tab to make room for the More menu */
                if (tabsVisibleWidth > divTabsWidth) {
                  tabElements[tabsVisibleCounter - 1].style.display = 'none';
                  moreMenuElements[tabsVisibleCounter - 1].style.display = 'block';
                }

                /* if active tab is hidden then move to first position */
                angular.forEach(tabElements, function (tab, index) {
                  if (index + 1 !== tabElementsLength) {
                    if (tab.classList.contains('active')) {
                      if (tab.style.display === 'none') {
                        $scope.moveTab(index);
                      }
                    }
                  }
                });
              }
            }
          };
        }]
    };
  }
})();

