(function () {
  'use strict';

  angular
    .module('fis.bootstrap.dialog')
    .directive('fisBsNonmodalDraggable', nonModalDraggable);

  nonModalDraggable.$inject = ['$document'];

  function nonModalDraggable($document) {
    'use strict';
    return function (scope, element) {
      var startX = 0;
      var startY = 0;
      var x = 0;
      var y = 0;

      element.on('mousedown', function (event) {
        var dialogElt = findFirstParentElementByClass(element, 'fis-bs-modal');

        // If the dialog is non-modal,only then
        // bind etc. Reduces chances of a memory leak
        if (dialogElt) {
          // Prevent default dragging of selected content
          event.preventDefault();
          startX = event.pageX - x;
          startY = event.pageY - y;
          $document.on('mousemove', mousemove);
          $document.on('mouseup', mouseup);
        }
      });

      element.on('$destroy', function () { // to ensure no memory leaks are there
        $document.unbind('mousemove', mousemove);
        $document.unbind('mouseup', mouseup);
      });

      element.on('hidden.bs.modal.header', function (e) {
        e.preventDefault();
        startX = 0;
        startY = 0;
        x = 0;
        y = 0;
      });

      function mousemove(event) {
        y = event.pageY - startY;
        x = event.pageX - startX;

        var dialogElt = findFirstParentElementByClass(element, 'fis-bs-modal')[0];

        var dialogEltWidth = dialogElt.offsetWidth;
        var dialogEltHeight = dialogElt.offsetHeight;
        var dialogEltCssLeft = dialogElt.offsetLeft;
        var dialogEltCssTop = dialogElt.offsetTop;

        var dialogElementOffset = dialogElt.getBoundingClientRect();

        var bodyWidth = $document[0].body.clientWidth;
        var bodyHeight = $document[0].body.clientHeight;

        if (!dialogEltCssLeft) {
          dialogEltCssLeft = 0;
        }

        if (!dialogEltCssTop) {
          dialogEltCssTop = 0;
        }

        bodyHeight -= 10;
        bodyWidth -= 10;

        if ((dialogElementOffset.left >= 1 || (x > dialogEltCssLeft)) /* R */ &&
          (dialogElementOffset.left + 1 <= (bodyWidth - dialogEltWidth) || (x < dialogEltCssLeft))) /* L */ {
          dialogElt.style.left = x + 'px';
        }

        if ((dialogElementOffset.top >= 1 || (y > dialogEltCssTop)) /* Up */ &&
          (dialogElementOffset.top + 1 <= (bodyHeight - dialogEltHeight) || (y < dialogEltCssTop))) /* Down */ {
          dialogElt.style.top = y + 'px';
        }
      }

      function mouseup() {
        $document.unbind('mousemove', mousemove);
        $document.unbind('mouseup', mouseup);
      }
    };
  }

  function findFirstParentElementByClass(source, targetClass) {
    // set target element to the source element's parent
    var targetElement = source.parent();
    var continueLoop = true;

    do {
      if (!targetElement.length) {
        targetElement = null;
        continueLoop = false;
      } else if (targetElement && targetElement.hasClass(targetClass)) {
        continueLoop = false;
      } else {
        targetElement = targetElement.parent();
      }
    } while (continueLoop);

    return targetElement;
  }
})();
