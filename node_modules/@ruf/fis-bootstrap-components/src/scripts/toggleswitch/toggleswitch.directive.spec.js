describe('Directive: fis.bootstrap.toggleswitch toggleswitch', function () {
  'use strict';

  var scope = null;

  beforeEach(function () {
    angular.mock.module('fis.bootstrap.components');
    angular.mock.inject(function ($rootScope) {
      scope = $rootScope.$new();
    });
  });

  /* jshint unused: false */
  it('it should set model value as integer', inject(function ($compile) {
    var element = $compile('<div class="form-group "><div class="col-xs-6 col-sm-6 col-md-6"><label for="checklabel" class="control-label fis-bs-control-label fis-bs-field">Example1: I have read and agree to the terms and conditions</label></div><div class="col-xs-3 col-sm-3 col-md-3"><fis-bs-toggleswitch fis-ts-id="switch2Id" fis-ts-name="switch2Name" fis-ts-truevalue="1" fis-ts-falsevalue="0" fis-ts-truetext="Y" fis-ts-falsetext="N" fis-ts-minwidth="60px" fis-ts-infosource="switch2"></fis-bs-toggleswitch></div><div class="col-xs-3 col-sm-3 col-md-3"><pre fis-unique-id="bindingDisplayUserNormatFormat">Switch Value: {{switch2}}</pre></div></div>')(scope);
    scope.$apply();
    var inputElem = element.find('input[type="checkbox"]');
    var labelElem = element.find('label[for="switch2Id"]');
    expect(inputElem).toBeDefined();
    expect(scope.switch2).not.toBeDefined();
    expect(labelElem.attr('display-content-yes')).toBe('Y');
    inputElem.click();
    expect(scope.switch2).toEqual(1);
  }));

  it('it should set model value as string', inject(function ($compile) {
    var element = $compile('<div class="form-group " ng-init="switch1 = \'YES\'"><div class="col-xs-6 col-sm-6 col-md-6"><label for="checklabel" class="control-label fis-bs-control-label fis-bs-field">Example 2: I have read and agree to the terms and conditions</label></div><div class="col-xs-3 col-sm-3 col-md-3"><fis-bs-toggleswitch fis-ts-id="switch1Id" fis-ts-name="switch1Name" fis-ts-truevalue="\'YES\'" fis-ts-falsevalue="\'NO\'" fis-ts-truetext="Yes" fis-ts-falsetext="No" fis-ts-minwidth="60px" fis-ts-infosource="switch1"></fis-bs-toggleswitch></div><div class="col-xs-3 col-sm-3 col-md-3"><pre fis-unique-id="bindingDisplayUserNormatFormat">Switch Value: {{switch1}}</pre></div></div>')(scope);
    scope.$apply();
    var inputElem = element.find('input[type="checkbox"]');
    var labelElem = element.find('label[for="switch1Id"]');
    expect(scope.switch1).toEqual('YES');
    expect(labelElem.attr('display-content-yes')).toBe('Yes');
    inputElem.click();
    expect(scope.switch1).toEqual('NO');
  }));

  it('it should call onchange event', inject(function ($compile) {
    var callCount = 0;
    scope.callMe = function () {
      callCount++;
    };
    spyOn(scope, 'callMe');

    var element = $compile('<div class="form-group " ng-init="switch3 = \'YES\'"><div class="col-xs-6 col-sm-6 col-md-6"><label for="checklabel" class="control-label fis-bs-control-label fis-bs-field">Example 3: I have read and agree to the terms and conditions</label></div><div class="col-xs-3 col-sm-3 col-md-3"><fis-bs-toggleswitch fis-ts-id="switch3Id" fis-ts-name="switch3Name" fis-ts-truevalue="\'YES\'" fis-ts-falsevalue="\'NO\'" fis-ts-truetext="Yes" fis-ts-falsetext="No" fis-ts-minwidth="60px" fis-ts-infosource="switch3" fis-ts-onchange="callMe()" ></fis-bs-toggleswitch></div><div class="col-xs-3 col-sm-3 col-md-3"><pre fis-unique-id="bindingDisplayUserNormatFormat">Switch Value: {{switch3}}</pre></div></div>')(scope);

    scope.$apply();
    var inputElem = element.find('input[type="checkbox"]');
    inputElem.click();
    expect(scope.switch3).toEqual('NO');
  }));
});
