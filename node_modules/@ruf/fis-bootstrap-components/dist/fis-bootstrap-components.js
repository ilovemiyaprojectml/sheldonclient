/*!
@ruf/fis-bootstrap-components
Version: 2.5.0

© 2016
Fidelity National Information Services, Inc. and/or its subsidiaries - All Rights Reserved worldwide.
This document is protected under the trade secret and copyright laws as the property of Fidelity National Information Services, Inc. and/or its subsidiaries.
Copying, reproduction or distribution should be limited and only to employees with a “need to know” to do their job. Any disclosure of this document to third parties is strictly prohibited.
*/
angular.module('fis.bootstrap.accordion', []);

angular.module('fis.bootstrap.calendar', []);

angular.module('fis.bootstrap.dialog', []);

(function () {
  'use strict';
  // DO NOT change the name of following variable. It it being used by sub-generators to add new module names
  /* jshint camelcase: false */
  /* eslint-disable camelcase */
  var __lib_mod_deps = [
    'ui.bootstrap',
    'fis.bootstrap.accordion',
    'fis.bootstrap.calendar',
    'fis.bootstrap.tabs',
    'fis.bootstrap.toggleswitch',
    'fis.bootstrap.notification',
    'fis.bootstrap.dialog',
    'fis.bootstrap.segmentcontrol'
  ];
  angular.module('fis.bootstrap.components', __lib_mod_deps);
})();

angular.module('fis.bootstrap.notification', []);

angular.module('fis.bootstrap.segmentcontrol', []);

angular.module('fis.bootstrap.tabs', []);

angular.module('fis.bootstrap.toggleswitch', []);

(function () {
  'use strict';

  angular
    .module('fis.bootstrap.accordion')
    .decorator('uibAccordionDirective', ['$delegate', accordion]);

  function accordion($delegate) {
    'use strict';

    var directive = $delegate[0];
    directive.templateUrl = 'accordion/accordion.decorator.html';
    return $delegate;
  }
})();

(function () {
  'use strict';

  angular
    .module('fis.bootstrap.accordion')
    .decorator('uibAccordionGroupDirective', ['$delegate', accordionGroup]);

  function accordionGroup($delegate) {
    'use strict';

    var directive = $delegate[0];
    directive.templateUrl = 'accordion/accordionGroup.decorator.html';

    return $delegate;
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.calendar')
    .decorator('uibDatepickerDirective', ['$delegate', function ($delegate) {
      var directive = $delegate[0];
      directive.templateUrl = 'calendar/datepicker.decorator.html';
      return $delegate;
    }]);
})();

(function () {
  'use strict';

  angular
    .module('fis.bootstrap.calendar')
    .decorator('uibDatepickerPopupWrapDirective', ['$delegate', function ($delegate) {
      var directive = $delegate[0];
      directive.templateUrl = 'calendar/datepickerPopupWrap.decorator.html';
      return $delegate;
    }]);
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.calendar')
    .decorator('uibDaypickerDirective', ['$delegate', function ($delegate) {
      var directive = $delegate[0];
      directive.templateUrl = 'calendar/daypicker.decorator.html';
      return $delegate;
    }]);
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.calendar')
    .decorator('uibMonthpickerDirective', ['$delegate', function ($delegate) {
      var directive = $delegate[0];
      directive.templateUrl = 'calendar/monthpicker.decorator.html';
      return $delegate;
    }]);
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.calendar')
    .decorator('uibYearpickerDirective', ['$delegate', function ($delegate) {
      var directive = $delegate[0];
      directive.templateUrl = 'calendar/yearpicker.decorator.html';
      return $delegate;
    }]);
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.dialog')
    .directive('fisBsDialog', dialog);

  function dialog() {
    'use strict';
    return {
      restrict: 'E',
      scope: true,
      controller: ['$scope', function () {
        // needed because dialogHeader, dialogBody and dialogFooter requires it.
      }]
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.dialog')
    .directive('fisBsDialogBody', dialogBody);

  function dialogBody() {
    return {
      restrict: 'E',
      transclude: true,
      scope: true,
      require: '^fisBsDialog', /* just for structure validation. We dont use the controller.*/
      templateUrl: 'dialog/dialogBody.directive.html'
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.dialog')
    .directive('fisBsDialogFooter', dialogFooter);

  function dialogFooter() {
    'use strict';
    return {
      restrict: 'E',
      transclude: true,
      scope: true,
      require: '^fisBsDialog', /* just for structure validation. We dont use the controller.*/
      templateUrl: 'dialog/dialogFooter.directive.html'
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.dialog')
    .directive('fisBsDialogHeader', dialogHeader);

  function dialogHeader() {
    'use strict';
    return {

      restrict: 'E',
      transclude: true,
      scope: true,
      require: '^fisBsDialog', /* just for structure validation. We dont use the controller.*/

      link: function (scope) {
        scope.cancel = function () {
          scope.$parent.cancel();
        };
      },
      templateUrl: 'dialog/dialogHeader.directive.html'

    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.dialog')
    .directive('fisBsNonmodalDraggable', nonModalDraggable);

  nonModalDraggable.$inject = ['$document'];

  function nonModalDraggable($document) {
    'use strict';
    return function (scope, element) {
      var startX = 0;
      var startY = 0;
      var x = 0;
      var y = 0;

      element.on('mousedown', function (event) {
        var dialogElt = findFirstParentElementByClass(element, 'fis-bs-modal');

        // If the dialog is non-modal,only then
        // bind etc. Reduces chances of a memory leak
        if (dialogElt) {
          // Prevent default dragging of selected content
          event.preventDefault();
          startX = event.pageX - x;
          startY = event.pageY - y;
          $document.on('mousemove', mousemove);
          $document.on('mouseup', mouseup);
        }
      });

      element.on('$destroy', function () { // to ensure no memory leaks are there
        $document.unbind('mousemove', mousemove);
        $document.unbind('mouseup', mouseup);
      });

      element.on('hidden.bs.modal.header', function (e) {
        e.preventDefault();
        startX = 0;
        startY = 0;
        x = 0;
        y = 0;
      });

      function mousemove(event) {
        y = event.pageY - startY;
        x = event.pageX - startX;

        var dialogElt = findFirstParentElementByClass(element, 'fis-bs-modal')[0];

        var dialogEltWidth = dialogElt.offsetWidth;
        var dialogEltHeight = dialogElt.offsetHeight;
        var dialogEltCssLeft = dialogElt.offsetLeft;
        var dialogEltCssTop = dialogElt.offsetTop;

        var dialogElementOffset = dialogElt.getBoundingClientRect();

        var bodyWidth = $document[0].body.clientWidth;
        var bodyHeight = $document[0].body.clientHeight;

        if (!dialogEltCssLeft) {
          dialogEltCssLeft = 0;
        }

        if (!dialogEltCssTop) {
          dialogEltCssTop = 0;
        }

        bodyHeight -= 10;
        bodyWidth -= 10;

        if ((dialogElementOffset.left >= 1 || (x > dialogEltCssLeft)) /* R */ &&
          (dialogElementOffset.left + 1 <= (bodyWidth - dialogEltWidth) || (x < dialogEltCssLeft))) /* L */ {
          dialogElt.style.left = x + 'px';
        }

        if ((dialogElementOffset.top >= 1 || (y > dialogEltCssTop)) /* Up */ &&
          (dialogElementOffset.top + 1 <= (bodyHeight - dialogEltHeight) || (y < dialogEltCssTop))) /* Down */ {
          dialogElt.style.top = y + 'px';
        }
      }

      function mouseup() {
        $document.unbind('mousemove', mousemove);
        $document.unbind('mouseup', mouseup);
      }
    };
  }

  function findFirstParentElementByClass(source, targetClass) {
    // set target element to the source element's parent
    var targetElement = source.parent();
    var continueLoop = true;

    do {
      if (!targetElement.length) {
        targetElement = null;
        continueLoop = false;
      } else if (targetElement && targetElement.hasClass(targetClass)) {
        continueLoop = false;
      } else {
        targetElement = targetElement.parent();
      }
    } while (continueLoop);

    return targetElement;
  }
})();

(function () {
  'use strict';

  angular
    .module('fis.bootstrap.dialog')
    .directive('fisBsOpenDialogOnclick', openDialogOnclick);

  openDialogOnclick.$inject = ['$uibModal', '$parse'];

  function openDialogOnclick($uibModal, $parse) {
    'use strict';
    return {
      restrict: 'A',
      scope: {
        fisBsDialogSize: '@',
        fisBsDialogType: '@',
        fisBsDialogTemplate: '@',
        fisBsDialogCtrl: '@'
      },
      compile: function () {
        return function (scope, elm) {
          scope.fxn = function () {
            scope.openModal(scope.fisBsDialogSize, scope.fisBsDialogType,
              scope.fisBsDialogTemplate, scope.fisBsDialogCtrl);
          };

          scope.items = [scope.fisBsDialogType];

          scope.openModal = function (modalSize, modalType, modalTemplate, modalCtrl) {
            var backdropClass = 'fis-bs-modal-backdrop';
            var backdrop = 'static';
            var windowTemplateUrl = 'dialog/dialog.modal.directive.html';

            if (modalType === 'non-modal') {
              backdropClass = '';
              backdrop = false;
              windowTemplateUrl = 'dialog/dialog.non-modal.directive.html';
            }

            var modalInstance = $uibModal.open({
              templateUrl: modalTemplate,
              controller: modalCtrl,
              windowTemplateUrl: windowTemplateUrl,
              size: modalSize,
              backdropClass: backdropClass,
              backdrop: backdrop,
              resolve: {
                items: function () {
                  return scope.items;
                }
              }
            });

            return modalInstance;
          };

          var exp = $parse('fxn()');

          elm.bind('click', function () {
            exp(scope);
          });
        };
      }
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.notification')
    .directive('fisBsNotification', notification);

  function notification() {
    'use strict';
    return {
      restrict: 'E',
      replace: true,
      scope: {
        fisBsNotificationsList: '=',
        fisBsShowStdErr: '=',
        fisBsStdErrMessage: '=?',
        fisBsForm: '='
      },
      templateUrl: 'notification/notification.directive.html'
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.segmentcontrol')
    .directive('fisBsSegmentControl', segmentcontrol);

  function segmentcontrol() {
    'use strict';

    return {
      restrict: 'A',
      link: function (scope, element) {
        element.bind('click', function (event) {
          angular.element(this.children).removeClass('fis-bs-segment-selected');
          angular.element(event.target).addClass('fis-bs-segment-selected');
        });
      }
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.tabs')
    .directive('fisBsDraggable', draggable);

  function draggable() {
    'use strict';

    return function (scope, element) {
      var ff = navigator.userAgent.toLowerCase().indexOf('firefox');
      if (ff < 0) {
        var el = element[0];

        el.draggable = true;

        el.addEventListener('dragstart', function (e) {
          e.dataTransfer.effectAllowed = 'move';
          e.dataTransfer.setData('Text', this.id);
          this.classList.add('drag');
          return false;
        }, false);

        el.addEventListener('dragend', function () {
          this.classList.remove('drag');
          return false;
        }, false);
      }
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.tabs')
    .directive('fisBsDroppable', droppable);

  function droppable() {
    'use strict';
    return {
      scope: {
        drop: '&',
        bin: '='
      },

      link: function (scope, element) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') < 0) {
          var el = element[0];
          var bg = el.style.background;

          el.addEventListener('dragover', function (e) {
            e.dataTransfer.dropEffect = 'move';

            if (e.preventDefault) {
              e.preventDefault();
            }

            this.style.background = 'lightblue';
            return false;
          }, false);

          el.addEventListener('dragenter', function () {
            this.style.background = 'lightblue';
            return false;
          }, false);

          el.addEventListener('dragleave', function () {
            this.classList.remove('over');

            this.style.background = bg;

            return false;
          }, false);

          el.addEventListener('drop', function (e) {
            if (e.stopPropagation) {
              e.stopPropagation();
            }

            this.style.background = bg;

            var binId = this.id;

            var item = document.getElementById(e.dataTransfer.getData('Text'));

            scope.$apply(function (scope) {
              var fn = scope.drop();
              if (typeof fn !== 'undefined') {
                fn(item.id.substring(2), binId.substring(2));
              }
            });
            return false;
          }, false);
        }
      }
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.tabs')
    .directive('fisBsScopeElement', scopeElement);

  function scopeElement() {
    'use strict';

    var directiveDefinitionObject = {

      restrict: 'A',

      compile: function compile() {
        return {
          pre: function preLink(scope, iElement, iAttrs) {
            scope[iAttrs.fisBsScopeElement] = iElement;
          }
        };
      }
    };

    return directiveDefinitionObject;
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.tabs')
    .directive('fisBsTabs', tabs);

  tabs.$inject = ['$timeout'];
  function tabs($timeout) {
    'use strict';
    return {
      restrict: 'AE',
      replace: 'true',

      scope: {
        tabs: '=',
        id: '&',
        remove: '&',
        select: '&',
        move: '&',
        active: '&',
        initialize: '&'
      },

      templateUrl: 'tabs/tabs.directive.html',

      link: function ($scope) {
        /* window resize listener */
        $scope.$on('resizable::resize', function () {
          if ($scope.responsive === 'yes') {
            $timeout(
              function () {
                $scope.resizeTabs();
              }, 100);
          }
        });

        /* Trigger an initial resize and place watch */
        if ($scope.responsive === 'yes') {
          /* Ugly, I know.  QA is reporting that the resize does not always get triggered in Firefox.  Hack for now. */
          $scope.incrementalResizeTabs();

          $scope.$watch('tabs',
            function () {
              $scope.incrementalResizeTabs();
            }, true);
        } else {
          $timeout(
            function () {
              /* 'display = none' in the partial was causing issues with the scope-element directive */
              $scope.elemTabsMoreMenu[0].style.display = 'none';
              $scope.setMinWidth();
            }, 100);

          /* 'display = none' in the partial was causing issues with the scope-element directive */
          $scope.elemTabsMoreMenu[0].style.display = 'none';
          $scope.setMinWidth();
        }

        /* If an application configured initialize exists then call it */
        if ($scope.initialize()) {
          $scope.initialize()($scope.elemNavTabs);
        }
      },

      controller: [
        '$scope',
        '$location',
        '$element',
        '$attrs',
        'TabsManager',

        function ($scope, $location, $element, $attrs, TabsManager) {
          /* set the responsive option for the tabs */
          $scope.responsive = $attrs.responsive;

          /* set the deleteOption for the tabs */
          $scope.deleteOption = $attrs.deleteOption;

          /* if supplied set the tab width */
          $scope.tabWidth = $attrs.tabWidth;
          $scope.currentTab = { id: $attrs.defaultTabId }; // default tab which will be selected first time
          var firstLoad = true; // to load the content for first time
          $scope.tabCounter = 1;
          $scope.showButtons = $attrs.showButtons;

          /* drag and drop */
          $scope.handleDrop = function (item, bin) {
            var tab = $scope.tabs[item];
            $scope.tabs.splice(item, 1);
            $scope.tabs.splice(bin, 0, tab);
          };

          $scope.incrementalResizeTabs = function () {
            $timeout(function () {
              $scope.resizeTabs();
            }, 100);

            $timeout(function () {
              $scope.resizeTabs();
            }, 200);

            $timeout(function () {
              $scope.resizeTabs();
              TabsManager.register($attrs.tabs_group_id, $scope.tabs);
            }, 500);
          };

          /* Resizes the tabs with the More menu functionality */
          $scope.setMinWidth =
            function () {
              var tabsWidth = 0;

              var tabElements = $scope.elemNavTabs.children();
              var tabElementsLength = tabElements.length;
              angular.forEach(tabElements,
                function (tab, index) {
                  /* this skips the last item which is the More menu */
                  if (index + 1 !== tabElementsLength) {
                    tabsWidth += tab.offsetWidth + 7;
                  }
                });

              $scope.elemNavTabs[0].style.minWidth = (tabsWidth + 30) + 'px';
            };

          /* Moves the tab to the first position in the array - used in the  More option */
          $scope.moveTab = function (index) {
            if ($scope.move()) {
              $scope.move()(index);
            } else {
              var tab = $scope.tabs.splice(index, 1);
              $scope.tabs.unshift(tab[0]);
              $scope.updateCurrentTabInfo(tab[0]);
            }
          };

          /* Removes the tab from the array - used in the delete tab option */
          $scope.removeTab = function (index, visibility) {
            if ($scope.remove()) {
              $scope.remove()(index, visibility);
            } else {
              $scope.tabs.splice(index, 1);
              if (visibility !== 'hidden') {
                $scope.currentTab = '';
                $scope.tabWorkspaceContent = '';
                $scope.template = { url: 'partials/tabs_delete.html' };
              }
            }
          };

          /* Selects the tab - generally onClick */
          $scope.selectTab = function (tab) {
            if ($scope.select()) {
              $scope.select()(tab);
            } else {
              $scope.updateCurrentTabInfo(tab);
            }
          };

          /* Selects the class for each tab */
          $scope.activeTab = function (tab) {
            if ($scope.active()) {
              return $scope.active()(tab);
            } else if ($scope.currentTab && tab.id === $scope.currentTab.id) {
              if (firstLoad) {
                $scope.tabWorkspaceContent = ' ' + tab.data;
                $scope.template = { url: tab.url };
                firstLoad = false;
              }
              return 'active';
            }
            return 'disable';
          };

          $scope.updateCurrentTabInfo = function (tab) {
            $scope.currentTab = tab;
            $scope.tabWorkspaceContent = ' ' + tab.data;
            $scope.template = { url: tab.url };
          };

          $scope.addTab = function () {
            $scope.tabWorkspaceContent = 'Dynamic tab ' + $scope.tabCounter;
            $scope.template = { url: 'partials/tabs/tab_default_partial.html' };
            $scope.currentTab = TabsManager.addTab($attrs.tabs_group_id, 'New Tab-' + $scope.tabCounter, $scope.tabWorkspaceContent, 'TabsController', $scope.template);
            $scope.tabCounter++;
          };

          $scope.addTabPartial = function () {
            $scope.tabWorkspaceContent = 'Tab that was added dynamically using "partials/tab2_single_workspace.html" partial';
            $scope.template = { url: 'partials/tabs_tab_single_workspace.html' };
            $scope.currentTab = TabsManager.addTabAsPartial($attrs.tabs_group_id, 'New Tab from partial-' + $scope.tabCounter, $scope.tabWorkspaceContent, 'TabsController', $scope.template);
            $scope.tabCounter++;
          };

          $scope.deleteTab = function () {
            if ($scope.tabs && $scope.tabs.length > 2) {
              TabsManager.removeTab($attrs.tabs_group_id, 2);
              $scope.currentTab = '';
              $scope.tabWorkspaceContent = '';
              $scope.template = { url: 'partials/tabs_delete.html' };
            }
          };

          /* Sets the More menu class */
          $scope.setMoreMenuClass = function () {
            return ($scope.deleteOption === 'yes') ? 'fis-bs-tabs-more-menu-with-delete' : '';
          };

          /* Resizes the tabs with the More menu functionality */
          $scope.resizeTabs = function () {
            var divTabsWidth = $scope.elemNavTabs[0].offsetWidth - 15;

            var tabWidth = 0;
            var tabsWidth = 0;
            /* needed to start with a small buffer */
            var tabsVisibleWidth = 10;
            var tabsVisibleCounter = 0;
            var tabsHiddenCounter = 0;

            $scope.elemTabsMoreMenu[0].style.display = 'none';

            /* array of More menu items */
            var moreMenuElements = $scope.elemTabsMoreMenuDropdown.children();

            /* array of all the Tabs */
            var tabElements = $scope.elemNavTabs.children();
            var tabElementsLength = tabElements.length;

            angular.forEach(tabElements,
              function (tab, index) {
                /* this skips the last item which is the More menu */
                if (index + 1 !== tabElementsLength) {
                  tab.style.display = 'block';

                  tabWidth = tab.offsetWidth + 7;
                  tabsWidth += tabWidth;

                  if (index === 0 || tabsWidth < divTabsWidth) {
                    moreMenuElements[index].style.display = 'none';
                    tabsVisibleCounter++;
                    tabsVisibleWidth += tabWidth;
                  } else {
                    tab.style.display = 'none';
                    moreMenuElements[index].style.display = 'block';
                    tabsHiddenCounter++;
                  }
                }
              });

            /* Final check to show More menu and adjust the visible tabs */
            if (tabsHiddenCounter > 0) {
              /* Show the More menu */
              $scope.elemTabsMoreMenu[0].style.display = 'block';
              /* And get the More menu width */
              var tabsMoreMenuWidth = $scope.elemTabsMoreMenu[0].offsetWidth;

              if (tabsVisibleCounter === 1) {
                $scope.elemNavTabs[0].style.minWidth =
                  (tabsVisibleWidth + tabsMoreMenuWidth + 30) + 'px';
              } else {
                /* Add More menu width */
                tabsVisibleWidth += tabsMoreMenuWidth;

                /* Check to hide the last visible tab to make room for the More menu */
                if (tabsVisibleWidth > divTabsWidth) {
                  tabElements[tabsVisibleCounter - 1].style.display = 'none';
                  moreMenuElements[tabsVisibleCounter - 1].style.display = 'block';
                }

                /* if active tab is hidden then move to first position */
                angular.forEach(tabElements, function (tab, index) {
                  if (index + 1 !== tabElementsLength) {
                    if (tab.classList.contains('active')) {
                      if (tab.style.display === 'none') {
                        $scope.moveTab(index);
                      }
                    }
                  }
                });
              }
            }
          };
        }]
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.tabs')
    .service('TabsManager', TabsManager);

  TabsManager.$inject = [];

  function TabsManager() {
    'use strict';

    var map = {};
    var tabCounter = 1;

    this.register = function (tabsGroupId, tabs) {
      map[tabsGroupId] = tabs;
    };

    function add(tabsGroupId, newTabTitle, content, cntrl, link) {
      var tabs = map[tabsGroupId];
      if (typeof tabs === 'undefined') {
        return;
      }

      var tab = {};
      tab.title = '{{\'' + newTabTitle + '\'|translate}}';
      tab.id = '.nt' + tabCounter;
      tab.data = content;
      tab.url = link.url;

      tabs.unshift(tab);
      tabCounter++;
      return tab;
    }

    this.addTab = function (tabsGroupId, newTabTitle, htmlOfContent, cntrl, url) {
      return add(tabsGroupId, newTabTitle, htmlOfContent, cntrl, url, false);
    };

    this.addTabAsPartial = function (tabsGroupId, newTabTitle, htmlOfContent, cntrl, partialFileName) {
      return add(tabsGroupId, newTabTitle, htmlOfContent, cntrl, partialFileName, true);
    };

    this.removeTab = function (tabsGroupId, tabPosition) {
      var tabs = map[tabsGroupId];
      if (typeof tabs !== 'undefined' && tabs.length > 2) {
        tabs.splice(tabPosition, 1);
      }
    };
  }
})();

(function () {
  'use strict';

  angular
    .module('fis.bootstrap.toggleswitch')
    .directive('fisBsToggleswitch', toggleswitch);

  function toggleswitch() {
    'use strict';
    return {
      restrict: 'E',
      replace: 'true',
      scope: {
        fisTsInfosource: '=?',
        fisTsOnchangeRef: '&fisTsOnchange'
      },
      link: function ($scope, tElement, tAttrs) {
        /* needed to set this values in the link section to allow time for possible translation to take affect */
        $scope.fisTSTrueText = tAttrs.fisTsTruetext;
        $scope.fisTSFalseText = tAttrs.fisTsFalsetext;
      },
      controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, tElement, tAttrs, $timeout) {
        $scope.toggleSwitchElement = tElement;

        $scope.fisTSId = tAttrs.fisTsId;
        $scope.fisTSName = tAttrs.fisTsName;
        $scope.fisTSClass = 'fis-bs-switch';
        $scope.fisTSTrueValue = tAttrs.fisTsTruevalue;
        $scope.fisTSFalseValue = tAttrs.fisTsFalsevalue;
        $scope.fisTSTrueText = tAttrs.fisTsTruetext;
        $scope.fisTSFalseText = tAttrs.fisTsFalsetext;
        $scope.fisTSMinWidth = tAttrs.fisTsMinwidth;

        $scope.fisTsOnchange = function () {
          $timeout(function () {
            $scope.fisTsOnchangeRef();
          }, 0);
        };

        $scope.fisTSHandleLeftSwipe = function ($event) {
          if ($event.type.search('touch') !== -1) {
            // change value if it is a touch event
            angular.element($scope.toggleSwitchElement.children()[0]).prop('checked', false);
          }
        };
        $scope.fisTSHandleRightSwipe = function ($event) {
          if ($event.type.search('touch') !== -1) {
            // change value if it is a touch event
            angular.element($scope.toggleSwitchElement.children()[0]).prop('checked', true);
          }
        };
      }],
      templateUrl: 'toggleswitch/toggleswitch.directive.html'

    };
  }
})();


angular.module('fis.bootstrap.components').run(['$templateCache', function($templateCache) {
  $templateCache.put("dialog/dialog.modal.directive.html",
    "<div tabindex=-1 role=dialog class=\"modal fis-bs-modal\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=close($event)><div class=\"modal-dialog fis-bs-modal-dialog\" ng-class=\"{'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\"><div class=\"modal-content fis-bs-modal-content\" uib-modal-transclude></div></div></div>");
  $templateCache.put("dialog/dialog.non-modal.directive.html",
    "<div tabindex=-1 role=dialog class=\"modal fis-bs-modal non-modal fis-bs-non-modal modal-dialog fis-bs-modal-dialog non-modal-dialog fis-bs-non-modal-dialog\" ng-class=\"{in: animate, 'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=close($event)><div class=\"modal-content fis-bs-modal-content\" uib-modal-transclude></div></div>");
  $templateCache.put("dialog/dialogBody.directive.html",
    "<div class=\"modal-body fis-bs-modal-body fis-bs-dialog-body\" ng-transclude></div>");
  $templateCache.put("dialog/dialogFooter.directive.html",
    "<div class=\"modal-footer fis-bs-modal-footer fis-bs-dialog-footer\" ng-transclude></div>");
  $templateCache.put("dialog/dialogHeader.directive.html",
    "<div ng-if=\"modalType == 'modal' \" class=\"modal-header fis-bs-modal-header fis-bs-dialog-header\"><button type=button class=\"close fis-bs-close\" data-dismiss=modal ng-click=cancel($event)><span aria-hidden=true><span class=\"icon-Close_tab sm-ic\"></span></span><span class=sr-only>Close</span></button><h4 class=\"modal-title fis-bs-modal-title\" ng-transclude></h4></div><div ng-if=\"modalType == 'non-modal' \" class=\"modal-header fis-bs-modal-header fis-bs-dialog-header fis-bs-non-modal-dialog-header\" fis-bs-nonmodal-draggable><button type=button class=\"close fis-bs-close\" data-dismiss=modal ng-click=cancel($event)><span aria-hidden=true><span class=\"icon-Close_tab sm-ic\"></span></span><span class=sr-only>Close</span></button><h4 class=\"modal-title fis-bs-modal-title\" ng-transclude></h4></div>");
  $templateCache.put("dialog/nonModalDraggable.directive.html",
    "<div>This is nonModalDraggable template</div>");
  $templateCache.put("notification/notification.directive.html",
    "<div><div ng-if=\"fisBsForm.$invalid && fisBsForm.$dirty && fisBsShowStdErr\"><div class=fis-notification-img><span class=\"icon-Error red\"></span></div><div class=\"fis-notifications fis-error\">{{fisBsStdErrMessage|translate}}</div></div><div ng-repeat=\"notice in fisBsNotificationsList\"><ng-switch on=notice.type><div class=fis-notification-img><span ng-switch-when=fis-error class=\"icon-Error red\"></span> <span ng-switch-when=fis-alert class=\"icon-Error orange\"></span> <span ng-switch-when=fis-information class=\"icon-Information blue\"></span> <span ng-switch-when=fis-success class=\"icon-Posak green_c\"></span></div></ng-switch><div class=fis-notifications ng-class=notice.type>{{notice.message|translate}}</div><br></div></div>");
  $templateCache.put("tabs/tabs.directive.html",
    "<div><div ng-if=\"showButtons =='yes'\"><button id=tabbutton1 type=button class=\"btn btn-primary fis-bs-btn-primary fis-bs-field fis-bs-actions\" ng-model=template ng-click=addTab()>{{\"Add a tab\"|translate}}</button> <button id=tabbutton2 type=button class=\"btn btn-primary fis-bs-btn-primary fis-bs-field fis-bs-actions\" ng-model=template ng-click=addTabPartial()>{{\"Add a tab from partial\"|translate}}</button> <button id=tabbutton3 type=button class=\"btn btn-primary fis-bs-btn-primary fis-bs-field fis-bs-actions\" ng-model=template ng-click=deleteTab()>{{\"Delete third tab\"|translate}}</button></div><div class=fis-bs-tabs><div class=fis-bs-nav-tabs-container><ul fis-bs-scope-element=elemNavTabs class=\"nav-tabs fis-bs-nav-tabs\" style=\"height: 35px\"><li ng-repeat=\"t in tabs\" ng-class=activeTab(t) ng-style=\"{'width': tabWidth}\" fis-bs-draggable fis-bs-droppable drop=handleDrop id=li{{$index}} ng-click=selectTab(t)><span id=sp{{$index}}><a href=\"\" class=fis-bs-tabs-text ng-class=\"{'fis-bs-tabs-no-delete' : deleteOption !== 'yes'}\"><span>{{t.title|translate}}</span></a> <a ng-if=\"deleteOption == 'yes'\" href=\"\" ng-click=\"removeTab($index, 'visible'); $event.stopPropagation();\" class=fis-bs-tabs-close><span class=\"glyphicon glyphicon-remove xsm-ic fis-bs-tabs-icon-close\"></span></a></span></li><li fis-bs-scope-element=elemTabsMoreMenu class=\"fis-bs-tabs-more-menu dropdown\" uib-dropdown><a class=\"dropdown-toggle fis-bs-tabs-text\" uib-dropdown-toggle href=\"\"><span>{{\"More\"|translate}}</span><b class=caret></b></a><ul fis-bs-scope-element=elemTabsMoreMenuDropdown class=\"dropdown-menu fis-bs-dropdown-menu dropdown-menu-right\"><li ng-repeat=\"t in tabs\" ng-model=template fis-bs-draggable id=sp{{$index}}><a href=\"\" ng-click=moveTab($index) ng-class=setMoreMenuClass()>{{t.title|translate}}</a> <a ng-if=\"deleteOption == 'yes'\" ng-click=\"removeTab($index, 'hidden')\" href=\"\" class=fis-bs-tabs-more-menu-close tabindex=0><span class=\"glyphicon glyphicon-remove xsm-ic fis-bs-tabs-icon-close\"></span></a></li></ul></li></ul></div></div><div ng-include=template.url></div></div>");
  $templateCache.put("toggleswitch/toggleswitch.directive.html",
    "<div ng-swipe-left=fisTSHandleLeftSwipe($event) ng-swipe-right=fisTSHandleRightSwipe($event) ng-swipe-disable-mouse><input type=checkbox id={{fisTSId}} name={{fisTSName}} ng-change=fisTsOnchange() ng-model=fisTsInfosource class={{fisTSClass}} ng-true-value={{fisTSTrueValue}} ng-false-value=\"{{fisTSFalseValue}}\"><label for={{fisTSId}} display-content-no={{fisTSFalseText|translate}} display-content-yes={{fisTSTrueText|translate}}>&nbsp;</label></div>");
  $templateCache.put("accordion/accordion.decorator.html",
    "<div class=panel-group ng-transclude></div>");
  $templateCache.put("accordion/accordionGroup.decorator.html",
    "<div class=\"panel panel-default\"><div class=\"panel-heading fis-bs-accordion-panel-heading\"><h5 class=\"{{isOpen ? 'panel-title fis-bs-accordion-panel-title':'panel-title fis-bs-accordion-panel-title collapsed'}}\" ng-click=toggleOpen() fis-unique-id><a href class=\"accordion-toggle fis-bs-accordion-toggle\" uib-accordion-transclude=heading><span ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a></h5></div><div class=\"panel-collapse fis-bs-accordion-panel-collapse\" uib-collapse=!isOpen><div class=\"panel-body fis-bs-accordion-panel-body\" ng-transclude></div></div></div>");
  $templateCache.put("calendar/datepicker.decorator.html",
    "<div ng-switch=datepickerMode role=application ng-keydown=keydown($event)><uib-daypicker ng-switch-when=day tabindex=0></uib-daypicker><uib-monthpicker ng-switch-when=month tabindex=0></uib-monthpicker><uib-yearpicker ng-switch-when=year tabindex=0></uib-yearpicker></div>");
  $templateCache.put("calendar/datepickerPopupWrap.decorator.html",
    "<ul class=\"uib-datepicker-popup dropdown-menu bs-override-style\" dropdown-nested ng-if=isOpen style=\"display: block\" ng-style=\"{top: position.top+'px', left: position.left+'px'}\" ng-keydown=keydown($event) ng-click=$event.stopPropagation()><li ng-transclude></li><li ng-if=showButtonBar style=\"padding:10px 9px 2px\" class=uib-button-bar><span class=\"btn-group pull-left\"><button type=button class=\"btn btn-sm btn-info fis-bs-calendar-btn-info\" ng-click=\"select('today')\" ng-disabled=\"isDisabled('today')\" fis-unique-id>{{ getText('current')|translate }}</button> <button type=button class=\"btn btn-sm fis-bs-calendar-btn-danger\" ng-click=select(null) fis-unique-id>{{ getText('clear')|translate }}</button></span> <button type=button class=\"btn btn-sm fis-bs-calendar-btn-success pull-right\" ng-click=close() fis-unique-id>{{ getText('close')|translate }}</button></li></ul>");
  $templateCache.put("calendar/daypicker.decorator.html",
    "<table role=grid aria-labelledby={{uniqueId}}-title aria-activedescendant={{activeDateId}}><thead><tr><th><button type=button class=fis-bs-calendar-pull-left ng-click=move(-1) tabindex=-1><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th><th style=\"border-left:solid 2px #fff; border-right:solid 2px #fff\" colspan=\"{{5 + showWeeks}}\"><button id={{uniqueId}}-title role=heading aria-live=assertive aria-atomic=true type=button class=fis-bs-calendar-middle ng-click=toggleMode() tabindex=-1><strong>{{title}}</strong></button></th><th><button type=button class=fis-bs-calendar-pull-right ng-click=move(1) tabindex=-1><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th></tr><tr><th ng-show=showWeeks class=text-center></th><th ng-repeat=\"label in labels track by $index\" class=text-center><small aria-label={{label.full}}>{{label.abbr}}</small></th></tr></thead><tbody><tr ng-repeat=\"row in rows track by $index\" style=\"border-bottom: 1px solid lightgray;  border-top: 1px solid lightgray;  border-collapse: collapse\"><td ng-show=showWeeks class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td><td ng-repeat=\"dt in row track by dt.date\" class=text-center role=gridcell id={{dt.uid}} aria-disabled={{!!dt.disabled}}><button type=button style=\"width:100%; height:40px; width:40px; border: 0px\" class=fis-bs-calendar-cell ng-class=\"{ 'fis-bs-calendar-current-cell': dt.current, \n" +
    "        			'fis-bs-calendar-selected-cell': dt.selected, \n" +
    "        			'fis-bs-calendar-cell-active': isActive(dt) && ! dt.selected && !dt.current,\n" +
    "        			'fis-bs-calendar-cell-disabled': dt.disabled,\n" +
    "        			'fis-bs-calendar-cell-muted': dt.secondary\n" +
    "        			}\" ng-click=select(dt.date) ng-disabled=dt.disabled tabindex=-1><span ng-class=\"{'fis-bs-calendar-current-text': dt.current,\n" +
    "        						'fis-bs-calendar-selected-text': dt.selected,\n" +
    "        						'fis-bs-calendar-cell-active': isActive(dt) && ! dt.selected && !dt.current,\n" +
    "        						'fis-bs-calendar-text-muted': dt.secondary \n" +
    "       					      }\">{{dt.label}}</span></button></td></tr></tbody></table>");
  $templateCache.put("calendar/monthpicker.decorator.html",
    "<table role=grid aria-labelledby={{uniqueId}}-title aria-activedescendant={{activeDateId}}><thead><tr><th><button type=button class=\"fis-bs-calendar-btn btn-default btn-sm fis-bs-calendar-pull-left\" ng-click=move(-1) tabindex=-1><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th><th><button id={{uniqueId}}-title role=heading aria-live=assertive aria-atomic=true type=button class=\"fis-bs-calendar-midle btn-default btn-sm\" ng-click=toggleMode() tabindex=-1 style=width:100%><strong>{{title}}</strong></button></th><th><button type=button class=\"fis-bs-calendar-btn btn-default btn-sm fis-bs-calendar-pull-right\" ng-click=move(1) tabindex=-1><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th></tr></thead><tbody><tr ng-repeat=\"row in rows track by $index\"><td ng-repeat=\"dt in row track by dt.date\" class=text-center role=gridcell id={{dt.uid}} aria-disabled={{!!dt.disabled}}><button type=button style=width:100% class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=select(dt.date) ng-disabled=dt.disabled tabindex=-1><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button></td></tr></tbody></table>");
  $templateCache.put("calendar/yearpicker.decorator.html",
    "<table role=grid aria-labelledby={{uniqueId}}-title aria-activedescendant={{activeDateId}}><thead><tr><th><button type=button class=\"fis-bs-calendar-btn btn-default btn-sm fis-bs-calendar-pull-left\" ng-click=move(-1) tabindex=-1><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th><th colspan=3><button id={{uniqueId}}-title role=heading aria-live=assertive aria-atomic=true type=button class=\"fis-bs-calendar-midle btn-default btn-sm\" ng-click=toggleMode() tabindex=-1 style=width:100%><strong>{{title}}</strong></button></th><th><button type=button class=\"fis-bs-calendar-btn btn-default btn-sm fis-bs-calendar-pull-right\" ng-click=move(1) tabindex=-1><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th></tr></thead><tbody><tr ng-repeat=\"row in rows track by $index\"><td ng-repeat=\"dt in row track by dt.date\" class=text-center role=gridcell id={{dt.uid}} aria-disabled={{!!dt.disabled}}><button type=button style=width:100% class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=select(dt.date) ng-disabled=dt.disabled tabindex=-1><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button></td></tr></tbody></table>");
}]);
