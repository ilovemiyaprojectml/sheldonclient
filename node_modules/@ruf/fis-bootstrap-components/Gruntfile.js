'use strict';

var path = require('path');
var html5Config = require('@ruf/html5-config');
var license = require('@ruf/fis-license');

module.exports = function (grunt) {

  // Load grunt tasks automatically
  require('load-grunt-tasks')(grunt);

  var yeomanConfig = {
    app: 'demo',
    dist: 'demo-dist',
    lib: 'src',
    libDist: 'dist'
  };

  var pkg = require('./package');
  var bowerPkg = require('./bower');

  grunt.initConfig({
    yeoman: yeomanConfig,
    pkg: pkg,
    bowerPkg: bowerPkg,
    express: {
      options: {
        port: 3000
      },
      dev: {
        options: {
          script: 'server/app.js'
        }
      },
      dist: {
        options: {
          script: 'server/app.js',
          node_env: 'production'
        }
      }
    },
    watch: {
      options: {
        livereload: true
      },
      express: {
        options: {
          spawn: false
        },
        files: [
          '<%= yeoman.app %>/**/*.html',
          'dist/*.js',
          'api/**/*.json',
          '{.tmp,<%= yeoman.app %>}/styles/**/*.css',
          '{.tmp,<%= yeoman.app %>}/scripts/**/*.js',
          '<%= yeoman.app %>/images/**/*.{png,jpg,jpeg,gif,webp,svg}',
          '<%= yeoman.lib %>/**/*',
          'server/**/*.{js,json}'
        ],
        tasks: ['express:dev']
      }
    },
    open: {
      server: {
        url: 'http://localhost:<%= express.options.port %>'
      }
    },
    clean: {
      dist: {
        files: [
          {
            dot: true,
            src: [
              '.tmp',
              '<%= yeoman.dist %>/*',
              '!<%= yeoman.dist %>/.git*'
            ]
          }
        ]
      },
      server: '.tmp'
    },
    filerev: {
      dist: {
        src: [
          '<%= yeoman.dist %>/scripts/{,*/}*.js',
          '<%= yeoman.dist %>/styles/{,*/}*.css',
        ]
      }
    },
    useminPrepare: {
      html: html5Config.getHtmlFiles(),
      options: {
        dest: '<%= yeoman.dist %>',
        flow: {
          steps: {
            js: [{
              name: 'concat',
              createConfig: function (context, block) {
                var config = require('grunt-usemin/lib/config/concat').createConfig(context, block);
                config.files.forEach(function (file) {
                  file.src = file.src.map(function (item) {
                    return item.substr(0, 16) === path.join('demo', 'src', 'scripts') ?
                      item.substr(5) :
                      item;
                  });
                });
                return config;
              }
            }, 'uglifyjs'],
            css: ['concat', 'cssmin']
          },
          post: {}
        }
      }
    },
    usemin: {
      html: ['<%= yeoman.dist %>/{,*/}*.html'],
      css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],
      options: {
        dirs: ['<%= yeoman.dist %>']
      }
    },
    copy: {
      dist: {
        files: [
          {
            expand: true,
            dot: true,
            cwd: '<%= yeoman.app %>',
            dest: '<%= yeoman.dist %>',
            src: [
              'api/**',
              'images/**/*',
              'vendor/**/*',
              'styles-fmk/**/*',
              '*.html',
              'views/*.html'
            ]
          }
        ]
      }
    },
    concurrent: {
      server: [],
      test: [],
      dist: []
    },
    karma: {
      unit: {
        configFile: 'karma.conf.js',
        singleRun: true
      }
    },
    ngAnnotate: {
      dist: {
        files: [
          {
            expand: true,
            src: '<%= yeoman.app %>/scripts/*.js',
            dest: '.tmp/concat/scripts'
          }
        ]
      },
      lib: {
        files: [
          {
            expand: true,
            cwd: '.tmp/concat/libscripts/',
            src: ['*.js'],
            dest: '<%= yeoman.libDist %>'
          }
        ]
      }
    },
    concat: {
      options: {
        banner: license.commented(pkg)
      },
      lib: {
        src: [
          '<%= yeoman.lib %>/scripts/**/*.module.js',
          '<%= yeoman.lib %>/scripts/**/*.js',
          '!<%= yeoman.lib %>/scripts/**/*.spec.js',
          '.tmp/templates.js'
        ],
        dest: '.tmp/concat/libscripts/<%= bowerPkg.name %>.js'
      },
      templates: {
        src: [
          '.tmp/concat/scripts/scripts.js',
          '.tmp/templates.js'
        ],
        dest: '.tmp/concat/scripts/scripts.js'
      }
    },
    uglify: {
      options: {
        wrap: false,
        preserveComments: 'some'
      },
      lib: {
        files: {
          'dist/<%= bowerPkg.name %>.min.js': [
            ['<%= yeoman.libDist %>/<%= bowerPkg.name %>.js']
          ]
        }
      }
    },
    sg_release: {
      release: {
        options: {
          files: ['package.json', 'bower.json', 'README.md', '<%= yeoman.libDist %>/<%= bowerPkg.name %>.js', 'dist/<%= bowerPkg.name %>.min.js'],
          commitMessagePrefix: '',
          pushTo: 'origin',
          commitFiles: ['-a']
        }
      }
    },
    html2js: {
      options: {
        base: 'src/scripts',
        module: 'fis.bootstrap.components',
        existingModule: true,
        singleModule: true,
        htmlmin: {
          collapseBooleanAttributes: true,
          collapseWhitespace: true,
          removeAttributeQuotes: true,
          removeComments: true,
          removeEmptyAttributes: true,
          removeRedundantAttributes: false,
          removeScriptTypeAttributes: true,
          removeStyleLinkTypeAttributes: true
        }
      },
      directives: {
        src: [
            '<%= yeoman.lib %>/scripts/**/*.directive.html',
            '<%= yeoman.lib %>/scripts/**/*.decorator.html'
        ],
        dest: '.tmp/templates.js'
      }
    },
    wiredep: {
      html: {
        src: html5Config.getHtmlFiles(),
        devDependencies: true,
        fileTypes: {
          html: {
            detect: {
              js: /<script.*src=['"]([^'"]+)/gi,
              'notmin.css': /<link.*href=['"]([^'"]+)/gi,
              css: /<link.*href=['"]([^'"]+)/gi
            },
            replace: {
              js: '<script src="{{filePath}}"></script>',
              'notmin.css': '<link rel="stylesheet" href="{{filePath}}" />',
              css: '<link rel="stylesheet" href="{{filePath}}" />'
            }
          }
        }
      },
      karma: {
        src: ['karma.conf.js'],
        devDependencies: true,
        fileTypes: {
          js: {
            block: /(([ \t]*)\/\/\s*bower:*(\S*))(\n|\r|.)*?(\/\/\s*endbower)/gi,
            detect: {
              js: /\"\"\,/gi,
            },
            replace: {
              js: '"{{filePath}}",',
            }
          }
        }
      }
    }
  });

  grunt.registerTask('server', 'Runs a simple node.js server for testing your app', function (target) {

    if (target === 'dist') {
      return grunt.task.run([
        'clean:server',
        'build',
        'express:dist',
        'open',
        'watch'
       ]);
    }

    grunt.task.run([
      'clean:server',
      'express:dev',
      'open',
      'watch'
    ]);

  });

  grunt.registerTask('test', 'Run automated tests', [
    'clean:server',
    'concurrent:test',
    'karma'
  ]);

  grunt.registerTask('build', 'Create distribution files for your library', [
    'html2js',
    'concat:lib',
    'ngAnnotate:lib',
    'uglify:lib'
  ]);

  grunt.registerTask('lib', 'Create distribution files for your library', ['build']);

  grunt.registerTask('release', 'Makes a new release tag of your application to your Git repo', [
    'lib',
    'sg_release'
  ]);

  grunt.registerTask('default', []);

};
