{
 "htmldocs": "",
 "contents": [
  {
   "type": "Directive",
   "name": "BoxedInputDirective",
   "path": "/src/boxed-input/boxed-input.directive.ts",
   "jsDoc": "",
   "settings": {
    "selector": "[boxStyle]",
    "exportAs": "boxStyle"
   },
   "examples": []
  },
  {
   "type": "NgModule",
   "name": "RufBoxedInputModule",
   "path": "/src/boxed-input/boxed-input.module.ts",
   "jsDoc": "",
   "settings": {
    "imports": [
     "CommonModule"
    ],
    "declarations": [
     "BoxedInputDirective"
    ],
    "exports": [
     "BoxedInputDirective"
    ]
   }
  },
  {
   "type": "NgModule",
   "name": "RufMaterialModule",
   "path": "/src/material.module.ts",
   "jsDoc": "",
   "settings": {
    "imports": [
     "RufBoxedInputModule"
    ],
    "exports": [
     "RufBoxedInputModule"
    ]
   }
  }
 ],
 "examples": [],
 "logo": "",
 "screenshots": "",
 "sections": "",
 "readmes": {
  "/README.md": "# RUF Material\n\nRUF Material is a library project that aims to style Angular Material widgets in accordance with FIS Style Guide.\n\n#### Quick links\n[Demo](https://infinitydev.sungard.com/RUF/ruf-material-demo) | \n[Angular Material Demo](https://material.angular.io/components) |\n[Angular Material Github](https://github.com/angular/material2) |\n[FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/toverview)\n\n### Goal of RUF Material\nThe goal of RUF Material is only to style Angular Material widgets, and not add any functionality on top of it.\nWe have not made any modification to Angular Material widgets. The subsequent usage section provides details on how to consume RUF Material widgets.\n\n### Components that have been styled\n\n* Autocomplete\n* Badge\n* Button\n* Button Toggle\n* Card\n* Checkbox\n* Chips\n* Datatable\n* Datepicker\n* Dialog\n* Expansion Panel\n* Grid List\n* Icon\n* Input\n* List\n* Menu\n* Progress Bar\n* Progress Spinner\n* Radio\n* Select / Dropdown\n* Slide Toggle\n* Slider\n* Snackbar\n* Stepper\n* Tabs\n* Toolbar\n* Tooltip\n\n### Usage\nIn order to use RUF Material widgets, follow these steps -\n\n* Install dependencies. `@ruf/material` package declares the dependencies as `peerDependencies`. You'll need to install them. Their versions will depend on the `@ruf/material` module version you are using.\n\n```bash\nnpm i --save @angular/material\nnpm i --save @angular/cdk\nnpm i --save @ruf/theming\nnpm i --save @ruf/material\n```\n\n* Use Angular Material widgets as is, with just `fisStyle` attribute defined on them\n```html\n    <mat-form-field fisStyle>\n      <mat-label>Language</mat-label>\n      <mat-select [(ngModel)]=\"currentLanguage\" [required]=\"true\" fisStyle>\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language.value\" fisStyle>\n          {{ language.label }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n```\n* Using `fisStyle` attribute will style the corresponding Angular Material widget according to FIS UX Style Guide.\n\n**Note: No directives are used by RUF Material. The fisStyle attribute is simply used as a CSS selector and it avoids implicitly overriding styles that we have no control over (the material library's styles). Overriding without an explicit selector would make library compatibility impossible and break third party libraries that are using material components.**\n\n* Use Angular Material widgets (currently only supported by mat-button, mat-raised-button, mat-stroked-button, mat-flat-button etc.) as is, with just `fixedWidth` attribute defined on them\n```html\n<button rufId mat-button=\"\" id=\"primary\" fixedWidth title=\"primary\" [disabled]=\"isDisabled\" fisStyle=\"\" color=\"primary\">primary</button>\n```\n* Using `fixedWidth` attribute will apply a fixed width value for Angular Material widget (only supported by mat-*-button widgets for now).\n\n**Note: No directives are used by RUF Material. The fixedWidth attribute is simply used as a CSS selector and it avoids implicitly overriding styles that we have no control over (the material library's styles). Overriding without an explicit selector would make library compatibility impossible and break third party libraries that are using material components.**\n\n### Typography\n\n`@ruf/material` lets you override the default Typography configuration (e.g., font type, font size, font weight, line height etc.) defined for each of these components.\nIf you want to use default typography provided by RUF material, include just the theme.\n\n```scss\n@include ruf-material-theme($theme)\n\n```\n\nTo override default configuration, provide a config object.\n\n```scss\n$typography-config = \n  ruf-typography-config(\n   (\n     font-family: 'serif' // override the default font-family RUF uses\n   )\n  );\n  \n@include ruf-material-theme($theme, $typography-config)\n```\n\n\n### Structural Configuration\n\n`@ruf/material` lets you override the structural styling configuration for each of these components.\nIf you want to use default styling configuration according to FIS UX Guidelines, do not pass this parameter\n```scss\n@include ruf-material-structure()\n\n```\n\nTo override default configuration, provide a config object overriding default configuration.\n\n```scss\n$material-structural-config: (\n  mat-button: (\n    border-radius: ruf-to-rem(26px),\n    text-transform: capitalize\n  ),\n  mat-datatable: (\n    mat-header-row: (\n      text-transform: capitalize\n    ),\n  ),\n  mat-card : (\n    border-radius: ruf-to-rem(5px)\n  ),\n  mat-snackbar: (\n    border-radius: ruf-to-rem(5px),\n    inkbar-width: ruf-to-rem(15px)\n  ),\n  mat-tabs: (\n    mat-ink-bar-height: ruf-to-rem(6px)\n  )\n);\n\n//Structural changes\n@include ruf-material-structure( $structural-config: $material-structural-config);\n\n```\n\nDefault structural configuration provided by @ruf/material is.\n\n```scss\n $default-structural-config: (\n    mat-autocomplete: (\n    ),\n    mat-badge: (\n    ),\n    mat-boxed-input: (\n      border-radius: ruf-to-rem(3px),\n      icon-size: ruf-to-rem(34px),\n      padding-vertical: ruf-to-rem(8px),\n      padding-horizontal: ruf-to-rem(6px),\n    ),\n    mat-button: (\n      border-radius: ruf-to-rem(3px),\n      line-height: 1.2,\n      fixed-width: ruf-to-rem(164px),\n      padding-horizontal: ruf-to-rem(15px),\n      padding-vertical: ruf-to-rem(8px),\n      text-transform: none\n    ),\n    mat-button-toggle: (\n      border-radius: ruf-to-rem(3px),\n      line-height: ruf-to-rem(20px),\n      padding-horizontal: ruf-to-rem(15px),\n      padding-vertical: ruf-to-rem(8px)\n    ),\n    mat-card : (\n      padding-horizontal: ruf-to-rem(16px),\n      padding-vertical: ruf-to-rem(16px),\n      border-radius: ruf-to-rem(2px)\n    ),\n    mat-checkbox: (),\n    mat-chips: (),\n    mat-optgroup: (),\n    mat-option: (),\n    mat-datatable: (\n      mat-header-row: (\n        padding-horizontal: ruf-to-rem(10px),\n        padding-vertical: ruf-to-rem(10px),\n        border-bottom-width: ruf-to-rem(4px),\n        text-transform: none\n      ),\n      mat-row : (\n        height: ruf-to-rem(50px),\n        padding-horizontal: ruf-to-rem(10px),\n        padding-vertical: ruf-to-rem(10px),\n      ),\n      row-border-width: ruf-to-rem(3px)\n    ),\n    mat-datepicker: (),\n    mat-dialog: (),\n    mat-expansion: (),\n    mat-gridlist: (),\n    mat-icon: (),\n    mat-input: (padding-vertical: ruf-to-rem(8px)),\n    mat-list: (),\n    mat- menu: (),\n    mat-progressbar: (),\n    mat-progress-spinner: (),\n    mat-radio: (\n      radio-size: ruf-to-rem(20px),\n      radio-ripple-radius: ruf-to-rem(20px),\n      label-padding: ruf-to-rem(12px)\n    ),\n    mat-select: (),\n    mat-slidetoggle: (),\n    mat-slider: (),\n    mat-snackbar: (\n      border-radius: ruf-to-rem(0px),\n      margin: ruf-to-rem(0px),\n      max-width: ruf-to-rem(470px),\n      min-width: ruf-to-rem(48px),\n      min-height: ruf-to-rem(310px),\n      padding-horizontal: ruf-to-rem(0px),\n      padding-vertical: ruf-to-rem(15px),\n      inkbar-width: ruf-to-rem(6px)\n    ),\n    mat-stepper: (),\n    mat-tabs: (\n      height: ruf-to-rem(44px),\n      line-height: ruf-to-rem(44px),\n      min-width: ruf-to-rem(48px),\n      mat-ink-bar-height: ruf-to-rem(3px),\n      padding-horizontal: ruf-to-rem(15px),\n      padding-verical: ruf-to-rem(0),\n    ),\n    mat-toolbar: (),\n    mat-tooltip: ()\n  );\n\n\n  ```\n",
  "/src/badge/README.md": "# Badge\n\nA badge is a material component which is styled as per [FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/badges).\n\nUser can use `fisStyle` directive and classes provided by RUF to style this component.\n\n## Quick links\n[Demo](https://infinitydev.sungard.com/RUF/ruf-demo/ruf/action/material/badge/icons-with-badge) |\n[Angular Material Demo](https://material.angular.io/components/badge/overview) |\n[Angular Material Github](https://github.com/angular/material2) |\n[FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/badges)\n\n## Classes provided by RUF\n\n* **ruf-badge-oval**: Users are recommended to use this class when the length of badge content is 3 or more characters.\ne.g.,\n\n```html\n<mat-icon fisStyle class=\"ruf-badge-oval\" fisIcon=\"notification\" matBadge=\"500\" ></mat-icon>\n```\n\n**Note**: This class won't be automatically applied to badge even if fisStyle attribute is present.\n\n## Recommendation\n\n    * It is recommended not to use more than three characters in matBadge, instead use abbreviated value.\n\n```html\nExample:\n\n1000: 1k\n\n5000: 5k\n\n```\n\n    * MatBadge is styled for medium size(i.e. 22px) only as recommended by [FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/badges) . Styles will not be applied for large and small size.\n\n## Usage\n\n### Badge with empty content\n\n```html\n    <mat-icon fisStyle fisIcon=\"notification\" rufId=\"notification_icon\" matBadge=\"\"></mat-icon>\n ```\n\n### Badge with `ruf-badge-oval` class\n\n```html\n    <mat-icon fisStyle class=\"ruf-badge-oval\" fisIcon=\"notification\" matBadge=\"500\" ></mat-icon>\n```\n\n### Badge with abbreviated value\n\n```html\n    <mat-icon fisStyle fisIcon=\"notification\" matBadge=\"1k\" ></mat-icon>\n```\n",
  "/src/core/typography/README.md": "# RUF Material Typography\n\nRUF Material library uses and extends typography feature provided by Angular Material.\n@ruf/theming provides default typography configuration based on the FIS UX Guidelines.\nThese configurations can be extended in the consuming project by providing custom configurations.\n\n### Quick links\n[Demo](https://infinitydev.sungard.com/RUF/ruf-demo/ruf/material/overview) |\n[Angular Material typography](https://material.angular.io/guide/typography)\n\n### Usage\n\nDefault Typography Configuration provided by Angular Material is as following\n\n```scss\n  mat-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     mat-typography-level(112px, 112px, 300),\n  $display-3:     mat-typography-level(56px, 56px, 400),\n  $display-2:     mat-typography-level(45px, 48px, 400),\n  $display-1:     mat-typography-level(34px, 40px, 400),\n  $headline:      mat-typography-level(24px, 32px, 400),\n  $title:         mat-typography-level(20px, 32px, 500),\n  $subheading-2:  mat-typography-level(16px, 28px, 400),\n  $subheading-1:  mat-typography-level(15px, 24px, 400),\n  $body-2:        mat-typography-level(14px, 24px, 500),\n  $body-1:        mat-typography-level(14px, 20px, 400),\n  $caption:       mat-typography-level(12px, 20px, 400),\n  $button:        mat-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         mat-typography-level(16px, 1.125, 400)\n)\n\n```\n\n\nBase typography customization provided by @ruf/theming is as following\n```scss\n$ruf-base-typography : (\n    font-family: $ruf-font-family,\n    button: ruf-typography-level(14px, 1.2, 500),\n    input: ruf-typography-level( inherit, 1.125, 400),\n    dialog-title: ruf-typography-level( 18px, 1.125, 400),\n    expansion-panel : ruf-typography-level(15px, 20px, 700),\n    tab-label : ruf-typography-level($font-size: 0.875rem)\n);\n\nwhere $ruf-font-family: arial, helvetica, sans-serif !default;\n\n```\n\n\nFor applying typography feature, you need to call\n\n```scss\n@include ruf-material-theme($theme, $typography-config)\n//where $typography-config is a optional parameter.\n\n```\n\n\nFor applying default configuration\n\n```scss\n@include ruf-material-theme($theme)\n\n```\n\nIn order to customized the default RUF/Material typography configuration,\n\n```scss\n$demo-custom-typography: (\n  font-family : 'Roboto, monospace',\n  button: ruf-typography-level(14px, 34px, 500)\n);\n\n@include ruf-material-theme($theme, $demo-custom-typography)\n```\n\nThe custom configuration will be merged with the base configuration.\n\n\n",
  "/src/snackbar/README.md": "# Toast or Snackbar\n\nA toast or snackbar is a material component which is styled as per [FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/toast). It is a transient messaging component that appears at the bottom of the viewport. This component can be used for error handling or to provide communication to as information/changes are processed or submitted.\n\nStyling of mat snackbar is different from other material components because it's not directly added as a template (e.g. `<mat-snackbar>`). So we have used another approach where we have provided a set of classes and those classes can be used to style mat snackbar. Material gives the provision to add our own classes to snackbar using `@Input() panelClass` so, user can use classes provided by RUF as a value to this input property to style this component as per [FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/toast).\n\n## Quick links\n[Demo](https://infinitydev.sungard.com/RUF/ruf-demo/ruf/messaging/material/snack-bar) | \n[Angular Material Demo](https://material.angular.io/components/snack-bar/overview) |\n[Angular Material Github](https://github.com/angular/material2) |\n[FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/toast)\n\n## Classes provided by RUF\n\n* **fis-style**: Adds basic styling like (padding, margin, default background-color(`ruf-info`) etc.).\n* **ruf-success, ruf-info, ruf-error etc.**: Adds respective background color to snackbar container, if not provide by user then it will add `ruf-info` as a default background color.\n* **ruf-inkbar-top**: Adds top border to snackbar container.\n* **ruf-inkbar-bottom**: Adds bottom border to snackbar container.\n\n\n## Actions inside snackbar -\n\nIf any action button will be used inside snackbar template then it will also be styled as per [FIS Style Guide](https://ux.fisglobal.com/ux/menutouch.html#/toast). \n\n## Usage\n\n### Minimum configuration to style mat snackbar component- \nIt will style snackbar component and add default background-color(`ruf-info`) to snackbar container. It won't add top/bottom inkbar to snackbar, to add top/bottom inkbar user need to add `ruf-inkbar-top` / `ruf-inkbar-bottom` class to `panelClass` input.\n\n```html\n<button fisStyle mat-button (click)=\"openSnackBar()\" aria-label=\"Show an example snack-bar\">\n  Open\n</button>\n```\n\n```ts\nimport {Component} from '@angular/core';\nimport {MatSnackBar} from '@angular/material';\n\n@Component({\n  selector: 'demo-example',\n  templateUrl: 'demo-example.html',\n  styleUrls: ['demo-example.scss'],\n})\nexport class SnackBarDemoExample {\n  constructor(private snackBar: MatSnackBar) {}\n\n  openSnackBar() {\n    this.snackBar.open(' Toast/snackbar content', {\n      duration: 2000,\n      panelClass: ['fis-style'];\n    });\n  }\n}\n\n```\n\n### Configuration to add top/bottom inkbar style to mat snackbar component- \nIt will style snackbar component and add `ruf-success` background-color and bottom inkbar to snackbar container.\n\n```html\n<button fisStyle mat-button (click)=\"openSnackBar()\" aria-label=\"Show an example snack-bar\">\n  Open\n</button>\n```\n\n```ts\nimport {Component} from '@angular/core';\nimport {MatSnackBar} from '@angular/material';\n\n@Component({\n  selector: 'demo-example',\n  templateUrl: 'demo-example.html',\n  styleUrls: ['demo-example.scss'],\n})\nexport class SnackBarDemoExample {\n  constructor(private snackBar: MatSnackBar) {}\n\n  openSnackBar() {\n    this.snackBar.open(' Toast/snackbar content', {\n      duration: 2000,\n      panelClass: ['fis-style', 'ruf-success', 'ruf-inkbar-bottom'];\n    });\n  }\n}\n\n```\n"
 }
}