@import '~@ruf/theming/styles/_core.variables';

// Define a mixin that outputs the structural styles for the component.
@mixin ruf-mat-button($cls: '[fisStyle]', $config: ()) {

  $border-radius: ruf-map-get($config, border-radius, ruf-to-rem(3px));
  $line-height: ruf-map-get($config, line-height, 1.2);
  $fixed-width: ruf-map-get($config, fixed-width, ruf-to-rem(164px) );
  $padding-vertical: ruf-map-get($config, padding-vertical, ruf-to-rem(8px));
  $padding-horizontal: ruf-map-get($config, padding-horizontal, ruf-to-rem(15px));
  $text-transform: ruf-map-get($config, text-transform, none);

  .mat-button#{$cls}, .mat-raised-button#{$cls} {
    border: ruf-to-rem(1px) solid;
    border-radius: $border-radius;
    line-height:  $line-height;
    padding: $padding-vertical $padding-horizontal;
    text-transform: $text-transform;
    transition: background-color 0.3s ease-out;

    &[fixedWidth] {
      overflow: hidden;
      text-overflow: ellipsis;
      width: $fixed-width;
    }

    .mat-ripple {
      display: none;
    }
  }

  a.mat-button#{$cls}, a.mat-raised-button#{$cls}, a.mat-flat-button#{$cls} {
    border-width: ruf-to-rem(1px);

    &[fixedWidth] {
      overflow: hidden;
      text-overflow: ellipsis;
      width: $fixed-width;
    }
  }

  .mat-icon-button#{$cls} {
    height: auto;
    line-height: normal;
    padding: ruf-to-rem(8px) ruf-to-rem(10px);
    width: auto;
    .mat-icon {
      height: auto;
      line-height: normal;
      width: auto;
    }

    &.mat-error {
      /*
        material adds "display: block" css property in mat-error class
        and material does not have any error palette for button as of now.
        and we are using error color for icons so, overriding this property over here.
      */
      display: inline;
    }
  }

  .mat-stroked-button#{$cls}, .mat-flat-button#{$cls} {
    border-radius: $border-radius;
    line-height:  $line-height;
    padding: $padding-vertical $padding-horizontal;
    text-transform: $text-transform;
    &[fixedWidth] {
      overflow: hidden;
      text-overflow: ellipsis;
      width: $fixed-width;
    }
  }

}
