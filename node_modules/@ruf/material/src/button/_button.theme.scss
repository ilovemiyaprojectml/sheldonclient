// Import all the tools needed to customize the theme and extract parts of it
// Define a mixin that accepts a theme and outputs the color styles for the component.
@mixin ruf-mat-button-theme($theme, $cls: '[fisStyle]') {

  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $emphasis: map-get($theme, emphasis);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

   $theme-colors: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    emphasis: $emphasis,
    success: $background,
    error: $background,
    info: $background
  );

  .mat-button#{$cls}, .mat-raised-button#{$cls}, .mat-flat-button#{$cls} {
    background-color: ruf-color($background, raised-button);
    border-color: ruf-color($primary);
    box-shadow: none;
    color: ruf-color($primary);

    &.cdk-mouse-focused {
      outline: 0;
    }

    &:not([disabled]).cdk-keyboard-focused, &:not([disabled]).cdk-program-focused {
      background-color: ruf-color($primary);
      border-color: ruf-color($accent);
      box-shadow: 0 0 5px 0 ruf-color($accent);
      color: ruf-color($primary, default-contrast);
    }

    &:not([disabled]):hover, &:not([disabled]):active {
      background-color: ruf-color($primary);
      border-color: ruf-color($primary);
      color: ruf-color($primary, default-contrast);
    }

    &[disabled] {
      background-color: ruf-color($background, raised-button);
      border-color: ruf-color($primary, 0.5);
      color: ruf-color($primary, 0.5);
    }

    .mat-button-focus-overlay {
      display: none;
    }

    &.mat-primary {
      background-color: ruf-color($primary);
      border-color: ruf-color($primary);
      box-shadow: none;
      color: ruf-color($primary, default-contrast);

      &:not([disabled]).cdk-keyboard-focused,  &:not([disabled]).cdk-program-focused {
        background-color: ruf-color($primary, 700);
        border-color: ruf-color($accent);
        box-shadow: 0 0 5px 0 ruf-color($accent);
      }

      &:not([disabled]):hover, &:not([disabled]):active {
        background-color: ruf-color($primary, 700);
        border-color: ruf-color($primary, 700);
      }

      &[disabled] {
        background-color: ruf-color($primary, 0.5);
        border-color: transparent;
        color: ruf-color($primary, default-contrast, 0.5);
      }
    }

    &.mat-emphasis {
      background-color: ruf-color($emphasis);
      border-color: ruf-color($emphasis);
      box-shadow: none;
      color: ruf-color($emphasis, default-contrast);

      &:not([disabled]).cdk-keyboard-focused, &:not([disabled]).cdk-program-focused {
        background-color: ruf-color($emphasis, 700);
        border-color: ruf-color($accent);
        box-shadow: 0 0 5px 0 ruf-color($accent);
      }

      &:not([disabled]):hover, &:not([disabled]):active {
        background-color: ruf-color($emphasis, 700);
        border-color: ruf-color($emphasis, 700);
      }

      &[disabled] {
        background-color: ruf-color($emphasis, 0.5);
        border-color: transparent;
        color: ruf-color($emphasis, default-contrast, 0.5);
      }
    }

    &.mat-accent {
      background-color: ruf-color($accent);
      border-color: ruf-color($accent);
      box-shadow: none;
      color: ruf-color($accent, default-contrast);

      &:not([disabled]).cdk-keyboard-focused, &:not([disabled]).cdk-program-focused {
        background-color: ruf-color($accent, 300);
        border-color: ruf-color($accent);
        box-shadow: 0 0 5px 0 ruf-color($accent);
        color: ruf-color($accent, default-contrast);
      }

      &:not([disabled]):hover, &:not([disabled]):active {
        background-color: ruf-color($accent, 300);
        border-color: ruf-color($accent, 300);
        color: ruf-color($accent, default-contrast);
      }

      &[disabled] {
        background-color: ruf-color($accent, 0.5);
        border-color: transparent;
        color: ruf-color($accent, default-contrast, 0.5);
      }
    }

    &.mat-secondary {
      background-color: transparent;
      border-color: ruf-color($background, selected-button);
      box-shadow: none;
      color: ruf-color($foreground, text);

      &:not([disabled]).cdk-keyboard-focused, &:not([disabled]).cdk-program-focused {
        background-color: ruf-color($background, selected-button);
        border-color: ruf-color($accent);
        box-shadow: 0 0 5px 0 ruf-color($accent);
      }

      &:not([disabled]):hover, &:not([disabled]):active {
        background-color: ruf-color($background, selected-button);
        border-color: ruf-color($background, selected-button);
        color: ruf-color($background, background);
      }

      &[disabled] {
        background-color: transparent;
        border-color: ruf-color($background, disabled-button);
        color: ruf-color($foreground, text, 0.5);
      }
    }
  }

  a.mat-button#{$cls}, a.mat-raised-button#{$cls}, a.mat-flat-button#{$cls} {
    background-color: transparent;
    border-color: transparent;
    color: ruf-color($foreground, link);

    &.mat-primary:not([disabled]):hover,
    &.mat-emphasis:not([disabled]):hover,
    &.mat-secondary:not([disabled]):hover,
    &:not([disabled]):hover {
      background-color: transparent;
      border-color: transparent;
      color: ruf-color($foreground, link);
      text-decoration: underline;
    }

    &.mat-primary, &.mat-emphasis, &.mat-secondary, &[disabled] {
      background-color: transparent;
      border-color: transparent;
      color: ruf-color($foreground, link);

      &[disabled] {
        background-color: transparent;
        border-color: transparent;
        color: ruf-color($foreground, link, 0.5);
      }
    }

    &.cdk-keyboard-focused {
      outline: 0;
    }

    &:not([disabled]).cdk-focused.cdk-focused {
      background-color: transparent;
      border-color: transparent;
      color: ruf-color($foreground, link);
      text-decoration: underline;
    }
  }

  .mat-icon-button#{$cls} {
     .mat-button-focus-overlay  {
        background-color: transparent;
     }

     // default color
     &:not([disabled]):hover, &:not([disabled]).cdk-keyboard-focused, &:not([disabled]).cdk-program-focused {
       background-color:  ruf-color($background, halo);
     }

     &[disabled] {
       opacity: 0.5;
     }

     @include _ruf-mat-icon-button-theme($theme-colors);
  }

  .mat-stroked-button#{$cls} {

    @each $name, $color in $theme-colors {
      @if $name == 'primary' or $name == 'accent' or $name == 'warn' {
        &.mat-#{$name} {
          border-color: ruf-color($color);
          color: ruf-color($color);
          &[disabled] {
            border-color: ruf-color($color, 0.5);
            color: ruf-color($color, 0.5);
          }
        }
      }
    }
  }

  .mat-fab#{$cls}, .mat-mini-fab#{$cls} {

    @each $name, $color in $theme-colors {
      @if $name == 'primary' or $name == 'accent' or $name == 'warn' {
        &.mat-#{$name} {
          &[disabled] {
            background-color: ruf-color($color, 0.5);
            color: ruf-color($color, default-contrast, 0.5);
          }
        }
      }
    }
  }
}

// sass-lint:disable-block no-empty-rulesets
@mixin ruf-mat-button-typography($config, $cls: '[fisStyle]') {

}


@mixin _ruf-mat-icon-button-theme($theme-colors) {
  @each $name, $color in $theme-colors {
    &:not([disabled]).mat-#{$name}:hover,
    &:not([disabled]).mat-#{$name}:focus {
      @if $name == 'success' or $name == 'error' or $name == 'info' {
         background-color:  ruf-color($color, $name, opacity(ruf-color($color, halo)));
      } @else {
        background-color:  ruf-color($color, default, 0.209);
      }
    }
    @if $name == 'primary' or $name == 'accent' or $name == 'warn' {
      &.mat-#{$name} {
        &[disabled] {
          color: ruf-color($color, 0.5);
        }
      }
    }
  }
}



