@mixin _ruf-mat-pseudo-checkbox-inner-content-theme($theme, $pallete-name) {
  $pallete: map-get($theme, $pallete-name);
  $color: ruf-color($pallete);

  .mat-#{$pallete-name} .mat-pseudo-checkbox-checked,
  .mat-#{$pallete-name} .mat-pseudo-checkbox-indeterminate {
    background: $color !important;
  }
}

@mixin ruf-mat-pseudo-checkbox-theme($theme, $cls: '[fisStyle]') {
  $is-dark-theme: map-get($theme, is-dark);
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);

  .mat-option-multiple#{$cls} {

    // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,
    // this does not work well with elements layered on top of one another. To get around this we
    // blend the colors together based on the base color and the theme background.
    $white-30pct-opacity-on-dark: #686868;
    $black-26pct-opacity-on-light: #b0b0b0;
    $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);
    $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';

    .mat-pseudo-checkbox-checked,
    .mat-pseudo-checkbox-indeterminate {
      background: ruf-color($accent);
    }

    .mat-pseudo-checkbox {
        color: ruf-color(map-get($theme, foreground), secondary-text);

        &::after {
        color: ruf-color($background, background);
        }
    }

    .mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate {
        &.mat-pseudo-checkbox-disabled {
        background: $disabled-color;
        }
    }
  }
  @include _ruf-mat-pseudo-checkbox-inner-content-theme($theme, primary);
  @include _ruf-mat-pseudo-checkbox-inner-content-theme($theme, accent);
  @include _ruf-mat-pseudo-checkbox-inner-content-theme($theme, warn);
}


@mixin ruf-mat-pseudo-checkbox-typography($config, $cls: '[fisStyle]') {
  // sass-lint:disable-block no-empty-rulesets
}
