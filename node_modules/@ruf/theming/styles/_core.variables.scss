@import 'mediaqueries';

// transforms a pixel input into rems.
@function ruf-to-rem($size) {
  // using base of 16px since we don't want to adjust if the $ruf-base-font-size is changed
  // if we were using $ruf-base-font-size here, we would lose the purpose of using rems and might as well just use pixels
  $rem-size: $size / 16px;
  @return #{$rem-size}rem;
}

/* define default theme. Can be overridden. */
$theme: ruf-light-theme() !default;

/* root font size for rem */
$ruf-root-font-size: 16px !default;

/* base font size for RUF */
$ruf-base-font-size: ruf-to-rem(14px) !default;

/* the only font-family you should need */
$ruf-font-family: Roboto, Arial, sans-serif !default;

// vertical factor, in rem
$ruf-vunit: 1 !default;

// horizontal factor, in rem
$ruf-hunit: 1 !default;

// global
$ruf-global-padding-horizontal: ruf-to-rem(10px) !default;

// keep this at the end
@if mixin-exists(ruf-override-core-variables) {
  @include ruf-override-core-variables();
}


@function ruf-map-get($map, $val, $default: ()) {
  @if map-has-key($map, $val) {
    @return map-get($map, $val);
  } @else {
    @return $default;
  }
}

@function recursive-map-merge($map1, $map2, $config: () ) {
  @if (type-of($map1) == map or (type-of($map1) == list and length($map1) == 0)) and (type-of($map2) == map or (type-of($map2) == list and length($map2) == 0)) {
    $result: $map1;
    @each $key, $value in $map2 {
      @if (type-of(map-get($result, $key)) == map and type-of($value) == map) {
        $result: map-merge($result, ($key: recursive-map-merge(map-get($result, $key), $value)));
      } @else if (map-get($config, 'merge-lists') and type-of(map-get($result, $key)) == list and type-of($value) == list) {
        $result: map-merge($result, ($key: join(map-get($result, $key), $value)));
      } @else {
        $result: map-merge($result, ($key: $value));
      }
    }
    @return $result;
  } @else {
    @return null;
  }
}
