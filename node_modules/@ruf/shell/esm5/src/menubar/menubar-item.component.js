import * as tslib_1 from "tslib";
import { RufMenubarComponent } from './menubar.component';
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding, HostListener, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
var RufMenubarItemComponent = /** @class */ (function () {
    // this can probably only be achieved in nav-menubar
    // @HostBinding('attr.aria-haspopup') hasPopup = true;
    function RufMenubarItemComponent(menubar, _elementRef) {
        this.menubar = menubar;
        this._elementRef = _elementRef;
        this.unsubscribe = new Subject();
        this.selectable = true;
        this.menuitem = true;
        this.role = 'menuitem';
        this.tabindex = -1;
        this.active = false;
    }
    RufMenubarItemComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.menubar.selectedPath$.pipe(takeUntil(this.unsubscribe), distinctUntilChanged())
            .subscribe(function (path) {
            _this.active = _this.matches(path);
            setTimeout(function () {
                _this.tabindex = _this.active ? 0 : -1;
                _this.menubar.setActiveItem(path);
            });
        });
        this.menubar.activatedPath$.pipe(takeUntil(this.unsubscribe), distinctUntilChanged())
            .subscribe(function (path) {
            var match = _this.matches(path);
            setTimeout(function () { return _this.tabindex = match ? 0 : -1; });
        });
    };
    RufMenubarItemComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    };
    RufMenubarItemComponent.prototype.onClick = function (event) {
        if (!event.cancelBubble) {
            if (this.selectable) {
                this.menubar.select(this.path, this.data, event);
            }
            else {
                // still change activated state since user clicked on the item
                this.menubar.activate(this.path);
            }
        }
    };
    RufMenubarItemComponent.prototype.focus = function () {
        if (this._elementRef) {
            this._elementRef.nativeElement.focus();
        }
    };
    RufMenubarItemComponent.prototype.matches = function (selectedPath) {
        if (selectedPath && this.path) {
            var pattern = new RegExp('^((\/)?' + this.path + ')(\/.*)?$'); // use word boundary to exact match
            if (selectedPath === this.path || pattern.test(selectedPath)) { // match with current menuitem and with parent menuitem
                return true;
            }
        }
        return false;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], RufMenubarItemComponent.prototype, "path", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMenubarItemComponent.prototype, "data", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMenubarItemComponent.prototype, "selectable", void 0);
    tslib_1.__decorate([
        HostBinding('class.ruf-menu-item'),
        tslib_1.__metadata("design:type", Object)
    ], RufMenubarItemComponent.prototype, "menuitem", void 0);
    tslib_1.__decorate([
        HostBinding('attr.role'),
        tslib_1.__metadata("design:type", Object)
    ], RufMenubarItemComponent.prototype, "role", void 0);
    tslib_1.__decorate([
        HostBinding('attr.tabindex'),
        tslib_1.__metadata("design:type", Object)
    ], RufMenubarItemComponent.prototype, "tabindex", void 0);
    tslib_1.__decorate([
        HostBinding('class.ruf-menubar-item-active'),
        tslib_1.__metadata("design:type", Object)
    ], RufMenubarItemComponent.prototype, "active", void 0);
    tslib_1.__decorate([
        HostListener('click', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RufMenubarItemComponent.prototype, "onClick", null);
    RufMenubarItemComponent = tslib_1.__decorate([
        Component({
            selector: 'ruf-menubar-item, [rufMenubarItem]',
            template: "\n      <ng-content></ng-content>\n  ",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [RufMenubarComponent, ElementRef])
    ], RufMenubarItemComponent);
    return RufMenubarItemComponent;
}());
export { RufMenubarItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudWJhci1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvbWVudWJhci9tZW51YmFyLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsS0FBSyxFQUdMLFdBQVcsRUFDWCxZQUFZLEVBQ1osVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBZWpFO0lBc0NFLG9EQUFvRDtJQUNwRCxzREFBc0Q7SUFFdEQsaUNBQXNCLE9BQTRCLEVBQVksV0FBd0I7UUFBaEUsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFBWSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQXhDOUUsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBSTNCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFFUyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQzFCLFNBQUksR0FBRyxVQUFVLENBQUM7UUFDZCxhQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDRSxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBK0I0QixDQUFDO0lBN0IxRixvREFBa0IsR0FBbEI7UUFBQSxpQkFtQkM7UUFsQkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM3QixTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUMzQixvQkFBb0IsRUFBRSxDQUFDO2FBQ3RCLFNBQVMsQ0FBRSxVQUFDLElBQUk7WUFDZixLQUFJLENBQUMsTUFBTSxHQUFJLEtBQUksQ0FBQyxPQUFPLENB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QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7aURBMEMrQixtQkFBbUIsRUFBMEIsVUFBVTtPQXpDM0UsdUJBQXVCLENBc0VuQztJQUFELDhCQUFDO0NBQUEsQUF0RUQsSUFzRUM7U0F0RVksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnVmTWVudWJhckNvbXBvbmVudCB9IGZyb20gJy4vbWVudWJhci5jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIElucHV0LFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBPbkRlc3Ryb3ksXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIEVsZW1lbnRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb2N1c2FibGVPcHRpb24gfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7IC8vIEZvY3VzYWJsZSBpbnRlcmZhY2UgcmVuYW1lZCB0byBGb2N1c2FibGVPcHRpb24gaW4gQGFuZ3VsYXIvY2RrIGJldGEtMTBcbmltcG9ydCB7IFJ1ZkJhc2VJdGVtIH0gZnJvbSAnLi4vY29tbW9uL2Jhc2UtaXRlbSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJ1Zk1lbnViYXJJdGVtIGV4dGVuZHMgUnVmQmFzZUl0ZW0ge1xuICBkYXRhPzogYW55O1xuICBldmVudD86IGFueTtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncnVmLW1lbnViYXItaXRlbSwgW3J1Zk1lbnViYXJJdGVtXScsXG4gIHRlbXBsYXRlOiBgXG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFJ1Zk1lbnViYXJJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgUnVmTWVudWJhckl0ZW0sIEZvY3VzYWJsZU9wdGlvbiwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSB1bnN1YnNjcmliZSA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgQElucHV0KCkgcGF0aDogc3RyaW5nO1xuICBASW5wdXQoKSBkYXRhOiBhbnk7XG4gIEBJbnB1dCgpIHNlbGVjdGFibGUgPSB0cnVlO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MucnVmLW1lbnUtaXRlbScpIG1lbnVpdGVtID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKSByb2xlID0gJ21lbnVpdGVtJztcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnRhYmluZGV4JykgdGFiaW5kZXggPSAtMTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ydWYtbWVudWJhci1pdGVtLWFjdGl2ZScpIGFjdGl2ZSA9IGZhbHNlO1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLm1lbnViYXIuc2VsZWN0ZWRQYXRoJC5waXBlKFxuICAgICAgdGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSlcbiAgICAgIC5zdWJzY3JpYmUoIChwYXRoKSAgPT4ge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9ICB0aGlzLm1hdGNoZXMocGF0aCkgO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnRhYmluZGV4ID0gdGhpcy5hY3RpdmUgPyAwIDogLTE7XG4gICAgICAgICAgdGhpcy5tZW51YmFyLnNldEFjdGl2ZUl0ZW0ocGF0aCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLm1lbnViYXIuYWN0aXZhdGVkUGF0aCQucGlwZShcbiAgICAgIHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpXG4gICAgICAuc3Vic2NyaWJlKCAocGF0aCkgID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLm1hdGNoZXMocGF0aCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy50YWJpbmRleCA9IG1hdGNoID8gMCA6IC0xKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZS5uZXh0KCk7XG4gICAgdGhpcy51bnN1YnNjcmliZS5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLy8gdGhpcyBjYW4gcHJvYmFibHkgb25seSBiZSBhY2hpZXZlZCBpbiBuYXYtbWVudWJhclxuICAvLyBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1oYXNwb3B1cCcpIGhhc1BvcHVwID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbWVudWJhcjogUnVmTWVudWJhckNvbXBvbmVudCwgcHJvdGVjdGVkIF9lbGVtZW50UmVmPzogRWxlbWVudFJlZikge31cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pIG9uQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LmNhbmNlbEJ1YmJsZSkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0YWJsZSkge1xuICAgICAgICB0aGlzLm1lbnViYXIuc2VsZWN0KHRoaXMucGF0aCwgdGhpcy5kYXRhLCBldmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdGlsbCBjaGFuZ2UgYWN0aXZhdGVkIHN0YXRlIHNpbmNlIHVzZXIgY2xpY2tlZCBvbiB0aGUgaXRlbVxuICAgICAgICB0aGlzLm1lbnViYXIuYWN0aXZhdGUodGhpcy5wYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudFJlZikge1xuICAgICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgbWF0Y2hlcyhzZWxlY3RlZFBhdGgpIHtcbiAgICBpZiAoc2VsZWN0ZWRQYXRoICYmIHRoaXMucGF0aCkge1xuICAgICAgY29uc3QgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ14oKFxcLyk/JyArIHRoaXMucGF0aCArICcpKFxcLy4qKT8kJyk7ICAvLyB1c2Ugd29yZCBib3VuZGFyeSB0byBleGFjdCBtYXRjaFxuICAgICAgaWYgKHNlbGVjdGVkUGF0aCA9PT0gdGhpcy5wYXRoIHx8IHBhdHRlcm4udGVzdChzZWxlY3RlZFBhdGgpKSB7IC8vIG1hdGNoIHdpdGggY3VycmVudCBtZW51aXRlbSBhbmQgd2l0aCBwYXJlbnQgbWVudWl0ZW1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG59XG4iXX0=