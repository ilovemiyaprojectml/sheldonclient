import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, ChangeDetectorRef, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { RufShellIntl } from '../utils/shell-intl';
var RufSidePanelComponent = /** @class */ (function () {
    function RufSidePanelComponent(_intl, changeDetectorRef) {
        this._intl = _intl;
        this.changeDetectorRef = changeDetectorRef;
        /* tslint:disable:no-input-rename */
        this.isPinned = false;
        this.togglePin = new EventEmitter();
        this._intlChanges = _intl.changes.subscribe(function () {
            changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(RufSidePanelComponent.prototype, "pinLabel", {
        get: function () {
            return this._pinLabel || this._intl.sidepanel.aria.pinLabel;
        },
        set: function (value) {
            this._pinLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RufSidePanelComponent.prototype, "unpinLabel", {
        get: function () {
            return this._unpinLabel || this._intl.sidepanel.aria.unpinLabel;
        },
        set: function (value) {
            this._unpinLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RufSidePanelComponent.prototype, "toggleLabel", {
        get: function () {
            return this.isPinned ? this.unpinLabel : this.pinLabel;
        },
        enumerable: true,
        configurable: true
    });
    RufSidePanelComponent.prototype.onPintoggle = function ($event) {
        this.isPinned = !this.isPinned;
        this.togglePin.emit({ 'pinned': this.isPinned });
    };
    RufSidePanelComponent.prototype.ngOnDestroy = function () {
        this._intlChanges.unsubscribe();
    };
    tslib_1.__decorate([
        Input('pinned'),
        tslib_1.__metadata("design:type", Object)
    ], RufSidePanelComponent.prototype, "isPinned", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], RufSidePanelComponent.prototype, "togglePin", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], RufSidePanelComponent.prototype, "pinLabel", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], RufSidePanelComponent.prototype, "unpinLabel", null);
    RufSidePanelComponent = tslib_1.__decorate([
        Component({
            selector: 'ruf-side-panel',
            template: "<div rufId class=\"ruf-side-panel-container\">\n  <button type=\"button\"\n          rufId=\"ruf_toggle_pin\"\n          class=\"ruf-side-panel-pin\"\n          mat-icon-button\n          fisStyle\n          [attr.aria-label]=\"toggleLabel\"\n          (click)=\"onPintoggle($event)\">\n      <mat-icon rufIconStyle=\"lg\" rufId=\"pin_icon\"\n              [fisIcon]=\"isPinned ? 'pin-remove': 'pin'\">\n      </mat-icon>\n  </button>\n  <ng-content></ng-content>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["ruf-side-panel .ruf-side-panel-container{border-style:solid;border-width:.0625rem;bottom:0;box-sizing:border-box;height:100%;max-width:25rem;min-width:18.75rem;overflow:auto;position:relative;top:0;width:100%}ruf-side-panel .ruf-side-panel-pin{float:right;margin:.3125rem}"]
        }),
        tslib_1.__metadata("design:paramtypes", [RufShellIntl,
            ChangeDetectorRef])
    ], RufSidePanelComponent);
    return RufSidePanelComponent;
}());
export { RufSidePanelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZS1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL3NpZGUtcGFuZWwvc2lkZS1wYW5lbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBRWIsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBVW5EO0lBOEJFLCtCQUFxQixLQUFtQixFQUNuQixpQkFBb0M7UUFEcEMsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBekJ6RCxvQ0FBb0M7UUFDbkIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUN4QixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQXlCbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUM1QyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7SUF6QkYsc0JBQUksMkNBQVE7YUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzlELENBQUM7YUFDRCxVQUFhLEtBQWE7WUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQzs7O09BSEE7SUFNRCxzQkFBSSw2Q0FBVTthQUFkO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbEUsQ0FBQzthQUNELFVBQWUsS0FBYTtZQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMzQixDQUFDOzs7T0FIQTtJQUtELHNCQUFJLDhDQUFXO2FBQWY7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDekQsQ0FBQzs7O09BQUE7SUFVRiwyQ0FBVyxHQUFYLFVBQVksTUFBTTtRQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUEsMkNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQXRDZ0I7UUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7MkRBQWtCO0lBQ3hCO1FBQVQsTUFBTSxFQUFFOzs0REFBZ0M7SUFHekM7UUFEQyxLQUFLLEVBQUU7Ozt5REFHUDtJQU1EO1FBREMsS0FBSyxFQUFFOzs7MkRBR1A7SUFyQlUscUJBQXFCO1FBUmpDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxnQkFBZ0I7WUFFMUIscWVBQTBDO1lBQzFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNoRCxDQUFDO2lEQWdDNEIsWUFBWTtZQUNBLGlCQUFpQjtPQS9COUMscUJBQXFCLENBOENqQztJQUFELDRCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0E5Q1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSdWZTaGVsbEludGwgfSBmcm9tICcuLi91dGlscy9zaGVsbC1pbnRsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncnVmLXNpZGUtcGFuZWwnLFxuICBzdHlsZVVybHM6IFsnLi9zaWRlLXBhbmVsLmNvbXBvbmVudC5zY3NzJ10sXG4gIHRlbXBsYXRlVXJsOiAnLi9zaWRlLXBhbmVsLmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuXG5leHBvcnQgY2xhc3MgUnVmU2lkZVBhbmVsQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBwcml2YXRlIF9pbnRsQ2hhbmdlczogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIF9waW5MYWJlbDogc3RyaW5nO1xuICBwcml2YXRlIF91bnBpbkxhYmVsOiBzdHJpbmc7XG5cbiAgLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICovXG4gIEBJbnB1dCgncGlubmVkJykgaXNQaW5uZWQgPSBmYWxzZTtcbiAgQE91dHB1dCgpIHRvZ2dsZVBpbiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASW5wdXQoKVxuICBnZXQgcGluTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BpbkxhYmVsIHx8IHRoaXMuX2ludGwuc2lkZXBhbmVsLmFyaWEucGluTGFiZWw7XG4gIH1cbiAgc2V0IHBpbkxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9waW5MYWJlbCA9IHZhbHVlO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IHVucGluTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VucGluTGFiZWwgfHwgdGhpcy5faW50bC5zaWRlcGFuZWwuYXJpYS51bnBpbkxhYmVsO1xuICB9XG4gIHNldCB1bnBpbkxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl91bnBpbkxhYmVsID0gdmFsdWU7XG4gIH1cblxuICBnZXQgdG9nZ2xlTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNQaW5uZWQgPyB0aGlzLnVucGluTGFiZWwgOiB0aGlzLnBpbkxhYmVsO1xuICB9XG5cbiAgY29uc3RydWN0b3IoIHByaXZhdGUgX2ludGw6IFJ1ZlNoZWxsSW50bCxcbiAgICAgICAgICAgICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgdGhpcy5faW50bENoYW5nZXMgPSBfaW50bC5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICBjaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICAgfVxuXG4gb25QaW50b2dnbGUoJGV2ZW50KSB7XG4gICB0aGlzLmlzUGlubmVkID0gIXRoaXMuaXNQaW5uZWQ7XG4gICB0aGlzLnRvZ2dsZVBpbi5lbWl0KHsncGlubmVkJzogdGhpcy5pc1Bpbm5lZH0pO1xuIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9pbnRsQ2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=