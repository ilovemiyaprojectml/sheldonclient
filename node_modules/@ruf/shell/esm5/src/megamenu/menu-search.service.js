import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
// the object we reduce into during search preparation
var RufCart = /** @class */ (function () {
    function RufCart() {
    }
    return RufCart;
}());
export { RufCart };
var RufSearchService = /** @class */ (function () {
    function RufSearchService() {
        this.SPLITTER = String.fromCharCode(167);
    }
    RufSearchService.prototype.recursiveReduce = function (items, context) {
        var _this = this;
        return items.reduce(function (cart, item) {
            if (item.children && item.children.length > 0) {
                // this is a parent
                var newContext = context.concat([item.label]);
                var childCart = _this.recursiveReduce(item.children, newContext);
                // we need to add a parent object with this objects children
                var parent_1 = {
                    label: item.label,
                    path: item.path,
                    context: context.join(', '),
                    children: childCart.children,
                    searchKey: childCart.searchKeys.join(_this.SPLITTER) // only searchkeys of non-parent nodes
                };
                // only add this parent, if it has children
                if (childCart.children && childCart.children.length > 0) {
                    cart.parents.push(parent_1);
                }
                // we get the parent nodes from the children of this item and only pass these up
                cart.parents = cart.parents.concat(childCart.parents); // the reduced items are basically pushed up to the highest level
                // we also append the childcart keys to the parent (for searching purposes)
                // This isn't necessary anymore as we only have one level cart.searchKeys = cart.searchKeys.concat(childCart.searchKeys);
            }
            else {
                // this is a child, so we add it to this carts children
                item.searchKey = item.label.toLowerCase(); // we make the search key lowercase here for all children
                cart.children.push(item);
                cart.searchKeys.push(item.searchKey);
            }
            return cart;
        }, {
            // start with an empty cart
            parents: [],
            children: [],
            searchKeys: []
        });
    };
    // prepares the search items
    RufSearchService.prototype.prepareSearch = function (items) {
        var _this = this;
        // the goal is to recursively parse the tree structure for parents of children
        // children are nodes with no children, parents are nodes with children
        var preparedItems = this.recursiveReduce(items, []);
        // we return a function here that performs the search on the prepared items
        return function (term) {
            return _this.performSearch(preparedItems.parents, term);
        };
    };
    // used to create a reduced version of what gets displayed, and also
    // detaches from the original object
    RufSearchService.prototype.copySearchItem = function (item, newChildren) {
        return {
            label: item.label,
            path: item.path,
            context: item.context,
            children: newChildren
        };
    };
    // The search assumes that there each item in the array only has one level of children
    // this explicit structure is created in the prepare search
    RufSearchService.prototype.performSearch = function (items, term) {
        var _this = this;
        var searchTerm = term.toLowerCase(); // lowercase search term vs lowercase search key
        // call the reduce to omit non matching items
        return items.reduce(
        // newItems is the returned value from the prev function call
        function (newItems, item) {
            // first we check if the parent item will be added (checking this here prevents unnecessary looping)
            if (item.searchKey && item.searchKey.indexOf(searchTerm) > -1) {
                // filter the children
                // (we know there are children as the searchkey collates only child keys)
                var reducedChildren = item.children.filter(function (child) {
                    return child.searchKey.indexOf(searchTerm) > -1;
                });
                // there will always be atleast one child that matches
                // (as have already we checked the collated search key)
                newItems.push(_this.copySearchItem(item, reducedChildren));
            }
            return newItems;
        }, [] // initial empty array
        );
    };
    RufSearchService = tslib_1.__decorate([
        Injectable()
    ], RufSearchService);
    return RufSearchService;
}());
export { RufSearchService };
//# sourceMappingURL=data:application/json;base64,