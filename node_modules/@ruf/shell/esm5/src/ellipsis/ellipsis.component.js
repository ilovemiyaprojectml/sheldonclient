import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { RufShellIntl } from '../utils/shell-intl';
import { BehaviorSubject } from 'rxjs';
var RufEllipsisComponent = /** @class */ (function () {
    function RufEllipsisComponent(_intl, changeDetectorRef) {
        var _this = this;
        this._intl = _intl;
        this.changeDetectorRef = changeDetectorRef;
        this.showReadMore$ = new BehaviorSubject(false);
        this.lines = 5;
        this.lineHeight = 1;
        this.expand = new EventEmitter();
        this._intlChanges = _intl.changes.subscribe(function () { return _this.changeDetectorRef.markForCheck(); });
    }
    Object.defineProperty(RufEllipsisComponent.prototype, "label", {
        get: function () {
            return this._label || this._intl.ellipsis.label || '...';
        },
        set: function (value) {
            this._label = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RufEllipsisComponent.prototype, "ariaLabel", {
        get: function () {
            return this._ariaLabel || this._intl.ellipsis.aria.label;
        },
        set: function (value) {
            this._ariaLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    RufEllipsisComponent.prototype.checkReadMore = function () {
        if (this.text && this.ellipsisContainer.nativeElement.offsetHeight < this.ellipsisContainer.nativeElement.scrollHeight) {
            this.showReadMore$.next(true);
        }
        else {
            this.showReadMore$.next(false);
        }
    };
    RufEllipsisComponent.prototype.ngAfterViewChecked = function () {
        this.checkReadMore();
        this.changeDetectorRef.detectChanges();
    };
    RufEllipsisComponent.prototype.ngOnDestroy = function () {
        this._intlChanges.unsubscribe();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], RufEllipsisComponent.prototype, "text", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufEllipsisComponent.prototype, "lines", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufEllipsisComponent.prototype, "lineHeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], RufEllipsisComponent.prototype, "label", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], RufEllipsisComponent.prototype, "ariaLabel", null);
    tslib_1.__decorate([
        ViewChild('ellipsisContainer', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], RufEllipsisComponent.prototype, "ellipsisContainer", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], RufEllipsisComponent.prototype, "expand", void 0);
    RufEllipsisComponent = tslib_1.__decorate([
        Component({
            selector: 'ruf-ellipsis',
            template: "<div  #ellipsisContainer [class]=\"'ellipsis-container'\" [style.maxHeight.rem]=\"lines * lineHeight\" [style.lineHeight.rem]=\"lineHeight\">\n  <div  class=\"ellipsis-wrapper\" >\n    <div class=\"ellipsis-content\" [innerHTML]=\"text\">\n    </div>\n  </div>\n  <span *ngIf=\"showReadMore$ | async\" [attr.aria-label]=\"ariaLabel\" class=\"ellipsis\">\n    <a (click)=\"expand.emit({'text': this.text});\" href=\"javascript:;\">{{label}}</a>\n  </span>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["ruf-ellipsis .ellipsis-container{max-height:calc(5rem);overflow:hidden;position:relative}ruf-ellipsis .ellipsis-container:before{content:'';float:left;height:100%;width:1px}ruf-ellipsis .ellipsis-wrapper{float:right;margin-left:-1px;width:100%}ruf-ellipsis .ellipsis-content{margin:0}ruf-ellipsis .ellipsis-content p{margin-bottom:1rem;margin-top:0}ruf-ellipsis .ellipsis{bottom:0;position:absolute;right:0;text-align:right;width:auto}"]
        }),
        tslib_1.__metadata("design:paramtypes", [RufShellIntl, ChangeDetectorRef])
    ], RufEllipsisComponent);
    return RufEllipsisComponent;
}());
export { RufEllipsisComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ1Zi9zaGVsbC8iLCJzb3VyY2VzIjpbInNyYy9lbGxpcHNpcy9lbGxpcHNpcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixpQkFBaUIsRUFDakIsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUdsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFnQixlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFVcEQ7SUErQkUsOEJBQW9CLEtBQW1CLEVBQVUsaUJBQW9DO1FBQXJGLGlCQUVDO1FBRm1CLFVBQUssR0FBTCxLQUFLLENBQWM7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBNUJyRixrQkFBYSxHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUVyRSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsZUFBVSxHQUFHLENBQUMsQ0FBQztRQXVCZCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUdwQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQXJDLENBQXFDLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBckJELHNCQUFJLHVDQUFLO2FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQztRQUMzRCxDQUFDO2FBQ0QsVUFBVSxLQUFhO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLENBQUM7OztPQUhBO0lBTUQsc0JBQUksMkNBQVM7YUFBYjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNELENBQUM7YUFDRCxVQUFjLEtBQWE7WUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDMUIsQ0FBQzs7O09BSEE7SUFhRCw0Q0FBYSxHQUFiO1FBQ0MsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFO1lBQ3JILElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCxpREFBa0IsR0FBbEI7UUFDRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUU7UUFDdEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCwwQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBOUNRO1FBQVIsS0FBSyxFQUFFOztzREFBYztJQUNiO1FBQVIsS0FBSyxFQUFFOzt1REFBVztJQUNWO1FBQVIsS0FBSyxFQUFFOzs0REFBZ0I7SUFNeEI7UUFEQyxLQUFLLEVBQUU7OztxREFHUDtJQU1EO1FBREMsS0FBSyxFQUFFOzs7eURBR1A7SUFLZ0Q7UUFBaEQsU0FBUyxDQUFDLG1CQUFtQixFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUFDOzBDQUFvQixVQUFVO21FQUFDO0lBRXJFO1FBQVQsTUFBTSxFQUFFOzt3REFBNkI7SUE3QjNCLG9CQUFvQjtRQVBoQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsY0FBYztZQUN4Qiw0ZEFBd0M7WUFFeEMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2hELENBQUM7aURBZ0MyQixZQUFZLEVBQTZCLGlCQUFpQjtPQS9CMUUsb0JBQW9CLENBbURoQztJQUFELDJCQUFDO0NBQUEsQUFuREQsSUFtREM7U0FuRFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgT25EZXN0cm95LFxuICBBZnRlclZpZXdDaGVja2VkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSdWZTaGVsbEludGx9IGZyb20gJy4uL3V0aWxzL3NoZWxsLWludGwnO1xuaW1wb3J0IHtTdWJzY3JpcHRpb24sICBCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3J1Zi1lbGxpcHNpcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9lbGxpcHNpcy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2VsbGlwc2lzLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBSdWZFbGxpcHNpc0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX2ludGxDaGFuZ2VzOiBTdWJzY3JpcHRpb247XG5cbiAgc2hvd1JlYWRNb3JlJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gIEBJbnB1dCgpIHRleHQ6IHN0cmluZztcbiAgQElucHV0KCkgbGluZXMgPSA1O1xuICBASW5wdXQoKSBsaW5lSGVpZ2h0ID0gMTtcbiAgcHJpdmF0ZSBfbGFiZWw6IHN0cmluZztcbiAgcHJpdmF0ZSBfYXJpYUxhYmVsOiBzdHJpbmc7XG5cblxuICBASW5wdXQoKVxuICBnZXQgbGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xhYmVsIHx8IHRoaXMuX2ludGwuZWxsaXBzaXMubGFiZWwgfHwgJy4uLic7XG4gIH1cbiAgc2V0IGxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9sYWJlbCA9IHZhbHVlO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IGFyaWFMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJpYUxhYmVsIHx8IHRoaXMuX2ludGwuZWxsaXBzaXMuYXJpYS5sYWJlbDtcbiAgfVxuICBzZXQgYXJpYUxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9hcmlhTGFiZWwgPSB2YWx1ZTtcbiAgfVxuXG4gIEBWaWV3Q2hpbGQoJ2VsbGlwc2lzQ29udGFpbmVyJywge3N0YXRpYzogZmFsc2V9KSBlbGxpcHNpc0NvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBAT3V0cHV0KCkgZXhwYW5kID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2ludGw6IFJ1ZlNoZWxsSW50bCwgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB0aGlzLl9pbnRsQ2hhbmdlcyA9IF9pbnRsLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCkpO1xuICB9XG5cbiAgY2hlY2tSZWFkTW9yZSgpIHtcbiAgIGlmICh0aGlzLnRleHQgJiYgdGhpcy5lbGxpcHNpc0NvbnRhaW5lci5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCA8IHRoaXMuZWxsaXBzaXNDb250YWluZXIubmF0aXZlRWxlbWVudC5zY3JvbGxIZWlnaHQpIHtcbiAgICAgIHRoaXMuc2hvd1JlYWRNb3JlJC5uZXh0KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3dSZWFkTW9yZSQubmV4dChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tSZWFkTW9yZSgpIDtcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2ludGxDaGFuZ2VzLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==