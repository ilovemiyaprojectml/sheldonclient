import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, HostListener, Input } from '@angular/core';
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { Subscription } from 'rxjs';
import { throwTargetMissingError } from './trigger.interface';
var RufTriggerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RufTriggerDirective, _super);
    function RufTriggerDirective(elRef, renderer) {
        var _this = _super.call(this, elRef) || this;
        _this.elRef = elRef;
        _this.renderer = renderer;
        _this.subscription = Subscription.EMPTY;
        return _this;
    }
    RufTriggerDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._checkTarget();
        if (this.target.hasPopup()) {
            this.renderer.setAttribute(this.elRef.nativeElement, 'aria-haspopup', 'true');
            this.renderer.setAttribute(this.elRef.nativeElement, 'aria-expanded', 'false');
        }
        else {
            this.renderer.removeAttribute(this.elRef.nativeElement, 'aria-haspopup');
            this.renderer.removeAttribute(this.elRef.nativeElement, 'aria-expanded');
        }
        if (this.subscription === Subscription.EMPTY) {
            this.subscription = this.target.toggle.subscribe(function (opened) {
                _this.renderer.setAttribute(_this.elRef.nativeElement, 'aria-expanded', opened ? 'true' : 'false');
                if (!opened) {
                    _this.elRef.nativeElement.focus();
                }
            });
        }
    };
    RufTriggerDirective.prototype.handleClickEvent = function (event) {
        this.target.handleClick(event);
    };
    RufTriggerDirective.prototype.handleKeydownEvent = function (event) {
        this.target.handleKeydown(event);
    };
    RufTriggerDirective.prototype._checkTarget = function () {
        if (!this.target) {
            throwTargetMissingError();
        }
    };
    RufTriggerDirective.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    tslib_1.__decorate([
        Input('rufTrigger'),
        tslib_1.__metadata("design:type", Object)
    ], RufTriggerDirective.prototype, "target", void 0);
    tslib_1.__decorate([
        HostListener('click', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RufTriggerDirective.prototype, "handleClickEvent", null);
    tslib_1.__decorate([
        HostListener('keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RufTriggerDirective.prototype, "handleKeydownEvent", null);
    RufTriggerDirective = tslib_1.__decorate([
        Directive({
            selector: '[rufTrigger]',
            exportAs: 'rufTrigger'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
    ], RufTriggerDirective);
    return RufTriggerDirective;
}(CdkOverlayOrigin));
export { RufTriggerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL3RyaWdnZXIvdHJpZ2dlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUdOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNOUQ7SUFBeUMsK0NBQWdCO0lBS3ZELDZCQUFvQixLQUFpQixFQUFVLFFBQW1CO1FBQWxFLFlBQ0Usa0JBQU0sS0FBSyxDQUFDLFNBQ2I7UUFGbUIsV0FBSyxHQUFMLEtBQUssQ0FBWTtRQUFVLGNBQVEsR0FBUixRQUFRLENBQVc7UUFGMUQsa0JBQVksR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDOztJQUkxQyxDQUFDO0lBRUQsNkNBQWUsR0FBZjtRQUFBLGlCQWlCQztRQWhCQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5RSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDaEY7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFlBQVksQ0FBQyxLQUFLLEVBQUU7WUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNO2dCQUN0RCxLQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNqRyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNYLEtBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNsQztZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBR0QsOENBQWdCLEdBQWhCLFVBQWtCLEtBQUs7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUdELGdEQUFrQixHQUFsQixVQUFtQixLQUFLO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCwwQ0FBWSxHQUFaO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsdUJBQXVCLEVBQUUsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCx5Q0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBNUNvQjtRQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzt1REFBMEI7SUEyQjlDO1FBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7OytEQUdqQztJQUdEO1FBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7O2lFQUduQztJQXBDVSxtQkFBbUI7UUFKL0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7WUFDeEIsUUFBUSxFQUFFLFlBQVk7U0FDdkIsQ0FBQztpREFNMkIsVUFBVSxFQUFvQixTQUFTO09BTHZELG1CQUFtQixDQStDL0I7SUFBRCwwQkFBQztDQUFBLEFBL0NELENBQXlDLGdCQUFnQixHQStDeEQ7U0EvQ1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIEFmdGVyVmlld0luaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZGtPdmVybGF5T3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSdWZUcmlnZ2VyVGFyZ2V0IH0gZnJvbSAnLi90cmlnZ2VyLmludGVyZmFjZSc7XG5pbXBvcnQgeyB0aHJvd1RhcmdldE1pc3NpbmdFcnJvciB9IGZyb20gJy4vdHJpZ2dlci5pbnRlcmZhY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcnVmVHJpZ2dlcl0nLFxuICBleHBvcnRBczogJ3J1ZlRyaWdnZXInXG59KVxuZXhwb3J0IGNsYXNzIFJ1ZlRyaWdnZXJEaXJlY3RpdmUgZXh0ZW5kcyBDZGtPdmVybGF5T3JpZ2luIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICovXG4gIEBJbnB1dCgncnVmVHJpZ2dlcicpIHRhcmdldDogUnVmVHJpZ2dlclRhcmdldDtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgc3VwZXIoZWxSZWYpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuX2NoZWNrVGFyZ2V0KCk7XG4gICAgaWYgKHRoaXMudGFyZ2V0Lmhhc1BvcHVwKCkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgJ2FyaWEtaGFzcG9wdXAnLCAndHJ1ZScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWhhc3BvcHVwJyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWV4cGFuZGVkJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbiA9PT0gU3Vic2NyaXB0aW9uLkVNUFRZKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMudGFyZ2V0LnRvZ2dsZS5zdWJzY3JpYmUoKG9wZW5lZCkgPT4ge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWV4cGFuZGVkJywgb3BlbmVkID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICAgIGlmICghb3BlbmVkKSB7XG4gICAgICAgICAgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgaGFuZGxlQ2xpY2tFdmVudCAoZXZlbnQpIHtcbiAgICB0aGlzLnRhcmdldC5oYW5kbGVDbGljayhldmVudCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgaGFuZGxlS2V5ZG93bkV2ZW50KGV2ZW50KSB7XG4gICAgdGhpcy50YXJnZXQuaGFuZGxlS2V5ZG93bihldmVudCk7XG4gIH1cblxuICBfY2hlY2tUYXJnZXQoKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkge1xuICAgICAgdGhyb3dUYXJnZXRNaXNzaW5nRXJyb3IoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=