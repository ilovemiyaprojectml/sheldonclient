import * as tslib_1 from "tslib";
/* tslint:disable:no-bitwise */
/* tslint:disable:directive-selector-name */
import { Directive, ElementRef, isDevMode, Input } from '@angular/core';
var RufUniqueIdDirective = /** @class */ (function () {
    function RufUniqueIdDirective(el) {
        this.el = el;
    }
    RufUniqueIdDirective.prototype.ngOnInit = function () {
        if (isDevMode()) {
            var currentElement = this.el.nativeElement;
            if (!currentElement.id) {
                currentElement.id = this.rufId ? this.getUniqueId(this.rufId) : this.generateID();
            }
        }
    };
    /**
     * Walks up the tree, picking up uids as it goes
     * @param node
     * @returns parent ID
     */
    RufUniqueIdDirective.prototype.getParentID = function (node) {
        var tempParentId = '';
        if (node.attributes && node.attributes.id) {
            return node.attributes.id.value;
        }
        if (node.parentNode) {
            tempParentId = this.getParentID(node.parentNode);
        }
        return tempParentId;
    };
    /**
     * Generates an idempotent id on the element this directive is attached to
     * Based on the name and attributes (but ignores the angular temp name that can be different each run)
     * @returns string
     */
    RufUniqueIdDirective.prototype.generateID = function () {
        var nel = this.el.nativeElement;
        var parentID = this.getParentID(nel);
        var tempUid = parentID === '' ? nel.tagName.toLowerCase() : parentID + '_' + nel.nodeName.toLowerCase();
        tempUid = this.getUniqueId(tempUid);
        return tempUid;
    };
    /**
     * Check for unique id in DOM
     * @returns string
     */
    RufUniqueIdDirective.prototype.getUniqueId = function (tempId) {
        var count = 0;
        var genId = tempId + '_';
        tempId = genId + count;
        while (document.getElementById(tempId) !== null) {
            count++;
            tempId = genId + count;
        }
        return tempId;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], RufUniqueIdDirective.prototype, "rufId", void 0);
    RufUniqueIdDirective = tslib_1.__decorate([
        Directive({
            selector: '[rufId]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], RufUniqueIdDirective);
    return RufUniqueIdDirective;
}());
export { RufUniqueIdDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLWlkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvdW5pcXVlLWlkL3VuaXF1ZS1pZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtCQUErQjtBQUMvQiw0Q0FBNEM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtoRjtJQUVFLDhCQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUFHLENBQUM7SUFFdEMsdUNBQVEsR0FBUjtRQUNFLElBQUksU0FBUyxFQUFFLEVBQUU7WUFDZixJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsY0FBYyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ25GO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLDBDQUFXLEdBQW5CLFVBQW9CLElBQVM7UUFDM0IsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztTQUNqQztRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDbEQ7UUFDRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLHlDQUFVLEdBQWxCO1FBQ0UsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDbEMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLE9BQU8sR0FBRyxRQUFRLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEcsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLDBDQUFXLEdBQW5CLFVBQW9CLE1BQWM7UUFDaEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUMzQixNQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUN2QixPQUFPLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQy9DLEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDeEI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBdERRO1FBQVIsS0FBSyxFQUFFOzt1REFBZTtJQURaLG9CQUFvQjtRQUhoQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsU0FBUztTQUNwQixDQUFDO2lEQUd3QixVQUFVO09BRnZCLG9CQUFvQixDQXdEaEM7SUFBRCwyQkFBQztDQUFBLEFBeERELElBd0RDO1NBeERZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLWJpdHdpc2UgKi9cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3Rvci1uYW1lICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE9uSW5pdCwgaXNEZXZNb2RlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcnVmSWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBSdWZVbmlxdWVJZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHJ1ZklkOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKGlzRGV2TW9kZSgpKSB7XG4gICAgICBjb25zdCBjdXJyZW50RWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICAgIGlmICghY3VycmVudEVsZW1lbnQuaWQpIHtcbiAgICAgICAgY3VycmVudEVsZW1lbnQuaWQgPSB0aGlzLnJ1ZklkID8gdGhpcy5nZXRVbmlxdWVJZCh0aGlzLnJ1ZklkKSA6IHRoaXMuZ2VuZXJhdGVJRCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXYWxrcyB1cCB0aGUgdHJlZSwgcGlja2luZyB1cCB1aWRzIGFzIGl0IGdvZXNcbiAgICogQHBhcmFtIG5vZGVcbiAgICogQHJldHVybnMgcGFyZW50IElEXG4gICAqL1xuICBwcml2YXRlIGdldFBhcmVudElEKG5vZGU6IGFueSkge1xuICAgIGxldCB0ZW1wUGFyZW50SWQgPSAnJztcbiAgICBpZiAobm9kZS5hdHRyaWJ1dGVzICYmIG5vZGUuYXR0cmlidXRlcy5pZCkge1xuICAgICAgcmV0dXJuIG5vZGUuYXR0cmlidXRlcy5pZC52YWx1ZTtcbiAgICB9XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgdGVtcFBhcmVudElkID0gdGhpcy5nZXRQYXJlbnRJRChub2RlLnBhcmVudE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcFBhcmVudElkO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiBpZGVtcG90ZW50IGlkIG9uIHRoZSBlbGVtZW50IHRoaXMgZGlyZWN0aXZlIGlzIGF0dGFjaGVkIHRvXG4gICAqIEJhc2VkIG9uIHRoZSBuYW1lIGFuZCBhdHRyaWJ1dGVzIChidXQgaWdub3JlcyB0aGUgYW5ndWxhciB0ZW1wIG5hbWUgdGhhdCBjYW4gYmUgZGlmZmVyZW50IGVhY2ggcnVuKVxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVJRCgpIHtcbiAgICBjb25zdCBuZWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgcGFyZW50SUQgPSB0aGlzLmdldFBhcmVudElEKG5lbCk7XG4gICAgbGV0IHRlbXBVaWQgPSBwYXJlbnRJRCA9PT0gJycgPyBuZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpIDogcGFyZW50SUQgKyAnXycgKyBuZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB0ZW1wVWlkID0gdGhpcy5nZXRVbmlxdWVJZCh0ZW1wVWlkKTtcbiAgICByZXR1cm4gdGVtcFVpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBmb3IgdW5pcXVlIGlkIGluIERPTVxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHByaXZhdGUgZ2V0VW5pcXVlSWQodGVtcElkOiBzdHJpbmcpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGNvbnN0IGdlbklkID0gdGVtcElkICsgJ18nO1xuICAgIHRlbXBJZCA9IGdlbklkICsgY291bnQ7XG4gICAgd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRlbXBJZCkgIT09IG51bGwpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgICB0ZW1wSWQgPSBnZW5JZCArIGNvdW50O1xuICAgIH1cbiAgICByZXR1cm4gdGVtcElkO1xuICB9XG59XG4iXX0=