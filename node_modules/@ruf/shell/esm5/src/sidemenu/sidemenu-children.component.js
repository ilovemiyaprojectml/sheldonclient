import * as tslib_1 from "tslib";
import { trigger, state, style, transition, animate } from '@angular/animations';
import { Component, HostBinding, ViewEncapsulation, Input, ContentChildren, QueryList, forwardRef, ElementRef, HostListener } from '@angular/core';
import { RufSidemenuItemComponent } from './sidemenu-item.component';
import { RufKeyboardNavigation, RufKeyCodes } from '../input/keyboard';
import { RufSidemenuComponent } from './sidemenu.component';
import { RufToggleDirective } from '../toggle/toggle.directive';
/**
 * description
 */
var RufSidemenuChildrenComponent = /** @class */ (function () {
    function RufSidemenuChildrenComponent(_elementRef, sidemenuComp) {
        this._elementRef = _elementRef;
        this.sidemenuComp = sidemenuComp;
        this.visible = true;
        this.sidemenuChildren = true;
    }
    RufSidemenuChildrenComponent.prototype.ngOnChanges = function (changes) {
        if (changes.visible) {
            this.visibleState = changes.visible.currentValue;
        }
    };
    RufSidemenuChildrenComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.childItems && this.childItems.length > 0) {
            this._keyboardSideNav = new RufKeyboardNavigation();
            this._keyboardSideNav.init(this._elementRef, this.childItems).subscribe(function (path) {
                _this.sidemenuComp.select(path.path, path.data);
            });
        }
    };
    RufSidemenuChildrenComponent.prototype.setActiveItem = function (event) {
        // set active item when parent is clicked
        if (event.toState) {
            this._keyboardSideNav.setActiveItem(0);
        }
    };
    RufSidemenuChildrenComponent.prototype.onKey = function (event) {
        switch (event.keyCode) {
            case RufKeyCodes.ESCAPE:
                if (this.menuTrigger) {
                    this.menuTrigger.select(event);
                }
                break;
            default:
                if (this._keyboardSideNav && this._keyboardSideNav.isActive()) {
                    this._keyboardSideNav.onKeyDown(event);
                }
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufSidemenuChildrenComponent.prototype, "visible", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", RufToggleDirective)
    ], RufSidemenuChildrenComponent.prototype, "menuTrigger", void 0);
    tslib_1.__decorate([
        HostBinding('class.ruf-sidemenu-children'),
        tslib_1.__metadata("design:type", Object)
    ], RufSidemenuChildrenComponent.prototype, "sidemenuChildren", void 0);
    tslib_1.__decorate([
        HostBinding('@visible'),
        tslib_1.__metadata("design:type", Boolean)
    ], RufSidemenuChildrenComponent.prototype, "visibleState", void 0);
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return RufSidemenuItemComponent; })),
        tslib_1.__metadata("design:type", QueryList)
    ], RufSidemenuChildrenComponent.prototype, "childItems", void 0);
    tslib_1.__decorate([
        HostListener('keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RufSidemenuChildrenComponent.prototype, "onKey", null);
    RufSidemenuChildrenComponent = tslib_1.__decorate([
        Component({
            selector: "[rufSidemenuChildren], ruf-sidemenu-children",
            exportAs: 'rufSidemenuChildren',
            template: "<div (@visible.done)=\"setActiveItem($event)\" [@visible]=\"visible\"><ng-content></ng-content></div>",
            encapsulation: ViewEncapsulation.None,
            animations: [
                trigger('visible', [
                    state('0', style({
                        height: 0
                    })),
                    state('1', style({
                        height: '*'
                    })),
                    transition('0 => 1', animate('300ms ease-in-out')),
                    transition('1 => 0', animate('300ms ease-in-out'))
                ])
            ]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, RufSidemenuComponent])
    ], RufSidemenuChildrenComponent);
    return RufSidemenuChildrenComponent;
}());
export { RufSidemenuChildrenComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW1lbnUtY2hpbGRyZW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ1Zi9zaGVsbC8iLCJzb3VyY2VzIjpbInNyYy9zaWRlbWVudS9zaWRlbWVudS1jaGlsZHJlbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakYsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsaUJBQWlCLEVBQ2pCLEtBQUssRUFHTCxlQUFlLEVBQ2YsU0FBUyxFQUNULFVBQVUsRUFFVixVQUFVLEVBQ1YsWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVoRTs7R0FFRztBQW1CSDtJQVVFLHNDQUFvQixXQUF1QixFQUFVLFlBQWtDO1FBQW5FLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQXNCO1FBVDlFLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFFb0IscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBT3NCLENBQUM7SUFFM0Ysa0RBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztJQUVELHlEQUFrQixHQUFsQjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1lBQ3BELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUEsSUFBSTtnQkFDMUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxvREFBYSxHQUFiLFVBQWMsS0FBSztRQUNqQix5Q0FBeUM7UUFDekMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBR0QsNENBQUssR0FBTCxVQUFNLEtBQW9CO1FBQ3hCLFFBQVEsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNyQixLQUFLLFdBQVcsQ0FBQyxNQUFNO2dCQUNyQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNoQztnQkFDRCxNQUFNO1lBQ1I7Z0JBQ0UsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFO29CQUM3RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN4QztTQUNKO0lBQ0gsQ0FBQztJQTlDUTtRQUFSLEtBQUssRUFBRTs7aUVBQWdCO0lBQ2Y7UUFBUixLQUFLLEVBQUU7MENBQWMsa0JBQWtCO3FFQUFDO0lBQ0c7UUFBM0MsV0FBVyxDQUFDLDZCQUE2QixDQUFDOzswRUFBeUI7SUFDM0M7UUFBeEIsV0FBVyxDQUFDLFVBQVUsQ0FBQzs7c0VBQXVCO0lBSS9DO1FBREMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsd0JBQXdCLEVBQXhCLENBQXdCLENBQUMsQ0FBQzswQ0FDaEQsU0FBUztvRUFBMkI7SUEyQmhEO1FBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztpREFDdkIsYUFBYTs7NkRBWXpCO0lBL0NVLDRCQUE0QjtRQWxCeEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDhDQUE4QztZQUN4RCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFFBQVEsRUFBRSx1R0FBbUc7WUFDN0csYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFDckMsVUFBVSxFQUFFO2dCQUNWLE9BQU8sQ0FBQyxTQUFTLEVBQUU7b0JBQ2pCLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO3dCQUNmLE1BQU0sRUFBRSxDQUFDO3FCQUNWLENBQUMsQ0FBQztvQkFDSCxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQzt3QkFDZixNQUFNLEVBQUUsR0FBRztxQkFDWixDQUFDLENBQUM7b0JBQ0gsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztvQkFDbEQsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztpQkFDbkQsQ0FBQzthQUNIO1NBQ0YsQ0FBQztpREFXaUMsVUFBVSxFQUF3QixvQkFBb0I7T0FWNUUsNEJBQTRCLENBZ0R4QztJQUFELG1DQUFDO0NBQUEsQUFoREQsSUFnREM7U0FoRFksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgQ29udGVudENoaWxkcmVuLFxuICBRdWVyeUxpc3QsXG4gIGZvcndhcmRSZWYsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJ1ZlNpZGVtZW51SXRlbUNvbXBvbmVudCB9IGZyb20gJy4vc2lkZW1lbnUtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUnVmS2V5Ym9hcmROYXZpZ2F0aW9uLCBSdWZLZXlDb2RlcyB9IGZyb20gJy4uL2lucHV0L2tleWJvYXJkJztcbmltcG9ydCB7IFJ1ZlNpZGVtZW51Q29tcG9uZW50IH0gZnJvbSAnLi9zaWRlbWVudS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUnVmVG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi4vdG9nZ2xlL3RvZ2dsZS5kaXJlY3RpdmUnO1xuXG4vKipcbiAqIGRlc2NyaXB0aW9uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYFtydWZTaWRlbWVudUNoaWxkcmVuXSwgcnVmLXNpZGVtZW51LWNoaWxkcmVuYCxcbiAgZXhwb3J0QXM6ICdydWZTaWRlbWVudUNoaWxkcmVuJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IChAdmlzaWJsZS5kb25lKT1cInNldEFjdGl2ZUl0ZW0oJGV2ZW50KVwiIFtAdmlzaWJsZV09XCJ2aXNpYmxlXCI+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PmAsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCd2aXNpYmxlJywgW1xuICAgICAgc3RhdGUoJzAnLCBzdHlsZSh7XG4gICAgICAgIGhlaWdodDogMFxuICAgICAgfSkpLFxuICAgICAgc3RhdGUoJzEnLCBzdHlsZSh7XG4gICAgICAgIGhlaWdodDogJyonXG4gICAgICB9KSksXG4gICAgICB0cmFuc2l0aW9uKCcwID0+IDEnLCBhbmltYXRlKCczMDBtcyBlYXNlLWluLW91dCcpKSxcbiAgICAgIHRyYW5zaXRpb24oJzEgPT4gMCcsIGFuaW1hdGUoJzMwMG1zIGVhc2UtaW4tb3V0JykpXG4gICAgXSlcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBSdWZTaWRlbWVudUNoaWxkcmVuQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlckNvbnRlbnRJbml0IHtcbiAgQElucHV0KCkgdmlzaWJsZSA9IHRydWU7XG4gIEBJbnB1dCgpIG1lbnVUcmlnZ2VyOiBSdWZUb2dnbGVEaXJlY3RpdmU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MucnVmLXNpZGVtZW51LWNoaWxkcmVuJykgc2lkZW1lbnVDaGlsZHJlbiA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnQHZpc2libGUnKSB2aXNpYmxlU3RhdGU6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBfa2V5Ym9hcmRTaWRlTmF2OiBSdWZLZXlib2FyZE5hdmlnYXRpb247XG4gIEBDb250ZW50Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBSdWZTaWRlbWVudUl0ZW1Db21wb25lbnQpKVxuICBjaGlsZEl0ZW1zOiBRdWVyeUxpc3Q8UnVmU2lkZW1lbnVJdGVtQ29tcG9uZW50PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHNpZGVtZW51Q29tcDogUnVmU2lkZW1lbnVDb21wb25lbnQpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnZpc2libGUpIHtcbiAgICAgIHRoaXMudmlzaWJsZVN0YXRlID0gY2hhbmdlcy52aXNpYmxlLmN1cnJlbnRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgaWYgKHRoaXMuY2hpbGRJdGVtcyAmJiB0aGlzLmNoaWxkSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fa2V5Ym9hcmRTaWRlTmF2ID0gbmV3IFJ1ZktleWJvYXJkTmF2aWdhdGlvbigpO1xuICAgICAgdGhpcy5fa2V5Ym9hcmRTaWRlTmF2LmluaXQodGhpcy5fZWxlbWVudFJlZiwgdGhpcy5jaGlsZEl0ZW1zKS5zdWJzY3JpYmUocGF0aCA9PiB7XG4gICAgICAgIHRoaXMuc2lkZW1lbnVDb21wLnNlbGVjdChwYXRoLnBhdGgsIHBhdGguZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzZXRBY3RpdmVJdGVtKGV2ZW50KSB7XG4gICAgLy8gc2V0IGFjdGl2ZSBpdGVtIHdoZW4gcGFyZW50IGlzIGNsaWNrZWRcbiAgICBpZiAoZXZlbnQudG9TdGF0ZSkge1xuICAgICAgdGhpcy5fa2V5Ym9hcmRTaWRlTmF2LnNldEFjdGl2ZUl0ZW0oMCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIG9uS2V5KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIFJ1ZktleUNvZGVzLkVTQ0FQRTpcbiAgICAgICAgaWYgKHRoaXMubWVudVRyaWdnZXIpIHtcbiAgICAgICAgICB0aGlzLm1lbnVUcmlnZ2VyLnNlbGVjdChldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodGhpcy5fa2V5Ym9hcmRTaWRlTmF2ICYmIHRoaXMuX2tleWJvYXJkU2lkZU5hdi5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgdGhpcy5fa2V5Ym9hcmRTaWRlTmF2Lm9uS2V5RG93bihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==