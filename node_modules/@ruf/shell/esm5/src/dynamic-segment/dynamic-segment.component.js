import * as tslib_1 from "tslib";
import { Component, ContentChild, TemplateRef, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, Input, Output, ElementRef, ViewChildren, QueryList, HostListener } from '@angular/core';
import { MatButtonToggle } from '@angular/material/button-toggle';
import { RufKeyboardNavigation } from '../input/keyboard';
var RufDynamicSegmentComponent = /** @class */ (function () {
    function RufDynamicSegmentComponent(_elementRef) {
        this._elementRef = _elementRef;
        this.items = [];
        /* tslint:disable:no-output-rename */
        // Renaming output to avoid duplicate `select` identifiers
        this.selectEmitter = new EventEmitter();
    }
    Object.defineProperty(RufDynamicSegmentComponent.prototype, "selectedPath", {
        get: function () {
            return this._selectedPath;
        },
        set: function (id) {
            this._selectedPath = id;
        },
        enumerable: true,
        configurable: true
    });
    RufDynamicSegmentComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.addNewKeyboardNav();
        this.segmentItems.changes.subscribe(function () {
            _this.addNewKeyboardNav();
        });
    };
    RufDynamicSegmentComponent.prototype.onKey = function (event) {
        this._keyboardNav.onKeyDown(event);
    };
    RufDynamicSegmentComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selectedPath && changes.selectedPath.currentValue) {
            this.selectSegmentItem({ path: changes.selectedPath.currentValue });
        }
    };
    RufDynamicSegmentComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    // Set Keyboard navigation
    RufDynamicSegmentComponent.prototype.addNewKeyboardNav = function () {
        var _this = this;
        this._keyboardNav = new RufKeyboardNavigation();
        this.subscription = this._keyboardNav.init(this._elementRef, this.segmentItems).subscribe(function (item) {
            _this.selectSegmentItem({ path: item.value });
        });
        this._keyboardNav.addTabIndex(this.segmentItems);
    };
    /**
     * Set selectedPath and activate dynamic-segment item
     * @param item
     */
    RufDynamicSegmentComponent.prototype.selectSegmentItem = function (item) {
        this._selectedPath = item.path;
        var selectedIndex = this.selectedIndex();
        if (this._keyboardNav) {
            this._keyboardNav.setActiveItem((selectedIndex === -1) ? 0 : selectedIndex);
        }
        if (this.segmentItems) {
            // if segmentItems are not present, the component view is not loaded yet.
            // This means 'selectSegmentItem' is called from 'ngOnChanges' and the host element has [selectedPath] input.
            var selectedItem = (selectedIndex === -1) ? null : this.items[selectedIndex];
            this.selectEmitter.emit(selectedItem);
        }
    };
    /**
     * @returns - index of the selected dynamic-segment item. -1 if no dynamic-segment is selected.
     */
    RufDynamicSegmentComponent.prototype.selectedIndex = function () {
        var _this = this;
        var index = -1;
        if (this.segmentItems) {
            index = this.items.findIndex(function (segmentItem, i) { return _this._matches(segmentItem.path); });
        }
        return index;
    };
    RufDynamicSegmentComponent.prototype._matches = function (path) {
        if (path && this.selectedPath) {
            var pattern = new RegExp('^((\/)?' + this.selectedPath + ')(\/.*)?$'); // use word boundary to exact match
            if (path === this.selectedPath || pattern.test(path)) { // match with and parent dynamic-segment item
                return true;
            }
        }
        return false;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], RufDynamicSegmentComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], RufDynamicSegmentComponent.prototype, "showActiveItemClip", void 0);
    tslib_1.__decorate([
        Output('select'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSegmentComponent.prototype, "selectEmitter", void 0);
    tslib_1.__decorate([
        ViewChildren(MatButtonToggle),
        tslib_1.__metadata("design:type", QueryList)
    ], RufDynamicSegmentComponent.prototype, "segmentItems", void 0);
    tslib_1.__decorate([
        ContentChild(TemplateRef, { static: false }),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSegmentComponent.prototype, "navActions", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], RufDynamicSegmentComponent.prototype, "selectedPath", null);
    tslib_1.__decorate([
        HostListener('keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RufDynamicSegmentComponent.prototype, "onKey", null);
    RufDynamicSegmentComponent = tslib_1.__decorate([
        Component({
            selector: 'ruf-dynamic-segment',
            template: "<div class=\"segment-layout\" role=\"menubar\">\n  <mat-button-toggle-group rufId=\"segmentGroup\" fisStyle class=\"segment-group\" value=\"{{selectedPath}}\">\n    <mat-button-toggle rufId class=\"segment-item\"\n                       [class.mat-button-toggle-selected]=\"selectedPath === item.path ? true : false\"\n                       [class.mat-button-toggle-checked]=\"selectedPath === item.path ? true : false\"\n                       [class.segment-clip]=\"showActiveItemClip\"\n                       fisStyle\n                       *ngFor=\"let item of items\"\n                       (click)=\"selectSegmentItem(item)\"\n                       value=\"{{item.path}}\"\n                       title=\"{{item.tooltipText}}\"\n                       role=\"menuitem\">\n      {{item.label}}\n      <ng-template [ngTemplateOutlet]=\"navActions\" [ngTemplateOutletContext]=\"{item: item}\">\n      </ng-template>\n    </mat-button-toggle>\n  </mat-button-toggle-group>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".segment-layout{-webkit-box-align:stretch;align-items:stretch;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.segment-layout .mat-button-toggle-group{overflow:visible}.segment-item:focus{outline:0}.segment-item>label{cursor:pointer;text-align:center;width:100%}.segment-group>.segment-item{-webkit-box-align:center;align-items:center;border-bottom-style:solid;border-bottom-width:.125rem;border-color:transparent;border-top-style:solid;border-top-width:.125rem;cursor:pointer;display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1 auto;-webkit-box-pack:center;justify-content:center;padding:0;-webkit-transition:background-color .2s;transition:background-color .2s}.segment-group>.segment-clip::after{border-left:10px solid transparent;border-right:10px solid transparent;border-top:15px solid transparent;content:'';left:calc(50% - 10px);position:absolute;top:100%}"]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], RufDynamicSegmentComponent);
    return RufDynamicSegmentComponent;
}());
export { RufDynamicSegmentComponent };
//# sourceMappingURL=data:application/json;base64,