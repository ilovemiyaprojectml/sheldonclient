import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input, ViewEncapsulation, ElementRef, ChangeDetectionStrategy, Directive, ContentChildren, QueryList, HostListener } from '@angular/core';
import { RufKeyboardNavigation, RufKeyCodes } from '../input/keyboard';
import { RufFocusableDirective } from '../utils/focusable';
import { RufShellIntl } from '../utils/shell-intl';
import { RufMixinBase } from '../common/color/color';
var RufToolbarRowDirective = /** @class */ (function () {
    function RufToolbarRowDirective() {
    }
    RufToolbarRowDirective = tslib_1.__decorate([
        Directive({
            selector: 'ruf-toolbar-row' // tslint:disable-line
        })
    ], RufToolbarRowDirective);
    return RufToolbarRowDirective;
}());
export { RufToolbarRowDirective };
var RufToolbarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(RufToolbarComponent, _super);
    function RufToolbarComponent(_elementRef, _intl, changeDetectorRef) {
        var _this = _super.call(this, _elementRef) || this;
        _this._elementRef = _elementRef;
        _this._intl = _intl;
        _this.children = [];
        _this._intlChanges = _intl.changes.subscribe(function () {
            changeDetectorRef.markForCheck();
        });
        return _this;
    }
    Object.defineProperty(RufToolbarComponent.prototype, "ariaLabel", {
        get: function () {
            return this._ariaLabel || this._intl.toolbar.aria.label;
        },
        /* tslint:disable:no-input-rename */
        set: function (label) {
            this._ariaLabel = label;
        },
        enumerable: true,
        configurable: true
    });
    RufToolbarComponent.prototype.ngAfterContentInit = function () {
        this._keyboardNav = new RufKeyboardNavigation();
        this._keyboardNav.init(this._elementRef, this.toolbarItems);
        this._keyboardNav.addTabIndex(this.toolbarItems);
    };
    RufToolbarComponent.prototype.onKey = function (event) {
        switch (event.keyCode) {
            case RufKeyCodes.SPACE:
            case RufKeyCodes.ENTER:
                event.stopPropagation();
                break;
            default:
                this._keyboardNav.onKeyDown(event);
        }
    };
    RufToolbarComponent.prototype.ngOnDestroy = function () {
        this._intlChanges.unsubscribe();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufToolbarComponent.prototype, "color", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], RufToolbarComponent.prototype, "ariaLabel", null);
    tslib_1.__decorate([
        ContentChildren(RufFocusableDirective, { descendants: true }),
        tslib_1.__metadata("design:type", QueryList)
    ], RufToolbarComponent.prototype, "toolbarItems", void 0);
    tslib_1.__decorate([
        HostListener('keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RufToolbarComponent.prototype, "onKey", null);
    RufToolbarComponent = tslib_1.__decorate([
        Component({
            selector: 'ruf-toolbar',
            template: "<div class=\"ruf-toolbar-rows\" rufId=\"toolbar\" >\n  <ruf-toolbar-row  class=\"ruf-toolbar-first-row\" rufId=\"toolbar_row\" role=\"toolbar\" [attr.aria-label]=\"ariaLabel\">\n    <ng-content></ng-content>\n  </ruf-toolbar-row>\n  <ng-content select=\"ruf-toolbar-row\"></ng-content>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["ruf-toolbar{display:block;flex-shrink:0;min-height:inherit;overflow:hidden}ruf-toolbar .mat-select{padding-top:0}.ruf-toolbar-separator{border-left-style:solid;border-left-width:1px;display:inline-block;height:1.4375rem;margin:0 .625rem;vertical-align:middle;word-wrap:nowrap}.ruf-toolbar-rows{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;min-height:inherit}ruf-toolbar-row{-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;min-height:inherit}ruf-toolbar-row>*{margin-left:.625rem}ruf-toolbar-row>:nth-last-child(1){margin-left:.625rem;margin-right:.625rem}ruf-toolbar-row>:nth-last-child(1).ruf-square{margin-right:0}ruf-toolbar-row>:only-child{border:0}"]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            RufShellIntl,
            ChangeDetectorRef])
    ], RufToolbarComponent);
    return RufToolbarComponent;
}(RufMixinBase));
export { RufToolbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL3Rvb2xiYXIvdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLHVCQUF1QixFQUN2QixTQUFTLEVBRVQsZUFBZSxFQUNmLFNBQVMsRUFDVCxZQUFZLEVBRWIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sdUJBQXVCLENBQUM7QUFLbEU7SUFBQTtJQUFxQyxDQUFDO0lBQXpCLHNCQUFzQjtRQUhsQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsaUJBQWlCLENBQUMsc0JBQXNCO1NBQ25ELENBQUM7T0FDVyxzQkFBc0IsQ0FBRztJQUFELDZCQUFDO0NBQUEsQUFBdEMsSUFBc0M7U0FBekIsc0JBQXNCO0FBU25DO0lBQXlDLCtDQUFZO0lBeUJuRCw2QkFBbUIsV0FBdUIsRUFDdEIsS0FBbUIsRUFDM0IsaUJBQW9DO1FBRmhELFlBSUksa0JBQU0sV0FBVyxDQUFDLFNBSXBCO1FBUmlCLGlCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3RCLFdBQUssR0FBTCxLQUFLLENBQWM7UUFOL0IsY0FBUSxHQUFHLEVBQUUsQ0FBQztRQVVsQixLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQzFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDOztJQUNOLENBQUM7SUF0QkYsc0JBQUksMENBQVM7YUFJYjtZQUNFLE9BQVEsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNELENBQUM7UUFSRCxvQ0FBb0M7YUFFcEMsVUFBYyxLQUFhO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBc0JELGdEQUFrQixHQUFsQjtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBR0QsbUNBQUssR0FBTCxVQUFNLEtBQW9CO1FBQ3hCLFFBQVEsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNyQixLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDdkIsS0FBSyxXQUFXLENBQUMsS0FBSztnQkFDcEIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUN4QixNQUFNO1lBQ1I7Z0JBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRUQseUNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQWhEUTtRQUFSLEtBQUssRUFBRTs7c0RBQU87SUFJZjtRQURDLEtBQUssRUFBRTs7O3dEQUdQO0lBVUQ7UUFEQyxlQUFlLENBQUMscUJBQXFCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7MENBQ2hELFNBQVM7NkRBQXdCO0lBbUIvQztRQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7aURBQ3ZCLGFBQWE7O29EQVN6QjtJQW5EVSxtQkFBbUI7UUFQL0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGFBQWE7WUFDdkIsbVRBQXVDO1lBRXZDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNoRCxDQUFDO2lEQTBCZ0MsVUFBVTtZQUNmLFlBQVk7WUFDUixpQkFBaUI7T0EzQnJDLG1CQUFtQixDQXlEL0I7SUFBRCwwQkFBQztDQUFBLEFBekRELENBQXlDLFlBQVksR0F5RHBEO1NBekRZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgRWxlbWVudFJlZixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIERpcmVjdGl2ZSxcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBRdWVyeUxpc3QsXG4gIEhvc3RMaXN0ZW5lcixcbiAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBSdWZLZXlib2FyZE5hdmlnYXRpb24sIFJ1ZktleUNvZGVzIH0gZnJvbSAnLi4vaW5wdXQva2V5Ym9hcmQnO1xuaW1wb3J0IHsgUnVmRm9jdXNhYmxlRGlyZWN0aXZlIH0gZnJvbSAnLi4vdXRpbHMvZm9jdXNhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUnVmU2hlbGxJbnRsIH0gZnJvbSAnLi4vdXRpbHMvc2hlbGwtaW50bCc7XG5pbXBvcnQgeyBSdWZNaXhpbkJhc2UsIFJ1ZkNhbkNvbG9yIH0gZnJvbSAnLi4vY29tbW9uL2NvbG9yL2NvbG9yJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAncnVmLXRvb2xiYXItcm93JyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG59KVxuZXhwb3J0IGNsYXNzIFJ1ZlRvb2xiYXJSb3dEaXJlY3RpdmUge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncnVmLXRvb2xiYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vdG9vbGJhci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Rvb2xiYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUnVmVG9vbGJhckNvbXBvbmVudCBleHRlbmRzIFJ1Zk1peGluQmFzZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgUnVmQ2FuQ29sb3Ige1xuICBwcml2YXRlIF9pbnRsQ2hhbmdlczogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIF9jb2xvcjogc3RyaW5nO1xuICBwcml2YXRlIF9rZXlib2FyZE5hdjogUnVmS2V5Ym9hcmROYXZpZ2F0aW9uO1xuICBwcml2YXRlIF9hcmlhTGFiZWw6IHN0cmluZztcblxuICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgKi9cbiAgQElucHV0KCkgY29sb3I7XG5cbiAgLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICovXG4gIEBJbnB1dCgpXG4gIHNldCBhcmlhTGFiZWwobGFiZWw6IHN0cmluZykge1xuICAgIHRoaXMuX2FyaWFMYWJlbCA9IGxhYmVsO1xuICB9XG5cbiAgZ2V0IGFyaWFMYWJlbCgpIHtcbiAgICByZXR1cm4gIHRoaXMuX2FyaWFMYWJlbCB8fCB0aGlzLl9pbnRsLnRvb2xiYXIuYXJpYS5sYWJlbDtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBjaGlsZHJlbiA9IFtdO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oUnVmRm9jdXNhYmxlRGlyZWN0aXZlLCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pXG4gIHRvb2xiYXJJdGVtczogUXVlcnlMaXN0PFJ1ZkZvY3VzYWJsZURpcmVjdGl2ZT47XG5cbiAgY29uc3RydWN0b3IocHVibGljIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIF9pbnRsOiBSdWZTaGVsbEludGwsXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICAgICAgICAgICAgICApIHtcbiAgICAgIHN1cGVyKF9lbGVtZW50UmVmKTtcbiAgICAgIHRoaXMuX2ludGxDaGFuZ2VzID0gX2ludGwuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBjaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLl9rZXlib2FyZE5hdiA9IG5ldyBSdWZLZXlib2FyZE5hdmlnYXRpb24oKTtcbiAgICB0aGlzLl9rZXlib2FyZE5hdi5pbml0KHRoaXMuX2VsZW1lbnRSZWYsIHRoaXMudG9vbGJhckl0ZW1zKTtcbiAgICB0aGlzLl9rZXlib2FyZE5hdi5hZGRUYWJJbmRleCh0aGlzLnRvb2xiYXJJdGVtcyk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgb25LZXkoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgIGNhc2UgUnVmS2V5Q29kZXMuU1BBQ0U6XG4gICAgICBjYXNlIFJ1ZktleUNvZGVzLkVOVEVSOlxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLl9rZXlib2FyZE5hdi5vbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2ludGxDaGFuZ2VzLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxufVxuIl19