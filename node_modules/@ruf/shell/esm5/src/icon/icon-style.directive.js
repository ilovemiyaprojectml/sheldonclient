import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
/* tslint:disable:max-line-length */
export var RUF_ICON_STYLE_VALUES = ['rotate-90', 'rotate-180', 'rotate-270', 'flip-horizontal', 'flip-vertical', 'spin', 'pulse', 'xs', 'sm', 'md', 'lg', 'xl'];
var RufIconStyleDirective = /** @class */ (function () {
    function RufIconStyleDirective(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.classPrefix = 'fis-icon-';
    }
    RufIconStyleDirective.prototype.ngOnChanges = function (changes) {
        if (changes.rufIconStyle) {
            var previous = this._validateValue(changes.rufIconStyle.previousValue);
            var current = this._validateValue(changes.rufIconStyle.currentValue);
            this.renderer.removeClass(this.elementRef.nativeElement, this.classPrefix + previous);
            this.renderer.addClass(this.elementRef.nativeElement, this.classPrefix + current);
        }
    };
    RufIconStyleDirective.prototype._validateValue = function (val) {
        if (RUF_ICON_STYLE_VALUES.indexOf(val) !== -1) {
            return val;
        }
        return 'md';
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], RufIconStyleDirective.prototype, "rufIconStyle", void 0);
    RufIconStyleDirective = tslib_1.__decorate([
        Directive({
            selector: '[rufIconStyle]',
            exportAs: 'rufIconStyle'
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
    ], RufIconStyleDirective);
    return RufIconStyleDirective;
}());
export { RufIconStyleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1zdHlsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL2ljb24vaWNvbi1zdHlsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxHLG9DQUFvQztBQUNwQyxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBRyxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQU9sSztJQUlFLCtCQUFvQixRQUFtQixFQUFVLFVBQXNCO1FBQW5ELGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBSC9ELGdCQUFXLEdBQUcsV0FBVyxDQUFDO0lBR3lDLENBQUM7SUFFNUUsMkNBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN4QixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDekUsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDdEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsQ0FBQztTQUNuRjtJQUNILENBQUM7SUFFTyw4Q0FBYyxHQUF0QixVQUF1QixHQUFHO1FBQ3hCLElBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzdDLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFqQlE7UUFBUixLQUFLLEVBQUU7OytEQUFzQjtJQUhuQixxQkFBcUI7UUFMakMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixRQUFRLEVBQUUsY0FBYztTQUN6QixDQUFDO2lEQU04QixTQUFTLEVBQXNCLFVBQVU7T0FKNUQscUJBQXFCLENBcUJqQztJQUFELDRCQUFDO0NBQUEsQUFyQkQsSUFxQkM7U0FyQlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5leHBvcnQgY29uc3QgUlVGX0lDT05fU1RZTEVfVkFMVUVTID0gWydyb3RhdGUtOTAnLCAncm90YXRlLTE4MCcsICdyb3RhdGUtMjcwJywgJ2ZsaXAtaG9yaXpvbnRhbCcsICdmbGlwLXZlcnRpY2FsJywgJ3NwaW4nLCAncHVsc2UnLCAneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3J1Zkljb25TdHlsZV0nLFxuICBleHBvcnRBczogJ3J1Zkljb25TdHlsZSdcbn0pXG5cbmV4cG9ydCBjbGFzcyBSdWZJY29uU3R5bGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBwcml2YXRlIGNsYXNzUHJlZml4ID0gJ2Zpcy1pY29uLSc7XG5cbiAgQElucHV0KCkgcnVmSWNvblN0eWxlOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMucnVmSWNvblN0eWxlKSB7XG4gICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX3ZhbGlkYXRlVmFsdWUoY2hhbmdlcy5ydWZJY29uU3R5bGUucHJldmlvdXNWYWx1ZSk7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5fdmFsaWRhdGVWYWx1ZShjaGFuZ2VzLnJ1Zkljb25TdHlsZS5jdXJyZW50VmFsdWUpO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jbGFzc1ByZWZpeCArIHByZXZpb3VzKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY2xhc3NQcmVmaXggKyBjdXJyZW50KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF92YWxpZGF0ZVZhbHVlKHZhbCkge1xuICAgIGlmIChSVUZfSUNPTl9TVFlMRV9WQUxVRVMuaW5kZXhPZih2YWwpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgcmV0dXJuICdtZCc7XG4gIH1cbn1cbiJdfQ==