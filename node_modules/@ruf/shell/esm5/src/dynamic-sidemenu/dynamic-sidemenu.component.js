import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, ElementRef, Renderer2, EventEmitter, Input, Inject, Output, ViewChild, ViewChildren, QueryList } from '@angular/core';
import { MediaObserver } from '@angular/flex-layout';
import { MatMenuTrigger } from '@angular/material/menu';
import { DOCUMENT } from '@angular/common';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
var RufDynamicSideMenuComponent = /** @class */ (function () {
    function RufDynamicSideMenuComponent(document, _renderer, _mediaObserver, _elementRef) {
        this.document = document;
        this._renderer = _renderer;
        this._mediaObserver = _mediaObserver;
        this._elementRef = _elementRef;
        this.items = [];
        this._inkbarPosition = this._inkbarPosition || 'start';
        this.multi = true;
        this._select = new EventEmitter();
        // @HostBinding('class.ruf-dynamic-sidemenu-minimized')
        this.minimized = false;
        this.minimizedXs = false;
        this.minimizedSm = false;
        this.minimizedMd = false;
        this.minimizedLg = false;
        this.minimizedXl = false;
        this.minimizedGtXs = false;
        this.minimizedGtSm = false;
        this.minimizedGtMd = false;
        this.minimizedGtLg = false;
    }
    RufDynamicSideMenuComponent.prototype.isMinimized = function () {
        return [
            this.minimized,
            this.minimizedXs && this._mediaObserver.isActive('xs'),
            this.minimizedSm && this._mediaObserver.isActive('sm'),
            this.minimizedMd && this._mediaObserver.isActive('md'),
            this.minimizedLg && this._mediaObserver.isActive('lg'),
            this.minimizedXl && this._mediaObserver.isActive('xl'),
            this.minimizedGtXs && this._mediaObserver.isActive('gt-xs'),
            this.minimizedGtSm && this._mediaObserver.isActive('gt-sm'),
            this.minimizedGtMd && this._mediaObserver.isActive('gt-md'),
            this.minimizedGtLg && this._mediaObserver.isActive('gt-lg')
        ].some(function (x) { return x === true; });
    };
    RufDynamicSideMenuComponent.prototype.onSelect = function ($event) {
        if (!($event.data && $event.data.children)) {
            this._selectedPath = $event.path;
            this._select.emit($event.data);
        }
        else if ($event && $event.event) {
            $event.event.preventDefault();
            $event.event.stopPropagation();
        }
    };
    RufDynamicSideMenuComponent.prototype.getRufId = function (item) {
        return 'dynamic_sidemenu_' + item.label.toLowerCase().replace(/ /g, '_');
    };
    RufDynamicSideMenuComponent.prototype.closeMenu = function () {
        this.menuTrigger.closeMenu();
    };
    RufDynamicSideMenuComponent.prototype.setPopupData = function (event, data) {
        var _this = this;
        this.sideMenuPopupData = data;
        event.currentTarget.classList.add('ruf-active');
        // focus on the first menu item
        setTimeout(function () {
            var cdkOverlayClass = ".ruf-sidemenu-popup-backdrop + .cdk-overlay-connected-position-bounding-box";
            var cdkOverlayElement = _this.document.querySelector(cdkOverlayClass);
            if (cdkOverlayElement) {
                // set left position for cdkOverlay based on the position of menuitem.
                // so we need to get left and width value from BoundingClientRect;
                var rufMenuItem = _this._elementRef.nativeElement.querySelector('.ruf-menu-item');
                var rufMenuItemClientTect = rufMenuItem.getBoundingClientRect();
                cdkOverlayElement.style.left = rufMenuItemClientTect.left + rufMenuItemClientTect.width + 'px';
                var firstMenuItem = _this.document.querySelector(cdkOverlayClass + " .ruf-menu-item");
                if (firstMenuItem) {
                    firstMenuItem.focus();
                }
            }
        });
    };
    RufDynamicSideMenuComponent.prototype.onPopupClose = function () {
        // remove active class when popop is closed
        var currentActiveItem = this._elementRef.nativeElement.querySelector('.ruf-menu-item.ruf-active');
        if (currentActiveItem) {
            currentActiveItem.focus();
            this._renderer.removeClass(currentActiveItem, 'ruf-active');
        }
    };
    RufDynamicSideMenuComponent.prototype.keyHandler = function (event) {
        switch (event.keyCode) {
            case ENTER:
            case SPACE:
                event.currentTarget.click();
                break;
            default:
        }
    };
    RufDynamicSideMenuComponent.prototype.getOverlayClasses = function () {
        var colorClass = this._activeColor ? "ruf-" + this._activeColor : "";
        return this.popupBackgroundClass + " " + colorClass + " ruf-menubar-inkbar-" + this._inkbarPosition;
    };
    RufDynamicSideMenuComponent.prototype.toggleChildItems = function (currentTrigger) {
        if (this.multi === false) {
            this._triggers.toArray()
                .filter(function (element) { return element.value === true && element !== currentTrigger; })
                .forEach(function (element) {
                element.value = false;
            });
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], RufDynamicSideMenuComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], RufDynamicSideMenuComponent.prototype, "popupBackgroundClass", void 0);
    tslib_1.__decorate([
        ViewChild(MatMenuTrigger, { static: false }),
        tslib_1.__metadata("design:type", MatMenuTrigger)
    ], RufDynamicSideMenuComponent.prototype, "menuTrigger", void 0);
    tslib_1.__decorate([
        ViewChild('menuTrigger', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], RufDynamicSideMenuComponent.prototype, "trigger", void 0);
    tslib_1.__decorate([
        Input('selectedPath'),
        tslib_1.__metadata("design:type", String)
    ], RufDynamicSideMenuComponent.prototype, "_selectedPath", void 0);
    tslib_1.__decorate([
        Input('activeColor'),
        tslib_1.__metadata("design:type", String)
    ], RufDynamicSideMenuComponent.prototype, "_activeColor", void 0);
    tslib_1.__decorate([
        Input('inkbarPosition'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "_inkbarPosition", void 0);
    tslib_1.__decorate([
        Input('multi'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "multi", void 0);
    tslib_1.__decorate([
        Output('select'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "_select", void 0);
    tslib_1.__decorate([
        ViewChildren('trigger'),
        tslib_1.__metadata("design:type", QueryList)
    ], RufDynamicSideMenuComponent.prototype, "_triggers", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimized", void 0);
    tslib_1.__decorate([
        Input('minimized.xs'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedXs", void 0);
    tslib_1.__decorate([
        Input('minimized.sm'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedSm", void 0);
    tslib_1.__decorate([
        Input('minimized.md'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedMd", void 0);
    tslib_1.__decorate([
        Input('minimized.lg'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedLg", void 0);
    tslib_1.__decorate([
        Input('minimized.xl'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedXl", void 0);
    tslib_1.__decorate([
        Input('minimized.gt-xs'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedGtXs", void 0);
    tslib_1.__decorate([
        Input('minimized.gt-sm'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedGtSm", void 0);
    tslib_1.__decorate([
        Input('minimized.gt-md'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedGtMd", void 0);
    tslib_1.__decorate([
        Input('minimized.gt-lg'),
        tslib_1.__metadata("design:type", Object)
    ], RufDynamicSideMenuComponent.prototype, "minimizedGtLg", void 0);
    RufDynamicSideMenuComponent = tslib_1.__decorate([
        Component({
            selector: 'ruf-dynamic-sidemenu',
            template: "<ruf-sidemenu rufId=\"dynamic_sidemenu\" [activeColor]=\"_activeColor\"\n   [inkbarPosition]=\"_inkbarPosition\"\n   [selectedPath]=\"_selectedPath\"\n   [ngClass]=\"{'ruf-dynamic-sidemenu-minimized': isMinimized()}\"\n   (select)=\"onSelect($event)\">\n\n  <ng-container *ngFor=\"let item of items\">\n    <a [rufId]=\"getRufId(item)\" [data]=\"item\" *ngIf=\"!item.children || item.children.length === 0 \" [path]=\"item.path\"\n      rufSidemenuItem>\n      <mat-icon *ngIf=\"isMinimized()\" [fontIcon]=\"item.icon\"></mat-icon>\n      <ruf-labeled-icon *ngIf=\"!isMinimized()\" [fontIcon]=\"item.icon\" [ngClass]=\"{'sidemenu-item-with-no-icon': !item.icon}\">{{item.label}}\n      </ruf-labeled-icon>\n    </a>\n    <ng-container *ngIf=\"item.children && item.children.length > 0\">\n      <ng-container *ngIf=\"!isMinimized(); else minimizedTemplate\">\n        <a [rufId]=\"getRufId(item)\" [data]=\"item\" [path]=\"item.path\" rufSidemenuItem rufToggleChevron\n         #trigger=\"rufToggle\" (toggleChange)=\"toggleChildItems(trigger)\">\n          <ruf-labeled-icon [fontIcon]=\"item.icon\" [ngClass]=\"{'sidemenu-item-with-no-icon': !item.icon}\">{{item.label}}\n          </ruf-labeled-icon>\n        </a>\n        <ruf-sidemenu-children [rufId]=\"getRufId(item)+'_children'\" [visible]=\"trigger.value\"\n          [menuTrigger]=\"trigger\">\n          <a rufId *ngFor=\"let child of item.children\" [data]=\"child\" [path]=\"child.path\" rufSidemenuItem>\n            <ruf-labeled-icon [fontIcon]=\"child.icon\" [ngClass]=\"{'sidemenu-item-with-no-icon': !child.icon}\">{{child.label}}\n            </ruf-labeled-icon>\n          </a>\n        </ruf-sidemenu-children>\n      </ng-container>\n\n      <ng-template #minimizedTemplate>\n        <a [rufId]=\"getRufId(item)\"\n           [data]=\"item\"\n           [path]=\"item.path\"\n           rufSidemenuItem\n           #menuTrigger\n           [matMenuTriggerFor]=\"sideMenuPopup\"\n           (click)=\"setPopupData($event, item)\"\n           (keydown)=\"keyHandler($event)\">\n          <mat-icon [fontIcon]=\"item.icon\"></mat-icon>\n          <mat-icon fisIcon=\"arrow-down\" rufIconStyle=\"xs\" class=\"ruf-expand-sidemenu-popup-icon\"></mat-icon>\n      </a>\n      </ng-template>\n    </ng-container>\n\n  </ng-container>\n\n  <mat-menu #sideMenuPopup=\"matMenu\" overlapTrigger=\"true\" [class]=\"getOverlayClasses()\" (closed)=\"onPopupClose()\"\n    backdropClass=\"ruf-sidemenu-popup-backdrop\">\n    <ruf-sidemenu-children *ngIf=\"sideMenuPopupData\" rufId=\"ruf-sidemenu-children-items-popup\">\n      <p class=\"ruf-side-menu-popup-title\">{{sideMenuPopupData?.label}}</p>\n      <a rufId *ngFor=\"let child of sideMenuPopupData?.children\" [data]=\"child\" [path]=\"child.path\" (keydown.enter)=\"closeMenu()\"\n        rufSidemenuItem>\n        <span>{{child.label}}</span>\n    </a>\n    </ruf-sidemenu-children>\n  </mat-menu>\n</ruf-sidemenu>\n",
            encapsulation: ViewEncapsulation.None,
            styles: ["ruf-dynamic-sidemenu .sidemenu-item-with-no-icon .mat-icon{visibility:hidden;width:0}ruf-dynamic-sidemenu .sidemenu-item-with-no-icon span{margin-left:0}ruf-dynamic-sidemenu ruf-labeled-icon{white-space:normal}ruf-dynamic-sidemenu ruf-sidemenu.ruf-dynamic-sidemenu-minimized{box-shadow:none;min-width:auto}ruf-dynamic-sidemenu ruf-sidemenu.ruf-dynamic-sidemenu-minimized .ruf-menubar-layout.ruf-layout-column .ruf-menu-item{padding-right:0}.ruf-sidemenu-popup-backdrop+* .mat-menu-panel{border-radius:0;box-shadow:none}.ruf-sidemenu-popup-backdrop+* .mat-menu-panel.ruf-menubar-inkbar-start .ruf-menu-item{border-left-width:.25rem;border-left-style:solid}.ruf-sidemenu-popup-backdrop+* .mat-menu-panel.ruf-menubar-inkbar-end .ruf-menu-item{border-right-width:.25rem;border-right-style:solid}.ruf-sidemenu-popup-backdrop+* .mat-menu-panel .ruf-menu-item{padding-left:.9375rem;padding-right:.9375rem}.ruf-expand-sidemenu-popup-icon{-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex}.ruf-side-menu-popup-title{padding-left:1.1875rem}"]
        }),
        tslib_1.__param(0, Inject(DOCUMENT)),
        tslib_1.__metadata("design:paramtypes", [Object, Renderer2,
            MediaObserver,
            ElementRef])
    ], RufDynamicSideMenuComponent);
    return RufDynamicSideMenuComponent;
}());
export { RufDynamicSideMenuComponent };
//# sourceMappingURL=data:application/json;base64,