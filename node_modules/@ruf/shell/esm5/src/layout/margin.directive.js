import * as tslib_1 from "tslib";
import { Directive, HostBinding, Input, Renderer2, ElementRef } from '@angular/core';
export var RUF_MARGIN_VALUES = ['none', 'auto', 'small', 'medium', 'large'];
var RufMarginDirective = /** @class */ (function () {
    function RufMarginDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.classPrefix = 'ruf-margin';
        this._positions = {
            rufMargin: ['-'],
            rufMarginVertical: ['-top-', '-bottom-'],
            rufMarginHorizontal: ['-left-', '-right-'],
            rufMarginTop: ['-top-'],
            rufMarginRight: ['-right-'],
            rufMarginBottom: ['-bottom-'],
            rufMarginLeft: ['-left-']
        };
        this.rufMargin = '';
        this.rufMarginVertical = '';
        this.rufMarginHorizontal = '';
        this.rufMarginTop = '';
        this.rufMarginRight = '';
        this.rufMarginBottom = '';
        this.rufMarginLeft = '';
        this.margin = true;
    }
    RufMarginDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        Object.keys(changes).forEach(function (key) {
            _this.update(key, changes[key]);
        });
    };
    RufMarginDirective.prototype.update = function (key, change) {
        var _this = this;
        var previous = this._validateValue(change.previousValue);
        var current = this._validateValue(change.currentValue);
        var positions = this._positions[key];
        positions.forEach(function (pos) {
            // remove
            _this.renderer.removeClass(_this.el.nativeElement, _this.classPrefix + pos + previous);
            // add
            _this.renderer.addClass(_this.el.nativeElement, _this.classPrefix + pos + current);
        });
    };
    RufMarginDirective.prototype._validateValue = function (val) {
        if (RUF_MARGIN_VALUES.indexOf(val) !== -1) {
            return val;
        }
        return 'medium';
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "rufMargin", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "rufMarginVertical", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "rufMarginHorizontal", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "rufMarginTop", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "rufMarginRight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "rufMarginBottom", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "rufMarginLeft", void 0);
    tslib_1.__decorate([
        HostBinding('class.ruf-margin'),
        tslib_1.__metadata("design:type", Object)
    ], RufMarginDirective.prototype, "margin", void 0);
    RufMarginDirective = tslib_1.__decorate([
        Directive({
            selector: "\n    [rufMargin],\n    [rufMarginVertical],\n    [rufMarginHorizontal],\n    [rufMarginTop],\n    [rufMarginRight],\n    [rufMarginBottom],\n    [rufMarginLeft]\n  ",
            exportAs: 'rufMargin'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
    ], RufMarginDirective);
    return RufMarginDirective;
}());
export { RufMarginDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyZ2luLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvbGF5b3V0L21hcmdpbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBNEIsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRyxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQWM5RTtJQXVCRSw0QkFBb0IsRUFBYyxFQUFVLFFBQW1CO1FBQTNDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBdEJ2RCxnQkFBVyxHQUFHLFlBQVksQ0FBQztRQUUzQixlQUFVLEdBQUc7WUFDbkIsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDO1lBQ2hCLGlCQUFpQixFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztZQUN4QyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7WUFDMUMsWUFBWSxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3ZCLGNBQWMsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUMzQixlQUFlLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDN0IsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDO1NBQzFCLENBQUM7UUFFTyxjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2Ysc0JBQWlCLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLHdCQUFtQixHQUFHLEVBQUUsQ0FBQztRQUN6QixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQixtQkFBYyxHQUFHLEVBQUUsQ0FBQztRQUNwQixvQkFBZSxHQUFHLEVBQUUsQ0FBQztRQUNyQixrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUVLLFdBQU0sR0FBRyxJQUFJLENBQUM7SUFFbUIsQ0FBQztJQUVuRSx3Q0FBVyxHQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBSUM7UUFIQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDOUIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sbUNBQU0sR0FBZCxVQUFlLEdBQUcsRUFBRSxNQUFNO1FBQTFCLGlCQVdDO1FBVkMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0QsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekQsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV2QyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztZQUNuQixTQUFTO1lBQ1QsS0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDcEYsTUFBTTtZQUNOLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEtBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2xGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDJDQUFjLEdBQXRCLFVBQXVCLEdBQUc7UUFDeEIsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDekMsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFwQ1E7UUFBUixLQUFLLEVBQUU7O3lEQUFnQjtJQUNmO1FBQVIsS0FBSyxFQUFFOztpRUFBd0I7SUFDdkI7UUFBUixLQUFLLEVBQUU7O21FQUEwQjtJQUN6QjtRQUFSLEtBQUssRUFBRTs7NERBQW1CO0lBQ2xCO1FBQVIsS0FBSyxFQUFFOzs4REFBcUI7SUFDcEI7UUFBUixLQUFLLEVBQUU7OytEQUFzQjtJQUNyQjtRQUFSLEtBQUssRUFBRTs7NkRBQW9CO0lBRUs7UUFBaEMsV0FBVyxDQUFDLGtCQUFrQixDQUFDOztzREFBZTtJQXJCcEMsa0JBQWtCO1FBWjlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSx1S0FRVDtZQUNELFFBQVEsRUFBRSxXQUFXO1NBQ3RCLENBQUM7aURBd0J3QixVQUFVLEVBQW9CLFNBQVM7T0F2QnBELGtCQUFrQixDQWtEOUI7SUFBRCx5QkFBQztDQUFBLEFBbERELElBa0RDO1NBbERZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY29uc3QgUlVGX01BUkdJTl9WQUxVRVMgPSBbJ25vbmUnLCAnYXV0bycsICdzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBgXG4gICAgW3J1Zk1hcmdpbl0sXG4gICAgW3J1Zk1hcmdpblZlcnRpY2FsXSxcbiAgICBbcnVmTWFyZ2luSG9yaXpvbnRhbF0sXG4gICAgW3J1Zk1hcmdpblRvcF0sXG4gICAgW3J1Zk1hcmdpblJpZ2h0XSxcbiAgICBbcnVmTWFyZ2luQm90dG9tXSxcbiAgICBbcnVmTWFyZ2luTGVmdF1cbiAgYCxcbiAgZXhwb3J0QXM6ICdydWZNYXJnaW4nXG59KVxuZXhwb3J0IGNsYXNzIFJ1Zk1hcmdpbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIHByaXZhdGUgY2xhc3NQcmVmaXggPSAncnVmLW1hcmdpbic7XG5cbiAgcHJpdmF0ZSBfcG9zaXRpb25zID0ge1xuICAgIHJ1Zk1hcmdpbjogWyctJ10sXG4gICAgcnVmTWFyZ2luVmVydGljYWw6IFsnLXRvcC0nLCAnLWJvdHRvbS0nXSxcbiAgICBydWZNYXJnaW5Ib3Jpem9udGFsOiBbJy1sZWZ0LScsICctcmlnaHQtJ10sXG4gICAgcnVmTWFyZ2luVG9wOiBbJy10b3AtJ10sXG4gICAgcnVmTWFyZ2luUmlnaHQ6IFsnLXJpZ2h0LSddLFxuICAgIHJ1Zk1hcmdpbkJvdHRvbTogWyctYm90dG9tLSddLFxuICAgIHJ1Zk1hcmdpbkxlZnQ6IFsnLWxlZnQtJ11cbiAgfTtcblxuICBASW5wdXQoKSBydWZNYXJnaW4gPSAnJztcbiAgQElucHV0KCkgcnVmTWFyZ2luVmVydGljYWwgPSAnJztcbiAgQElucHV0KCkgcnVmTWFyZ2luSG9yaXpvbnRhbCA9ICcnO1xuICBASW5wdXQoKSBydWZNYXJnaW5Ub3AgPSAnJztcbiAgQElucHV0KCkgcnVmTWFyZ2luUmlnaHQgPSAnJztcbiAgQElucHV0KCkgcnVmTWFyZ2luQm90dG9tID0gJyc7XG4gIEBJbnB1dCgpIHJ1Zk1hcmdpbkxlZnQgPSAnJztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJ1Zi1tYXJnaW4nKSBtYXJnaW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hhbmdlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy51cGRhdGUoa2V5LCBjaGFuZ2VzW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUoa2V5LCBjaGFuZ2UpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX3ZhbGlkYXRlVmFsdWUoY2hhbmdlLnByZXZpb3VzVmFsdWUpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLl92YWxpZGF0ZVZhbHVlKGNoYW5nZS5jdXJyZW50VmFsdWUpO1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHRoaXMuX3Bvc2l0aW9uc1trZXldO1xuXG4gICAgcG9zaXRpb25zLmZvckVhY2gocG9zID0+IHtcbiAgICAgIC8vIHJlbW92ZVxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY2xhc3NQcmVmaXggKyBwb3MgKyBwcmV2aW91cyk7XG4gICAgICAvLyBhZGRcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmNsYXNzUHJlZml4ICsgcG9zICsgY3VycmVudCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF92YWxpZGF0ZVZhbHVlKHZhbCkge1xuICAgIGlmIChSVUZfTUFSR0lOX1ZBTFVFUy5pbmRleE9mKHZhbCkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gJ21lZGl1bSc7XG4gIH1cbn1cbiJdfQ==