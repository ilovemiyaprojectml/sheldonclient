import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var RufRouterUtilService = /** @class */ (function () {
    function RufRouterUtilService() {
        this._routeComp = {};
    }
    Object.defineProperty(RufRouterUtilService.prototype, "lastActivatedPath", {
        get: function () {
            return this._lastActivatedPath;
        },
        set: function (path) {
            this._lastActivatedPath = path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RufRouterUtilService.prototype, "lastActivatedOutlet", {
        get: function () {
            return this._lastActivatedOutlet;
        },
        set: function (outlet) {
            this._lastActivatedOutlet = outlet;
        },
        enumerable: true,
        configurable: true
    });
    RufRouterUtilService.prototype.setComponentRef = function (path, componentRef) {
        this._routeComp[path] = componentRef;
    };
    RufRouterUtilService.prototype.getComponentRef = function (path) {
        return this._routeComp[path];
    };
    RufRouterUtilService.prototype.fullPath = function (snapshot) {
        var path = '';
        var rootElems = snapshot.pathFromRoot;
        rootElems.forEach(function (child) {
            var urlArray = child.url;
            urlArray.forEach(function (url) {
                path += "/" + url.path;
            });
        });
        return path;
    };
    RufRouterUtilService.prototype.getLeafNodePath = function (route) {
        var path;
        // if (!route.routeConfig.loadChildren) {
        // If !route.component, this is a parent route. Return path of the leaf node in this case.
        if (!route.component) {
            var leafNode = this.getLeafNode(route);
            path = this.fullPath(leafNode);
        }
        else {
            path = this.fullPath(route);
        }
        // }
        return path;
    };
    RufRouterUtilService.prototype.getLeafNode = function (route) {
        if (!route.children || route.children.length === 0) {
            return route;
        }
        return this.getLeafNode(route.firstChild || route.children[0]);
    };
    RufRouterUtilService = tslib_1.__decorate([
        Injectable()
    ], RufRouterUtilService);
    return RufRouterUtilService;
}());
export { RufRouterUtilService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvcm91dGVyL3JvdXRlci11dGlsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBSXpEO0lBREE7UUFFVSxlQUFVLEdBQXlDLEVBQUUsQ0FBQztJQTREaEUsQ0FBQztJQXhEQyxzQkFBSSxtREFBaUI7YUFJckI7WUFDRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUNqQyxDQUFDO2FBTkQsVUFBc0IsSUFBWTtZQUNoQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBTUQsc0JBQUkscURBQW1CO2FBSXZCO1lBQ0UsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUM7UUFDbkMsQ0FBQzthQU5ELFVBQXdCLE1BQW9CO1lBQzFDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUM7UUFDckMsQ0FBQzs7O09BQUE7SUFNRCw4Q0FBZSxHQUFmLFVBQWdCLElBQVksRUFBRSxZQUErQjtRQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQztJQUN2QyxDQUFDO0lBRUQsOENBQWUsR0FBZixVQUFnQixJQUFJO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsdUNBQVEsR0FBUixVQUFTLFFBQWdDO1FBQ3ZDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDeEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFTLEtBQUs7WUFDOUIsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUMzQixRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVMsR0FBRztnQkFDM0IsSUFBSSxJQUFJLE1BQUksR0FBRyxDQUFDLElBQU0sQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsOENBQWUsR0FBZixVQUFnQixLQUE2QjtRQUMzQyxJQUFJLElBQUksQ0FBQztRQUNULHlDQUF5QztRQUN6QywwRkFBMEY7UUFDMUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDcEIsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0I7UUFDRCxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsMENBQVcsR0FBWCxVQUFZLEtBQVU7UUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2xELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQTVEVSxvQkFBb0I7UUFEaEMsVUFBVSxFQUFFO09BQ0Esb0JBQW9CLENBNkRoQztJQUFELDJCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E3RFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJPdXRsZXQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUnVmUm91dGVyVXRpbFNlcnZpY2Uge1xuICBwcml2YXRlIF9yb3V0ZUNvbXA6IHsgW2tleTogc3RyaW5nXTogQ29tcG9uZW50UmVmPGFueT4gfSA9IHt9O1xuICBwcml2YXRlIF9sYXN0QWN0aXZhdGVkUGF0aDogc3RyaW5nO1xuICBwcml2YXRlIF9sYXN0QWN0aXZhdGVkT3V0bGV0OiBSb3V0ZXJPdXRsZXQ7XG5cbiAgc2V0IGxhc3RBY3RpdmF0ZWRQYXRoKHBhdGg6IHN0cmluZykge1xuICAgIHRoaXMuX2xhc3RBY3RpdmF0ZWRQYXRoID0gcGF0aDtcbiAgfVxuXG4gIGdldCBsYXN0QWN0aXZhdGVkUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9sYXN0QWN0aXZhdGVkUGF0aDtcbiAgfVxuXG4gIHNldCBsYXN0QWN0aXZhdGVkT3V0bGV0KG91dGxldDogUm91dGVyT3V0bGV0KSB7XG4gICAgdGhpcy5fbGFzdEFjdGl2YXRlZE91dGxldCA9IG91dGxldDtcbiAgfVxuXG4gIGdldCBsYXN0QWN0aXZhdGVkT3V0bGV0KCk6IFJvdXRlck91dGxldCB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RBY3RpdmF0ZWRPdXRsZXQ7XG4gIH1cblxuICBzZXRDb21wb25lbnRSZWYocGF0aDogc3RyaW5nLCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+KSB7XG4gICAgdGhpcy5fcm91dGVDb21wW3BhdGhdID0gY29tcG9uZW50UmVmO1xuICB9XG5cbiAgZ2V0Q29tcG9uZW50UmVmKHBhdGgpOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX3JvdXRlQ29tcFtwYXRoXTtcbiAgfVxuXG4gIGZ1bGxQYXRoKHNuYXBzaG90OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogc3RyaW5nIHtcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGNvbnN0IHJvb3RFbGVtcyA9IHNuYXBzaG90LnBhdGhGcm9tUm9vdDtcbiAgICByb290RWxlbXMuZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgY29uc3QgdXJsQXJyYXkgPSBjaGlsZC51cmw7XG4gICAgICB1cmxBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICBwYXRoICs9IGAvJHt1cmwucGF0aH1gO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICBnZXRMZWFmTm9kZVBhdGgocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBzdHJpbmcge1xuICAgIGxldCBwYXRoO1xuICAgIC8vIGlmICghcm91dGUucm91dGVDb25maWcubG9hZENoaWxkcmVuKSB7XG4gICAgLy8gSWYgIXJvdXRlLmNvbXBvbmVudCwgdGhpcyBpcyBhIHBhcmVudCByb3V0ZS4gUmV0dXJuIHBhdGggb2YgdGhlIGxlYWYgbm9kZSBpbiB0aGlzIGNhc2UuXG4gICAgaWYgKCFyb3V0ZS5jb21wb25lbnQpIHtcbiAgICAgIGNvbnN0IGxlYWZOb2RlID0gdGhpcy5nZXRMZWFmTm9kZShyb3V0ZSk7XG4gICAgICBwYXRoID0gdGhpcy5mdWxsUGF0aChsZWFmTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGggPSB0aGlzLmZ1bGxQYXRoKHJvdXRlKTtcbiAgICB9XG4gICAgLy8gfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgZ2V0TGVhZk5vZGUocm91dGU6IGFueSk6IGFueSB7XG4gICAgaWYgKCFyb3V0ZS5jaGlsZHJlbiB8fCByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiByb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGVhZk5vZGUocm91dGUuZmlyc3RDaGlsZCB8fCByb3V0ZS5jaGlsZHJlblswXSk7XG4gIH1cbn1cbiJdfQ==