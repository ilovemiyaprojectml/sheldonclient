import { AfterViewInit, EventEmitter, ChangeDetectorRef, ElementRef, Renderer2, OnInit, OnChanges, OnDestroy, SimpleChanges, QueryList } from '@angular/core';
import { RufShellIntl } from '../utils/shell-intl';
import { RufDynamicMenubarItem } from './dynamic-menubar-item';
import { RufMenuLabelComponent } from '../menu-label/menu-label.component';
import { RufCanColor, RufMixinBase } from '../common/color/color';
export declare enum RufDynamicNavType {
    Nav = "nav",
    Tabs = "tabs"
}
export declare class RufDynamicMenubarComponent extends RufMixinBase implements AfterViewInit, OnInit, OnChanges, OnDestroy, RufCanColor {
    _elementRef: ElementRef;
    protected _renderer: Renderer2;
    private _intl;
    private _isMenuItemClosed;
    private _intlChanges;
    private _closeAriaLabel;
    private _type;
    items: RufDynamicMenubarItem[];
    private _selectedPath;
    menuLabels: QueryList<RufMenuLabelComponent>;
    tabLabels: any[];
    private tabSubscription;
    color: any;
    closeAriaLabel: string;
    type: RufDynamicNavType;
    selectedIndex: number;
    focusedIndex: number;
    closedItemIndexLessThanSelectedIndex: boolean;
    select: EventEmitter<RufDynamicMenubarItem>;
    closeEmitter: EventEmitter<RufDynamicMenubarItem>;
    navActions: any;
    constructor(_elementRef: ElementRef, _renderer: Renderer2, _intl: RufShellIntl, changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    selectedPath: string;
    private isChild;
    onSelect($event: any): void;
    onFocusChange($event: any): void;
    OnSelectFocusedIndex(event: any): void;
    onChildMenuToggle(event: any): void;
    onChildSelect($event: any, item: any): void;
    private matches;
    close(item: any): void;
    focusTabOnIndex(index: any): void;
    _handleKeydown(event: KeyboardEvent, item: any): void;
    ngOnDestroy(): void;
}
