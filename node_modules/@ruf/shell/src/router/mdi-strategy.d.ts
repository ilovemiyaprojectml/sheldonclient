import { ActivatedRouteSnapshot, DetachedRouteHandle } from '@angular/router';
import { RufRouteReuseStrategy } from './route-reuse-strategy';
import { RufRouterUtilService } from './router-util.service';
export declare class RufMDIStrategy implements RufRouteReuseStrategy {
    protected util: RufRouterUtilService;
    private handlers;
    constructor(util: RufRouterUtilService);
    /**
     * Decides when the route should be stored
     * @param route the route that the user is currently on
     * @returns boolean indicating whether the route should or should not be stored
     */
    shouldDetach(route: ActivatedRouteSnapshot): boolean;
    /**
     * Stores the complete route path and its component state (as ComponentRef) for later attachment
     * @param route This is stored for later comparison to requested routes, see `this.shouldAttach`
     * @param handle A DetachedRouteHandle which is later retrieved by this.retrieve to restore state
     */
    store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void;
    /**
     * Determines whether there is a stored route and, if yes, should it be rendered in place of requested route
     * @param route The route the user requested
     * @returns boolean indicating whether or not to render the stored route
     */
    shouldAttach(route: ActivatedRouteSnapshot): boolean;
    /**
     * Finds the locally stored instance of the requested route and returns it if it exists
     * @param route New route the user has requested
     * @returns DetachedRouteHandle object which can be used to render the component
     */
    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle;
    /**
     * Determines whether or not the current route should be reused
     * @param future The route the user is navigating to as triggered by the router
     * @param curr The route the user is currently on
     * @returns boolean indicating true if the user intends to leave the current route
     */
    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;
    /**
     *  Remove component reference from handlers.
     *  Destroy the route component
     *  @param path The key against which DetachedRouteHandle with component reference is stored for detached route
     */
    destroy(path: string): void;
}
