import { ElementRef, Renderer2, EventEmitter } from '@angular/core';
import { MediaObserver } from '@angular/flex-layout';
import { RufDynamicSidemenuItem } from './dynamic-sidemenu-item';
import { MatMenuTrigger } from '@angular/material/menu';
import { RufMenubarItem } from '../menubar//menubar-item.component';
import { RufToggleDirective } from '../toggle/toggle.directive';
export declare class RufDynamicSideMenuComponent {
    private document;
    private _renderer;
    private _mediaObserver;
    private _elementRef;
    items: RufDynamicSidemenuItem[];
    popupBackgroundClass: string;
    sideMenuPopupData: RufDynamicSidemenuItem;
    menuTrigger: MatMenuTrigger;
    trigger: ElementRef;
    _selectedPath: string;
    _activeColor: string;
    _inkbarPosition: any;
    multi: boolean;
    _select: EventEmitter<RufDynamicSidemenuItem>;
    private _triggers;
    minimized: boolean;
    minimizedXs: boolean;
    minimizedSm: boolean;
    minimizedMd: boolean;
    minimizedLg: boolean;
    minimizedXl: boolean;
    minimizedGtXs: boolean;
    minimizedGtSm: boolean;
    minimizedGtMd: boolean;
    minimizedGtLg: boolean;
    constructor(document: any, _renderer: Renderer2, _mediaObserver: MediaObserver, _elementRef: ElementRef);
    isMinimized(): boolean;
    onSelect($event: RufMenubarItem): void;
    getRufId(item: any): string;
    closeMenu(): void;
    setPopupData(event: any, data: any): void;
    onPopupClose(): void;
    keyHandler(event: any): void;
    getOverlayClasses(): string;
    toggleChildItems(currentTrigger: RufToggleDirective): void;
}
