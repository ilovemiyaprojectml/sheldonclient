import { EventEmitter, TemplateRef, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';
import { Overlay, OverlayConnectionPosition, OriginConnectionPosition, CdkOverlayOrigin, HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';
import { RufTriggerTarget } from '../trigger/trigger.interface';
export declare enum RufDropdownType {
    PopoverMenu = "popover-menu",
    ContextMenu = "context-menu",
    Dropdown = "dropdown"
}
export declare class RufDropdownPanelComponent implements RufTriggerTarget, OnChanges {
    private _overlay;
    private _viewContainerRef;
    origin: CdkOverlayOrigin;
    opened: boolean;
    hasBackdrop: boolean;
    openedChange: EventEmitter<boolean>;
    type: RufDropdownType;
    xPosition: string;
    yPosition: string;
    className: string;
    closeIcon: boolean;
    private _overlayRef;
    private _portal;
    content: TemplateRef<any>;
    toggle: EventEmitter<boolean>;
    constructor(_overlay: Overlay, _viewContainerRef: ViewContainerRef);
    ngOnChanges(changes: SimpleChanges): void;
    open(): void;
    _getOrigin(): {
        main: OriginConnectionPosition;
        fallback: OriginConnectionPosition;
    };
    _getOverlayPosition(): {
        main: OverlayConnectionPosition;
        fallback: OverlayConnectionPosition;
    };
    _getOriginValues(): {
        xCenterYBottom: OriginConnectionPosition;
        xCenterYTop: OriginConnectionPosition;
        xStartYBottom: OriginConnectionPosition;
        xStartYTop: OriginConnectionPosition;
        xStartYCenter: OriginConnectionPosition;
        xEndYBottom: OriginConnectionPosition;
        xEndYTop: OriginConnectionPosition;
        xEndYCenter: OriginConnectionPosition;
    };
    _getOverlayPositionValues(): {
        xCenterYTop: OverlayConnectionPosition;
        xCenterYBottom: OverlayConnectionPosition;
        xStartYTop: OverlayConnectionPosition;
        xStartYBottom: OverlayConnectionPosition;
        xStartYCenter: OverlayConnectionPosition;
        xEndYTop: OverlayConnectionPosition;
        xEndYBottom: OverlayConnectionPosition;
        xEndYCenter: OverlayConnectionPosition;
    };
    _getPositionStrategy(origin: any, overlay: any): {
        originPosition: any;
        overlayPosition: any;
    };
    _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos): {
        x: "start" | "end" | "center";
        y: "center" | "bottom" | "top";
    };
    onPositionChanged($event: any): void;
    close(): void;
    hasPopup(): boolean;
    handleKeydown(event: any): void;
    handleClick(event: any): void;
}
