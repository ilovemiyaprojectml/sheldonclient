/**The MIT License

Copyright (c) 2017 Google, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
import { FocusKeyManager, ListKeyManager } from '@angular/cdk/a11y';
// Focusable interface renamed to FocusableOption in @angular/cdk beta-10.
import { Subject } from 'rxjs';
import { HOME, END } from '@angular/cdk/keycodes';
export class RufKeyCodes {
}
RufKeyCodes.ENTER = 13;
RufKeyCodes.ESCAPE = 27;
RufKeyCodes.SPACE = 32;
RufKeyCodes.LEFT_ARROW = 37;
RufKeyCodes.UP_ARROW = 38;
RufKeyCodes.RIGHT_ARROW = 39;
RufKeyCodes.DOWN_ARROW = 40;
export class RufKeyboardNavigation {
    constructor() {
        this._direction = 'row';
    }
    // To receive select notifications, subscribe to this function
    init(container, items) {
        this._container = container;
        this._items = items;
        this._FocusKeyManager = new FocusKeyManager(items).withWrap();
        this._ListKeyManager = new ListKeyManager(items);
        if (items.length > 0) {
            this.setActiveItemWithoutFocus(0);
            this._ListKeyManager.setActiveItem.call(this._FocusKeyManager, 0);
        }
        this._subscription = new Subject();
        return this._subscription;
    }
    setActiveItem(index) {
        this._FocusKeyManager.setActiveItem(index);
    }
    setActiveItemWithoutFocus(index) {
        this._ListKeyManager.setActiveItem.call(this._FocusKeyManager, index);
    }
    navigate(event) {
        switch (event.keyCode) {
            case RufKeyCodes.ESCAPE:
                this._container.nativeElement.focus();
                break;
            case RufKeyCodes.LEFT_ARROW:
            case RufKeyCodes.UP_ARROW:
                this._FocusKeyManager.setPreviousItemActive();
                // prevent scrollbar catching the event
                this.preventEventPropagation(event);
                break;
            case RufKeyCodes.RIGHT_ARROW:
            case RufKeyCodes.DOWN_ARROW:
                this._FocusKeyManager.setNextItemActive();
                // prevent scrollbar catching the event
                this.preventEventPropagation(event);
                break;
            case RufKeyCodes.SPACE:
            case RufKeyCodes.ENTER:
                this.selectFocusedItem();
                // prevent scrollbar catching the event
                this.preventEventPropagation(event);
                break;
            case HOME:
                this._FocusKeyManager.setFirstItemActive();
                // prevent scrollbar catching the event
                this.preventEventPropagation(event);
                break;
            case END:
                this._FocusKeyManager.setLastItemActive();
                // prevent scrollbar catching the event
                this.preventEventPropagation(event);
                break;
            default:
                this._FocusKeyManager.onKeydown(event);
                break;
        }
    }
    preventEventPropagation(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    onKeyDown(event) {
        if (this._items.length === 0) {
            return;
        }
        this.navigate(event);
    }
    addTabIndex(focusableItems) {
        focusableItems.forEach((child, index) => {
            if (index === 0) {
                child._elementRef.nativeElement.setAttribute('tabindex', 0);
            }
            else {
                child._elementRef.nativeElement.setAttribute('tabindex', -1);
            }
        });
    }
    selectFocusedItem() {
        if (this._FocusKeyManager.activeItem) {
            this._subscription.next(this._FocusKeyManager.activeItem);
        }
    }
    focus(path) {
        if (!this._items || this._items.length === 0) {
            return;
        }
        const item = this._items.find(f => f.path === path);
        const index = this._items.toArray().indexOf(item);
        this._FocusKeyManager.setActiveItem(index);
    }
    isActive() {
        return this._FocusKeyManager.activeItem !== undefined;
    }
    setDirection(direction) {
        if (direction === 'column') {
            this._direction = direction;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,