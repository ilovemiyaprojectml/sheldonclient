import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostBinding, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
/**
 * Directive that can be applied on any element, and that toggles an attribute that can be used by the underlying element as need be.
 */
let RufToggleDirective = class RufToggleDirective extends CdkOverlayOrigin {
    constructor(elRef) {
        super(elRef);
        this.elRef = elRef;
        // boolean property that gets toggled when the underlying element is clicked
        // tslint:disable-next-line:no-input-rename
        this.value = false;
        this.chevron = false;
        this.arrow = false;
        this.toggleChange = new EventEmitter();
        this.toggle = true;
    }
    get active() {
        return this.value;
    }
    set rufToggle(val) {
        this.value = val || false;
    }
    set rufToggleChevron(val) {
        this.arrow = false;
        this.chevron = true;
        this.value = val || false;
    }
    set rufToggleArrow(val) {
        this.arrow = true;
        this.chevron = false;
        this.value = val || false;
    }
    get normal() {
        return !this.chevron && !this.arrow;
    }
    // select should focus the element and toggle value
    select(event) {
        this.elRef.nativeElement.focus();
        this.toggleValue(event);
    }
    toggleValue(event) {
        event.stopPropagation();
        event.preventDefault();
        // For Safari browser, event.stopPropagation() is not setting the value of
        // event.cancelBubble as true. So, we need to explicitly set it.
        event.cancelBubble = true;
        this.value = !this.value;
        this.toggleChange.emit({ trigger: this.elRef, value: this.value, event: event });
    }
    onClick(event) {
        this.toggleValue(event);
    }
    onKey(event) {
        switch (event.keyCode) {
            case ENTER:
            case SPACE:
                this.toggleValue(event);
                break;
            default:
        }
    }
};
tslib_1.__decorate([
    HostBinding('class.ruf-toggle-active'),
    tslib_1.__metadata("design:type", Object)
], RufToggleDirective.prototype, "value", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-toggle-chevron'),
    tslib_1.__metadata("design:type", Object)
], RufToggleDirective.prototype, "chevron", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-toggle-arrow'),
    tslib_1.__metadata("design:type", Object)
], RufToggleDirective.prototype, "arrow", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-active'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], RufToggleDirective.prototype, "active", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], RufToggleDirective.prototype, "rufToggle", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], RufToggleDirective.prototype, "rufToggleChevron", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], RufToggleDirective.prototype, "rufToggleArrow", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], RufToggleDirective.prototype, "toggleChange", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-toggle'),
    tslib_1.__metadata("design:type", Object)
], RufToggleDirective.prototype, "toggle", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-toggle-normal'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], RufToggleDirective.prototype, "normal", null);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RufToggleDirective.prototype, "onClick", null);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], RufToggleDirective.prototype, "onKey", null);
RufToggleDirective = tslib_1.__decorate([
    Directive({
        selector: '[rufToggle], [rufToggleChevron], [rufToggleArrow]',
        exportAs: 'rufToggle'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], RufToggleDirective);
export { RufToggleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvdG9nZ2xlL3RvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUcsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RDs7R0FFRztBQUtILElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQW1CLFNBQVEsZ0JBQWdCO0lBcUN0RCxZQUFvQixLQUFpQjtRQUNuQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFESyxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBcENyQyw0RUFBNEU7UUFDNUUsMkNBQTJDO1FBQ0gsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUViLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFFbEIsVUFBSyxHQUFHLEtBQUssQ0FBQztRQTBCM0MsaUJBQVksR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUVuQyxXQUFNLEdBQUcsSUFBSSxDQUFDO0lBSS9DLENBQUM7SUE3QkEsSUFBSSxNQUFNO1FBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFHSCxJQUFJLFNBQVMsQ0FBQyxHQUFZO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBR0QsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFZO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBR0QsSUFBSSxjQUFjLENBQUMsR0FBWTtRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQVdELElBQUksTUFBTTtRQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QyxDQUFDO0lBRUQsbURBQW1EO0lBQ25ELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQUs7UUFDZixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLDBFQUEwRTtRQUMxRSxnRUFBZ0U7UUFDaEUsS0FBSyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBR0QsT0FBTyxDQUFDLEtBQUs7UUFDWCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFHRCxLQUFLLENBQUMsS0FBb0I7UUFDeEIsUUFBUSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ3JCLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hCLE1BQU07WUFDUixRQUFRO1NBQ1Q7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQTFFeUM7SUFBdkMsV0FBVyxDQUFDLHlCQUF5QixDQUFDOztpREFBZTtBQUViO0lBQXhDLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQzs7bURBQWlCO0FBRWxCO0lBQXRDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQzs7aURBQWU7QUFHcEQ7SUFEQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7OztnREFHOUI7QUFHSDtJQURDLEtBQUssRUFBRTs7O21EQUdQO0FBR0Q7SUFEQyxLQUFLLEVBQUU7OzswREFLUDtBQUdEO0lBREMsS0FBSyxFQUFFOzs7d0RBS1A7QUFFUztJQUFULE1BQU0sRUFBRTtzQ0FBZSxZQUFZO3dEQUFnQztBQUVuQztJQUFoQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7O2tEQUFlO0FBTy9DO0lBREMsV0FBVyxDQUFDLHlCQUF5QixDQUFDOzs7Z0RBR3RDO0FBbUJEO0lBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7O2lEQUdqQztBQUdEO0lBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs2Q0FDdkIsYUFBYTs7K0NBUXpCO0FBNUVVLGtCQUFrQjtJQUo5QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbURBQW1EO1FBQzdELFFBQVEsRUFBRSxXQUFXO0tBQ3RCLENBQUM7NkNBc0MyQixVQUFVO0dBckMxQixrQkFBa0IsQ0E2RTlCO1NBN0VZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFTlRFUiwgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgQ2RrT3ZlcmxheU9yaWdpbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBjYW4gYmUgYXBwbGllZCBvbiBhbnkgZWxlbWVudCwgYW5kIHRoYXQgdG9nZ2xlcyBhbiBhdHRyaWJ1dGUgdGhhdCBjYW4gYmUgdXNlZCBieSB0aGUgdW5kZXJseWluZyBlbGVtZW50IGFzIG5lZWQgYmUuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tydWZUb2dnbGVdLCBbcnVmVG9nZ2xlQ2hldnJvbl0sIFtydWZUb2dnbGVBcnJvd10nLFxuICBleHBvcnRBczogJ3J1ZlRvZ2dsZSdcbn0pXG5leHBvcnQgY2xhc3MgUnVmVG9nZ2xlRGlyZWN0aXZlIGV4dGVuZHMgQ2RrT3ZlcmxheU9yaWdpbiB7XG4gIC8vIGJvb2xlYW4gcHJvcGVydHkgdGhhdCBnZXRzIHRvZ2dsZWQgd2hlbiB0aGUgdW5kZXJseWluZyBlbGVtZW50IGlzIGNsaWNrZWRcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWlucHV0LXJlbmFtZVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJ1Zi10b2dnbGUtYWN0aXZlJykgdmFsdWUgPSBmYWxzZTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJ1Zi10b2dnbGUtY2hldnJvbicpIGNoZXZyb24gPSBmYWxzZTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJ1Zi10b2dnbGUtYXJyb3cnKSBhcnJvdyA9IGZhbHNlO1xuXG4gICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJ1Zi1hY3RpdmUnKVxuICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cblxuICBASW5wdXQoKVxuICBzZXQgcnVmVG9nZ2xlKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMudmFsdWUgPSB2YWwgfHwgZmFsc2U7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgcnVmVG9nZ2xlQ2hldnJvbih2YWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFycm93ID0gZmFsc2U7XG4gICAgdGhpcy5jaGV2cm9uID0gdHJ1ZTtcbiAgICB0aGlzLnZhbHVlID0gdmFsIHx8IGZhbHNlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHJ1ZlRvZ2dsZUFycm93KHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuYXJyb3cgPSB0cnVlO1xuICAgIHRoaXMuY2hldnJvbiA9IGZhbHNlO1xuICAgIHRoaXMudmFsdWUgPSB2YWwgfHwgZmFsc2U7XG4gIH1cblxuICBAT3V0cHV0KCkgdG9nZ2xlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MucnVmLXRvZ2dsZScpIHRvZ2dsZSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsUmVmKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MucnVmLXRvZ2dsZS1ub3JtYWwnKVxuICBnZXQgbm9ybWFsKCkge1xuICAgIHJldHVybiAhdGhpcy5jaGV2cm9uICYmICF0aGlzLmFycm93O1xuICB9XG5cbiAgLy8gc2VsZWN0IHNob3VsZCBmb2N1cyB0aGUgZWxlbWVudCBhbmQgdG9nZ2xlIHZhbHVlXG4gIHNlbGVjdChldmVudCkge1xuICAgIHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIHRoaXMudG9nZ2xlVmFsdWUoZXZlbnQpO1xuICB9XG5cbiAgdG9nZ2xlVmFsdWUoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vIEZvciBTYWZhcmkgYnJvd3NlciwgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgaXMgbm90IHNldHRpbmcgdGhlIHZhbHVlIG9mXG4gICAgLy8gZXZlbnQuY2FuY2VsQnViYmxlIGFzIHRydWUuIFNvLCB3ZSBuZWVkIHRvIGV4cGxpY2l0bHkgc2V0IGl0LlxuICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgdGhpcy52YWx1ZSA9ICF0aGlzLnZhbHVlO1xuICAgIHRoaXMudG9nZ2xlQ2hhbmdlLmVtaXQoe3RyaWdnZXI6IHRoaXMuZWxSZWYsIHZhbHVlOiB0aGlzLnZhbHVlLCBldmVudDogZXZlbnR9KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgb25DbGljayhldmVudCkge1xuICAgIHRoaXMudG9nZ2xlVmFsdWUoZXZlbnQpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIG9uS2V5KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIEVOVEVSOlxuICAgICAgY2FzZSBTUEFDRTpcbiAgICAgICAgdGhpcy50b2dnbGVWYWx1ZShldmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cbn1cbiJdfQ==