import * as tslib_1 from "tslib";
import { ChangeDetectorRef, ChangeDetectionStrategy, Component, Directive, ViewEncapsulation, Input } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { RufShellIntl } from '../utils/shell-intl';
let RufCardControlsDirective = class RufCardControlsDirective {
};
RufCardControlsDirective = tslib_1.__decorate([
    Directive({
        selector: 'ruf-card-controls' // tslint:disable-line
    })
], RufCardControlsDirective);
export { RufCardControlsDirective };
let RufCardSubtitleDirective = class RufCardSubtitleDirective {
};
RufCardSubtitleDirective = tslib_1.__decorate([
    Directive({
        selector: 'ruf-card-subtitle' // tslint:disable-line
    })
], RufCardSubtitleDirective);
export { RufCardSubtitleDirective };
let RufCardComponent = class RufCardComponent {
    constructor(_intl, changeDetectorRef) {
        this._intl = _intl;
        this.expandable = false;
        this.expanded = true;
        this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());
    }
    get expandLabel() {
        return this._expandLabel || this._intl.card.aria.expandLabel;
    }
    set expandLabel(value) {
        this._expandLabel = value;
    }
    get collapseLabel() {
        return this._collapseLabel || this._intl.card.aria.collapseLabel;
    }
    set collapseLabel(value) {
        this._collapseLabel = value;
    }
    get toggleLabel() {
        return this.expanded ? this.collapseLabel : this.expandLabel;
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufCardComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufCardComponent.prototype, "expandable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufCardComponent.prototype, "expanded", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufCardComponent.prototype, "expandLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufCardComponent.prototype, "collapseLabel", null);
RufCardComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-card',
        template: "<mat-card class=\"ruf-card\" rufId=\"card_panel\" [ngClass]=\"{'ruf-card-collapsed': !expanded, 'ruf-card-expanded': expanded}\">\n  <mat-card-header class=\"ruf-card-header\" rufId=\"card_header\">\n    <button type=\"button\" mat-icon-button *ngIf=\"expandable\" (click)=\"expanded = !expanded\" class=\"ruf-card-expand\" [attr.aria-label]=\"toggleLabel\">\n      <mat-icon fisIcon=\"chevron\"></mat-icon>\n    </button>\n    <mat-card-title-group class=\"ruf-card-titlegroup\">\n      <mat-card-title class=\"ruf-card-title\" (click)=\"expandable && expanded = !expanded\">{{title}}</mat-card-title>\n      <mat-card-subtitle class=\"ruf-card-subtitle\">\n        <ng-content select=\"ruf-card-subtitle\"></ng-content>\n      </mat-card-subtitle>\n    </mat-card-title-group>\n    <div class=\"ruf-card-filler\"></div>\n    <div class=\"ruf-card-controls\">\n      <ng-content select=\"ruf-card-controls\"></ng-content>\n    </div>\n  </mat-card-header>\n  <mat-card-content class=\"ruf-card-content\" rufId=\"card_content\" [@expanded]=\"'' + expanded\">\n    <ng-content></ng-content>\n    <ng-content select=\"ruf-card-action-bar\"></ng-content>\n  </mat-card-content>\n</mat-card>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [
            trigger('expanded', [
                state('false', style({
                    height: 0,
                    visibility: 'hidden'
                })),
                state('true', style({
                    height: '*',
                    visibility: 'visible'
                })),
                transition('false => true', animate('300ms ease-in-out')),
                transition('true => false', animate('300ms ease-in-out'))
            ])
        ],
        styles: ["ruf-card{display:-webkit-box;display:flex}.ruf-card.mat-card{border-radius:2px;margin:0;padding:0}.ruf-card.mat-card .ruf-card-header{min-height:2.5rem;padding-left:12px}.ruf-card.mat-card .ruf-card-expand{cursor:pointer;height:30px;line-height:30px;margin:7px 5px 5px -5px;-webkit-transform:rotate(180deg);transform:rotate(180deg);-webkit-transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out;width:30px}.ruf-card.mat-card.ruf-card-collapsed .ruf-card-expand{-webkit-transform:rotate(0);transform:rotate(0)}.ruf-card.mat-card .mat-select-underline{display:none}.ruf-card.mat-card .ruf-card-content{overflow:hidden}.ruf-card.mat-card .mat-card-header-text{margin:0}.ruf-card.mat-card .ruf-card-titlegroup{-ms-grid-row-align:center;align-self:center;margin:0;padding:5px 5px 5px 0}.ruf-card.mat-card .ruf-card-subtitle,.ruf-card.mat-card .ruf-card-title{margin-bottom:0}.ruf-card.mat-card .ruf-card-metric,.ruf-card.mat-card .ruf-card-metric-description{padding-right:10px;text-align:right}.ruf-card.mat-card .ruf-card-subtitle:not(:first-child),.ruf-card.mat-card .ruf-card-title:not(:first-child){margin-top:0}.ruf-card.mat-card .ruf-card-filler{-webkit-box-flex:1;flex:1 1 auto}.ruf-card.mat-card .ruf-card-controls{-ms-grid-row-align:center;align-self:center;-webkit-box-flex:0;flex:0 0 auto;margin-left:20px;padding:5px}"]
    }),
    tslib_1.__metadata("design:paramtypes", [RufShellIntl, ChangeDetectorRef])
], RufCardComponent);
export { RufCardComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL2NhcmQvY2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUtuRCxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtDQUFHLENBQUE7QUFBM0Isd0JBQXdCO0lBSHBDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxzQkFBc0I7S0FDckQsQ0FBQztHQUNXLHdCQUF3QixDQUFHO1NBQTNCLHdCQUF3QjtBQUtyQyxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtDQUFHLENBQUE7QUFBM0Isd0JBQXdCO0lBSHBDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxzQkFBc0I7S0FDckQsQ0FBQztHQUNXLHdCQUF3QixDQUFHO1NBQTNCLHdCQUF3QjtBQTZCckMsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUE0QjNCLFlBQW9CLEtBQW1CLEVBQUUsaUJBQW9DO1FBQXpELFVBQUssR0FBTCxLQUFLLENBQWM7UUF2QjlCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDbkIsYUFBUSxHQUFHLElBQUksQ0FBQztRQXVCdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFyQkQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDL0QsQ0FBQztJQUNELElBQUksV0FBVyxDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUdELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQ25FLENBQUM7SUFDRCxJQUFJLGFBQWEsQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDL0QsQ0FBQztJQU1ELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Q0FDRixDQUFBO0FBL0JVO0lBQVIsS0FBSyxFQUFFOzsrQ0FBVztBQUNWO0lBQVIsS0FBSyxFQUFFOztvREFBb0I7QUFDbkI7SUFBUixLQUFLLEVBQUU7O2tEQUFpQjtBQUd6QjtJQURDLEtBQUssRUFBRTs7O21EQUdQO0FBTUQ7SUFEQyxLQUFLLEVBQUU7OztxREFHUDtBQW5CVSxnQkFBZ0I7SUEzQjVCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxVQUFVO1FBQ3BCLGlyQ0FBa0M7UUFFbEMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFO1lBQ1YsT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDbEIsS0FBSyxDQUNILE9BQU8sRUFDUCxLQUFLLENBQUM7b0JBQ0osTUFBTSxFQUFFLENBQUM7b0JBQ1QsVUFBVSxFQUFFLFFBQVE7aUJBQ3JCLENBQUMsQ0FDSDtnQkFDRCxLQUFLLENBQ0gsTUFBTSxFQUNOLEtBQUssQ0FBQztvQkFDSixNQUFNLEVBQUUsR0FBRztvQkFDWCxVQUFVLEVBQUUsU0FBUztpQkFDdEIsQ0FBQyxDQUNIO2dCQUNELFVBQVUsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBQ3pELFVBQVUsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDMUQsQ0FBQztTQUNIOztLQUNGLENBQUM7NkNBNkIyQixZQUFZLEVBQXFCLGlCQUFpQjtHQTVCbEUsZ0JBQWdCLENBbUM1QjtTQW5DWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRGlyZWN0aXZlLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFJ1ZlNoZWxsSW50bCB9IGZyb20gJy4uL3V0aWxzL3NoZWxsLWludGwnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdydWYtY2FyZC1jb250cm9scycgLy8gdHNsaW50OmRpc2FibGUtbGluZVxufSlcbmV4cG9ydCBjbGFzcyBSdWZDYXJkQ29udHJvbHNEaXJlY3RpdmUge31cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAncnVmLWNhcmQtc3VidGl0bGUnIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbn0pXG5leHBvcnQgY2xhc3MgUnVmQ2FyZFN1YnRpdGxlRGlyZWN0aXZlIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3J1Zi1jYXJkJyxcbiAgdGVtcGxhdGVVcmw6ICdjYXJkLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ2NhcmQuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCdleHBhbmRlZCcsIFtcbiAgICAgIHN0YXRlKFxuICAgICAgICAnZmFsc2UnLFxuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgc3RhdGUoXG4gICAgICAgICd0cnVlJyxcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIGhlaWdodDogJyonLFxuICAgICAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJ1xuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIHRyYW5zaXRpb24oJ2ZhbHNlID0+IHRydWUnLCBhbmltYXRlKCczMDBtcyBlYXNlLWluLW91dCcpKSxcbiAgICAgIHRyYW5zaXRpb24oJ3RydWUgPT4gZmFsc2UnLCBhbmltYXRlKCczMDBtcyBlYXNlLWluLW91dCcpKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUnVmQ2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX2ludGxDaGFuZ2VzOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgX2V4cGFuZExhYmVsOiBzdHJpbmc7XG4gIHByaXZhdGUgX2NvbGxhcHNlTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgdGl0bGU6ICcnO1xuICBASW5wdXQoKSBleHBhbmRhYmxlID0gZmFsc2U7XG4gIEBJbnB1dCgpIGV4cGFuZGVkID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBnZXQgZXhwYW5kTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4cGFuZExhYmVsIHx8IHRoaXMuX2ludGwuY2FyZC5hcmlhLmV4cGFuZExhYmVsO1xuICB9XG4gIHNldCBleHBhbmRMYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fZXhwYW5kTGFiZWwgPSB2YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCBjb2xsYXBzZUxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2xsYXBzZUxhYmVsIHx8IHRoaXMuX2ludGwuY2FyZC5hcmlhLmNvbGxhcHNlTGFiZWw7XG4gIH1cbiAgc2V0IGNvbGxhcHNlTGFiZWwodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbGxhcHNlTGFiZWwgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCB0b2dnbGVMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBhbmRlZCA/IHRoaXMuY29sbGFwc2VMYWJlbCA6IHRoaXMuZXhwYW5kTGFiZWw7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pbnRsOiBSdWZTaGVsbEludGwsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHRoaXMuX2ludGxDaGFuZ2VzID0gX2ludGwuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4gY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5faW50bENoYW5nZXMudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19