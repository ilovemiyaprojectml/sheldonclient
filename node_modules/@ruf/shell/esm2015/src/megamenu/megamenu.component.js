import * as tslib_1 from "tslib";
import { RufSidemenuComponent } from './../sidemenu/sidemenu.component';
import { RufSearchService } from './menu-search.service';
import { ChangeDetectorRef, Component, Input, Output, EventEmitter, ViewEncapsulation, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { Subject, merge, of } from 'rxjs';
import { debounceTime, distinctUntilChanged, map, startWith, switchMap, withLatestFrom } from 'rxjs/operators';
import { RufShellIntl } from '../utils/shell-intl';
let RufMegamenuComponent = class RufMegamenuComponent {
    constructor(searchService, _intl, changeDetectorRef) {
        this.searchService = searchService;
        this._intl = _intl;
        this.items = [];
        this.select = new EventEmitter();
        // Subjects: denotes user interaction streams
        // search related properties
        this.searchTerms$ = new Subject(); // stream of search terms
        // sidemenu select event stream
        this.selectedSidemenuItems$ = new Subject(); // stream of selected items (same type has this.items)
        this.preparedSearchableItems = (term) => [];
        this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());
    }
    get searchPlaceholder() {
        return this._searchPlaceholder || this._intl.megamenu.placeholder;
    }
    set searchPlaceholder(value) {
        this._searchPlaceholder = value;
    }
    get clearSearchAriaLabel() {
        return this._clearSearchAriaLabel || this._intl.megamenu.aria.clearSearchLabel;
    }
    set clearSearchAriaLabel(value) {
        this._clearSearchAriaLabel = value;
    }
    ngOnInit() {
        // map search terms to a search results stream ready to be consumed by sitemap
        const searchResults$ = this.searchTerms$.pipe(distinctUntilChanged(), debounceTime(400), // don't search unless user stopped typing for 400ms
        switchMap(term => this.search(term)), // ignore already triggered searches.
        startWith([])); // start with empty results
        // map sidemenu select event to selected item's children array
        const selectedItemChildren$ = this.selectedSidemenuItems$.pipe(withLatestFrom(searchResults$), // combine each event with the latest of the searchResults$ stream
        map(([item, searchResults]) => {
            if (!item) {
                return searchResults || [];
            }
            // map to the selected item's children or an empty array.
            return item.data || [];
        }));
        // sitemap data stream is a merge of search results and selected item's children streams
        this.sitemapItems$ = merge(selectedItemChildren$, searchResults$);
    }
    ngOnChanges(changes) {
        // when any changes to the items occur, re-prepare the search
        if (changes.items && changes.items.currentValue) {
            this.preparedSearchableItems = this.searchService.prepareSearch(changes.items.currentValue);
        }
    }
    ngAfterViewInit() {
        // once the sidemenu is created (after view init), select first sidemenu item
        setTimeout(() => {
            if (this.items[0]) {
                this.sidemenu.select(this.items[0].path, this.items[0].children);
            }
        });
    }
    search(term) {
        let results = this.items;
        // if no prepared searchable data is available we just return everything
        if (this.preparedSearchableItems) {
            // now we process the searching of the data
            results = this.preparedSearchableItems(term);
        }
        if (!term || term === '') {
            results = [];
        }
        // return observable of results using same type has this.item
        return of(results);
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufMegamenuComponent.prototype, "searchPlaceholder", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufMegamenuComponent.prototype, "clearSearchAriaLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], RufMegamenuComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], RufMegamenuComponent.prototype, "select", void 0);
tslib_1.__decorate([
    ViewChild('sidemenu', { static: true }),
    tslib_1.__metadata("design:type", RufSidemenuComponent)
], RufMegamenuComponent.prototype, "sidemenu", void 0);
RufMegamenuComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-megamenu',
        template: "<div class=\"ruf-sidemenu-container\">\n  <ruf-megamenu-search (filterValue)=\"searchTerms$.next($event)\" (inputFocus)=\"selectedSidemenuItems$.next()\" [placeholder]=\"searchPlaceholder\" [clearSearchLabel]=\"clearSearchAriaLabel\"></ruf-megamenu-search>\n  <ruf-sidemenu #sidemenu [selectedPath]=\"(selectedSidemenuItems$ | async)?.path\" (select)=\"selectedSidemenuItems$.next($event);\">\n    <ruf-sidemenu-item *ngFor=\"let item of items\" [path]=\"item.path\" [data]=\"item.children\">{{item.label}}</ruf-sidemenu-item>\n  </ruf-sidemenu>\n</div>\n<div class=\"ruf-sitemap-container\">\n  <ruf-sitemap [items]=\"sitemapItems$\" (select)=\"select.emit($event)\">\n  </ruf-sitemap>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [RufSearchService],
        styles: ["ruf-megamenu{display:-webkit-box;display:flex;flex-shrink:0;overflow-x:auto;padding:20px 20px 20px 0;width:100%}ruf-megamenu .ruf-sidemenu-container{height:100%;max-width:200px;min-width:200px;overflow-x:hidden;overflow-y:auto}ruf-megamenu .ruf-sidemenu-container ruf-sidemenu{flex-shrink:0;min-width:200px}ruf-megamenu .fis-search-input-container,ruf-megamenu .ruf-focus{border-left-style:solid;border-left-width:2px}ruf-megamenu .ruf-sitemap-container{border-style:solid;border-width:20px;display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1 1 auto}ruf-megamenu .ruf-sidemenu-container::-webkit-scrollbar{width:.5em}ruf-megamenu ruf-sitemap{padding:18px}ruf-megamenu::-webkit-scrollbar{height:.5em}"]
    }),
    tslib_1.__metadata("design:paramtypes", [RufSearchService, RufShellIntl, ChangeDetectorRef])
], RufMegamenuComponent);
export { RufMegamenuComponent };
//# sourceMappingURL=data:application/json;base64,