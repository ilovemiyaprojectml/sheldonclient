import * as tslib_1 from "tslib";
import { trigger, state, style, transition, animate } from '@angular/animations';
import { Component, HostBinding, ViewEncapsulation, Input, ContentChildren, QueryList, forwardRef, ElementRef, HostListener } from '@angular/core';
import { RufSidemenuItemComponent } from './sidemenu-item.component';
import { RufKeyboardNavigation, RufKeyCodes } from '../input/keyboard';
import { RufSidemenuComponent } from './sidemenu.component';
import { RufToggleDirective } from '../toggle/toggle.directive';
/**
 * description
 */
let RufSidemenuChildrenComponent = class RufSidemenuChildrenComponent {
    constructor(_elementRef, sidemenuComp) {
        this._elementRef = _elementRef;
        this.sidemenuComp = sidemenuComp;
        this.visible = true;
        this.sidemenuChildren = true;
    }
    ngOnChanges(changes) {
        if (changes.visible) {
            this.visibleState = changes.visible.currentValue;
        }
    }
    ngAfterContentInit() {
        if (this.childItems && this.childItems.length > 0) {
            this._keyboardSideNav = new RufKeyboardNavigation();
            this._keyboardSideNav.init(this._elementRef, this.childItems).subscribe(path => {
                this.sidemenuComp.select(path.path, path.data);
            });
        }
    }
    setActiveItem(event) {
        // set active item when parent is clicked
        if (event.toState) {
            this._keyboardSideNav.setActiveItem(0);
        }
    }
    onKey(event) {
        switch (event.keyCode) {
            case RufKeyCodes.ESCAPE:
                if (this.menuTrigger) {
                    this.menuTrigger.select(event);
                }
                break;
            default:
                if (this._keyboardSideNav && this._keyboardSideNav.isActive()) {
                    this._keyboardSideNav.onKeyDown(event);
                }
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufSidemenuChildrenComponent.prototype, "visible", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", RufToggleDirective)
], RufSidemenuChildrenComponent.prototype, "menuTrigger", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-sidemenu-children'),
    tslib_1.__metadata("design:type", Object)
], RufSidemenuChildrenComponent.prototype, "sidemenuChildren", void 0);
tslib_1.__decorate([
    HostBinding('@visible'),
    tslib_1.__metadata("design:type", Boolean)
], RufSidemenuChildrenComponent.prototype, "visibleState", void 0);
tslib_1.__decorate([
    ContentChildren(forwardRef(() => RufSidemenuItemComponent)),
    tslib_1.__metadata("design:type", QueryList)
], RufSidemenuChildrenComponent.prototype, "childItems", void 0);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], RufSidemenuChildrenComponent.prototype, "onKey", null);
RufSidemenuChildrenComponent = tslib_1.__decorate([
    Component({
        selector: `[rufSidemenuChildren], ruf-sidemenu-children`,
        exportAs: 'rufSidemenuChildren',
        template: `<div (@visible.done)="setActiveItem($event)" [@visible]="visible"><ng-content></ng-content></div>`,
        encapsulation: ViewEncapsulation.None,
        animations: [
            trigger('visible', [
                state('0', style({
                    height: 0
                })),
                state('1', style({
                    height: '*'
                })),
                transition('0 => 1', animate('300ms ease-in-out')),
                transition('1 => 0', animate('300ms ease-in-out'))
            ])
        ]
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, RufSidemenuComponent])
], RufSidemenuChildrenComponent);
export { RufSidemenuChildrenComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW1lbnUtY2hpbGRyZW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ1Zi9zaGVsbC8iLCJzb3VyY2VzIjpbInNyYy9zaWRlbWVudS9zaWRlbWVudS1jaGlsZHJlbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakYsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsaUJBQWlCLEVBQ2pCLEtBQUssRUFHTCxlQUFlLEVBQ2YsU0FBUyxFQUNULFVBQVUsRUFFVixVQUFVLEVBQ1YsWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVoRTs7R0FFRztBQW1CSCxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtJQVV2QyxZQUFvQixXQUF1QixFQUFVLFlBQWtDO1FBQW5FLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQXNCO1FBVDlFLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFFb0IscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBT3NCLENBQUM7SUFFM0YsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7WUFDcEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzdFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pELENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQUs7UUFDakIseUNBQXlDO1FBQ3pDLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUdELEtBQUssQ0FBQyxLQUFvQjtRQUN4QixRQUFRLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDckIsS0FBSyxXQUFXLENBQUMsTUFBTTtnQkFDckIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO29CQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDaEM7Z0JBQ0QsTUFBTTtZQUNSO2dCQUNFLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRTtvQkFDN0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDeEM7U0FDSjtJQUNILENBQUM7Q0FDRixDQUFBO0FBL0NVO0lBQVIsS0FBSyxFQUFFOzs2REFBZ0I7QUFDZjtJQUFSLEtBQUssRUFBRTtzQ0FBYyxrQkFBa0I7aUVBQUM7QUFDRztJQUEzQyxXQUFXLENBQUMsNkJBQTZCLENBQUM7O3NFQUF5QjtBQUMzQztJQUF4QixXQUFXLENBQUMsVUFBVSxDQUFDOztrRUFBdUI7QUFJL0M7SUFEQyxlQUFlLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHdCQUF3QixDQUFDLENBQUM7c0NBQ2hELFNBQVM7Z0VBQTJCO0FBMkJoRDtJQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7NkNBQ3ZCLGFBQWE7O3lEQVl6QjtBQS9DVSw0QkFBNEI7SUFsQnhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw4Q0FBOEM7UUFDeEQsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQixRQUFRLEVBQUUsbUdBQW1HO1FBQzdHLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1FBQ3JDLFVBQVUsRUFBRTtZQUNWLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0JBQ2pCLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO29CQUNmLE1BQU0sRUFBRSxDQUFDO2lCQUNWLENBQUMsQ0FBQztnQkFDSCxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQztvQkFDZixNQUFNLEVBQUUsR0FBRztpQkFDWixDQUFDLENBQUM7Z0JBQ0gsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDbEQsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQzthQUNuRCxDQUFDO1NBQ0g7S0FDRixDQUFDOzZDQVdpQyxVQUFVLEVBQXdCLG9CQUFvQjtHQVY1RSw0QkFBNEIsQ0FnRHhDO1NBaERZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRyaWdnZXIsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgYW5pbWF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBIb3N0QmluZGluZyxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgUXVlcnlMaXN0LFxuICBmb3J3YXJkUmVmLFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSdWZTaWRlbWVudUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL3NpZGVtZW51LWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IFJ1ZktleWJvYXJkTmF2aWdhdGlvbiwgUnVmS2V5Q29kZXMgfSBmcm9tICcuLi9pbnB1dC9rZXlib2FyZCc7XG5pbXBvcnQgeyBSdWZTaWRlbWVudUNvbXBvbmVudCB9IGZyb20gJy4vc2lkZW1lbnUuY29tcG9uZW50JztcbmltcG9ydCB7IFJ1ZlRvZ2dsZURpcmVjdGl2ZSB9IGZyb20gJy4uL3RvZ2dsZS90b2dnbGUuZGlyZWN0aXZlJztcblxuLyoqXG4gKiBkZXNjcmlwdGlvblxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGBbcnVmU2lkZW1lbnVDaGlsZHJlbl0sIHJ1Zi1zaWRlbWVudS1jaGlsZHJlbmAsXG4gIGV4cG9ydEFzOiAncnVmU2lkZW1lbnVDaGlsZHJlbicsXG4gIHRlbXBsYXRlOiBgPGRpdiAoQHZpc2libGUuZG9uZSk9XCJzZXRBY3RpdmVJdGVtKCRldmVudClcIiBbQHZpc2libGVdPVwidmlzaWJsZVwiPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj5gLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBhbmltYXRpb25zOiBbXG4gICAgdHJpZ2dlcigndmlzaWJsZScsIFtcbiAgICAgIHN0YXRlKCcwJywgc3R5bGUoe1xuICAgICAgICBoZWlnaHQ6IDBcbiAgICAgIH0pKSxcbiAgICAgIHN0YXRlKCcxJywgc3R5bGUoe1xuICAgICAgICBoZWlnaHQ6ICcqJ1xuICAgICAgfSkpLFxuICAgICAgdHJhbnNpdGlvbignMCA9PiAxJywgYW5pbWF0ZSgnMzAwbXMgZWFzZS1pbi1vdXQnKSksXG4gICAgICB0cmFuc2l0aW9uKCcxID0+IDAnLCBhbmltYXRlKCczMDBtcyBlYXNlLWluLW91dCcpKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUnVmU2lkZW1lbnVDaGlsZHJlbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBJbnB1dCgpIHZpc2libGUgPSB0cnVlO1xuICBASW5wdXQoKSBtZW51VHJpZ2dlcjogUnVmVG9nZ2xlRGlyZWN0aXZlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJ1Zi1zaWRlbWVudS1jaGlsZHJlbicpIHNpZGVtZW51Q2hpbGRyZW4gPSB0cnVlO1xuICBASG9zdEJpbmRpbmcoJ0B2aXNpYmxlJykgdmlzaWJsZVN0YXRlOiBib29sZWFuO1xuXG4gIHByaXZhdGUgX2tleWJvYXJkU2lkZU5hdjogUnVmS2V5Ym9hcmROYXZpZ2F0aW9uO1xuICBAQ29udGVudENoaWxkcmVuKGZvcndhcmRSZWYoKCkgPT4gUnVmU2lkZW1lbnVJdGVtQ29tcG9uZW50KSlcbiAgY2hpbGRJdGVtczogUXVlcnlMaXN0PFJ1ZlNpZGVtZW51SXRlbUNvbXBvbmVudD47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBzaWRlbWVudUNvbXA6IFJ1ZlNpZGVtZW51Q29tcG9uZW50KSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy52aXNpYmxlKSB7XG4gICAgICB0aGlzLnZpc2libGVTdGF0ZSA9IGNoYW5nZXMudmlzaWJsZS5jdXJyZW50VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLmNoaWxkSXRlbXMgJiYgdGhpcy5jaGlsZEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuX2tleWJvYXJkU2lkZU5hdiA9IG5ldyBSdWZLZXlib2FyZE5hdmlnYXRpb24oKTtcbiAgICAgIHRoaXMuX2tleWJvYXJkU2lkZU5hdi5pbml0KHRoaXMuX2VsZW1lbnRSZWYsIHRoaXMuY2hpbGRJdGVtcykuc3Vic2NyaWJlKHBhdGggPT4ge1xuICAgICAgICB0aGlzLnNpZGVtZW51Q29tcC5zZWxlY3QocGF0aC5wYXRoLCBwYXRoLmRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2V0QWN0aXZlSXRlbShldmVudCkge1xuICAgIC8vIHNldCBhY3RpdmUgaXRlbSB3aGVuIHBhcmVudCBpcyBjbGlja2VkXG4gICAgaWYgKGV2ZW50LnRvU3RhdGUpIHtcbiAgICAgIHRoaXMuX2tleWJvYXJkU2lkZU5hdi5zZXRBY3RpdmVJdGVtKDApO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICBvbktleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgY2FzZSBSdWZLZXlDb2Rlcy5FU0NBUEU6XG4gICAgICAgIGlmICh0aGlzLm1lbnVUcmlnZ2VyKSB7XG4gICAgICAgICAgdGhpcy5tZW51VHJpZ2dlci5zZWxlY3QoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHRoaXMuX2tleWJvYXJkU2lkZU5hdiAmJiB0aGlzLl9rZXlib2FyZFNpZGVOYXYuaXNBY3RpdmUoKSkge1xuICAgICAgICAgIHRoaXMuX2tleWJvYXJkU2lkZU5hdi5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=