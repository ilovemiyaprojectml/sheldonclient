import * as tslib_1 from "tslib";
import { ElementRef, ViewContainerRef, TemplateRef, Input, Directive, ChangeDetectorRef } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout';
const FALSY = ['false', false, 0];
let RufIfDirective = class RufIfDirective extends BaseDirective {
    constructor(templateRef, viewContainer, monitor, elRef, styleUtils, changeDetectorRef) {
        super(monitor, elRef, styleUtils);
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.elRef = elRef;
        this.styleUtils = styleUtils;
        this.changeDetectorRef = changeDetectorRef;
        this.isAlreadyInserted = false;
    }
    set rufIfXs(val) {
        this._cacheInput('rufIfXs', val);
    }
    set rufIfGtXs(val) {
        this._cacheInput('rufIfGtXs', val);
    }
    set rufIfSm(val) {
        this._cacheInput('rufIfSm', val);
    }
    set rufIfGtSm(val) {
        this._cacheInput('rufIfGtSm', val);
    }
    set rufIfMd(val) {
        this._cacheInput('rufIfMd', val);
    }
    set rufIfGtMd(val) {
        this._cacheInput('rufIfGtMd', val);
    }
    set rufIfLg(val) {
        this._cacheInput('rufIfLg', val);
    }
    set rufIfGtLg(val) {
        this._cacheInput('rufIfGtLg', val);
    }
    set rufIfXl(val) {
        this._cacheInput('rufIfXl', val);
    }
    _getDisplayStyle() {
        // this is not used for rufIf, only prevents error from being throw as BaseDirective invokes it
        return 'block';
    }
    ngOnChanges(changes) {
        if (changes['rufIf'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    }
    ngOnInit() {
        this._listenForMediaQueryChanges('rufIf', false, (changes) => {
            this._updateWithValue(changes.value);
            this.changeDetectorRef.markForCheck();
        });
        this._updateWithValue();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
    }
    _updateWithValue(value) {
        value = value || this._getDefaultVal('rufIf', false);
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        const shouldShow = this._validateTruthy(value);
        this._update(shouldShow);
    }
    // Insert or remove the template
    _update(value) {
        if (value && !this.isAlreadyInserted) {
            this.viewContainer.createEmbeddedView(this.templateRef);
            this.isAlreadyInserted = true;
        }
        else if (!value && this.isAlreadyInserted) {
            this.viewContainer.clear();
            this.isAlreadyInserted = false;
        }
    }
    _validateTruthy(value) {
        return FALSY.indexOf(value) === -1;
    }
};
tslib_1.__decorate([
    Input('rufIfXs'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfXs", null);
tslib_1.__decorate([
    Input('rufIfGtXs'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfGtXs", null);
tslib_1.__decorate([
    Input('rufIfSm'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfSm", null);
tslib_1.__decorate([
    Input('rufIfGtSm'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfGtSm", null);
tslib_1.__decorate([
    Input('rufIfMd'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfMd", null);
tslib_1.__decorate([
    Input('rufIfGtMd'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfGtMd", null);
tslib_1.__decorate([
    Input('rufIfLg'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfLg", null);
tslib_1.__decorate([
    Input('rufIfGtLg'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfGtLg", null);
tslib_1.__decorate([
    Input('rufIfXl'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RufIfDirective.prototype, "rufIfXl", null);
RufIfDirective = tslib_1.__decorate([
    Directive({
        selector: `
    [rufIfXs],
    [rufIfGtXs],
    [rufIfSm],
    [rufIfGtSm],
    [rufIfMd],
    [rufIfGtMd],
    [rufIfLg],
    [rufIfGtLg],
    [rufIfXl]
  `
    }),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        MediaMonitor,
        ElementRef,
        StyleUtils,
        ChangeDetectorRef])
], RufIfDirective);
export { RufIfDirective };
//# sourceMappingURL=data:application/json;base64,