import * as tslib_1 from "tslib";
import { Directive, HostBinding, Input, Renderer2, ElementRef } from '@angular/core';
export const RUF_PADDING_VALUES = ['none', 'auto', 'small', 'medium', 'large'];
let RufPaddingDirective = class RufPaddingDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.classPrefix = 'ruf-padding';
        this._positions = {
            rufPadding: ['-'],
            rufPaddingVertical: ['-top-', '-bottom-'],
            rufPaddingHorizontal: ['-left-', '-right-'],
            rufPaddingTop: ['-top-'],
            rufPaddingRight: ['-right-'],
            rufPaddingBottom: ['-bottom-'],
            rufPaddingLeft: ['-left-']
        };
        this.rufPadding = '';
        this.rufPaddingVertical = '';
        this.rufPaddingHorizontal = '';
        this.rufPaddingTop = '';
        this.rufPaddingRight = '';
        this.rufPaddingBottom = '';
        this.rufPaddingLeft = '';
        this.padding = true;
    }
    ngOnChanges(changes) {
        Object.keys(changes).forEach(key => {
            this.update(key, changes[key]);
        });
    }
    update(key, change) {
        const previous = this._validateValue(change.previousValue);
        const current = this._validateValue(change.currentValue);
        const positions = this._positions[key];
        positions.forEach(pos => {
            // remove
            this.renderer.removeClass(this.el.nativeElement, this.classPrefix + pos + previous);
            // add
            this.renderer.addClass(this.el.nativeElement, this.classPrefix + pos + current);
        });
    }
    _validateValue(val) {
        if (RUF_PADDING_VALUES.indexOf(val) !== -1) {
            return val;
        }
        return 'medium';
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "rufPadding", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "rufPaddingVertical", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "rufPaddingHorizontal", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "rufPaddingTop", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "rufPaddingRight", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "rufPaddingBottom", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "rufPaddingLeft", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-padding'),
    tslib_1.__metadata("design:type", Object)
], RufPaddingDirective.prototype, "padding", void 0);
RufPaddingDirective = tslib_1.__decorate([
    Directive({
        selector: `
    [rufPadding],
    [rufPaddingVertical],
    [rufPaddingHorizontal],
    [rufPaddingTop],
    [rufPaddingRight],
    [rufPaddingBottom],
    [rufPaddingLeft]
  `,
        exportAs: 'rufPadding'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], RufPaddingDirective);
export { RufPaddingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFkZGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL2xheW91dC9wYWRkaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUE0QixTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9HLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBYy9FLElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBdUI5QixZQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUF0QnZELGdCQUFXLEdBQUcsYUFBYSxDQUFDO1FBRTVCLGVBQVUsR0FBRztZQUNuQixVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDakIsa0JBQWtCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDO1lBQ3pDLG9CQUFvQixFQUFFLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztZQUMzQyxhQUFhLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDeEIsZUFBZSxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQzVCLGdCQUFnQixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQzlCLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQztTQUMzQixDQUFDO1FBRU8sZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNoQix1QkFBa0IsR0FBRyxFQUFFLENBQUM7UUFDeEIseUJBQW9CLEdBQUcsRUFBRSxDQUFDO1FBQzFCLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ25CLG9CQUFlLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLHFCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUN0QixtQkFBYyxHQUFHLEVBQUUsQ0FBQztRQUVLLFlBQU8sR0FBRyxJQUFJLENBQUM7SUFFaUIsQ0FBQztJQUVuRSxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNO1FBQ3hCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0QixTQUFTO1lBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDcEYsTUFBTTtZQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2xGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGNBQWMsQ0FBQyxHQUFHO1FBQ3hCLElBQUksa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzFDLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0YsQ0FBQTtBQXJDVTtJQUFSLEtBQUssRUFBRTs7dURBQWlCO0FBQ2hCO0lBQVIsS0FBSyxFQUFFOzsrREFBeUI7QUFDeEI7SUFBUixLQUFLLEVBQUU7O2lFQUEyQjtBQUMxQjtJQUFSLEtBQUssRUFBRTs7MERBQW9CO0FBQ25CO0lBQVIsS0FBSyxFQUFFOzs0REFBc0I7QUFDckI7SUFBUixLQUFLLEVBQUU7OzZEQUF1QjtBQUN0QjtJQUFSLEtBQUssRUFBRTs7MkRBQXFCO0FBRUs7SUFBakMsV0FBVyxDQUFDLG1CQUFtQixDQUFDOztvREFBZ0I7QUFyQnRDLG1CQUFtQjtJQVovQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUU7Ozs7Ozs7O0dBUVQ7UUFDRCxRQUFRLEVBQUUsWUFBWTtLQUN2QixDQUFDOzZDQXdCd0IsVUFBVSxFQUFvQixTQUFTO0dBdkJwRCxtQkFBbUIsQ0FrRC9CO1NBbERZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY29uc3QgUlVGX1BBRERJTkdfVkFMVUVTID0gWydub25lJywgJ2F1dG8nLCAnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ107XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogYFxuICAgIFtydWZQYWRkaW5nXSxcbiAgICBbcnVmUGFkZGluZ1ZlcnRpY2FsXSxcbiAgICBbcnVmUGFkZGluZ0hvcml6b250YWxdLFxuICAgIFtydWZQYWRkaW5nVG9wXSxcbiAgICBbcnVmUGFkZGluZ1JpZ2h0XSxcbiAgICBbcnVmUGFkZGluZ0JvdHRvbV0sXG4gICAgW3J1ZlBhZGRpbmdMZWZ0XVxuICBgLFxuICBleHBvcnRBczogJ3J1ZlBhZGRpbmcnXG59KVxuZXhwb3J0IGNsYXNzIFJ1ZlBhZGRpbmdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBwcml2YXRlIGNsYXNzUHJlZml4ID0gJ3J1Zi1wYWRkaW5nJztcblxuICBwcml2YXRlIF9wb3NpdGlvbnMgPSB7XG4gICAgcnVmUGFkZGluZzogWyctJ10sXG4gICAgcnVmUGFkZGluZ1ZlcnRpY2FsOiBbJy10b3AtJywgJy1ib3R0b20tJ10sXG4gICAgcnVmUGFkZGluZ0hvcml6b250YWw6IFsnLWxlZnQtJywgJy1yaWdodC0nXSxcbiAgICBydWZQYWRkaW5nVG9wOiBbJy10b3AtJ10sXG4gICAgcnVmUGFkZGluZ1JpZ2h0OiBbJy1yaWdodC0nXSxcbiAgICBydWZQYWRkaW5nQm90dG9tOiBbJy1ib3R0b20tJ10sXG4gICAgcnVmUGFkZGluZ0xlZnQ6IFsnLWxlZnQtJ11cbiAgfTtcblxuICBASW5wdXQoKSBydWZQYWRkaW5nID0gJyc7XG4gIEBJbnB1dCgpIHJ1ZlBhZGRpbmdWZXJ0aWNhbCA9ICcnO1xuICBASW5wdXQoKSBydWZQYWRkaW5nSG9yaXpvbnRhbCA9ICcnO1xuICBASW5wdXQoKSBydWZQYWRkaW5nVG9wID0gJyc7XG4gIEBJbnB1dCgpIHJ1ZlBhZGRpbmdSaWdodCA9ICcnO1xuICBASW5wdXQoKSBydWZQYWRkaW5nQm90dG9tID0gJyc7XG4gIEBJbnB1dCgpIHJ1ZlBhZGRpbmdMZWZ0ID0gJyc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ydWYtcGFkZGluZycpIHBhZGRpbmcgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hhbmdlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy51cGRhdGUoa2V5LCBjaGFuZ2VzW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUoa2V5LCBjaGFuZ2UpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX3ZhbGlkYXRlVmFsdWUoY2hhbmdlLnByZXZpb3VzVmFsdWUpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLl92YWxpZGF0ZVZhbHVlKGNoYW5nZS5jdXJyZW50VmFsdWUpO1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHRoaXMuX3Bvc2l0aW9uc1trZXldO1xuXG4gICAgcG9zaXRpb25zLmZvckVhY2gocG9zID0+IHtcbiAgICAgIC8vIHJlbW92ZVxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY2xhc3NQcmVmaXggKyBwb3MgKyBwcmV2aW91cyk7XG4gICAgICAvLyBhZGRcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmNsYXNzUHJlZml4ICsgcG9zICsgY3VycmVudCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF92YWxpZGF0ZVZhbHVlKHZhbCkge1xuICAgIGlmIChSVUZfUEFERElOR19WQUxVRVMuaW5kZXhPZih2YWwpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgcmV0dXJuICdtZWRpdW0nO1xuICB9XG59XG4iXX0=