import * as tslib_1 from "tslib";
import { Component, EventEmitter, HostListener, TemplateRef, ViewEncapsulation, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { TemplatePortal } from '@angular/cdk/portal';
import { ENTER, SPACE, ESCAPE } from '@angular/cdk/keycodes';
import { Overlay, CdkOverlayOrigin } from '@angular/cdk/overlay';
export var RufDropdownType;
(function (RufDropdownType) {
    RufDropdownType["PopoverMenu"] = "popover-menu";
    RufDropdownType["ContextMenu"] = "context-menu";
    RufDropdownType["Dropdown"] = "dropdown";
})(RufDropdownType || (RufDropdownType = {}));
;
let RufDropdownPanelComponent = class RufDropdownPanelComponent {
    constructor(_overlay, _viewContainerRef) {
        this._overlay = _overlay;
        this._viewContainerRef = _viewContainerRef;
        this.hasBackdrop = true;
        this.openedChange = new EventEmitter();
        this.type = RufDropdownType.Dropdown;
        this.xPosition = 'center';
        this.yPosition = 'bottom';
        this.className = 'ruf-dropdown-panel-container';
        this.toggle = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes &&
            changes.hasBackdrop &&
            changes.hasBackdrop.previousValue !== changes.hasBackdrop.currentValue) {
            // when value is changes for hasBackdrop set value null for overlay
            // so that it will create new overlay with updated backdrop value
            if (this._overlayRef) {
                this._overlayRef.detach();
                this._overlayRef = null;
            }
        }
    }
    open() {
        const origin = this._getOrigin();
        const overlay = this._getOverlayPosition();
        if (!this._overlayRef) {
            let positionStrategy;
            positionStrategy = this._overlay.position()
                .flexibleConnectedTo(this.origin.elementRef)
                .withPositions([
                Object.assign({}, origin.main, overlay.main),
                Object.assign({}, origin.fallback, overlay.fallback)
            ]);
            this.onPositionChanged({
                connectionPair: {
                    overlayX: overlay.main.overlayX,
                    overlayY: overlay.main.overlayY
                }
            });
            positionStrategy.positionChanges.subscribe(change => {
                this.onPositionChanged(change);
            });
            this._overlayRef = this._overlay.create({
                hasBackdrop: this.hasBackdrop,
                backdropClass: 'ruf-dropdown-panel-wrapper',
                positionStrategy
            });
            this._overlayRef.backdropClick().subscribe(() => this.close());
            this._portal = new TemplatePortal(this.content, this._viewContainerRef);
        }
        if (!this._overlayRef.hasAttached()) {
            this._overlayRef.attach(this._portal);
            this.opened = true;
            this.toggle.emit(true);
        }
        else {
            this.close();
            this.toggle.emit(false);
        }
    }
    ;
    _getOrigin() {
        let originPosition;
        originPosition = this._getPositionStrategy(this._getOriginValues(), this._getOverlayPositionValues()).originPosition;
        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);
        if (this.type === RufDropdownType.PopoverMenu || this.type === RufDropdownType.ContextMenu) {
            return {
                main: originPosition,
                fallback: { originX: x, originY: y }
            };
        }
        else {
            return {
                main: { originX: 'start', originY: 'bottom' },
                fallback: { originX: 'end', originY: 'top' }
            };
        }
    }
    _getOverlayPosition() {
        const XPosition = this.xPosition;
        const YPosition = this.yPosition;
        let overlayPosition;
        overlayPosition = this._getPositionStrategy(this._getOriginValues(), this._getOverlayPositionValues()).overlayPosition;
        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);
        if (this.type === RufDropdownType.PopoverMenu || this.type === RufDropdownType.ContextMenu) {
            return {
                main: overlayPosition,
                fallback: { overlayX: x, overlayY: y }
            };
        }
        else {
            return {
                main: { overlayX: 'start', overlayY: 'top' },
                fallback: { overlayX: 'end', overlayY: 'bottom' }
            };
        }
    }
    _getOriginValues() {
        const xCenterYBottom = { originX: 'center', originY: 'bottom' };
        const xCenterYTop = { originX: 'center', originY: 'top' };
        const xStartYBottom = { originX: 'start', originY: 'bottom' };
        const xStartYTop = { originX: 'start', originY: 'top' };
        const xStartYCenter = { originX: 'start', originY: 'center' };
        const xEndYBottom = { originX: 'end', originY: 'bottom' };
        const xEndYTop = { originX: 'end', originY: 'top' };
        const xEndYCenter = { originX: 'end', originY: 'center' };
        return {
            xCenterYBottom: xCenterYBottom,
            xCenterYTop: xCenterYTop,
            xStartYBottom: xStartYBottom,
            xStartYTop: xStartYTop,
            xStartYCenter: xStartYCenter,
            xEndYBottom: xEndYBottom,
            xEndYTop: xEndYTop,
            xEndYCenter: xEndYCenter
        };
    }
    _getOverlayPositionValues() {
        const xCenterYTop = { overlayX: 'center', overlayY: 'top' };
        const xCenterYBottom = { overlayX: 'center', overlayY: 'bottom' };
        const xStartYTop = { overlayX: 'start', overlayY: 'top' };
        const xStartYBottom = { overlayX: 'start', overlayY: 'bottom' };
        const xStartYCenter = { overlayX: 'start', overlayY: 'center' };
        const xEndYTop = { overlayX: 'end', overlayY: 'top' };
        const xEndYBottom = { overlayX: 'end', overlayY: 'bottom' };
        const xEndYCenter = { overlayX: 'end', overlayY: 'center' };
        return {
            xCenterYTop: xCenterYTop,
            xCenterYBottom: xCenterYBottom,
            xStartYTop: xStartYTop,
            xStartYBottom: xStartYBottom,
            xStartYCenter: xStartYCenter,
            xEndYTop: xEndYTop,
            xEndYBottom: xEndYBottom,
            xEndYCenter: xEndYCenter
        };
    }
    _getPositionStrategy(origin, overlay) {
        let originPosition = origin.xCenterYBottom;
        let overlayPosition = overlay.xCenterYTop;
        if (this.xPosition === 'start') {
            if (this.yPosition === 'top') {
                originPosition = origin.xStartYTop;
                overlayPosition = overlay.xStartYBottom;
            }
            else if (this.yPosition === 'center' && this.type === RufDropdownType.PopoverMenu) {
                originPosition = origin.xStartYCenter;
                overlayPosition = overlay.xEndYCenter;
            }
            else if (this.yPosition === 'bottom' || (this.yPosition === 'center' && this.type === RufDropdownType.ContextMenu)) {
                originPosition = origin.xStartYBottom;
                overlayPosition = overlay.xStartYTop;
            }
        }
        else if (this.xPosition === 'end') {
            if (this.yPosition === 'top') {
                originPosition = origin.xEndYTop;
                overlayPosition = overlay.xEndYBottom;
            }
            else if (this.yPosition === 'center' && this.type === RufDropdownType.PopoverMenu) {
                originPosition = origin.xEndYCenter;
                overlayPosition = overlay.xStartYCenter;
            }
            else if (this.yPosition === 'bottom' || (this.yPosition === 'center' && this.type === RufDropdownType.ContextMenu)) {
                originPosition = origin.xEndYBottom;
                overlayPosition = overlay.xEndYTop;
            }
        }
        else if (this.xPosition === 'center') {
            originPosition = this.yPosition === 'top' ? origin.xCenterYTop : origin.xCenterYBottom;
            overlayPosition = this.yPosition === 'top' ? overlay.xCenterYBottom : overlay.xCenterYTop;
        }
        return {
            originPosition: originPosition,
            overlayPosition: overlayPosition
        };
    }
    _invertPosition(x, y) {
        if (x === 'start') {
            x = 'end';
        }
        else if (x === 'end') {
            x = 'start';
        }
        if (y === 'top') {
            y = 'bottom';
        }
        else if (y === 'bottom') {
            y = 'top';
        }
        return { x, y };
    }
    onPositionChanged($event) {
        if (this.type === RufDropdownType.PopoverMenu || this.type === RufDropdownType.ContextMenu) {
            if ($event.connectionPair.overlayY === 'top') {
                if ($event.connectionPair.overlayX === 'center') {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu center-arrow-up';
                }
                else if ($event.connectionPair.overlayX === 'start') {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu left-arrow-up';
                }
                else {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu right-arrow-up';
                }
            }
            else if ($event.connectionPair.overlayY === 'center') {
                if ($event.connectionPair.overlayX === 'start') {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu right-arrow-center';
                }
                else {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu left-arrow-center';
                }
            }
            else {
                if ($event.connectionPair.overlayX === 'center') {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu center-arrow-down';
                }
                else if ($event.connectionPair.overlayX === 'start') {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu left-arrow-down';
                }
                else {
                    this.className = 'ruf-dropdown-panel-container ruf-popover-menu right-arrow-down';
                }
            }
        }
        else if (this.type === RufDropdownType.Dropdown) {
            this.className = 'ruf-dropdown-panel-container';
        }
    }
    close() {
        if (this.opened) {
            this.opened = false;
            this._overlayRef.detach();
            this.openedChange.emit(this.opened);
        }
    }
    hasPopup() {
        return true;
    }
    handleKeydown(event) {
        switch (event.keyCode) {
            case SPACE:
            case ENTER:
                this.open();
                event.preventDefault();
                event.stopPropagation();
                this.toggle.emit(true);
                break;
            case ESCAPE:
                this.close();
                this.toggle.emit(false);
                event.stopPropagation();
                break;
            default:
        }
    }
    handleClick(event) {
        this.open();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", CdkOverlayOrigin)
], RufDropdownPanelComponent.prototype, "origin", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], RufDropdownPanelComponent.prototype, "opened", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufDropdownPanelComponent.prototype, "hasBackdrop", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], RufDropdownPanelComponent.prototype, "openedChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufDropdownPanelComponent.prototype, "type", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufDropdownPanelComponent.prototype, "xPosition", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufDropdownPanelComponent.prototype, "yPosition", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], RufDropdownPanelComponent.prototype, "closeIcon", void 0);
tslib_1.__decorate([
    ViewChild(TemplateRef, { static: false }),
    tslib_1.__metadata("design:type", TemplateRef)
], RufDropdownPanelComponent.prototype, "content", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], RufDropdownPanelComponent.prototype, "toggle", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RufDropdownPanelComponent.prototype, "handleClick", null);
RufDropdownPanelComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-dropdown-panel',
        template: "<ng-template>\n <div [ngClass]=\"className\">\n      <div *ngIf=\"closeIcon\">\n        <button type=\"button\" mat-icon-button class=\"dropdown-panel-close-icon\" (keydown.enter)=\"close()\" (keydown.space)=\"close()\" (click)=\"close()\" rufIconButton>\n          <mat-icon rufIconStyle=\"sm\" rufId fisIcon=\"close\"></mat-icon>\n        </button>\n        <br>\n      </div>\n      <div [ngClass]=\"{'dropdown-panel-content': closeIcon}\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n </ng-template>\n",
        encapsulation: ViewEncapsulation.None,
        styles: [".center-arrow-down:after,.center-arrow-down:before,.center-arrow-up:after,.center-arrow-up:before,.left-arrow-center:after,.left-arrow-center:before,.left-arrow-down:after,.left-arrow-down:before,.left-arrow-up:after,.left-arrow-up:before,.right-arrow-center:after,.right-arrow-center:before,.right-arrow-down:after,.right-arrow-down:before,.right-arrow-up:after,.right-arrow-up:before{border-style:solid;content:'';height:0;position:absolute;width:0;z-index:9999}.left-arrow-up{margin-top:.625rem;position:relative}.left-arrow-up:after,.left-arrow-up:before{bottom:100%;right:91%}.left-arrow-up:after{border-width:.625rem;margin-right:-.625rem}.left-arrow-up:before{border-width:.75rem;margin-right:-.75rem}.left-arrow-center{margin-right:.625rem;position:relative}.left-arrow-center:after,.left-arrow-center:before{bottom:50%;left:100%}.left-arrow-center:after{border-width:.625rem;margin-bottom:-.625rem}.left-arrow-center:before{border-width:.75rem;margin-bottom:-.75rem}.left-arrow-down{margin-bottom:.625rem;position:relative}.left-arrow-down:after,.left-arrow-down:before{right:91%;top:100%}.left-arrow-down:after{border-width:.625rem;margin-right:-.625rem}.left-arrow-down:before{border-width:.75rem;margin-right:-.75rem}.right-arrow-up{margin-top:.625rem;position:relative}.right-arrow-up:after,.right-arrow-up:before{bottom:100%;right:9%}.right-arrow-up:after{border-width:.625rem;margin-right:-.625rem}.right-arrow-up:before{border-width:.75rem;margin-right:-.75rem}.right-arrow-center{margin-left:.625rem;position:relative}.right-arrow-center:after,.right-arrow-center:before{right:100%;top:50%}.right-arrow-center:after{border-width:.625rem;margin-top:-.625rem}.right-arrow-center:before{border-width:.75rem;margin-top:-.75rem}.right-arrow-down{margin-bottom:.5rem;position:relative}.right-arrow-down:after,.right-arrow-down:before{right:9%;top:100%}.right-arrow-down:after{border-width:.625rem;margin-right:-.625rem}.right-arrow-down:before{border-width:.75rem;margin-right:-.75rem}.center-arrow-up{margin-top:.625rem;position:relative}.center-arrow-up:after,.center-arrow-up:before{bottom:100%;right:50%}.center-arrow-up:after{border-width:.625rem;margin-right:-.625rem}.center-arrow-up:before{border-width:.75rem;margin-right:-.75rem}.center-arrow-down{margin-bottom:.625rem;position:relative}.center-arrow-down:after,.center-arrow-down:before{left:50%;top:100%}.center-arrow-down:after{border-width:.625rem;margin-left:-.625rem}.center-arrow-down:before{border-width:.75rem;margin-left:-.75rem}.dropdown-panel-close-icon{float:right;opacity:.2}.dropdown-panel-close-icon:hover{cursor:pointer}.dropdown-panel-content{margin-right:1.25rem;margin-top:.5rem}.ruf-popover-menu{border-radius:.1875rem;border-style:solid;border-width:.0625rem}"]
    }),
    tslib_1.__metadata("design:paramtypes", [Overlay,
        ViewContainerRef])
], RufDropdownPanelComponent);
export { RufDropdownPanelComponent };
//# sourceMappingURL=data:application/json;base64,