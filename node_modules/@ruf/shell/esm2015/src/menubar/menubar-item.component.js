import * as tslib_1 from "tslib";
import { RufMenubarComponent } from './menubar.component';
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, HostBinding, HostListener, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
let RufMenubarItemComponent = class RufMenubarItemComponent {
    // this can probably only be achieved in nav-menubar
    // @HostBinding('attr.aria-haspopup') hasPopup = true;
    constructor(menubar, _elementRef) {
        this.menubar = menubar;
        this._elementRef = _elementRef;
        this.unsubscribe = new Subject();
        this.selectable = true;
        this.menuitem = true;
        this.role = 'menuitem';
        this.tabindex = -1;
        this.active = false;
    }
    ngAfterContentInit() {
        this.menubar.selectedPath$.pipe(takeUntil(this.unsubscribe), distinctUntilChanged())
            .subscribe((path) => {
            this.active = this.matches(path);
            setTimeout(() => {
                this.tabindex = this.active ? 0 : -1;
                this.menubar.setActiveItem(path);
            });
        });
        this.menubar.activatedPath$.pipe(takeUntil(this.unsubscribe), distinctUntilChanged())
            .subscribe((path) => {
            const match = this.matches(path);
            setTimeout(() => this.tabindex = match ? 0 : -1);
        });
    }
    ngOnDestroy() {
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    onClick(event) {
        if (!event.cancelBubble) {
            if (this.selectable) {
                this.menubar.select(this.path, this.data, event);
            }
            else {
                // still change activated state since user clicked on the item
                this.menubar.activate(this.path);
            }
        }
    }
    focus() {
        if (this._elementRef) {
            this._elementRef.nativeElement.focus();
        }
    }
    matches(selectedPath) {
        if (selectedPath && this.path) {
            const pattern = new RegExp('^((\/)?' + this.path + ')(\/.*)?$'); // use word boundary to exact match
            if (selectedPath === this.path || pattern.test(selectedPath)) { // match with current menuitem and with parent menuitem
                return true;
            }
        }
        return false;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufMenubarItemComponent.prototype, "path", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufMenubarItemComponent.prototype, "data", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufMenubarItemComponent.prototype, "selectable", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-menu-item'),
    tslib_1.__metadata("design:type", Object)
], RufMenubarItemComponent.prototype, "menuitem", void 0);
tslib_1.__decorate([
    HostBinding('attr.role'),
    tslib_1.__metadata("design:type", Object)
], RufMenubarItemComponent.prototype, "role", void 0);
tslib_1.__decorate([
    HostBinding('attr.tabindex'),
    tslib_1.__metadata("design:type", Object)
], RufMenubarItemComponent.prototype, "tabindex", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-menubar-item-active'),
    tslib_1.__metadata("design:type", Object)
], RufMenubarItemComponent.prototype, "active", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RufMenubarItemComponent.prototype, "onClick", null);
RufMenubarItemComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-menubar-item, [rufMenubarItem]',
        template: `
      <ng-content></ng-content>
  `,
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [RufMenubarComponent, ElementRef])
], RufMenubarItemComponent);
export { RufMenubarItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudWJhci1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvbWVudWJhci9tZW51YmFyLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsS0FBSyxFQUdMLFdBQVcsRUFDWCxZQUFZLEVBQ1osVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBZWpFLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBc0NsQyxvREFBb0Q7SUFDcEQsc0RBQXNEO0lBRXRELFlBQXNCLE9BQTRCLEVBQVksV0FBd0I7UUFBaEUsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFBWSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQXhDOUUsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBSTNCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFFUyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQzFCLFNBQUksR0FBRyxVQUFVLENBQUM7UUFDZCxhQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDRSxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBK0I0QixDQUFDO0lBN0IxRixrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM3QixTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUMzQixvQkFBb0IsRUFBRSxDQUFDO2FBQ3RCLFNBQVMsQ0FBRSxDQUFDLElBQUksRUFBRyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxNQUFN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LElBQUk7UUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQzs2Q0EwQytCLG1CQUFtQixFQUEwQixVQUFVO0dBekMzRSx1QkFBdUIsQ0FzRW5DO1NBdEVZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ1Zk1lbnViYXJDb21wb25lbnQgfSBmcm9tICcuL21lbnViYXIuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBJbnB1dCxcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgT25EZXN0cm95LFxuICBIb3N0QmluZGluZyxcbiAgSG9zdExpc3RlbmVyLFxuICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9jdXNhYmxlT3B0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknOyAvLyBGb2N1c2FibGUgaW50ZXJmYWNlIHJlbmFtZWQgdG8gRm9jdXNhYmxlT3B0aW9uIGluIEBhbmd1bGFyL2NkayBiZXRhLTEwXG5pbXBvcnQgeyBSdWZCYXNlSXRlbSB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWl0ZW0nO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBSdWZNZW51YmFySXRlbSBleHRlbmRzIFJ1ZkJhc2VJdGVtIHtcbiAgZGF0YT86IGFueTtcbiAgZXZlbnQ/OiBhbnk7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3J1Zi1tZW51YmFyLWl0ZW0sIFtydWZNZW51YmFySXRlbV0nLFxuICB0ZW1wbGF0ZTogYFxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBSdWZNZW51YmFySXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIFJ1Zk1lbnViYXJJdGVtLCBGb2N1c2FibGVPcHRpb24sIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmUgPSBuZXcgU3ViamVjdCgpO1xuXG4gIEBJbnB1dCgpIHBhdGg6IHN0cmluZztcbiAgQElucHV0KCkgZGF0YTogYW55O1xuICBASW5wdXQoKSBzZWxlY3RhYmxlID0gdHJ1ZTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJ1Zi1tZW51LWl0ZW0nKSBtZW51aXRlbSA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJykgcm9sZSA9ICdtZW51aXRlbSc7XG4gIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpIHRhYmluZGV4ID0gLTE7XG4gIEBIb3N0QmluZGluZygnY2xhc3MucnVmLW1lbnViYXItaXRlbS1hY3RpdmUnKSBhY3RpdmUgPSBmYWxzZTtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5tZW51YmFyLnNlbGVjdGVkUGF0aCQucGlwZShcbiAgICAgIHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpXG4gICAgICAuc3Vic2NyaWJlKCAocGF0aCkgID0+IHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSAgdGhpcy5tYXRjaGVzKHBhdGgpIDtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy50YWJpbmRleCA9IHRoaXMuYWN0aXZlID8gMCA6IC0xO1xuICAgICAgICAgIHRoaXMubWVudWJhci5zZXRBY3RpdmVJdGVtKHBhdGgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5tZW51YmFyLmFjdGl2YXRlZFBhdGgkLnBpcGUoXG4gICAgICB0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKVxuICAgICAgLnN1YnNjcmliZSggKHBhdGgpICA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5tYXRjaGVzKHBhdGgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudGFiaW5kZXggPSBtYXRjaCA/IDAgOiAtMSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmUubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8vIHRoaXMgY2FuIHByb2JhYmx5IG9ubHkgYmUgYWNoaWV2ZWQgaW4gbmF2LW1lbnViYXJcbiAgLy8gQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtaGFzcG9wdXAnKSBoYXNQb3B1cCA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG1lbnViYXI6IFJ1Zk1lbnViYXJDb21wb25lbnQsIHByb3RlY3RlZCBfZWxlbWVudFJlZj86IEVsZW1lbnRSZWYpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKSBvbkNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC5jYW5jZWxCdWJibGUpIHtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGFibGUpIHtcbiAgICAgICAgdGhpcy5tZW51YmFyLnNlbGVjdCh0aGlzLnBhdGgsIHRoaXMuZGF0YSwgZXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3RpbGwgY2hhbmdlIGFjdGl2YXRlZCBzdGF0ZSBzaW5jZSB1c2VyIGNsaWNrZWQgb24gdGhlIGl0ZW1cbiAgICAgICAgdGhpcy5tZW51YmFyLmFjdGl2YXRlKHRoaXMucGF0aCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnRSZWYpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG1hdGNoZXMoc2VsZWN0ZWRQYXRoKSB7XG4gICAgaWYgKHNlbGVjdGVkUGF0aCAmJiB0aGlzLnBhdGgpIHtcbiAgICAgIGNvbnN0IHBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeKChcXC8pPycgKyB0aGlzLnBhdGggKyAnKShcXC8uKik/JCcpOyAgLy8gdXNlIHdvcmQgYm91bmRhcnkgdG8gZXhhY3QgbWF0Y2hcbiAgICAgIGlmIChzZWxlY3RlZFBhdGggPT09IHRoaXMucGF0aCB8fCBwYXR0ZXJuLnRlc3Qoc2VsZWN0ZWRQYXRoKSkgeyAvLyBtYXRjaCB3aXRoIGN1cnJlbnQgbWVudWl0ZW0gYW5kIHdpdGggcGFyZW50IG1lbnVpdGVtXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxufVxuIl19