import * as tslib_1 from "tslib";
import { Attribute, ComponentFactoryResolver, ChangeDetectorRef, Directive, ViewContainerRef } from '@angular/core';
import { RouterOutlet, ChildrenOutletContexts, PRIMARY_OUTLET } from '@angular/router';
import { RufRouterUtilService } from './router-util.service';
let RufRouterOutletDirective = class RufRouterOutletDirective extends RouterOutlet {
    constructor(rufParentContexts, rufLocation, rufResolver, rufName, rufChangeDetector, util) {
        super(rufParentContexts, rufLocation, rufResolver, rufName, rufChangeDetector);
        this.rufParentContexts = rufParentContexts;
        this.rufLocation = rufLocation;
        this.rufResolver = rufResolver;
        this.rufName = rufName;
        this.rufChangeDetector = rufChangeDetector;
        this.util = util;
        this.rufName = rufName || PRIMARY_OUTLET;
    }
    detach() {
        const componentRef = super.detach();
        const lastActivatedOutlet = this.util.lastActivatedOutlet;
        // Detach child routes when a parent route like /banner or /layout is being detached.
        if (lastActivatedOutlet && lastActivatedOutlet.isActivated) {
            const lastCompRef = lastActivatedOutlet.detach();
            this.util.setComponentRef(this.util.lastActivatedPath, lastCompRef);
        }
        else {
            this.util.setComponentRef(this.util.lastActivatedPath, componentRef);
        }
        return componentRef;
    }
    activateWith(activatedRoute, resolver) {
        this.storePreviousRoute(activatedRoute);
        super.activateWith(activatedRoute, resolver);
    }
    attach(ref, activatedRoute) {
        this.storePreviousRoute(activatedRoute);
        super.attach(ref, activatedRoute);
    }
    storePreviousRoute(activatedRoute) {
        this.util.lastActivatedPath = this.util.fullPath(activatedRoute.snapshot);
        if (!activatedRoute.children || activatedRoute.children.length === 0) {
            // Store router outlet only in case of leaf routes. This will be used when detaching parent routes.
            this.util.lastActivatedOutlet = this.rufParentContexts.getContext(this.rufName).outlet;
        }
    }
};
RufRouterOutletDirective = tslib_1.__decorate([
    Directive({
        selector: 'ruf-router-outlet' // tslint:disable-line
    }),
    tslib_1.__param(3, Attribute('name')),
    tslib_1.__metadata("design:paramtypes", [ChildrenOutletContexts,
        ViewContainerRef,
        ComponentFactoryResolver, String, ChangeDetectorRef,
        RufRouterUtilService])
], RufRouterOutletDirective);
export { RufRouterOutletDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvcm91dGVyL291dGxldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1Qsd0JBQXdCLEVBRXhCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsZ0JBQWdCLEVBRWpCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQWtCLHNCQUFzQixFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBSzdELElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXlCLFNBQVEsWUFBWTtJQUN4RCxZQUNVLGlCQUF5QyxFQUN6QyxXQUE2QixFQUM3QixXQUFxQyxFQUNsQixPQUFlLEVBQ2xDLGlCQUFvQyxFQUNwQyxJQUEwQjtRQUVsQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQVB2RSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXdCO1FBQ3pDLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixnQkFBVyxHQUFYLFdBQVcsQ0FBMEI7UUFDbEIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNsQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLFNBQUksR0FBSixJQUFJLENBQXNCO1FBR2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLGNBQWMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQyxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUM7UUFDMUQscUZBQXFGO1FBQ3JGLElBQUksbUJBQW1CLElBQUksbUJBQW1CLENBQUMsV0FBVyxFQUFFO1lBQzFELE1BQU0sV0FBVyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDckU7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDdEU7UUFDRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsWUFBWSxDQUFDLGNBQThCLEVBQUUsUUFBeUM7UUFDcEYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBc0IsRUFBRSxjQUE4QjtRQUMzRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDeEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVPLGtCQUFrQixDQUFDLGNBQThCO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwRSxtR0FBbUc7WUFDbkcsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDeEY7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQTNDWSx3QkFBd0I7SUFIcEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG1CQUFtQixDQUFDLHNCQUFzQjtLQUNyRCxDQUFDO0lBTUcsbUJBQUEsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBOzZDQUhTLHNCQUFzQjtRQUM1QixnQkFBZ0I7UUFDaEIsd0JBQXdCLFVBRWxCLGlCQUFpQjtRQUM5QixvQkFBb0I7R0FQekIsd0JBQXdCLENBMkNwQztTQTNDWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBdHRyaWJ1dGUsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgQ29tcG9uZW50UmVmLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgRGlyZWN0aXZlLFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJPdXRsZXQsIEFjdGl2YXRlZFJvdXRlLCBDaGlsZHJlbk91dGxldENvbnRleHRzLCBQUklNQVJZX09VVExFVCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBSdWZSb3V0ZXJVdGlsU2VydmljZSB9IGZyb20gJy4vcm91dGVyLXV0aWwuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3J1Zi1yb3V0ZXItb3V0bGV0JyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG59KVxuZXhwb3J0IGNsYXNzIFJ1ZlJvdXRlck91dGxldERpcmVjdGl2ZSBleHRlbmRzIFJvdXRlck91dGxldCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcnVmUGFyZW50Q29udGV4dHM6IENoaWxkcmVuT3V0bGV0Q29udGV4dHMsXG4gICAgcHJpdmF0ZSBydWZMb2NhdGlvbjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHJ1ZlJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgQEF0dHJpYnV0ZSgnbmFtZScpIHByaXZhdGUgcnVmTmFtZTogc3RyaW5nLFxuICAgIHByaXZhdGUgcnVmQ2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgdXRpbDogUnVmUm91dGVyVXRpbFNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIocnVmUGFyZW50Q29udGV4dHMsIHJ1ZkxvY2F0aW9uLCBydWZSZXNvbHZlciwgcnVmTmFtZSwgcnVmQ2hhbmdlRGV0ZWN0b3IpO1xuICAgIHRoaXMucnVmTmFtZSA9IHJ1Zk5hbWUgfHwgUFJJTUFSWV9PVVRMRVQ7XG4gIH1cblxuICBkZXRhY2goKTogQ29tcG9uZW50UmVmPGFueT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHN1cGVyLmRldGFjaCgpO1xuICAgIGNvbnN0IGxhc3RBY3RpdmF0ZWRPdXRsZXQgPSB0aGlzLnV0aWwubGFzdEFjdGl2YXRlZE91dGxldDtcbiAgICAvLyBEZXRhY2ggY2hpbGQgcm91dGVzIHdoZW4gYSBwYXJlbnQgcm91dGUgbGlrZSAvYmFubmVyIG9yIC9sYXlvdXQgaXMgYmVpbmcgZGV0YWNoZWQuXG4gICAgaWYgKGxhc3RBY3RpdmF0ZWRPdXRsZXQgJiYgbGFzdEFjdGl2YXRlZE91dGxldC5pc0FjdGl2YXRlZCkge1xuICAgICAgY29uc3QgbGFzdENvbXBSZWYgPSBsYXN0QWN0aXZhdGVkT3V0bGV0LmRldGFjaCgpO1xuICAgICAgdGhpcy51dGlsLnNldENvbXBvbmVudFJlZih0aGlzLnV0aWwubGFzdEFjdGl2YXRlZFBhdGgsIGxhc3RDb21wUmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51dGlsLnNldENvbXBvbmVudFJlZih0aGlzLnV0aWwubGFzdEFjdGl2YXRlZFBhdGgsIGNvbXBvbmVudFJlZik7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnRSZWY7XG4gIH1cblxuICBhY3RpdmF0ZVdpdGgoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHwgbnVsbCkge1xuICAgIHRoaXMuc3RvcmVQcmV2aW91c1JvdXRlKGFjdGl2YXRlZFJvdXRlKTtcbiAgICBzdXBlci5hY3RpdmF0ZVdpdGgoYWN0aXZhdGVkUm91dGUsIHJlc29sdmVyKTtcbiAgfVxuXG4gIGF0dGFjaChyZWY6IENvbXBvbmVudFJlZjxhbnk+LCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICB0aGlzLnN0b3JlUHJldmlvdXNSb3V0ZShhY3RpdmF0ZWRSb3V0ZSk7XG4gICAgc3VwZXIuYXR0YWNoKHJlZiwgYWN0aXZhdGVkUm91dGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdG9yZVByZXZpb3VzUm91dGUoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7XG4gICAgdGhpcy51dGlsLmxhc3RBY3RpdmF0ZWRQYXRoID0gdGhpcy51dGlsLmZ1bGxQYXRoKGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90KTtcbiAgICBpZiAoIWFjdGl2YXRlZFJvdXRlLmNoaWxkcmVuIHx8IGFjdGl2YXRlZFJvdXRlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gU3RvcmUgcm91dGVyIG91dGxldCBvbmx5IGluIGNhc2Ugb2YgbGVhZiByb3V0ZXMuIFRoaXMgd2lsbCBiZSB1c2VkIHdoZW4gZGV0YWNoaW5nIHBhcmVudCByb3V0ZXMuXG4gICAgICB0aGlzLnV0aWwubGFzdEFjdGl2YXRlZE91dGxldCA9IHRoaXMucnVmUGFyZW50Q29udGV4dHMuZ2V0Q29udGV4dCh0aGlzLnJ1Zk5hbWUpLm91dGxldDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==