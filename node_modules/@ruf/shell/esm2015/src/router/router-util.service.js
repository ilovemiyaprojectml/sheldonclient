import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
let RufRouterUtilService = class RufRouterUtilService {
    constructor() {
        this._routeComp = {};
    }
    set lastActivatedPath(path) {
        this._lastActivatedPath = path;
    }
    get lastActivatedPath() {
        return this._lastActivatedPath;
    }
    set lastActivatedOutlet(outlet) {
        this._lastActivatedOutlet = outlet;
    }
    get lastActivatedOutlet() {
        return this._lastActivatedOutlet;
    }
    setComponentRef(path, componentRef) {
        this._routeComp[path] = componentRef;
    }
    getComponentRef(path) {
        return this._routeComp[path];
    }
    fullPath(snapshot) {
        let path = '';
        const rootElems = snapshot.pathFromRoot;
        rootElems.forEach(function (child) {
            const urlArray = child.url;
            urlArray.forEach(function (url) {
                path += `/${url.path}`;
            });
        });
        return path;
    }
    getLeafNodePath(route) {
        let path;
        // if (!route.routeConfig.loadChildren) {
        // If !route.component, this is a parent route. Return path of the leaf node in this case.
        if (!route.component) {
            const leafNode = this.getLeafNode(route);
            path = this.fullPath(leafNode);
        }
        else {
            path = this.fullPath(route);
        }
        // }
        return path;
    }
    getLeafNode(route) {
        if (!route.children || route.children.length === 0) {
            return route;
        }
        return this.getLeafNode(route.firstChild || route.children[0]);
    }
};
RufRouterUtilService = tslib_1.__decorate([
    Injectable()
], RufRouterUtilService);
export { RufRouterUtilService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvcm91dGVyL3JvdXRlci11dGlsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBSXpELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBRGpDO1FBRVUsZUFBVSxHQUF5QyxFQUFFLENBQUM7SUE0RGhFLENBQUM7SUF4REMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFZO1FBQ2hDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksaUJBQWlCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLG1CQUFtQixDQUFDLE1BQW9CO1FBQzFDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUM7SUFDckMsQ0FBQztJQUVELElBQUksbUJBQW1CO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ25DLENBQUM7SUFFRCxlQUFlLENBQUMsSUFBWSxFQUFFLFlBQStCO1FBQzNELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxlQUFlLENBQUMsSUFBSTtRQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFFBQVEsQ0FBQyxRQUFnQztRQUN2QyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDO1FBQ3hDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBUyxLQUFLO1lBQzlCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDM0IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFTLEdBQUc7Z0JBQzNCLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQTZCO1FBQzNDLElBQUksSUFBSSxDQUFDO1FBQ1QseUNBQXlDO1FBQ3pDLDBGQUEwRjtRQUMxRixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNwQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2hDO2FBQU07WUFDTCxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QjtRQUNELElBQUk7UUFDSixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBVTtRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEQsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0NBQ0YsQ0FBQTtBQTdEWSxvQkFBb0I7SUFEaEMsVUFBVSxFQUFFO0dBQ0Esb0JBQW9CLENBNkRoQztTQTdEWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlck91dGxldCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSdWZSb3V0ZXJVdGlsU2VydmljZSB7XG4gIHByaXZhdGUgX3JvdXRlQ29tcDogeyBba2V5OiBzdHJpbmddOiBDb21wb25lbnRSZWY8YW55PiB9ID0ge307XG4gIHByaXZhdGUgX2xhc3RBY3RpdmF0ZWRQYXRoOiBzdHJpbmc7XG4gIHByaXZhdGUgX2xhc3RBY3RpdmF0ZWRPdXRsZXQ6IFJvdXRlck91dGxldDtcblxuICBzZXQgbGFzdEFjdGl2YXRlZFBhdGgocGF0aDogc3RyaW5nKSB7XG4gICAgdGhpcy5fbGFzdEFjdGl2YXRlZFBhdGggPSBwYXRoO1xuICB9XG5cbiAgZ2V0IGxhc3RBY3RpdmF0ZWRQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RBY3RpdmF0ZWRQYXRoO1xuICB9XG5cbiAgc2V0IGxhc3RBY3RpdmF0ZWRPdXRsZXQob3V0bGV0OiBSb3V0ZXJPdXRsZXQpIHtcbiAgICB0aGlzLl9sYXN0QWN0aXZhdGVkT3V0bGV0ID0gb3V0bGV0O1xuICB9XG5cbiAgZ2V0IGxhc3RBY3RpdmF0ZWRPdXRsZXQoKTogUm91dGVyT3V0bGV0IHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdEFjdGl2YXRlZE91dGxldDtcbiAgfVxuXG4gIHNldENvbXBvbmVudFJlZihwYXRoOiBzdHJpbmcsIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4pIHtcbiAgICB0aGlzLl9yb3V0ZUNvbXBbcGF0aF0gPSBjb21wb25lbnRSZWY7XG4gIH1cblxuICBnZXRDb21wb25lbnRSZWYocGF0aCk6IENvbXBvbmVudFJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fcm91dGVDb21wW3BhdGhdO1xuICB9XG5cbiAgZnVsbFBhdGgoc25hcHNob3Q6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBzdHJpbmcge1xuICAgIGxldCBwYXRoID0gJyc7XG4gICAgY29uc3Qgcm9vdEVsZW1zID0gc25hcHNob3QucGF0aEZyb21Sb290O1xuICAgIHJvb3RFbGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBjb25zdCB1cmxBcnJheSA9IGNoaWxkLnVybDtcbiAgICAgIHVybEFycmF5LmZvckVhY2goZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHBhdGggKz0gYC8ke3VybC5wYXRofWA7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGdldExlYWZOb2RlUGF0aChyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IHN0cmluZyB7XG4gICAgbGV0IHBhdGg7XG4gICAgLy8gaWYgKCFyb3V0ZS5yb3V0ZUNvbmZpZy5sb2FkQ2hpbGRyZW4pIHtcbiAgICAvLyBJZiAhcm91dGUuY29tcG9uZW50LCB0aGlzIGlzIGEgcGFyZW50IHJvdXRlLiBSZXR1cm4gcGF0aCBvZiB0aGUgbGVhZiBub2RlIGluIHRoaXMgY2FzZS5cbiAgICBpZiAoIXJvdXRlLmNvbXBvbmVudCkge1xuICAgICAgY29uc3QgbGVhZk5vZGUgPSB0aGlzLmdldExlYWZOb2RlKHJvdXRlKTtcbiAgICAgIHBhdGggPSB0aGlzLmZ1bGxQYXRoKGxlYWZOb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IHRoaXMuZnVsbFBhdGgocm91dGUpO1xuICAgIH1cbiAgICAvLyB9XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICBnZXRMZWFmTm9kZShyb3V0ZTogYW55KTogYW55IHtcbiAgICBpZiAoIXJvdXRlLmNoaWxkcmVuIHx8IHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHJvdXRlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRMZWFmTm9kZShyb3V0ZS5maXJzdENoaWxkIHx8IHJvdXRlLmNoaWxkcmVuWzBdKTtcbiAgfVxufVxuIl19