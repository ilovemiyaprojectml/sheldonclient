import * as tslib_1 from "tslib";
/* tslint:disable:no-bitwise */
/* tslint:disable:directive-selector-name */
import { Directive, ElementRef, isDevMode, Input } from '@angular/core';
let RufUniqueIdDirective = class RufUniqueIdDirective {
    constructor(el) {
        this.el = el;
    }
    ngOnInit() {
        if (isDevMode()) {
            const currentElement = this.el.nativeElement;
            if (!currentElement.id) {
                currentElement.id = this.rufId ? this.getUniqueId(this.rufId) : this.generateID();
            }
        }
    }
    /**
     * Walks up the tree, picking up uids as it goes
     * @param node
     * @returns parent ID
     */
    getParentID(node) {
        let tempParentId = '';
        if (node.attributes && node.attributes.id) {
            return node.attributes.id.value;
        }
        if (node.parentNode) {
            tempParentId = this.getParentID(node.parentNode);
        }
        return tempParentId;
    }
    /**
     * Generates an idempotent id on the element this directive is attached to
     * Based on the name and attributes (but ignores the angular temp name that can be different each run)
     * @returns string
     */
    generateID() {
        const nel = this.el.nativeElement;
        const parentID = this.getParentID(nel);
        let tempUid = parentID === '' ? nel.tagName.toLowerCase() : parentID + '_' + nel.nodeName.toLowerCase();
        tempUid = this.getUniqueId(tempUid);
        return tempUid;
    }
    /**
     * Check for unique id in DOM
     * @returns string
     */
    getUniqueId(tempId) {
        let count = 0;
        const genId = tempId + '_';
        tempId = genId + count;
        while (document.getElementById(tempId) !== null) {
            count++;
            tempId = genId + count;
        }
        return tempId;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufUniqueIdDirective.prototype, "rufId", void 0);
RufUniqueIdDirective = tslib_1.__decorate([
    Directive({
        selector: '[rufId]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], RufUniqueIdDirective);
export { RufUniqueIdDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLWlkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvdW5pcXVlLWlkL3VuaXF1ZS1pZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtCQUErQjtBQUMvQiw0Q0FBNEM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtoRixJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtJQUUvQixZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUFHLENBQUM7SUFFdEMsUUFBUTtRQUNOLElBQUksU0FBUyxFQUFFLEVBQUU7WUFDZixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsY0FBYyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ25GO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLFdBQVcsQ0FBQyxJQUFTO1FBQzNCLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7U0FDakM7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxVQUFVO1FBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsSUFBSSxPQUFPLEdBQUcsUUFBUSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3hHLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7O09BR0c7SUFDSyxXQUFXLENBQUMsTUFBYztRQUNoQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxNQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQzNCLE1BQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLE9BQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDL0MsS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUN4QjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRixDQUFBO0FBdkRVO0lBQVIsS0FBSyxFQUFFOzttREFBZTtBQURaLG9CQUFvQjtJQUhoQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsU0FBUztLQUNwQixDQUFDOzZDQUd3QixVQUFVO0dBRnZCLG9CQUFvQixDQXdEaEM7U0F4RFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tYml0d2lzZSAqL1xuLyogdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLXNlbGVjdG9yLW5hbWUgKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBpc0Rldk1vZGUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tydWZJZF0nXG59KVxuZXhwb3J0IGNsYXNzIFJ1ZlVuaXF1ZUlkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgcnVmSWQ6IHN0cmluZztcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRFbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgICAgaWYgKCFjdXJyZW50RWxlbWVudC5pZCkge1xuICAgICAgICBjdXJyZW50RWxlbWVudC5pZCA9IHRoaXMucnVmSWQgPyB0aGlzLmdldFVuaXF1ZUlkKHRoaXMucnVmSWQpIDogdGhpcy5nZW5lcmF0ZUlEKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdhbGtzIHVwIHRoZSB0cmVlLCBwaWNraW5nIHVwIHVpZHMgYXMgaXQgZ29lc1xuICAgKiBAcGFyYW0gbm9kZVxuICAgKiBAcmV0dXJucyBwYXJlbnQgSURcbiAgICovXG4gIHByaXZhdGUgZ2V0UGFyZW50SUQobm9kZTogYW55KSB7XG4gICAgbGV0IHRlbXBQYXJlbnRJZCA9ICcnO1xuICAgIGlmIChub2RlLmF0dHJpYnV0ZXMgJiYgbm9kZS5hdHRyaWJ1dGVzLmlkKSB7XG4gICAgICByZXR1cm4gbm9kZS5hdHRyaWJ1dGVzLmlkLnZhbHVlO1xuICAgIH1cbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICB0ZW1wUGFyZW50SWQgPSB0aGlzLmdldFBhcmVudElEKG5vZGUucGFyZW50Tm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wUGFyZW50SWQ7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGFuIGlkZW1wb3RlbnQgaWQgb24gdGhlIGVsZW1lbnQgdGhpcyBkaXJlY3RpdmUgaXMgYXR0YWNoZWQgdG9cbiAgICogQmFzZWQgb24gdGhlIG5hbWUgYW5kIGF0dHJpYnV0ZXMgKGJ1dCBpZ25vcmVzIHRoZSBhbmd1bGFyIHRlbXAgbmFtZSB0aGF0IGNhbiBiZSBkaWZmZXJlbnQgZWFjaCBydW4pXG4gICAqIEByZXR1cm5zIHN0cmluZ1xuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUlEKCkge1xuICAgIGNvbnN0IG5lbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBwYXJlbnRJRCA9IHRoaXMuZ2V0UGFyZW50SUQobmVsKTtcbiAgICBsZXQgdGVtcFVpZCA9IHBhcmVudElEID09PSAnJyA/IG5lbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgOiBwYXJlbnRJRCArICdfJyArIG5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHRlbXBVaWQgPSB0aGlzLmdldFVuaXF1ZUlkKHRlbXBVaWQpO1xuICAgIHJldHVybiB0ZW1wVWlkO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGZvciB1bmlxdWUgaWQgaW4gRE9NXG4gICAqIEByZXR1cm5zIHN0cmluZ1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRVbmlxdWVJZCh0ZW1wSWQ6IHN0cmluZykge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgY29uc3QgZ2VuSWQgPSB0ZW1wSWQgKyAnXyc7XG4gICAgdGVtcElkID0gZ2VuSWQgKyBjb3VudDtcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcElkKSAhPT0gbnVsbCkge1xuICAgICAgY291bnQrKztcbiAgICAgIHRlbXBJZCA9IGdlbklkICsgY291bnQ7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wSWQ7XG4gIH1cbn1cbiJdfQ==