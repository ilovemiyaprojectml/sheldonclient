import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * Labels used by all shell components that require internationalization.
 * These components also have individual attributes for these labels.
 * Users can either provide attributes
 * e.g., `closeIconTitle` can be provided by users for title of modal dialog close button.
 * <button mat-icon-button mat-dialog-close [title]="closeIconTitle">
 * </button>
 * or
 * Provide an instance of this class which overrides `closeIconTitle`.
 * */
let RufShellIntl = class RufShellIntl {
    /**
     * Labels used by all shell components that require internationalization.
     * These components also have individual attributes for these labels.
     * Users can either provide attributes
     * e.g., `closeIconTitle` can be provided by users for title of modal dialog close button.
     * <button mat-icon-button mat-dialog-close [title]="closeIconTitle">
     * </button>
     * or
     * Provide an instance of this class which overrides `closeIconTitle`.
     * */
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        this.dynamicmenubar = {
            aria: { closeIconLabel: 'Close' }
        };
        this.dialog = { closeIconTitle: 'Close' };
        this.banner = {
            altText: 'logo',
            aria: {
                label: 'Banner',
                labelledBy: null
            }
        };
        this.toolbar = {
            aria: { label: 'Toolbar' }
        };
        this.statusbar = {
            aria: { closeIconLabel: 'Close', expandIconLabel: 'Expand' }
        };
        this.ellipsis = {
            label: '...Read More',
            aria: { label: 'Read More' }
        };
        this.megamenu = {
            placeholder: 'Search',
            aria: { clearSearchLabel: 'Clear search' }
        };
        this.megamenusearch = {
            placeholder: 'Search',
            aria: { clearSearchLabel: 'Clear search' }
        };
        this.card = {
            aria: {
                expandLabel: 'Expand',
                collapseLabel: 'Collapse'
            }
        };
        this.fileupload = {
            aria: {
                label: 'Choose File'
            },
            label: 'Choose File',
            placeholder: 'No file chosen',
            fileNameLabel: 'File Name',
            sizeLabel: 'Size',
            progressLabel: 'Progress'
        };
        this.sidepanel = {
            aria: {
                pinLabel: 'Pin',
                unpinLabel: 'Unpin'
            }
        };
    }
};
RufShellIntl = tslib_1.__decorate([
    Injectable()
], RufShellIntl);
export { RufShellIntl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlbGwtaW50bC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvdXRpbHMvc2hlbGwtaW50bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRzdCOzs7Ozs7Ozs7S0FTSztBQUVMLElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFYekI7Ozs7Ozs7OztTQVNLO0lBQ0w7UUFFRTs7O1dBR0c7UUFDSCxZQUFPLEdBQWtCLElBQUksT0FBTyxFQUFRLENBQUM7UUFFN0MsbUJBQWMsR0FBRztZQUNmLElBQUksRUFBRSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUU7U0FDbEMsQ0FBQztRQUVGLFdBQU0sR0FBRyxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVyQyxXQUFNLEdBQUc7WUFDUCxPQUFPLEVBQUUsTUFBTTtZQUNmLElBQUksRUFBRTtnQkFDSixLQUFLLEVBQUUsUUFBUTtnQkFDZixVQUFVLEVBQUUsSUFBSTthQUNoQjtTQUNILENBQUM7UUFFRixZQUFPLEdBQUc7WUFDUixJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1NBQzNCLENBQUM7UUFFRixjQUFTLEdBQUc7WUFDVixJQUFJLEVBQUUsRUFBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUM7U0FDM0QsQ0FBQztRQUNGLGFBQVEsR0FBRztZQUNULEtBQUssRUFBRSxjQUFjO1lBQ3JCLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUU7U0FDN0IsQ0FBQztRQUVGLGFBQVEsR0FBRztZQUNULFdBQVcsRUFBRSxRQUFRO1lBQ3JCLElBQUksRUFBRSxFQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBQztTQUN4QyxDQUFDO1FBRUgsbUJBQWMsR0FBRztZQUNmLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLElBQUksRUFBRSxFQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBQztTQUN4QyxDQUFDO1FBRUgsU0FBSSxHQUFHO1lBQ0wsSUFBSSxFQUFFO2dCQUNKLFdBQVcsRUFBRSxRQUFRO2dCQUNyQixhQUFhLEVBQUUsVUFBVTthQUMxQjtTQUNGLENBQUM7UUFFRixlQUFVLEdBQUc7WUFDWCxJQUFJLEVBQUU7Z0JBQ0osS0FBSyxFQUFFLGFBQWE7YUFDckI7WUFDRCxLQUFLLEVBQUUsYUFBYTtZQUNwQixXQUFXLEVBQUUsZ0JBQWdCO1lBQzdCLGFBQWEsRUFBRyxXQUFXO1lBQzNCLFNBQVMsRUFBRyxNQUFNO1lBQ2xCLGFBQWEsRUFBRyxVQUFVO1NBQzNCLENBQUM7UUFFRixjQUFTLEdBQUc7WUFDVixJQUFJLEVBQUU7Z0JBQ0osUUFBUSxFQUFHLEtBQUs7Z0JBQ2hCLFVBQVUsRUFBRSxPQUFPO2FBQ3BCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FBQSxDQUFBO0FBbkVZLFlBQVk7SUFEeEIsVUFBVSxFQUFFO0dBQ0EsWUFBWSxDQW1FeEI7U0FuRVksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5cbi8qKlxuICogTGFiZWxzIHVzZWQgYnkgYWxsIHNoZWxsIGNvbXBvbmVudHMgdGhhdCByZXF1aXJlIGludGVybmF0aW9uYWxpemF0aW9uLlxuICogVGhlc2UgY29tcG9uZW50cyBhbHNvIGhhdmUgaW5kaXZpZHVhbCBhdHRyaWJ1dGVzIGZvciB0aGVzZSBsYWJlbHMuXG4gKiBVc2VycyBjYW4gZWl0aGVyIHByb3ZpZGUgYXR0cmlidXRlc1xuICogZS5nLiwgYGNsb3NlSWNvblRpdGxlYCBjYW4gYmUgcHJvdmlkZWQgYnkgdXNlcnMgZm9yIHRpdGxlIG9mIG1vZGFsIGRpYWxvZyBjbG9zZSBidXR0b24uXG4gKiA8YnV0dG9uIG1hdC1pY29uLWJ1dHRvbiBtYXQtZGlhbG9nLWNsb3NlIFt0aXRsZV09XCJjbG9zZUljb25UaXRsZVwiPlxuICogPC9idXR0b24+XG4gKiBvclxuICogUHJvdmlkZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIHdoaWNoIG92ZXJyaWRlcyBgY2xvc2VJY29uVGl0bGVgLlxuICogKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSdWZTaGVsbEludGwge1xuICAvKipcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbmV2ZXIgdGhlIGxhYmVscyBoZXJlIGFyZSBjaGFuZ2VkLiBVc2UgdGhpcyB0byBub3RpZnlcbiAgICogY29tcG9uZW50cyBpZiB0aGUgbGFiZWxzIGhhdmUgY2hhbmdlZCBhZnRlciBpbml0aWFsaXphdGlvbi5cbiAgICovXG4gIGNoYW5nZXM6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGR5bmFtaWNtZW51YmFyID0ge1xuICAgIGFyaWE6IHsgY2xvc2VJY29uTGFiZWw6ICdDbG9zZScgfVxuICB9O1xuXG4gIGRpYWxvZyA9IHsgY2xvc2VJY29uVGl0bGU6ICdDbG9zZScgfTtcblxuICBiYW5uZXIgPSB7XG4gICAgYWx0VGV4dDogJ2xvZ28nLFxuICAgIGFyaWE6IHtcbiAgICAgIGxhYmVsOiAnQmFubmVyJyxcbiAgICAgIGxhYmVsbGVkQnk6IG51bGxcbiAgICAgfVxuICB9O1xuXG4gIHRvb2xiYXIgPSB7XG4gICAgYXJpYTogeyBsYWJlbDogJ1Rvb2xiYXInIH1cbiAgfTtcblxuICBzdGF0dXNiYXIgPSB7XG4gICAgYXJpYToge2Nsb3NlSWNvbkxhYmVsOiAnQ2xvc2UnLCBleHBhbmRJY29uTGFiZWw6ICdFeHBhbmQnfVxuICB9O1xuICBlbGxpcHNpcyA9IHtcbiAgICBsYWJlbDogJy4uLlJlYWQgTW9yZScsXG4gICAgYXJpYTogeyBsYWJlbDogJ1JlYWQgTW9yZScgfVxuICB9O1xuXG4gIG1lZ2FtZW51ID0ge1xuICAgIHBsYWNlaG9sZGVyOiAnU2VhcmNoJyxcbiAgICBhcmlhOiB7Y2xlYXJTZWFyY2hMYWJlbDogJ0NsZWFyIHNlYXJjaCd9XG4gICB9O1xuXG4gIG1lZ2FtZW51c2VhcmNoID0ge1xuICAgIHBsYWNlaG9sZGVyOiAnU2VhcmNoJyxcbiAgICBhcmlhOiB7Y2xlYXJTZWFyY2hMYWJlbDogJ0NsZWFyIHNlYXJjaCd9XG4gICB9O1xuXG4gIGNhcmQgPSB7XG4gICAgYXJpYToge1xuICAgICAgZXhwYW5kTGFiZWw6ICdFeHBhbmQnLFxuICAgICAgY29sbGFwc2VMYWJlbDogJ0NvbGxhcHNlJ1xuICAgIH1cbiAgfTtcblxuICBmaWxldXBsb2FkID0ge1xuICAgIGFyaWE6IHtcbiAgICAgIGxhYmVsOiAnQ2hvb3NlIEZpbGUnXG4gICAgfSxcbiAgICBsYWJlbDogJ0Nob29zZSBGaWxlJyxcbiAgICBwbGFjZWhvbGRlcjogJ05vIGZpbGUgY2hvc2VuJyxcbiAgICBmaWxlTmFtZUxhYmVsIDogJ0ZpbGUgTmFtZScsXG4gICAgc2l6ZUxhYmVsIDogJ1NpemUnLFxuICAgIHByb2dyZXNzTGFiZWwgOiAnUHJvZ3Jlc3MnXG4gIH07XG5cbiAgc2lkZXBhbmVsID0ge1xuICAgIGFyaWE6IHtcbiAgICAgIHBpbkxhYmVsIDogJ1BpbicsXG4gICAgICB1bnBpbkxhYmVsOiAnVW5waW4nXG4gICAgfVxuICB9O1xufVxuIl19