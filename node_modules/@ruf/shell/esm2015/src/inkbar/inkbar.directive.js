import * as tslib_1 from "tslib";
import { Directive, Input, HostBinding, Renderer2, ElementRef } from '@angular/core';
let RufInkbarDirective = class RufInkbarDirective {
    constructor(renderer, elm) {
        this.renderer = renderer;
        this.elm = elm;
        this._color = 'primary';
        this._position = 'bottom';
        this.rufInkbar = 'ruf-inkbar';
        // add default classes;
        this._updateClass(this._color, null);
        this._updateClass(this._position, null);
    }
    get inkbarPosition() {
        return this._position;
    }
    set inkbarPosition(value) {
        const position = value || 'bottom';
        this._updateClass(position, this._position);
        this._position = position;
    }
    get inkbarColor() {
        return this._color;
    }
    set inkbarColor(value) {
        const color = value || 'primary';
        this._updateClass(color, this._color);
        this._color = color;
    }
    // method to update the class based on the input
    _updateClass(newValue, oldValue) {
        if (oldValue) {
            // remove class only if newValue is not null
            this.renderer.removeClass(this.elm.nativeElement, `ruf-inkbar-${oldValue}`);
        }
        if (newValue) {
            this.renderer.addClass(this.elm.nativeElement, `ruf-inkbar-${newValue}`);
        }
    }
};
tslib_1.__decorate([
    HostBinding('class.ruf-inkbar'),
    tslib_1.__metadata("design:type", Object)
], RufInkbarDirective.prototype, "rufInkbar", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufInkbarDirective.prototype, "inkbarPosition", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufInkbarDirective.prototype, "inkbarColor", null);
RufInkbarDirective = tslib_1.__decorate([
    Directive({
        selector: '[rufInkbar]',
        exportAs: 'rufInkbar'
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
], RufInkbarDirective);
export { RufInkbarDirective };
let RufInkbarActiveDirective = class RufInkbarActiveDirective {
    constructor() {
        this.rufInkbarItem = 'ruf-inkbar-item';
    }
    get _inkbarActive() {
        return this.rufInkbarActive;
    }
};
tslib_1.__decorate([
    HostBinding('class.ruf-inkbar-item'),
    tslib_1.__metadata("design:type", Object)
], RufInkbarActiveDirective.prototype, "rufInkbarItem", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-inkbar-active'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], RufInkbarActiveDirective.prototype, "_inkbarActive", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], RufInkbarActiveDirective.prototype, "rufInkbarActive", void 0);
RufInkbarActiveDirective = tslib_1.__decorate([
    Directive({
        selector: '[rufInkbarActive]',
        exportAs: 'rufInkbarActive'
    })
], RufInkbarActiveDirective);
export { RufInkbarActiveDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5rYmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BydWYvc2hlbGwvIiwic291cmNlcyI6WyJzcmMvaW5rYmFyL2lua2Jhci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFdBQVcsRUFDWCxTQUFTLEVBQ1QsVUFBVSxFQUViLE1BQU0sZUFBZSxDQUFDO0FBT3ZCLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBMEIzQixZQUFvQixRQUFtQixFQUFVLEdBQWU7UUFBNUMsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLFFBQUcsR0FBSCxHQUFHLENBQVk7UUF6QnhELFdBQU0sR0FBRyxTQUFTLENBQUM7UUFDbkIsY0FBUyxHQUFHLFFBQVEsQ0FBQztRQUNJLGNBQVMsR0FBRyxZQUFZLENBQUM7UUF3QnRELHVCQUF1QjtRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUF4QkQsSUFBSSxjQUFjO1FBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFDRCxJQUFJLGNBQWMsQ0FBQyxLQUFhO1FBQzVCLE1BQU0sUUFBUSxHQUFHLEtBQUssSUFBSSxRQUFRLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzlCLENBQUM7SUFHRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksV0FBVyxDQUFDLEtBQWE7UUFDekIsTUFBTSxLQUFLLEdBQUcsS0FBSyxJQUFJLFNBQVMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQVFELGdEQUFnRDtJQUN4QyxZQUFZLENBQUMsUUFBUSxFQUFFLFFBQVE7UUFDbkMsSUFBSSxRQUFRLEVBQUU7WUFDViw0Q0FBNEM7WUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsY0FBYyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsSUFBSSxRQUFRLEVBQUU7WUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxjQUFjLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDNUU7SUFDTCxDQUFDO0NBQ0osQ0FBQTtBQXZDb0M7SUFBaEMsV0FBVyxDQUFDLGtCQUFrQixDQUFDOztxREFBMEI7QUFHMUQ7SUFEQyxLQUFLLEVBQUU7Ozt3REFHUDtBQVFEO0lBREMsS0FBSyxFQUFFOzs7cURBR1A7QUFsQlEsa0JBQWtCO0lBTDlCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCLFFBQVEsRUFBRSxXQUFXO0tBQ3hCLENBQUM7NkNBNEJnQyxTQUFTLEVBQWUsVUFBVTtHQTFCdkQsa0JBQWtCLENBMEM5QjtTQTFDWSxrQkFBa0I7QUFrRC9CLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0lBTHJDO1FBTTBDLGtCQUFhLEdBQUcsaUJBQWlCLENBQUM7SUFNNUUsQ0FBQztJQUpHLElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0NBRUosQ0FBQTtBQU55QztJQUFyQyxXQUFXLENBQUMsdUJBQXVCLENBQUM7OytEQUFtQztBQUV4RTtJQURDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQzs7OzZEQUd0QztBQUNRO0lBQVIsS0FBSyxFQUFFOztpRUFBMEI7QUFOekIsd0JBQXdCO0lBTHBDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsUUFBUSxFQUFFLGlCQUFpQjtLQUM5QixDQUFDO0dBRVcsd0JBQXdCLENBT3BDO1NBUFksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgSW5wdXQsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgUmVuZGVyZXIyLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgQWZ0ZXJWaWV3SW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbcnVmSW5rYmFyXScsXG4gICAgZXhwb3J0QXM6ICdydWZJbmtiYXInXG59KVxuXG5leHBvcnQgY2xhc3MgUnVmSW5rYmFyRGlyZWN0aXZlIHtcbiAgICBwcml2YXRlIF9jb2xvciA9ICdwcmltYXJ5JztcbiAgICBwcml2YXRlIF9wb3NpdGlvbiA9ICdib3R0b20nO1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MucnVmLWlua2JhcicpIHJ1Zklua2JhciA9ICdydWYtaW5rYmFyJztcblxuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGlua2JhclBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gICAgfVxuICAgIHNldCBpbmtiYXJQb3NpdGlvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdmFsdWUgfHwgJ2JvdHRvbSc7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNsYXNzKHBvc2l0aW9uLCB0aGlzLl9wb3NpdGlvbik7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb247XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBnZXQgaW5rYmFyQ29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgICB9XG5cbiAgICBzZXQgaW5rYmFyQ29sb3IodmFsdWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBjb2xvciA9IHZhbHVlIHx8ICdwcmltYXJ5J1xuICAgICAgICB0aGlzLl91cGRhdGVDbGFzcyhjb2xvciwgdGhpcy5fY29sb3IpO1xuICAgICAgICB0aGlzLl9jb2xvciA9IGNvbG9yO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbG06IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgLy8gYWRkIGRlZmF1bHQgY2xhc3NlcztcbiAgICAgICAgdGhpcy5fdXBkYXRlQ2xhc3ModGhpcy5fY29sb3IsIG51bGwpO1xuICAgICAgICB0aGlzLl91cGRhdGVDbGFzcyh0aGlzLl9wb3NpdGlvbiwgbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gbWV0aG9kIHRvIHVwZGF0ZSB0aGUgY2xhc3MgYmFzZWQgb24gdGhlIGlucHV0XG4gICAgcHJpdmF0ZSBfdXBkYXRlQ2xhc3MobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGNsYXNzIG9ubHkgaWYgbmV3VmFsdWUgaXMgbm90IG51bGxcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbG0ubmF0aXZlRWxlbWVudCwgYHJ1Zi1pbmtiYXItJHtvbGRWYWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbG0ubmF0aXZlRWxlbWVudCwgYHJ1Zi1pbmtiYXItJHtuZXdWYWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tydWZJbmtiYXJBY3RpdmVdJyxcbiAgICBleHBvcnRBczogJ3J1Zklua2JhckFjdGl2ZSdcbn0pXG5cbmV4cG9ydCBjbGFzcyBSdWZJbmtiYXJBY3RpdmVEaXJlY3RpdmUge1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MucnVmLWlua2Jhci1pdGVtJykgcnVmSW5rYmFySXRlbSA9ICdydWYtaW5rYmFyLWl0ZW0nO1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MucnVmLWlua2Jhci1hY3RpdmUnKVxuICAgIGdldCBfaW5rYmFyQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ydWZJbmtiYXJBY3RpdmU7XG4gICAgfVxuICAgIEBJbnB1dCgpIHJ1Zklua2JhckFjdGl2ZTogYm9vbGVhbjtcbn1cbiJdfQ==