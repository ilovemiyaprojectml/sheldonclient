import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, HostListener, Input } from '@angular/core';
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { Subscription } from 'rxjs';
import { throwTargetMissingError } from './trigger.interface';
let RufTriggerDirective = class RufTriggerDirective extends CdkOverlayOrigin {
    constructor(elRef, renderer) {
        super(elRef);
        this.elRef = elRef;
        this.renderer = renderer;
        this.subscription = Subscription.EMPTY;
    }
    ngAfterViewInit() {
        this._checkTarget();
        if (this.target.hasPopup()) {
            this.renderer.setAttribute(this.elRef.nativeElement, 'aria-haspopup', 'true');
            this.renderer.setAttribute(this.elRef.nativeElement, 'aria-expanded', 'false');
        }
        else {
            this.renderer.removeAttribute(this.elRef.nativeElement, 'aria-haspopup');
            this.renderer.removeAttribute(this.elRef.nativeElement, 'aria-expanded');
        }
        if (this.subscription === Subscription.EMPTY) {
            this.subscription = this.target.toggle.subscribe((opened) => {
                this.renderer.setAttribute(this.elRef.nativeElement, 'aria-expanded', opened ? 'true' : 'false');
                if (!opened) {
                    this.elRef.nativeElement.focus();
                }
            });
        }
    }
    handleClickEvent(event) {
        this.target.handleClick(event);
    }
    handleKeydownEvent(event) {
        this.target.handleKeydown(event);
    }
    _checkTarget() {
        if (!this.target) {
            throwTargetMissingError();
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
};
tslib_1.__decorate([
    Input('rufTrigger'),
    tslib_1.__metadata("design:type", Object)
], RufTriggerDirective.prototype, "target", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RufTriggerDirective.prototype, "handleClickEvent", null);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RufTriggerDirective.prototype, "handleKeydownEvent", null);
RufTriggerDirective = tslib_1.__decorate([
    Directive({
        selector: '[rufTrigger]',
        exportAs: 'rufTrigger'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], RufTriggerDirective);
export { RufTriggerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL3RyaWdnZXIvdHJpZ2dlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUdOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNOUQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBb0IsU0FBUSxnQkFBZ0I7SUFLdkQsWUFBb0IsS0FBaUIsRUFBVSxRQUFtQjtRQUNoRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFESyxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUYxRCxpQkFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7SUFJMUMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5RSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDaEY7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFlBQVksQ0FBQyxLQUFLLEVBQUU7WUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDMUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDakcsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDbEM7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUdELGdCQUFnQixDQUFFLEtBQUs7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUdELGtCQUFrQixDQUFDLEtBQUs7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQix1QkFBdUIsRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Q0FDRixDQUFBO0FBN0NzQjtJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzttREFBMEI7QUEyQjlDO0lBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7OzJEQUdqQztBQUdEO0lBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7OzZEQUduQztBQXBDVSxtQkFBbUI7SUFKL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGNBQWM7UUFDeEIsUUFBUSxFQUFFLFlBQVk7S0FDdkIsQ0FBQzs2Q0FNMkIsVUFBVSxFQUFvQixTQUFTO0dBTHZELG1CQUFtQixDQStDL0I7U0EvQ1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIEFmdGVyVmlld0luaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZGtPdmVybGF5T3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSdWZUcmlnZ2VyVGFyZ2V0IH0gZnJvbSAnLi90cmlnZ2VyLmludGVyZmFjZSc7XG5pbXBvcnQgeyB0aHJvd1RhcmdldE1pc3NpbmdFcnJvciB9IGZyb20gJy4vdHJpZ2dlci5pbnRlcmZhY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcnVmVHJpZ2dlcl0nLFxuICBleHBvcnRBczogJ3J1ZlRyaWdnZXInXG59KVxuZXhwb3J0IGNsYXNzIFJ1ZlRyaWdnZXJEaXJlY3RpdmUgZXh0ZW5kcyBDZGtPdmVybGF5T3JpZ2luIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICovXG4gIEBJbnB1dCgncnVmVHJpZ2dlcicpIHRhcmdldDogUnVmVHJpZ2dlclRhcmdldDtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgc3VwZXIoZWxSZWYpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuX2NoZWNrVGFyZ2V0KCk7XG4gICAgaWYgKHRoaXMudGFyZ2V0Lmhhc1BvcHVwKCkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgJ2FyaWEtaGFzcG9wdXAnLCAndHJ1ZScpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWhhc3BvcHVwJyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWV4cGFuZGVkJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbiA9PT0gU3Vic2NyaXB0aW9uLkVNUFRZKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMudGFyZ2V0LnRvZ2dsZS5zdWJzY3JpYmUoKG9wZW5lZCkgPT4ge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWV4cGFuZGVkJywgb3BlbmVkID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICAgIGlmICghb3BlbmVkKSB7XG4gICAgICAgICAgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgaGFuZGxlQ2xpY2tFdmVudCAoZXZlbnQpIHtcbiAgICB0aGlzLnRhcmdldC5oYW5kbGVDbGljayhldmVudCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgaGFuZGxlS2V5ZG93bkV2ZW50KGV2ZW50KSB7XG4gICAgdGhpcy50YXJnZXQuaGFuZGxlS2V5ZG93bihldmVudCk7XG4gIH1cblxuICBfY2hlY2tUYXJnZXQoKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkge1xuICAgICAgdGhyb3dUYXJnZXRNaXNzaW5nRXJyb3IoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=