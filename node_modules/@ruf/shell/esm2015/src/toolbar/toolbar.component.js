import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input, ViewEncapsulation, ElementRef, ChangeDetectionStrategy, Directive, ContentChildren, QueryList, HostListener } from '@angular/core';
import { RufKeyboardNavigation, RufKeyCodes } from '../input/keyboard';
import { RufFocusableDirective } from '../utils/focusable';
import { RufShellIntl } from '../utils/shell-intl';
import { RufMixinBase } from '../common/color/color';
let RufToolbarRowDirective = class RufToolbarRowDirective {
};
RufToolbarRowDirective = tslib_1.__decorate([
    Directive({
        selector: 'ruf-toolbar-row' // tslint:disable-line
    })
], RufToolbarRowDirective);
export { RufToolbarRowDirective };
let RufToolbarComponent = class RufToolbarComponent extends RufMixinBase {
    constructor(_elementRef, _intl, changeDetectorRef) {
        super(_elementRef);
        this._elementRef = _elementRef;
        this._intl = _intl;
        this.children = [];
        this._intlChanges = _intl.changes.subscribe(() => {
            changeDetectorRef.markForCheck();
        });
    }
    /* tslint:disable:no-input-rename */
    set ariaLabel(label) {
        this._ariaLabel = label;
    }
    get ariaLabel() {
        return this._ariaLabel || this._intl.toolbar.aria.label;
    }
    ngAfterContentInit() {
        this._keyboardNav = new RufKeyboardNavigation();
        this._keyboardNav.init(this._elementRef, this.toolbarItems);
        this._keyboardNav.addTabIndex(this.toolbarItems);
    }
    onKey(event) {
        switch (event.keyCode) {
            case RufKeyCodes.SPACE:
            case RufKeyCodes.ENTER:
                event.stopPropagation();
                break;
            default:
                this._keyboardNav.onKeyDown(event);
        }
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufToolbarComponent.prototype, "color", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufToolbarComponent.prototype, "ariaLabel", null);
tslib_1.__decorate([
    ContentChildren(RufFocusableDirective, { descendants: true }),
    tslib_1.__metadata("design:type", QueryList)
], RufToolbarComponent.prototype, "toolbarItems", void 0);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], RufToolbarComponent.prototype, "onKey", null);
RufToolbarComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-toolbar',
        template: "<div class=\"ruf-toolbar-rows\" rufId=\"toolbar\" >\n  <ruf-toolbar-row  class=\"ruf-toolbar-first-row\" rufId=\"toolbar_row\" role=\"toolbar\" [attr.aria-label]=\"ariaLabel\">\n    <ng-content></ng-content>\n  </ruf-toolbar-row>\n  <ng-content select=\"ruf-toolbar-row\"></ng-content>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["ruf-toolbar{display:block;flex-shrink:0;min-height:inherit;overflow:hidden}ruf-toolbar .mat-select{padding-top:0}.ruf-toolbar-separator{border-left-style:solid;border-left-width:1px;display:inline-block;height:1.4375rem;margin:0 .625rem;vertical-align:middle;word-wrap:nowrap}.ruf-toolbar-rows{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;min-height:inherit}ruf-toolbar-row{-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;min-height:inherit}ruf-toolbar-row>*{margin-left:.625rem}ruf-toolbar-row>:nth-last-child(1){margin-left:.625rem;margin-right:.625rem}ruf-toolbar-row>:nth-last-child(1).ruf-square{margin-right:0}ruf-toolbar-row>:only-child{border:0}"]
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        RufShellIntl,
        ChangeDetectorRef])
], RufToolbarComponent);
export { RufToolbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL3Rvb2xiYXIvdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLHVCQUF1QixFQUN2QixTQUFTLEVBRVQsZUFBZSxFQUNmLFNBQVMsRUFDVCxZQUFZLEVBRWIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sdUJBQXVCLENBQUM7QUFLbEUsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7Q0FBRyxDQUFBO0FBQXpCLHNCQUFzQjtJQUhsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCLENBQUMsc0JBQXNCO0tBQ25ELENBQUM7R0FDVyxzQkFBc0IsQ0FBRztTQUF6QixzQkFBc0I7QUFTbkMsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBb0IsU0FBUSxZQUFZO0lBeUJuRCxZQUFtQixXQUF1QixFQUN0QixLQUFtQixFQUMzQixpQkFBb0M7UUFFNUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBSkosZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdEIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQU4vQixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBVWxCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQy9DLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQXhCRixvQ0FBb0M7SUFFcEMsSUFBSSxTQUFTLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBUSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDM0QsQ0FBQztJQWtCRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFHRCxLQUFLLENBQUMsS0FBb0I7UUFDeEIsUUFBUSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ3JCLEtBQUssV0FBVyxDQUFDLEtBQUssQ0FBQztZQUN2QixLQUFLLFdBQVcsQ0FBQyxLQUFLO2dCQUNwQixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3hCLE1BQU07WUFDUjtnQkFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0NBRUYsQ0FBQTtBQWxEVTtJQUFSLEtBQUssRUFBRTs7a0RBQU87QUFJZjtJQURDLEtBQUssRUFBRTs7O29EQUdQO0FBVUQ7SUFEQyxlQUFlLENBQUMscUJBQXFCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7c0NBQ2hELFNBQVM7eURBQXdCO0FBbUIvQztJQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7NkNBQ3ZCLGFBQWE7O2dEQVN6QjtBQW5EVSxtQkFBbUI7SUFQL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGFBQWE7UUFDdkIsbVRBQXVDO1FBRXZDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1FBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztLQUNoRCxDQUFDOzZDQTBCZ0MsVUFBVTtRQUNmLFlBQVk7UUFDUixpQkFBaUI7R0EzQnJDLG1CQUFtQixDQXlEL0I7U0F6RFksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBFbGVtZW50UmVmLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgRGlyZWN0aXZlLFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgSG9zdExpc3RlbmVyLFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFJ1ZktleWJvYXJkTmF2aWdhdGlvbiwgUnVmS2V5Q29kZXMgfSBmcm9tICcuLi9pbnB1dC9rZXlib2FyZCc7XG5pbXBvcnQgeyBSdWZGb2N1c2FibGVEaXJlY3RpdmUgfSBmcm9tICcuLi91dGlscy9mb2N1c2FibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSdWZTaGVsbEludGwgfSBmcm9tICcuLi91dGlscy9zaGVsbC1pbnRsJztcbmltcG9ydCB7IFJ1Zk1peGluQmFzZSwgUnVmQ2FuQ29sb3IgfSBmcm9tICcuLi9jb21tb24vY29sb3IvY29sb3InO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdydWYtdG9vbGJhci1yb3cnIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbn0pXG5leHBvcnQgY2xhc3MgUnVmVG9vbGJhclJvd0RpcmVjdGl2ZSB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdydWYtdG9vbGJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90b29sYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdG9vbGJhci5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBSdWZUb29sYmFyQ29tcG9uZW50IGV4dGVuZHMgUnVmTWl4aW5CYXNlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBSdWZDYW5Db2xvciB7XG4gIHByaXZhdGUgX2ludGxDaGFuZ2VzOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgX2NvbG9yOiBzdHJpbmc7XG4gIHByaXZhdGUgX2tleWJvYXJkTmF2OiBSdWZLZXlib2FyZE5hdmlnYXRpb247XG4gIHByaXZhdGUgX2FyaWFMYWJlbDogc3RyaW5nO1xuXG4gIC8qIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZSAqL1xuICBASW5wdXQoKSBjb2xvcjtcblxuICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgKi9cbiAgQElucHV0KClcbiAgc2V0IGFyaWFMYWJlbChsYWJlbDogc3RyaW5nKSB7XG4gICAgdGhpcy5fYXJpYUxhYmVsID0gbGFiZWw7XG4gIH1cblxuICBnZXQgYXJpYUxhYmVsKCkge1xuICAgIHJldHVybiAgdGhpcy5fYXJpYUxhYmVsIHx8IHRoaXMuX2ludGwudG9vbGJhci5hcmlhLmxhYmVsO1xuICB9XG5cblxuICBwcml2YXRlIGNoaWxkcmVuID0gW107XG5cbiAgQENvbnRlbnRDaGlsZHJlbihSdWZGb2N1c2FibGVEaXJlY3RpdmUsIHsgZGVzY2VuZGFudHM6IHRydWUgfSlcbiAgdG9vbGJhckl0ZW1zOiBRdWVyeUxpc3Q8UnVmRm9jdXNhYmxlRGlyZWN0aXZlPjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2ludGw6IFJ1ZlNoZWxsSW50bCxcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmXG4gICAgICAgICAgICAgICkge1xuICAgICAgc3VwZXIoX2VsZW1lbnRSZWYpO1xuICAgICAgdGhpcy5faW50bENoYW5nZXMgPSBfaW50bC5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSk7XG4gICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuX2tleWJvYXJkTmF2ID0gbmV3IFJ1ZktleWJvYXJkTmF2aWdhdGlvbigpO1xuICAgIHRoaXMuX2tleWJvYXJkTmF2LmluaXQodGhpcy5fZWxlbWVudFJlZiwgdGhpcy50b29sYmFySXRlbXMpO1xuICAgIHRoaXMuX2tleWJvYXJkTmF2LmFkZFRhYkluZGV4KHRoaXMudG9vbGJhckl0ZW1zKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICBvbktleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgY2FzZSBSdWZLZXlDb2Rlcy5TUEFDRTpcbiAgICAgIGNhc2UgUnVmS2V5Q29kZXMuRU5URVI6XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuX2tleWJvYXJkTmF2Lm9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5faW50bENoYW5nZXMudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG59XG4iXX0=