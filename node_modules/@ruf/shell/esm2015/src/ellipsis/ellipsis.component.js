import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { RufShellIntl } from '../utils/shell-intl';
import { BehaviorSubject } from 'rxjs';
let RufEllipsisComponent = class RufEllipsisComponent {
    constructor(_intl, changeDetectorRef) {
        this._intl = _intl;
        this.changeDetectorRef = changeDetectorRef;
        this.showReadMore$ = new BehaviorSubject(false);
        this.lines = 5;
        this.lineHeight = 1;
        this.expand = new EventEmitter();
        this._intlChanges = _intl.changes.subscribe(() => this.changeDetectorRef.markForCheck());
    }
    get label() {
        return this._label || this._intl.ellipsis.label || '...';
    }
    set label(value) {
        this._label = value;
    }
    get ariaLabel() {
        return this._ariaLabel || this._intl.ellipsis.aria.label;
    }
    set ariaLabel(value) {
        this._ariaLabel = value;
    }
    checkReadMore() {
        if (this.text && this.ellipsisContainer.nativeElement.offsetHeight < this.ellipsisContainer.nativeElement.scrollHeight) {
            this.showReadMore$.next(true);
        }
        else {
            this.showReadMore$.next(false);
        }
    }
    ngAfterViewChecked() {
        this.checkReadMore();
        this.changeDetectorRef.detectChanges();
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufEllipsisComponent.prototype, "text", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufEllipsisComponent.prototype, "lines", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufEllipsisComponent.prototype, "lineHeight", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufEllipsisComponent.prototype, "label", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufEllipsisComponent.prototype, "ariaLabel", null);
tslib_1.__decorate([
    ViewChild('ellipsisContainer', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], RufEllipsisComponent.prototype, "ellipsisContainer", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], RufEllipsisComponent.prototype, "expand", void 0);
RufEllipsisComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-ellipsis',
        template: "<div  #ellipsisContainer [class]=\"'ellipsis-container'\" [style.maxHeight.rem]=\"lines * lineHeight\" [style.lineHeight.rem]=\"lineHeight\">\n  <div  class=\"ellipsis-wrapper\" >\n    <div class=\"ellipsis-content\" [innerHTML]=\"text\">\n    </div>\n  </div>\n  <span *ngIf=\"showReadMore$ | async\" [attr.aria-label]=\"ariaLabel\" class=\"ellipsis\">\n    <a (click)=\"expand.emit({'text': this.text});\" href=\"javascript:;\">{{label}}</a>\n  </span>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["ruf-ellipsis .ellipsis-container{max-height:calc(5rem);overflow:hidden;position:relative}ruf-ellipsis .ellipsis-container:before{content:'';float:left;height:100%;width:1px}ruf-ellipsis .ellipsis-wrapper{float:right;margin-left:-1px;width:100%}ruf-ellipsis .ellipsis-content{margin:0}ruf-ellipsis .ellipsis-content p{margin-bottom:1rem;margin-top:0}ruf-ellipsis .ellipsis{bottom:0;position:absolute;right:0;text-align:right;width:auto}"]
    }),
    tslib_1.__metadata("design:paramtypes", [RufShellIntl, ChangeDetectorRef])
], RufEllipsisComponent);
export { RufEllipsisComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ1Zi9zaGVsbC8iLCJzb3VyY2VzIjpbInNyYy9lbGxpcHNpcy9lbGxpcHNpcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixpQkFBaUIsRUFDakIsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUdsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFnQixlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFVcEQsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7SUErQi9CLFlBQW9CLEtBQW1CLEVBQVUsaUJBQW9DO1FBQWpFLFVBQUssR0FBTCxLQUFLLENBQWM7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBNUJyRixrQkFBYSxHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUVyRSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsZUFBVSxHQUFHLENBQUMsQ0FBQztRQXVCZCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUdwQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFyQkQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUM7SUFDM0QsQ0FBQztJQUNELElBQUksS0FBSyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUdELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzNELENBQUM7SUFDRCxJQUFJLFNBQVMsQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUFVRCxhQUFhO1FBQ1osSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFO1lBQ3JILElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFFO1FBQ3RCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7QUEvQ1U7SUFBUixLQUFLLEVBQUU7O2tEQUFjO0FBQ2I7SUFBUixLQUFLLEVBQUU7O21EQUFXO0FBQ1Y7SUFBUixLQUFLLEVBQUU7O3dEQUFnQjtBQU14QjtJQURDLEtBQUssRUFBRTs7O2lEQUdQO0FBTUQ7SUFEQyxLQUFLLEVBQUU7OztxREFHUDtBQUtnRDtJQUFoRCxTQUFTLENBQUMsbUJBQW1CLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7c0NBQW9CLFVBQVU7K0RBQUM7QUFFckU7SUFBVCxNQUFNLEVBQUU7O29EQUE2QjtBQTdCM0Isb0JBQW9CO0lBUGhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxjQUFjO1FBQ3hCLDRkQUF3QztRQUV4QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDaEQsQ0FBQzs2Q0FnQzJCLFlBQVksRUFBNkIsaUJBQWlCO0dBL0IxRSxvQkFBb0IsQ0FtRGhDO1NBbkRZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIE9uRGVzdHJveSxcbiAgQWZ0ZXJWaWV3Q2hlY2tlZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UnVmU2hlbGxJbnRsfSBmcm9tICcuLi91dGlscy9zaGVsbC1pbnRsJztcbmltcG9ydCB7U3Vic2NyaXB0aW9uLCAgQmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdydWYtZWxsaXBzaXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZWxsaXBzaXMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9lbGxpcHNpcy5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUnVmRWxsaXBzaXNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9pbnRsQ2hhbmdlczogU3Vic2NyaXB0aW9uO1xuXG4gIHNob3dSZWFkTW9yZSQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICBASW5wdXQoKSB0ZXh0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGxpbmVzID0gNTtcbiAgQElucHV0KCkgbGluZUhlaWdodCA9IDE7XG4gIHByaXZhdGUgX2xhYmVsOiBzdHJpbmc7XG4gIHByaXZhdGUgX2FyaWFMYWJlbDogc3RyaW5nO1xuXG5cbiAgQElucHV0KClcbiAgZ2V0IGxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLl9sYWJlbCB8fCB0aGlzLl9pbnRsLmVsbGlwc2lzLmxhYmVsIHx8ICcuLi4nO1xuICB9XG4gIHNldCBsYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbGFiZWwgPSB2YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCBhcmlhTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FyaWFMYWJlbCB8fCB0aGlzLl9pbnRsLmVsbGlwc2lzLmFyaWEubGFiZWw7XG4gIH1cbiAgc2V0IGFyaWFMYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fYXJpYUxhYmVsID0gdmFsdWU7XG4gIH1cblxuICBAVmlld0NoaWxkKCdlbGxpcHNpc0NvbnRhaW5lcicsIHtzdGF0aWM6IGZhbHNlfSkgZWxsaXBzaXNDb250YWluZXI6IEVsZW1lbnRSZWY7XG5cbiAgQE91dHB1dCgpIGV4cGFuZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pbnRsOiBSdWZTaGVsbEludGwsIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgdGhpcy5faW50bENoYW5nZXMgPSBfaW50bC5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpKTtcbiAgfVxuXG4gIGNoZWNrUmVhZE1vcmUoKSB7XG4gICBpZiAodGhpcy50ZXh0ICYmIHRoaXMuZWxsaXBzaXNDb250YWluZXIubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgPCB0aGlzLmVsbGlwc2lzQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnNob3dSZWFkTW9yZSQubmV4dCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93UmVhZE1vcmUkLm5leHQoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrUmVhZE1vcmUoKSA7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9pbnRsQ2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=