import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
/* tslint:disable:max-line-length */
export const RUF_ICON_STYLE_VALUES = ['rotate-90', 'rotate-180', 'rotate-270', 'flip-horizontal', 'flip-vertical', 'spin', 'pulse', 'xs', 'sm', 'md', 'lg', 'xl'];
let RufIconStyleDirective = class RufIconStyleDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.classPrefix = 'fis-icon-';
    }
    ngOnChanges(changes) {
        if (changes.rufIconStyle) {
            const previous = this._validateValue(changes.rufIconStyle.previousValue);
            const current = this._validateValue(changes.rufIconStyle.currentValue);
            this.renderer.removeClass(this.elementRef.nativeElement, this.classPrefix + previous);
            this.renderer.addClass(this.elementRef.nativeElement, this.classPrefix + current);
        }
    }
    _validateValue(val) {
        if (RUF_ICON_STYLE_VALUES.indexOf(val) !== -1) {
            return val;
        }
        return 'md';
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufIconStyleDirective.prototype, "rufIconStyle", void 0);
RufIconStyleDirective = tslib_1.__decorate([
    Directive({
        selector: '[rufIconStyle]',
        exportAs: 'rufIconStyle'
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
], RufIconStyleDirective);
export { RufIconStyleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1zdHlsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL2ljb24vaWNvbi1zdHlsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxHLG9DQUFvQztBQUNwQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQU9sSyxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQUloQyxZQUFvQixRQUFtQixFQUFVLFVBQXNCO1FBQW5ELGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBSC9ELGdCQUFXLEdBQUcsV0FBVyxDQUFDO0lBR3lDLENBQUM7SUFFNUUsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN4QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDekUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDdEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsQ0FBQztTQUNuRjtJQUNILENBQUM7SUFFTyxjQUFjLENBQUMsR0FBRztRQUN4QixJQUFJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM3QyxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQTtBQWxCVTtJQUFSLEtBQUssRUFBRTs7MkRBQXNCO0FBSG5CLHFCQUFxQjtJQUxqQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1FBQzFCLFFBQVEsRUFBRSxjQUFjO0tBQ3pCLENBQUM7NkNBTThCLFNBQVMsRUFBc0IsVUFBVTtHQUo1RCxxQkFBcUIsQ0FxQmpDO1NBckJZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuZXhwb3J0IGNvbnN0IFJVRl9JQ09OX1NUWUxFX1ZBTFVFUyA9IFsncm90YXRlLTkwJywgJ3JvdGF0ZS0xODAnLCAncm90YXRlLTI3MCcsICdmbGlwLWhvcml6b250YWwnLCAnZmxpcC12ZXJ0aWNhbCcsICdzcGluJywgJ3B1bHNlJywgJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tydWZJY29uU3R5bGVdJyxcbiAgZXhwb3J0QXM6ICdydWZJY29uU3R5bGUnXG59KVxuXG5leHBvcnQgY2xhc3MgUnVmSWNvblN0eWxlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgcHJpdmF0ZSBjbGFzc1ByZWZpeCA9ICdmaXMtaWNvbi0nO1xuXG4gIEBJbnB1dCgpIHJ1Zkljb25TdHlsZTogc3RyaW5nO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnJ1Zkljb25TdHlsZSkge1xuICAgICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLl92YWxpZGF0ZVZhbHVlKGNoYW5nZXMucnVmSWNvblN0eWxlLnByZXZpb3VzVmFsdWUpO1xuICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuX3ZhbGlkYXRlVmFsdWUoY2hhbmdlcy5ydWZJY29uU3R5bGUuY3VycmVudFZhbHVlKTtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY2xhc3NQcmVmaXggKyBwcmV2aW91cyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmNsYXNzUHJlZml4ICsgY3VycmVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfdmFsaWRhdGVWYWx1ZSh2YWwpIHtcbiAgICBpZiAoUlVGX0lDT05fU1RZTEVfVkFMVUVTLmluZGV4T2YodmFsKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHJldHVybiAnbWQnO1xuICB9XG59XG4iXX0=