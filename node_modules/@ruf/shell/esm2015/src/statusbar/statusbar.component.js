import * as tslib_1 from "tslib";
import { ChangeDetectorRef, ChangeDetectionStrategy, Component, Input, Output, HostBinding, ViewEncapsulation, EventEmitter, ViewChild, ElementRef } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { RufShellIntl } from '../utils/shell-intl';
let RufStatusbarComponent = class RufStatusbarComponent {
    constructor(_intl, changeDetectorRef) {
        this._intl = _intl;
        this.color = 'accent';
        this.closeable = true;
        this.expandable = false;
        this.border = true;
        this.isSubtitleEmpty = false;
        this.visible = true;
        this.dismiss = new EventEmitter();
        this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());
    }
    get closeAriaLabel() {
        return this._closeAriaLabel || this._intl.statusbar.aria.closeIconLabel;
    }
    set closeAriaLabel(value) {
        this._closeAriaLabel = value;
    }
    get expandAriaLabel() {
        return this._expandAriaLabel || this._intl.statusbar.aria.expandIconLabel;
    }
    set expandAriaLabel(value) {
        this._expandAriaLabel = value;
    }
    get _class() {
        const colorClass = this.color ? `ruf-${this.color}` : 'ruf-accent';
        const borderClass = !this.border ? `ruf-statusbar-noborder` : '';
        return `${colorClass} ${borderClass}`;
    }
    onDismiss($event) {
        this.dismiss.emit();
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this.isSubtitleEmpty = this.subtitleContent.nativeElement.innerHTML.trim() === '';
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufStatusbarComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufStatusbarComponent.prototype, "color", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufStatusbarComponent.prototype, "closeable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufStatusbarComponent.prototype, "expandable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufStatusbarComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufStatusbarComponent.prototype, "border", void 0);
tslib_1.__decorate([
    ViewChild('subtitleRef', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], RufStatusbarComponent.prototype, "subtitleContent", void 0);
tslib_1.__decorate([
    HostBinding('@animation'),
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufStatusbarComponent.prototype, "visible", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufStatusbarComponent.prototype, "closeAriaLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufStatusbarComponent.prototype, "expandAriaLabel", null);
tslib_1.__decorate([
    HostBinding('class'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], RufStatusbarComponent.prototype, "_class", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], RufStatusbarComponent.prototype, "dismiss", void 0);
RufStatusbarComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-statusbar',
        template: "<div class=\"ruf-statusbar-wrapper\" rufId=\"statubar\" role=\"alert\">\n  <div class=\"ruf-statusbar-header\">\n    <ng-content select=\"ruf-statusbar-icon\"></ng-content>\n    <div *ngIf=\"icon\" class=\"ruf-statusbar-icon\" rufId=\"ruf-statusbar-default-icon\">\n      <mat-icon rufId [rufIcon]=\"icon\" rufIconStyle='md' [color]=\"color\"></mat-icon>\n    </div>\n    <div class=\"ruf-statusbar-content\" [ngClass]=\"{'no-header-content': !title && isSubtitleEmpty}\">\n      <div class=\"ruf-statusbar-header-text\">\n        <div *ngIf=\"title\" class=\"ruf-statusbar-title\" rufId=\"statubar_title\">{{title}}</div>\n        <div class=\"ruf-statusbar-subtitle\" #subtitleRef rufId=\"statusbar-subtitle\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n      <div class=\"ruf-statusbar-detail\" [@expanded]=\"'' + (!expandable || trigger.value)\" rufId=\"statubar_detail\">\n        <ng-content select=\"ruf-statusbar-description, .ruf-statusbar-description\"></ng-content>\n      </div>\n    </div>\n    <button type=\"button\" [hidden]=\"!expandable\" rufToggleChevron fisStyle mat-icon-button class=\"ruf-statusbar-expand\" #trigger=\"rufToggle\"\n      [attr.aria-label]=\"expandAriaLabel\" rufId=\"statubar_expand\">\n    </button>\n\n    <button type=\"button\" *ngIf=\"closeable\" fisStyle mat-icon-button class=\"ruf-statusbar-close\" (click)=\"onDismiss($event)\" [attr.aria-label]=\"closeAriaLabel\"\n      rufId=\"statubar_close\">\n      <mat-icon rufIconStyle=\"sm\" fisIcon=\"close\"></mat-icon>\n    </button>\n  </div>\n</div>\n",
        animations: [trigger('animation', [
                state('0', style({ height: '0', 'min-height': '0', visibility: 'hidden' })),
                state('1', style({ height: '*', 'min-height': '*', visibility: 'visible' })),
                transition('0 => 1', animate('250ms ease-in')),
                transition('1 => 0', animate('250ms ease-out'))
            ]), trigger('expanded', [
                state('false', style({ height: 0, visibility: 'hidden' })),
                state('true', style({ height: '*', visibility: 'visible' })),
                transition('false => true', animate('300ms ease-in-out')),
                transition('true => false', animate('300ms ease-in-out'))
            ])],
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["ruf-statusbar{border-bottom-right-radius:.1875rem;border-left:.375rem solid;border-top-right-radius:.1875rem;display:block;min-height:2.5rem;overflow:hidden;padding:0 0 0 1rem;position:relative;-webkit-transition:border-left-color .2s;transition:border-left-color .2s}ruf-statusbar .ruf-statusbar-wrapper{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;margin:auto;min-height:2.5rem}ruf-statusbar.ruf-statusbar-noborder{border-left:none}ruf-statusbar .ruf-statusbar-header{display:-webkit-box;display:flex;padding:2px}ruf-statusbar .ruf-statusbar-header .ruf-statusbar-icon{flex-shrink:0;margin-right:10px;overflow:hidden;padding-top:.4375rem;text-align:center}ruf-statusbar .ruf-statusbar-title{flex-shrink:1;margin-right:1rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}ruf-statusbar .ruf-statusbar-subtitle{-webkit-box-flex:1;flex-grow:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}ruf-statusbar .ruf-statusbar-close{flex-shrink:0;height:2.125rem!important;margin-left:auto;margin-right:.1875rem;min-width:auto}ruf-statusbar .ruf-statusbar-expand{flex-shrink:0;font-size:18px;height:1.25rem;margin-left:auto;min-width:auto}ruf-statusbar .ruf-statusbar-detail{display:-webkit-box;display:flex}ruf-statusbar ruf-statusbar-description{overflow-wrap:break-word;width:100%}ruf-statusbar ruf-statusbar-description .ruf-statusbar-description{margin-bottom:.5em;margin-right:.5em}ruf-statusbar ruf-statusbar-description .ruf-statusbar-description[style*=hidden]{margin-bottom:0}ruf-statusbar .ruf-statusbar-expand:after{position:inherit}ruf-statusbar .ruf-toggle.ruf-toggle-chevron{height:2.125rem;margin:0 .125rem .125rem;padding-right:.625rem!important}ruf-statusbar .ruf-toggle.ruf-toggle-chevron:after{margin-right:0;padding-left:0;padding-right:0}ruf-statusbar .ruf-statusbar-header-text{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;padding:.125rem 0}ruf-statusbar .ruf-statusbar-content{-webkit-box-flex:1;flex-grow:1;min-height:34px;min-width:0;padding-top:.4375rem;width:100%}ruf-statusbar .no-header-content{padding-top:.25rem}"]
    }),
    tslib_1.__metadata("design:paramtypes", [RufShellIntl, ChangeDetectorRef])
], RufStatusbarComponent);
export { RufStatusbarComponent };
let RufStatusbarIconComponent = class RufStatusbarIconComponent {
};
RufStatusbarIconComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-statusbar-icon',
        encapsulation: ViewEncapsulation.None,
        template: `
    <div class="ruf-statusbar-icon"><ng-content></ng-content></div>
  `
    })
], RufStatusbarIconComponent);
export { RufStatusbarIconComponent };
let RufStatusbarDescriptionComponent = class RufStatusbarDescriptionComponent {
};
RufStatusbarDescriptionComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-statusbar-description',
        encapsulation: ViewEncapsulation.None,
        template: `
   <div class="ruf-statusbar-description"><ng-content></ng-content></div>
  `
    })
], RufStatusbarDescriptionComponent);
export { RufStatusbarDescriptionComponent };
//# sourceMappingURL=data:application/json;base64,