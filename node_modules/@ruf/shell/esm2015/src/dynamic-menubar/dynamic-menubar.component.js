import * as tslib_1 from "tslib";
import { Input, Output, EventEmitter, Component, ChangeDetectorRef, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Renderer2, TemplateRef, ContentChild, ViewChildren, QueryList } from '@angular/core';
import { ENTER, SPACE, ESCAPE } from '@angular/cdk/keycodes';
import { Subscription } from 'rxjs';
import { RufShellIntl } from '../utils/shell-intl';
import { RufMixinBase } from '../common/color/color';
export var RufDynamicNavType;
(function (RufDynamicNavType) {
    RufDynamicNavType["Nav"] = "nav";
    RufDynamicNavType["Tabs"] = "tabs";
})(RufDynamicNavType || (RufDynamicNavType = {}));
let RufDynamicMenubarComponent = class RufDynamicMenubarComponent extends RufMixinBase {
    constructor(_elementRef, _renderer, _intl, changeDetectorRef) {
        super(_elementRef);
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._intl = _intl;
        this._isMenuItemClosed = false;
        this.items = [];
        this.tabLabels = [];
        this.tabSubscription = Subscription.EMPTY;
        this.selectedIndex = 0;
        this.focusedIndex = 0;
        this.closedItemIndexLessThanSelectedIndex = false;
        this.select = new EventEmitter();
        /* tslint:disable:no-output-rename */
        this.closeEmitter = new EventEmitter();
        this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());
        this.type = RufDynamicNavType.Nav;
    }
    get closeAriaLabel() {
        return this._closeAriaLabel || this._intl.dynamicmenubar.aria.closeIconLabel;
    }
    set closeAriaLabel(value) {
        this._closeAriaLabel = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._renderer.removeClass(this._elementRef.nativeElement, `ruf-dynamic-${this._type}`);
        this._type = value || RufDynamicNavType.Nav;
        this._renderer.addClass(this._elementRef.nativeElement, `ruf-dynamic-${this._type}`);
    }
    ngOnInit() {
        // remove the body element from matTabGroup since we are never going to need it.
        const matTabGroupElem = this._elementRef.nativeElement.children[0];
        matTabGroupElem.removeChild(matTabGroupElem.children[1]);
    }
    ngAfterViewInit() {
        this.tabLabels = this.menuLabels.toArray();
        this.tabSubscription = this.menuLabels.changes.subscribe((value) => {
            this.tabLabels = value.toArray();
        });
    }
    ngOnChanges(changes) {
        if (changes.items && this.selectedIndex > -1 && this.items[this.selectedIndex]) {
            // adding a setTimeout to delay the emil call in order to avoid ExpressionChangedAfterItHasBeenCheckedError
            // need to see if there is a better solution for this
            // https://stackoverflow.com/questions/44070732/angular-4-expressionchangedafterithasbeencheckederror-expression-has-changed
            const indexToSet = this.closedItemIndexLessThanSelectedIndex ? this.selectedIndex - 1 : this.selectedIndex;
            setTimeout(() => {
                this.onSelect({ index: indexToSet });
            });
            this.closedItemIndexLessThanSelectedIndex = false;
        }
    }
    set selectedPath(path) {
        if (this.selectedPath === path) {
            return;
        }
        this._selectedPath = path;
        // Check if selectedPath match with any first level items
        let selected = path ? this.items.filter(item => this.matches(path, item)) : null;
        // If selectedPath matches with first level items, first matched item will be selected (and select event emitter will be emitted).
        if (selected && selected.length > 0) {
            if (this.selectedIndex === this.items.indexOf(selected[0])) {
                setTimeout(() => this.onSelect({ index: this.selectedIndex }));
            }
            else {
                this.selectedIndex = this.items.indexOf(selected[0]);
            }
            return;
        }
        else {
            // If selectedPath does not match with any first level item, check if matches with children of each first level item
            for (const item of this.items) {
                if (item.children && item.children.length > 0) {
                    selected = path ? item.children.filter(citem => this.matches(path, citem)) : null;
                    if (selected && selected.length > 0) {
                        // If selectedPath match with child menu, set selectedIndex to Parent and selectedPath to child menu
                        this.onChildSelect(selected[0], item);
                        return;
                    }
                }
            }
        }
        // If selectedPath does not match with first level items as well as child menu,
        // select first item.
        // FIXME: The `ngOnChange` event should take care of this. Currently it only checks for `items` changes.
        setTimeout(() => this.onSelect({ index: 0 }));
    }
    get selectedPath() {
        return this._selectedPath;
    }
    isChild(parent, childPath) {
        if (!childPath || parent.path === childPath) {
            return false;
        }
        const selected = parent.children.filter(citem => this.matches(childPath, citem));
        if (selected && selected.length > 0) {
            return true;
        }
        return false;
    }
    onSelect($event) {
        if (this.items.length > 0) {
            this.selectedIndex = $event.index;
            let selectedItem = this.items[$event.index];
            // SDHTML-18280, SDHTML-18231
            // Focus on the next element after menuitem is closed.
            // We dont need to handle focus on click and enter because focus for those events will be handled by mat-tabs.
            if (this._isMenuItemClosed) {
                this.focusTabOnIndex(this.selectedIndex);
                this._isMenuItemClosed = false;
            }
            // This condition added to avoid select emitter for parent item on selecting child item
            if (selectedItem.children && selectedItem.children.length > 0) {
                if (this.isChild(selectedItem, this._selectedPath)) {
                    return;
                }
                else {
                    selectedItem = selectedItem.children[0];
                }
            }
            this._selectedPath = selectedItem.path;
            this.select.emit(selectedItem);
        }
    }
    onFocusChange($event) {
        this.focusedIndex = $event.index;
    }
    OnSelectFocusedIndex(event) {
        this.tabLabels[this.focusedIndex].handleKeydown(event);
    }
    onChildMenuToggle(event) {
        if (!event) {
            // this.selectedIndex is used to ensure that it gives focus to parent element
            // when child is selected using mouse click.
            this.focusTabOnIndex(this.selectedIndex);
        }
    }
    onChildSelect($event, item) {
        this.selectedIndex = this.items.indexOf(item);
        this._selectedPath = $event.path;
        this.select.emit($event);
    }
    matches(path, item) {
        if (path && item.path) {
            if (path === item.path) {
                return true;
            }
        }
        return false;
    }
    close(item) {
        // check if the index of the item being closed is smaller than the item that is currently selected
        // if it is, and if the user actually closes the tab - we'll have to set the selectedIndex to selectedIndex - 1
        // otherwise the selectedItem will change
        // See https://etojira.fnfis.com/browse/SDHTML-16688 for details
        this.closedItemIndexLessThanSelectedIndex = false;
        if (this.items.indexOf(item) < this.selectedIndex) {
            this.closedItemIndexLessThanSelectedIndex = true;
        }
        this._isMenuItemClosed = true;
        this.closeEmitter.emit(item);
    }
    focusTabOnIndex(index) {
        this._elementRef.nativeElement.getElementsByClassName('mat-tab-label')[index].focus();
    }
    _handleKeydown(event, item) {
        switch (event.keyCode) {
            case ENTER:
            case SPACE:
                this.close(item);
                event.stopPropagation();
                break;
            case ESCAPE:
                this.focusTabOnIndex(this.focusedIndex);
                event.stopPropagation();
                break;
            default:
        }
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
        this.tabSubscription.unsubscribe();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], RufDynamicMenubarComponent.prototype, "items", void 0);
tslib_1.__decorate([
    ViewChildren('menuLabel'),
    tslib_1.__metadata("design:type", QueryList)
], RufDynamicMenubarComponent.prototype, "menuLabels", void 0);
tslib_1.__decorate([
    Input('activeColor'),
    tslib_1.__metadata("design:type", Object)
], RufDynamicMenubarComponent.prototype, "color", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufDynamicMenubarComponent.prototype, "closeAriaLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufDynamicMenubarComponent.prototype, "type", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], RufDynamicMenubarComponent.prototype, "select", void 0);
tslib_1.__decorate([
    Output('close'),
    tslib_1.__metadata("design:type", Object)
], RufDynamicMenubarComponent.prototype, "closeEmitter", void 0);
tslib_1.__decorate([
    ContentChild(TemplateRef, { static: false }),
    tslib_1.__metadata("design:type", Object)
], RufDynamicMenubarComponent.prototype, "navActions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], RufDynamicMenubarComponent.prototype, "selectedPath", null);
RufDynamicMenubarComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-dynamic-menubar',
        template: "<mat-tab-group rufId [selectedIndex]=\"selectedIndex\" (selectedTabChange)=\"onSelect($event)\" (focusChange)=\"onFocusChange($event)\" (keydown.enter)=\"OnSelectFocusedIndex($event)\" (keydown.space)=\"OnSelectFocusedIndex($event)\">\n  <mat-tab rufId *ngFor=\"let item of items;let currentIndex=index\">\n    <ng-template matTabLabel>\n      <ruf-menu-label #menuLabel rufId [label]=\"item.label\" [icon]=\"item.icon\" [children]=\"item.children\"\n                      (select)=\"onChildSelect($event, item)\"\n                      (toggle)=\"onChildMenuToggle($event)\"\n                      [selectedPath]=\"selectedPath\">\n        <ng-template [ngTemplateOutlet]=\"navActions\" [ngTemplateOutletContext]=\"{item: item}\">\n        </ng-template>\n        <button type=\"button\" mat-icon-button rufId=\"dynamic_menubar_close_icon\" fisStyle class=\"ruf-close\" [attr.tabindex]=\"focusedIndex === currentIndex ? 0 : -1\" *ngIf=\"item.closeable === true\" (keydown)=\"_handleKeydown($event, item)\" (click)=\"close(item)\" role=\"button\" [attr.aria-label]=\"closeAriaLabel\">\n          <mat-icon fisIcon=\"close\" class=\"fis-icon-xs\"></mat-icon>\n        </button>\n      </ruf-menu-label>\n    </ng-template>\n  </mat-tab>\n</mat-tab-group>\n\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["ruf-dynamic-menubar{-webkit-box-flex:1;flex-grow:1;overflow:hidden}ruf-dynamic-menubar.ruf-dynamic-menubar-flex-height .mat-tab-labels>.mat-tab-label{height:inherit}ruf-dynamic-menubar .mat-tab-labels>.mat-tab-label{height:2.75rem;min-width:48px;padding-left:.9375rem;padding-right:.9375rem}ruf-dynamic-menubar .mat-tab-header{border:0}ruf-dynamic-menubar .ruf-menu-label-trigger{margin-left:-.9375rem;margin-right:-.9375rem}ruf-menu-label .ruf-close.mat-icon-button[fisStyle]{margin-left:.3125rem;padding:1px 3px;-webkit-transition:text-shadow .1s ease-in,color .1s ease-in;transition:text-shadow .1s ease-in,color .1s ease-in}ruf-menu-label .ruf-close.mat-icon-button[fisStyle]:hover{text-shadow:1px 0 0}"]
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        RufShellIntl,
        ChangeDetectorRef])
], RufDynamicMenubarComponent);
export { RufDynamicMenubarComponent };
//# sourceMappingURL=data:application/json;base64,