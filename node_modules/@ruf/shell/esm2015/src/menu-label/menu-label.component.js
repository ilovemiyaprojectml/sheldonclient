import * as tslib_1 from "tslib";
import { Input, Output, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild } from '@angular/core';
import { ENTER, SPACE, ESCAPE } from '@angular/cdk/keycodes';
import { MatMenuTrigger } from '@angular/material/menu';
let RufMenuLabelComponent = class RufMenuLabelComponent {
    constructor() {
        this.label = '';
        this.icon = '';
        // on child menu toggle
        this.toggle = new EventEmitter();
        this.select = new EventEmitter();
        this.rowLayout = true; // tells the internal labeled-icon that it is in a row.
    }
    handleClick(event) {
        // labels with children will not propagate the click event by default
        if (this.children && this.children.length > 0) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    hasPopup() {
        return this.children ? this.children.length > 0 : false;
    }
    onClose() {
        this.toggle.emit(false);
    }
    handleKeydown(event) {
        if (!this.children || this.children.length === 0) {
            return;
        }
        switch (event.keyCode) {
            case SPACE:
            case ENTER:
                this.trigger.openMenu();
                if (this.trigger.menu) {
                    // This is needed for dynamic menubar since it uses setTimeout for selecting a tab.
                    // This should be removed when we refactor dynamic menubar.
                    setTimeout(() => {
                        this.trigger.menu.focusFirstItem();
                    });
                }
                event.preventDefault();
                event.stopPropagation();
                this.toggle.emit(true);
                break;
            case ESCAPE:
                this.trigger.closeMenu();
                this.toggle.emit(false);
                event.stopPropagation();
                break;
            default:
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufMenuLabelComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RufMenuLabelComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], RufMenuLabelComponent.prototype, "children", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], RufMenuLabelComponent.prototype, "toggle", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], RufMenuLabelComponent.prototype, "select", void 0);
tslib_1.__decorate([
    HostBinding('class.ruf-layout-row'),
    tslib_1.__metadata("design:type", Object)
], RufMenuLabelComponent.prototype, "rowLayout", void 0);
tslib_1.__decorate([
    ViewChild(MatMenuTrigger, { static: false }),
    tslib_1.__metadata("design:type", MatMenuTrigger)
], RufMenuLabelComponent.prototype, "trigger", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], RufMenuLabelComponent.prototype, "selectedPath", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RufMenuLabelComponent.prototype, "handleClick", null);
RufMenuLabelComponent = tslib_1.__decorate([
    Component({
        selector: 'ruf-menu-label',
        template: "<div class=\"ruf-menu-label-wrap\" rufId>\n  <!-- ideally, Angular would support putting matMenuTriggerFor on the host -->\n  <div class=\"ruf-menu-label-trigger\" *ngIf=\"children && children.length > 0\" [matMenuTriggerFor]=\"menu\" (menuClosed)=\"toggle.emit(false)\" (menuOpened)=\"toggle.emit(true)\"></div>\n  <ruf-labeled-icon fontSet=\"fisfont\" [fontIcon]=\"icon\" rufId>\n    <span class=\"ruf-menu-label-container\">\n      {{ label }}\n      <mat-icon class=\"ruf-menu-label-chevron\" aria-hidden=\"true\" rufId=\"menu_label_link\" *ngIf=\"children && children.length > 0\" fisIcon=\"arrow-down\"></mat-icon>\n    </span>\n\n    <span (click)=\"$event.stopPropagation()\" rufId=\"menu_label_content\">\n      <ng-content></ng-content>\n    </span>\n  </ruf-labeled-icon>\n</div>\n\n<mat-menu class=\"ruf-cust-menu\" rufId=\"menu\" #menu=\"matMenu\" yPosition=\"below\" [overlapTrigger]=\"false\">\n  <button type=\"button\" rufId=\"menu_button\" *ngFor=\"let child of children\" mat-menu-item (click)=\"select.emit(child)\"\n          [class.ruf-menu-selected]=\"selectedPath && child.path === selectedPath\"\n          [attr.aria-selected]=\"selectedPath && child.path === selectedPath\">\n    <mat-icon rufId=\"menu_icon\" *ngIf=\"child.icon\" fontSet=\"fisfont\" [fontIcon]=\"child.icon\"></mat-icon>\n    <span>{{ child.label }}</span>\n  </button>\n</mat-menu>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["ruf-menu-label{display:block!important;min-width:100%}ruf-menu-label ruf-labeled-icon{-webkit-box-pack:center;justify-content:center;width:100%}ruf-menu-label ruf-labeled-icon>span{-webkit-box-flex:0;flex:0 1 auto}.ruf-menu-label-wrap{position:relative}.ruf-menu-label-trigger{bottom:0;left:0;position:absolute;right:0;top:0}.ruf-menu-label-chevron{color:currentColor;margin-left:5px}.ruf-menu-label-container{-webkit-box-align:center;align-items:center;display:-webkit-inline-box;display:inline-flex}.ruf-cust-menu .mat-menu-content{border-style:solid;border-width:0 1px 1px;min-width:7.5rem;padding-bottom:0;padding-top:0}.ruf-cust-menu .mat-menu-content .mat-menu-item{height:2.75rem;line-height:2.75rem}.ruf-cust-menu .mat-menu-content .ruf-menu-selected{text-decoration:underline}"]
    })
], RufMenuLabelComponent);
export { RufMenuLabelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1sYWJlbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcnVmL3NoZWxsLyIsInNvdXJjZXMiOlsic3JjL21lbnUtbGFiZWwvbWVudS1sYWJlbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUN2QixXQUFXLEVBQ1gsWUFBWSxFQUNaLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFheEQsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFQbEM7UUFRVyxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUVuQix1QkFBdUI7UUFDYixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUVyQyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXlCLENBQUM7UUFDeEIsY0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLHVEQUF1RDtJQWtEaEgsQ0FBQztJQTVDQyxXQUFXLENBQUMsS0FBSztRQUNmLHFFQUFxRTtRQUNyRSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDMUQsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQUs7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2hELE9BQU87U0FDUjtRQUNELFFBQVEsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNyQixLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN4QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO29CQUNyQixtRkFBbUY7b0JBQ25GLDJEQUEyRDtvQkFDM0QsVUFBVSxDQUFDLEdBQUcsRUFBRTt3QkFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDckMsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7Z0JBQ0QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN2QixNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN4QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3hCLE1BQU07WUFDUixRQUFRO1NBQ1Q7SUFDSCxDQUFDO0NBRUYsQ0FBQTtBQXpEVTtJQUFSLEtBQUssRUFBRTs7b0RBQVk7QUFDWDtJQUFSLEtBQUssRUFBRTs7bURBQVc7QUFDVjtJQUFSLEtBQUssRUFBRTs7dURBQW1DO0FBRWpDO0lBQVQsTUFBTSxFQUFFOztxREFBc0M7QUFFckM7SUFBVCxNQUFNLEVBQUU7O3FEQUFvRDtBQUN4QjtJQUFwQyxXQUFXLENBQUMsc0JBQXNCLENBQUM7O3dEQUFrQjtBQUNWO0lBQTNDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7c0NBQVUsY0FBYztzREFBQztBQUUzRDtJQUFSLEtBQUssRUFBRTs7MkRBQXNCO0FBRzlCO0lBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7O3dEQU9qQztBQXBCVSxxQkFBcUI7SUFQakMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQiwrMkNBQTBDO1FBRTFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1FBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztLQUNoRCxDQUFDO0dBQ1cscUJBQXFCLENBMERqQztTQTFEWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIENvbXBvbmVudCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBIb3N0QmluZGluZyxcbiAgSG9zdExpc3RlbmVyLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFTlRFUiwgU1BBQ0UsIEVTQ0FQRSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQgeyBNYXRNZW51VHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL21lbnUnO1xuaW1wb3J0IHsgUnVmVHJpZ2dlclRhcmdldCB9IGZyb20gJy4uL3RyaWdnZXIvdHJpZ2dlci5pbnRlcmZhY2UnO1xuXG4vLyBGSVhNRTogdGhpcyBjb21wb25lbnQgc2hvdWxkIGJlIGluZGVwZW5kZW50IG9mIGR5bmFtaWMtbWVudWJhci4gQ29uc2lkZXIgY29tbW9uL21lbnUtaXRlbS50cyBmb3IgY29tbW9uIGludGVyZmFjZS5cbmltcG9ydCB7IFJ1ZkR5bmFtaWNNZW51YmFySXRlbSB9IGZyb20gJy4uL2R5bmFtaWMtbWVudWJhci9keW5hbWljLW1lbnViYXItaXRlbSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3J1Zi1tZW51LWxhYmVsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21lbnUtbGFiZWwuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9tZW51LWxhYmVsLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFJ1Zk1lbnVMYWJlbENvbXBvbmVudCBpbXBsZW1lbnRzIFJ1ZlRyaWdnZXJUYXJnZXQge1xuICBASW5wdXQoKSBsYWJlbCA9ICcnO1xuICBASW5wdXQoKSBpY29uID0gJyc7XG4gIEBJbnB1dCgpIGNoaWxkcmVuOiBSdWZEeW5hbWljTWVudWJhckl0ZW1bXTtcbiAgLy8gb24gY2hpbGQgbWVudSB0b2dnbGVcbiAgQE91dHB1dCgpIHRvZ2dsZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBAT3V0cHV0KCkgc2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcjxSdWZEeW5hbWljTWVudWJhckl0ZW0+KCk7XG4gIEBIb3N0QmluZGluZygnY2xhc3MucnVmLWxheW91dC1yb3cnKSByb3dMYXlvdXQgPSB0cnVlOyAvLyB0ZWxscyB0aGUgaW50ZXJuYWwgbGFiZWxlZC1pY29uIHRoYXQgaXQgaXMgaW4gYSByb3cuXG4gIEBWaWV3Q2hpbGQoTWF0TWVudVRyaWdnZXIsIHtzdGF0aWM6IGZhbHNlfSkgdHJpZ2dlcjogTWF0TWVudVRyaWdnZXI7XG5cbiAgQElucHV0KCkgc2VsZWN0ZWRQYXRoOiBzdHJpbmc7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBoYW5kbGVDbGljayhldmVudCkge1xuICAgIC8vIGxhYmVscyB3aXRoIGNoaWxkcmVuIHdpbGwgbm90IHByb3BhZ2F0ZSB0aGUgY2xpY2sgZXZlbnQgYnkgZGVmYXVsdFxuICAgIGlmICh0aGlzLmNoaWxkcmVuICYmIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGhhc1BvcHVwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuID8gdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwIDogZmFsc2U7XG4gIH1cblxuICBvbkNsb3NlKCkge1xuICAgIHRoaXMudG9nZ2xlLmVtaXQoZmFsc2UpO1xuICB9XG5cbiAgaGFuZGxlS2V5ZG93bihldmVudCkge1xuICAgIGlmICghdGhpcy5jaGlsZHJlbiB8fCB0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgIGNhc2UgU1BBQ0U6XG4gICAgICBjYXNlIEVOVEVSOlxuICAgICAgICB0aGlzLnRyaWdnZXIub3Blbk1lbnUoKTtcbiAgICAgICAgaWYgKHRoaXMudHJpZ2dlci5tZW51KSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBuZWVkZWQgZm9yIGR5bmFtaWMgbWVudWJhciBzaW5jZSBpdCB1c2VzIHNldFRpbWVvdXQgZm9yIHNlbGVjdGluZyBhIHRhYi5cbiAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSByZW1vdmVkIHdoZW4gd2UgcmVmYWN0b3IgZHluYW1pYyBtZW51YmFyLlxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyLm1lbnUuZm9jdXNGaXJzdEl0ZW0oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy50b2dnbGUuZW1pdCh0cnVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEVTQ0FQRTpcbiAgICAgICAgdGhpcy50cmlnZ2VyLmNsb3NlTWVudSgpO1xuICAgICAgICB0aGlzLnRvZ2dsZS5lbWl0KGZhbHNlKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxufVxuIl19