"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const crypto = require("crypto");
const fs = require("fs-extra");
const nodefs = require("fs");
const globOrig = require("glob");
const rimraf = require("rimraf");
const matches = require("minimatch");
const mkdirp = require("mkdirp");
const path_1 = require("path");
const dm = require("deepmerge");
const execa = require("execa");
var os_1 = require("os");
exports.tmpdir = os_1.tmpdir;
exports.lstat = util_1.promisify(fs.lstat);
exports.readdir = util_1.promisify(fs.readdir);
exports.copy = fs.copy;
exports.move = fs.move;
exports.readFile = util_1.promisify(fs.readFile);
exports.writeFile = util_1.promisify(fs.writeFile);
exports.rename = util_1.promisify(fs.rename);
exports.rm = util_1.promisify(rimraf);
exports.mkdir = util_1.promisify(mkdirp);
exports.symlink = util_1.promisify(nodefs.symlink);
exports.access = util_1.promisify(fs.access);
exports.glob = util_1.promisify(globOrig);
exports.findup = util_1.promisify(require('findup'));
class DetailedError extends Error {
    constructor(msg, details, hash) {
        super(msg);
        this.details = details;
        this.hash = hash;
    }
}
exports.DetailedError = DetailedError;
function readJSONFile(file) {
    return __awaiter(this, void 0, void 0, function* () {
        return JSON.parse((yield exports.readFile(file)).toString());
    });
}
exports.readJSONFile = readJSONFile;
function writeJSONFile(file, contents) {
    return __awaiter(this, void 0, void 0, function* () {
        return exports.writeFile(file, JSON.stringify(contents, null, 2));
    });
}
exports.writeJSONFile = writeJSONFile;
function getSHA1(data) {
    return crypto
        .createHash('sha1')
        .update(data)
        .digest('hex');
}
exports.getSHA1 = getSHA1;
function getHash(obj) {
    if (Array.isArray(obj)) {
        return getSHA1(obj.sort().join(','));
    }
    if (typeof obj === 'object') {
        return getSHA1(Object.keys(obj)
            .sort()
            .map(k => `${k}:${getHash(obj[k])}`)
            .join(';'));
    }
    return obj.toString();
}
exports.getHash = getHash;
function noop() { }
exports.noop = noop;
function isDirectory(path, source) {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield exports.lstat(path_1.join(path, source))).isDirectory();
    });
}
exports.isDirectory = isDirectory;
function getDirs(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield exports.readdir(path)).filter(isDirectory.bind(null, path));
    });
}
exports.getDirs = getDirs;
function exists(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return exports.access(path)
            .then(_ => true)
            .catch(e => false);
    });
}
exports.exists = exists;
function writeFileForce(path, contents) {
    return __awaiter(this, void 0, void 0, function* () {
        return exports.mkdir(path_1.dirname(path)).then(_ => exports.writeFile(path, contents));
    });
}
exports.writeFileForce = writeFileForce;
function isObject(a) {
    return !isArray(a) && typeof a === 'object' && a !== null;
}
exports.isObject = isObject;
function isArray(a) {
    return Array.isArray(a);
}
exports.isArray = isArray;
function isString(a) {
    return typeof a === 'string';
}
exports.isString = isString;
exports.deepmerge = dm;
function changeJSONFiles(dir, mergers) {
    return __awaiter(this, void 0, void 0, function* () {
        if (isObject(mergers)) {
            const files = Object.keys(mergers);
            for (const file of files) {
                const absfile = path_1.join(dir, file);
                const contents = yield readJSONFile(absfile);
                const newContents = exports.deepmerge(contents, mergers[file]);
                yield writeJSONFile(absfile, newContents);
            }
        }
    });
}
exports.changeJSONFiles = changeJSONFiles;
function linkDependencies(path, linkDeps, hash) {
    return __awaiter(this, void 0, void 0, function* () {
        if (linkDeps && linkDeps.length > 0) {
            for (const dep of linkDeps) {
                yield execa('npm', ['link', dep], {
                    cwd: path
                }).catch((err) => {
                    throw new DetailedError(`Linking ${dep} failed`, err.message, hash);
                });
            }
        }
    });
}
exports.linkDependencies = linkDependencies;
function getLoadedFiles(opts, ignoreFiles) {
    return __awaiter(this, void 0, void 0, function* () {
        let files = (yield exports.glob('**/*.@(ts|scss|css|html|jpg|png|md|js|jsx|tsx|json)', { cwd: opts.cwd })).filter(f => !f.endsWith('ruf-example.json'));
        if (ignoreFiles && ignoreFiles.length > 0) {
            files = files.filter(f => !ignoreFiles.some((ignore) => matches(f, ignore)));
        }
        const loadedFiles = {};
        for (const f of files) {
            loadedFiles[f] = (yield exports.readFile(path_1.join(opts.cwd, f))).toString();
        }
        if (opts.assets) {
            const assetPath = path_1.join(opts.cwd, opts.assets);
            const assetDir = assetPath.split(path_1.sep).pop();
            files = yield exports.glob('**/*.*', { cwd: assetPath });
            for (const f of files) {
                loadedFiles[`assets/${assetDir}/${f}`] = (yield exports.readFile(path_1.join(assetPath, f))).toString();
            }
        }
        return loadedFiles;
    });
}
exports.getLoadedFiles = getLoadedFiles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwrQkFBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLCtCQUErQjtBQUMvQiw2QkFBNkI7QUFFN0IsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQyxxQ0FBcUM7QUFDckMsaUNBQWlDO0FBQ2pDLCtCQUEwQztBQUMxQyxnQ0FBZ0M7QUFDaEMsK0JBQStCO0FBRy9CLHlCQUE0QjtBQUFuQixzQkFBQSxNQUFNLENBQUE7QUFFRixRQUFBLEtBQUssR0FBRyxnQkFBUyxDQUFtQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUMsUUFBQSxPQUFPLEdBQUcsZ0JBQVMsQ0FBbUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xELFFBQUEsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDZixRQUFBLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ2YsUUFBQSxRQUFRLEdBQUcsZ0JBQVMsQ0FBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xELFFBQUEsU0FBUyxHQUErQyxnQkFBUyxDQUM1RSxFQUFFLENBQUMsU0FBUyxDQUNiLENBQUM7QUFDVyxRQUFBLE1BQU0sR0FBRyxnQkFBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QixRQUFBLEVBQUUsR0FBRyxnQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZCLFFBQUEsS0FBSyxHQUFHLGdCQUFTLENBQXNCLE1BQU0sQ0FBQyxDQUFDO0FBQy9DLFFBQUEsT0FBTyxHQUFHLGdCQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLFFBQUEsTUFBTSxHQUFHLGdCQUFTLENBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLFFBQUEsSUFBSSxHQUFHLGdCQUFTLENBQXdCLFFBQVEs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