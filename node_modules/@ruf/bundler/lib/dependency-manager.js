"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const execa = require('execa');
const util_1 = require("./util");
const os_1 = require("os");
const isWin = os_1.platform() === 'win32';
const { getHash, noop, getDirs, move, copy, rm, mkdir, writeFile, symlink, exists } = require('./util');
class DependencyManager {
    constructor(opts = {}) {
        this.counter = 0;
        this._cachePath = opts.cachePath || process.env.RUF_BUNDLER_MODULES_PATH;
        if (this._cachePath === null) {
            throw new Error('A cachePath option needs to be defined. Use RUF_BUNDLER_MODULES_PATH env var if necessary.');
        }
    }
    get cachePath() {
        return this._cachePath;
    }
    createNodeModules(hash, path, templatePath, deps) {
        return __awaiter(this, void 0, void 0, function* () {
            yield mkdir(path);
            yield writeFile(path_1.join(path, 'package.json'), JSON.stringify({
                name: hash,
                description: templatePath,
                repository: 'none',
                version: '0.0.0',
                dependencies: deps
            }));
            const toCopy = Object.values(deps)
                .filter(v => v.indexOf('file:') === 0)
                .map(f => f.substring(5));
            for (const f of toCopy) {
                yield copy(path_1.join(templatePath, f), path_1.join(path, f));
            }
            yield execa('npm', ['install', '--no-progress'], {
                cwd: path
            }).catch((err) => __awaiter(this, void 0, void 0, function* () {
                yield rm(path);
                throw new util_1.DetailedError('Failed installing dependencies', err.message, hash);
            }));
            return path;
        });
    }
    linkDeps(src, dest, scoped) {
        return __awaiter(this, void 0, void 0, function* () {
            const dirs = yield getDirs(src);
            for (const dir of dirs) {
                const target = isWin ? path_1.resolve(path_1.join(src, dir)) : path_1.join(src, dir);
                const ln = isWin ? path_1.resolve(path_1.join(dest, dir)) : path_1.join(dest, dir);
                try {
                    if (!scoped && dir.charAt(0) !== '@') {
                        yield symlink(target, ln, 'junction');
                    }
                    else {
                        yield copy(target, ln);
                    }
                }
                catch (err) {
                }
                if (!scoped && dir.charAt(0) === '@') {
                    yield this.linkDeps(target, ln, true);
                }
            }
        });
    }
    maybeInstallDeps(path, templatePath, deps, opts = { link: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const hash = getHash(deps);
            const progress = opts.progress || noop;
            const installPath = path_1.join(path, hash);
            const tempPath = isWin
                ? installPath
                : `${installPath}-${new Date().getTime()}-${this.counter++}.temp`;
            const nodeModulesPath = path_1.join(installPath, 'node_modules');
            const ex = yield exists(nodeModulesPath);
            if (!ex) {
                progress('Installing dependencies. This may take a while.', hash);
                yield this.createNodeModules(hash, tempPath, templatePath, deps);
                if (opts.link) {
                    yield this.linkDeps(path_1.join(path, 'node_modules'), path_1.join(tempPath, 'node_modules'));
                }
                try {
                    yield move(tempPath, installPath);
                }
                catch (err) {
                    console.error('Error moving temp modules path to final location:', err);
                    yield rm(tempPath);
                }
            }
            else {
                progress('Dependencies already installed.', hash);
            }
            return installPath;
        });
    }
    getNodeModulesPathForTemplate(template, deps = {}, opts = {}, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const progress = opts.progress || noop;
            progress('Preparing dev dependencies.', hash);
            const depDepsPath = yield this.maybeInstallDeps(this._cachePath, template.templateSrc, template.devDependencies, { link: false, progress: progress });
            progress('Preparing project dependencies.', hash);
            const depsPath = yield this.maybeInstallDeps(depDepsPath, template.templateSrc, Object.assign({}, template.dependencies, deps), { link: true, progress: progress });
            return path_1.join(depsPath, 'node_modules');
        });
    }
}
exports.DependencyManager = DependencyManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZW5kZW5jeS1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlcGVuZGVuY3ktbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsK0JBQXFDO0FBR3JDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQixpQ0FBdUM7QUFFdkMsMkJBQThCO0FBRTlCLE1BQU0sS0FBSyxHQUFHLGFBQVEsRUFBRSxLQUFLLE9BQU8sQ0FBQztBQUVyQyxNQUFNLEVBQ0osT0FBTyxFQUNQLElBQUksRUFDSixPQUFPLEVBQ1AsSUFBSSxFQUNKLElBQUksRUFDSixFQUFFLEVBQ0YsS0FBSyxFQUNMLFNBQVMsRUFDVCxPQUFPLEVBQ1AsTUFBTSxFQUNQLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBV3RCO0lBUUUsWUFBWSxPQUFpQyxFQUFFO1FBUHZDLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFRbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBVSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXlCLENBQUM7UUFDM0UsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUNiLDRGQUE0RixDQUM3RixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBWEQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFXYSxpQkFBaUIsQ0FDN0IsSUFBWSxFQUNaLElBQVksRUFDWixZQUFvQixFQUNwQixJQUErQjs7WUFFL0IsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbEIsTUFBTSxTQUFTLENBQ2IsV0FBSSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsRUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDYixJQUFJLEVBQUUsSUFBSTtnQkFDVixXQUFX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