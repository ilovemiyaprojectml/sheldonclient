#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const util_1 = require("./util");
const path_1 = require("path");
const static_server_1 = require("./static-server");
const meow = require("meow");
const TSCONFIG = 'tsconfig.json';
function getCli() {
    return meow(`
	Usage
	  $ ruf-bundler [examplePath]

	Options
    --no-progress, -n  Do not show progress
    --open, -o         Start a server and open browser
    --serve, -s        Start a server
    --moduleCache, -mc Path to the node_modules cache
    --cache, -c        Use caching of projects
    --destination, -d  Project build destination
    --version          Prints out the version of this tool
    --help             Usage
    --dev              see Dev Mode
    --assets           Path to asset files
    --packageManager   Package Manager (pnpm or npm) used to install dependencies. Defaults to pnpm.
    --                 Pass additional flags to the template's build after --

  Dev Mode
    This will allow you to pass typescript config to the template so that your local library can be used while building.

  Examples
    $ ruf-bundler example/splitter
      # runs in the example/splitter folder if it contains an example.json file.
    $ ruf-bundler -c --open
      # runs in current folder, serves the resulting app (from cache if already built)
      # and opens the browser to see it
    $ ruf-bundler example/show -c -o -- -bh /run/\${hash}
      # passes flags to the template's build script. Here \${hash} will be replaced by the actual 'hash' code generated using example object.

`, {
        flags: {
            'no-progress': { type: 'boolean', alias: 'n' },
            open: { type: 'boolean', alias: 'o' },
            serve: { type: 'boolean', alias: 's' },
            moduleCache: { type: 'string', alias: 'mc' },
            cache: { type: 'boolean', alias: 'c' },
            destination: { type: 'string', alias: 'd' },
            workspace: { type: 'string', alias: 'w' },
            keepWorkspace: { type: 'boolean', alias: 'k' },
            dev: { type: 'boolean' },
            assets: { type: 'string' }
        }
    });
}
function getTemplateChanges(workdir, flags) {
    return __awaiter(this, void 0, void 0, function* () {
        if (flags.dev) {
            const localDir = yield util_1.findup(workdir, TSCONFIG).catch(_ => '');
            if (localDir) {
                const tsconf = require(path_1.join(localDir, TSCONFIG));
                const paths = tsconf.compilerOptions && tsconf.compilerOptions.paths;
                if (paths) {
                    Object.keys(paths).forEach(p => {
                        paths[p] = paths[p].map((dest) => path_1.resolve(localDir, dest));
                    });
                    return {
                        merge: {
                            'tsconfig.json': {
                                compilerOptions: {
                                    paths: paths
                                }
                            },
                            'package.json': {
                                scripts: {
                                    build: 'ng build'
                                }
                            }
                        }
                    };
                }
            }
        }
        return undefined;
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const cli = getCli();
        const workdir = (cli.input[0] && path_1.resolve(process.cwd(), cli.input[0])) || process.cwd();
        const exampleFile = path_1.join(workdir, 'ruf-example.json');
        const isExampleDir = yield util_1.exists(exampleFile);
        if (!isExampleDir) {
            throw new Error(`${workdir} does not contain an example.`);
        }
        const example = require(exampleFile);
        const bundler = new _1.Bundler({ cachePath: cli.flags.moduleCache });
        console.log(`Modules cache: ${bundler.cachePath}`);
        const template = bundler.getTemplate(example.template);
        const loadedFiles = yield util_1.getLoadedFiles({
            cwd: workdir,
            assets: cli.flags.assets
        }, example.ignore);
        const templateChanges = yield getTemplateChanges(workdir, cli.flags);
        try {
            const path = yield template.build(Object.assign({}, example, { files: Object.assign({}, example.files, loadedFiles) }), {
                progress: cli.flags['no-progress']
                    ? util_1.noop
                    : ([step, total, msg, hash, done]) => console.log(`${step}/${total} ==> ${msg}`),
                buildPlan: cli.flags['no-progress']
                    ? util_1.noop
                    : plan => Object.keys(plan).forEach(p => console.log(`${p}: ${plan[p]}`)),
                useHashDir: cli.flags.cache,
                destination: cli.flags.destination &&
                    path_1.resolve(process.cwd(), cli.flags.destination),
                keepWorkspace: cli.flags.keepWorkspace,
                workspace: cli.flags.workspace && path_1.resolve(process.cwd(), cli.flags.workspace),
                returnIfExists: cli.flags.cache,
                templateChanges,
                buildFlags: cli.input.slice(1).join(' '),
                packageManager: cli.flags.packageManager
            });
            console.log(`\nApplication created at ${path}`);
            if (cli.flags.serve || cli.flags.open) {
                console.log(`Serving at http://localhost:8080`);
                console.log(`CTRL-C to quit.`);
                static_server_1.serve(path, cli.flags.open);
            }
        }
        catch (err) {
            console.log(err.message);
            if (err.details) {
                console.log(err.details);
            }
        }
    });
}
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBLHlCQUE2QjtBQUU3QixpQ0FBOEU7QUFHOUUsK0JBQXFDO0FBQ3JDLG1EQUF3QztBQUN4Qyw2QkFBNkI7QUFHN0IsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDO0FBRWpDO0lBQ0UsT0FBTyxJQUFJLENBQ1Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQThCSCxFQUNHO1FBQ0UsS0FBSyxFQUFFO1lBQ0wsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQzlDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtZQUNyQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7WUFDdEMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQzVDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtZQUN0QyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7WUFDM0MsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtZQUM5QyxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQ3hCLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7U0FDM0I7S0FDRixDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsNEJBQ0UsT0FBZSxFQUNmLEtBQWlDOztRQUVqQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFHYixNQUFNLFFBQVEsR0FBRyxNQUFNLGFBQU0sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFaEUsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFdBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDakQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQztnQkFFckUsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQzdCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxjQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3JFLENBQUMsQ0FBQyxDQUFDO29CQUVILE9BQU87d0JBRUwsS0FBSyxFQUFFOzRCQUNMLGVBQWUsRUFBRTtnQ0FDZixlQUFlLEVBQUU7b0NBQ2YsS0FBSyxFQUFFLEtBQUs7aUNBQ2I7NkJBQ0Y7NEJBQ0QsY0FBYyxFQUFFO2dDQUNkLE9BQU8sRUFBRTtvQ0FDUCxLQUFLLEVBQUUsVUFBVTtpQ0FDbEI7NkJBQ0Y7eUJBQ0Y7cUJBQ0YsQ0FBQztpQkFDSDthQUNGO1NBQ0Y7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQUE7QUFFRDs7UUFDRSxNQUFNLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUVyQixNQUFNLE9BQU8sR0FDWCxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUUsTUFBTSxXQUFXLEdBQUcsV0FBSSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sWUFBWSxHQUFHLE1BQU0sYUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLE9BQU8sK0JBQStCLENBQUMsQ0FBQztTQUM1RDtRQUVELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVyQyxNQUFNLE9BQU8sR0FBRyxJQUFJLFVBQU8sQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFbEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFFbkQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdkQsTUFBTSxXQUFXLEdBQUcsTUFBTSxxQkFBYyxDQUN0QztZQUNFLEdBQUcsRUFBRSxPQUFPO1lBQ1osTUFBTSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTTtTQUN6QixFQUNELE9BQU8sQ0FBQyxNQUFNLENBQ2YsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLE1BQU0sa0JBQWtCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyRSxJQUFJO1lBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsS0FBSyxtQkFFMUIsT0FBTyxJQUNWLEtBQUssb0JBQU8sT0FBTyxDQUFDLEtBQUssRUFBSyxXQUFXLE1BRTNDO2dCQUNFLFFBQVEsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztvQkFDaEMsQ0FBQyxDQUFDLFdBQUk7b0JBQ04sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLEtBQUssUUFBUSxHQUFHLEVBQUUsQ0FBQztnQkFDaEQsU0FBUyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO29CQUNqQyxDQUFDLENBQUMsV0FBSTtvQkFDTixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDTCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDckUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSztnQkFDM0IsV0FBVyxFQUNULEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVztvQkFDckIsY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztnQkFDL0MsYUFBYSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYTtnQkFDdEMsU0FBUyxFQUNQLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLGNBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7Z0JBQ3BFLGNBQWMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUs7Z0JBQy9CLGVBQWU7Z0JBQ2YsVUFBVSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3hDLGNBQWMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQWM7YUFDekMsQ0FDRixDQUFDO1lBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNoRCxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO2dCQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Z0JBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDL0IscUJBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM3QjtTQUNGO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QixJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7Z0JBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7Q0FBQTtBQUVELElBQUksRUFBRSxDQUFDIn0=