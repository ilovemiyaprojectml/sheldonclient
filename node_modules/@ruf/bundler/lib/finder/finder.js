"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const template_1 = require("../template");
const path_1 = require("path");
const PACKAGE_FILE = 'package.json';
const TSCONFIG = 'tsconfig.json';
const EXAMPLE_DEFAULTS = {
    template: 'ruf-demo-workspace'
};
function findRootProjectDependencies(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageDir = yield util_1.findup(dir, TSCONFIG).catch(_ => '');
        if (packageDir) {
            const pkg = yield util_1.readJSONFile(path_1.join(packageDir, PACKAGE_FILE));
            return Object.assign({}, pkg.dependencies, pkg.peerDependencies, (pkg.rufExample && pkg.rufExample.dependencies));
        }
        return {};
    });
}
function findLibDependencies(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageDir = yield util_1.findup(dir, PACKAGE_FILE).catch(_ => '');
        if (packageDir.indexOf('/libs/') > 0) {
            const pkg = yield util_1.readJSONFile(path_1.join(packageDir, PACKAGE_FILE));
            return Object.assign({}, pkg.dependencies, pkg.peerDependencies, (pkg.rufExample && pkg.rufExample.dependencies), { [pkg.name]: pkg.version });
        }
        return {};
    });
}
function getTemplateDependencies(templateName) {
    const tpl = new template_1.Template(templateName);
    return Object.assign({}, tpl.dependencies);
}
const importRE = /import .+ from ['"]([@\w][^'"]+)['"]/gm;
const fromRE = /['"]([^'"]+)['"]/;
function findDepsInCode(files) {
    return [
        ...Object.keys(files).reduce((acc, cur) => {
            if (cur.endsWith('.ts')) {
                const imports = files[cur].match(importRE);
                if (imports) {
                    imports.map(m => m.match(fromRE)[1]).forEach(acc.add.bind(acc));
                }
            }
            return acc;
        }, new Set())
    ];
}
const rufCoreDeps = [
    '@ruf/fis-ux-assets',
    '@ruf/material',
    '@ruf/shell',
    '@ruf/pipes',
    '@ruf/theming'
];
const rufShell43Deps = {};
const rufMaterial43Deps = {};
const ruf43Deps = {
    '@ruf/shell': {
        '@angular/animations': '5.2.1',
        '@angular/cdk': '~5.2.3',
        '@angular/material': '~5.2.3',
        '@angular/common': '5.2.1',
        '@angular/compiler': '5.2.1',
        '@angular/core': '5.2.1',
        '@angular/flex-layout': '2.0.0-beta.12',
        '@angular/forms': '5.2.1',
        '@angular/http': '5.2.1',
        '@angular/platform-browser': '5.2.1',
        '@angular/platform-browser-dynamic': '5.2.1',
        '@angular/router': '5.2.1',
        '@angular/upgrade': '5.2.1',
        '@ruf/fis-ux-assets': '3.2.0',
        '@ruf/material': '5.0.2',
        '@ruf/theming': '4.4.0-beta1',
        'core-js': '2.5.4',
        rxjs: '5.5.8',
        tslib: '^1.7.1',
        'zone.js': '0.8.20'
    },
    '@ruf/material': {
        '@angular/cdk': '~5.2.3',
        '@angular/material': '~5.2.3'
    }
};
const re43 = /^[\^~]?4\.3\./;
function explodeRufDependencies(deps) {
    const exploded = Object.keys(deps)
        .filter(d => (d === '@ruf/shell' || d === '@ruf/material') && deps[d].match(re43))
        .map(d => ruf43Deps[d]);
    return Object.assign({}, deps, ...exploded);
}
function defineDependencies(rootDeps, dir, example) {
    return __awaiter(this, void 0, void 0, function* () {
        const depsPool = explodeRufDependencies(Object.assign({}, rootDeps, (yield findLibDependencies(dir)), example.dependencies));
        const required = new Set(Object.keys(explodeRufDependencies(getTemplateDependencies(example.template))).concat(findDepsInCode(example.files)));
        const diff = new Set(required);
        const pool = new Set(Object.keys(depsPool).concat(rufCoreDeps));
        for (const dep of required) {
            if (isDepPresent(dep, pool)) {
                diff.delete(dep);
            }
        }
        if (diff.size > 0) {
            throw new util_1.DetailedError(`Dependencies used in the code of '${example.title}' are missing.`, [...diff].toString());
        }
        return Object.assign({}, ...[...required].map(n => ({ [n]: depsPool[n] })));
    });
}
function isDepPresent(dep, pool) {
    if (pool.has(dep)) {
        return true;
    }
    if (dep.indexOf('/') > 1) {
        const parentDep = dep.substring(0, dep.lastIndexOf('/'));
        return isDepPresent(parentDep, pool);
    }
    return false;
}
function findExamples(opts, visit) {
    return __awaiter(this, void 0, void 0, function* () {
        opts.cwd = opts.cwd || process.cwd();
        const defaults = Object.assign({}, EXAMPLE_DEFAULTS, opts.defaults);
        const rootDependencies = yield findRootProjectDependencies(opts.cwd);
        const exampleFiles = yield util_1.glob('**/ruf-example.json', { cwd: opts.cwd });
        for (const file of exampleFiles) {
            const path = path_1.join(opts.cwd, file);
            let example = JSON.parse((yield util_1.readFile(path)).toString());
            const exampleDir = path_1.dirname(path);
            example.dependencies = Object.assign({}, defaults.dependencies, example.dependencies);
            example = Object.assign({}, defaults, example);
            const loadedFiles = yield util_1.getLoadedFiles({
                cwd: exampleDir,
                assets: opts.assets
            });
            example.files = Object.assign({}, example.files, loadedFiles);
            example.dependencies = yield defineDependencies(rootDependencies, exampleDir, example);
            delete example.ignore;
            visit(example, { dir: exampleDir });
        }
    });
}
exports.findExamples = findExamples;
function findReadmes(opts, visit) {
    return __awaiter(this, void 0, void 0, function* () {
        opts.cwd = opts.cwd || process.cwd();
        const readmeFiles = yield util_1.glob('**/README.md', { cwd: opts.cwd });
        for (const file of readmeFiles) {
            const path = path_1.join(opts.cwd, file);
            const loadedFile = (yield util_1.readFile(path)).toString();
            const readmeFile = { prop: path, data: loadedFile };
            visit(readmeFile);
        }
    });
}
exports.findReadmes = findReadmes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZpbmRlci9maW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLGtDQU9pQjtBQUNqQiwwQ0FBOEQ7QUFFOUQsK0JBQThDO0FBRTlDLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQztBQUNwQyxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUM7QUFZakMsTUFBTSxnQkFBZ0IsR0FBRztJQUN2QixRQUFRLEVBQUUsb0JBQW9CO0NBTS9CLENBQUM7QUFlRixxQ0FBMkMsR0FBVzs7UUFDcEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxhQUFNLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlELElBQUksVUFBVSxFQUFFO1lBQ2QsTUFBTSxHQUFHLEdBQUcsTUFBTSxtQkFBWSxDQUFDLFdBQUksQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUMvRCx5QkFDSyxHQUFHLENBQUMsWUFBWSxFQUNoQixHQUFHLENBQUMsZ0JBQWdCLEVBQ3BCLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUNsRDtTQUNIO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0NBQUE7QUFFRCw2QkFBbUMsR0FBVzs7UUFDNUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxhQUFNLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWxFLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxtQkFBWSxDQUFDLFdBQUksQ0FBQyxVQUFVLEVBQUUsWUFBWSxD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