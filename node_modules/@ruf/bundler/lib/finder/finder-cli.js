#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const finder_1 = require("./finder");
const path_1 = require("path");
const meow = require("meow");
const __1 = require("..");
function getCli() {
    return meow(`
	Usage
	  $ ruf-examples-finder [path]

	Options
    --build, -b     Build all found examples
    --output, -o    Output folder for built apps (default: ./output)
    --defaults, -d  Path to a JSON file containing default TemplateBuildSettings
    --assets      Path to asset files

  Examples
    $ ruf-examples-finder ./my-project
      # runs in the ./my-project folder and finds all examples it contains and prints them.

`, {
        flags: {
            build: { type: 'boolean', alias: 'b' },
            output: { type: 'string', alias: 'o' },
            defaults: { type: 'string', alias: 'd' }
        }
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const cli = getCli();
        const path = path_1.resolve(cli.input[0]) || path_1.resolve(__dirname);
        const results = [];
        try {
            yield finder_1.findExamples({ cwd: path }, ex => {
                results.push(ex);
            });
        }
        catch (err) {
            console.log(err);
            console.log(err.details);
        }
        if (cli.flags.build) {
            for (const ex of results) {
                const template = new __1.Bundler().getTemplate(ex.template);
                process.stdout.write(`${ex.title} `);
                const app = yield template.build(ex, {
                    progress: ([step, total, msg, done]) => {
                        if (done) {
                            console.log(' done!');
                        }
                    },
                    useHashDir: true,
                    destination: path_1.resolve(cli.flags.output || 'output'),
                    returnIfExists: true
                });
                console.log(`${ex.title} created: `, app);
            }
        }
        else {
            console.log(JSON.stringify(results, null, 2));
        }
    });
}
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZGVyLWNsaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maW5kZXIvZmluZGVyLWNsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBLHFDQUFpRDtBQUNqRCwrQkFBK0I7QUFDL0IsNkJBQTZCO0FBQzdCLDBCQUE2QjtBQUU3QjtJQUNFLE9BQU8sSUFBSSxDQUNUOzs7Ozs7Ozs7Ozs7OztDQWNILEVBQ0c7UUFDRSxLQUFLLEVBQUU7WUFDTCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7WUFDdEMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQ3RDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtTQUN6QztLQUNGLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRDs7UUFDRSxNQUFNLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUNyQixNQUFNLElBQUksR0FBRyxjQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLGNBQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV6RCxNQUFNLE9BQU8sR0FBYyxFQUFFLENBQUM7UUFFOUIsSUFBSTtZQUNGLE1BQU0scUJBQVksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFCO1FBRUQsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNuQixLQUFLLE1BQU0sRUFBRSxJQUFJLE9BQU8sRUFBRTtnQkFDeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN4RCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQyxNQUFNLEdBQUcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO29CQUNuQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7d0JBQ3JDLElBQUksSUFBSSxFQUFFOzRCQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7eUJBQ3ZCO29CQUNILENBQUM7b0JBQ0QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFdBQVcsRUFBRSxjQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDO29CQUNsRCxjQUFjLEVBQUUsSUFBSTtpQkFDckIsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDM0M7U0FDRjthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUM7Q0FBQTtBQUNELElBQUksRUFBRSxDQUFDIn0=