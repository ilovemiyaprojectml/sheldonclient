"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const lodash_1 = require("lodash");
const execa = require("execa");
const dependency_manager_1 = require("./dependency-manager");
const os_1 = require("os");
const child_process_1 = require("child_process");
const isWin = os_1.platform() === 'win32';
const BUILD_ARG_REGEX = /(?:\$\{)(hash)(?:\})/g;
const ASSETS_DIR = 'assets';
const util_1 = require("./util");
function err(msg) {
    const prefix = 'BUILD INPUT: ';
    return new Error(`${prefix}${msg}`);
}
let _templates = [];
class Template {
    constructor(name, dependencyManager = new dependency_manager_1.DependencyManager()) {
        this.name = name;
        this.dependencyManager = dependencyManager;
        this.counter = 0;
        this.templateSrc = path_1.resolve(__dirname, '../templates/', name);
        const { exportProjectTo, htmlTemplate, dist } = require(path_1.join(this.templateSrc, 'ruf-bundler.json'));
        this.exportProjectTo = exportProjectTo;
        this.htmlTemplate = htmlTemplate;
        this.dist = dist;
        const { dependencies, devDependencies } = require(path_1.join(this.templateSrc, 'package.json'));
        this.dependencies = dependencies;
        this.devDependencies = devDependencies;
    }
    static getTemplateNames() {
        return __awaiter(this, void 0, void 0, function* () {
            if (_templates.length === 0) {
                _templates = yield util_1.getDirs(path_1.resolve(__dirname, '../templates'));
            }
            return _templates;
        });
    }
    getHtmlTemplateData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._htmlTemplateData) {
                return this._htmlTemplateData;
            }
            return util_1.readFile(path_1.join(this.templateSrc, this.htmlTemplate)).then(data => {
                this._htmlTemplateData = lodash_1.template(data.toString(), {
                    interpolate: /{([\s\S]+?)}/g
                });
                return this._htmlTemplateData;
            });
        });
    }
    _createTmpWorkspace(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const ws = opts.workspace || util_1.tmpdir();
            const tmp = path_1.join(ws, `ruf-bundler-${new Date().getTime()}-${this.counter++}`);
            return yield util_1.copy(this.templateSrc, tmp).then(_ => tmp);
        });
    }
    validateSettings(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            const { template, title, description, tags, dependencies, files } = settings;
            const templateNames = yield Template.getTemplateNames();
            if (!templateNames.includes(template)) {
                throw err(`unknown project template ${template}`);
            }
            if (!util_1.isString(title)) {
                throw err(`a title must be provided`);
            }
            if (!util_1.isObject(files)) {
                throw err('files must be an object mapping filenames to file contents.');
            }
            if (dependencies && !util_1.isObject(dependencies)) {
                throw err('dependencies must be an object mapping npm package names to package versions.');
            }
            if (tags) {
                if (!util_1.isArray(tags)) {
                    throw err('tags must be an array of strings');
                }
                if (tags.some(v => !util_1.isString(v))) {
                    throw err('tags must be an array of strings');
                }
            }
            const filenames = Object.keys(files);
            if (!filenames.includes('index.html')) {
                throw err('index.html must be present in files.');
            }
            for (const name of filenames) {
                if (name.includes('..') || path_1.isAbsolute(name)) {
                    throw err(`invalid filename: ${name}`);
                }
                if (!util_1.isString(files[name])) {
                    throw err(`contents of file named ${name} must be a string`);
                }
            }
            return {
                template,
                title,
                description: description || '',
                tags: tags || [],
                dependencies: dependencies || {},
                files
            };
        });
    }
    getHash(obj) {
        return util_1.getHash(obj);
    }
    getTotalSteps(opts, settings) {
        let totalSteps = 8;
        if (opts.templateChanges) {
            totalSteps++;
        }
        if (settings.dependencies) {
            totalSteps++;
        }
        if (opts.packageManager === 'npm') {
            totalSteps = totalSteps + 4;
        }
        return totalSteps;
    }
    build(settings, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let step = 0;
            const total = this.getTotalSteps(opts, settings);
            const progress = opts.progress
                ? (msg, hashValue, done) => {
                    opts.progress([++step, total, msg, hashValue, !!done]);
                }
                : util_1.noop;
            const buildPlan = opts.buildPlan || util_1.noop;
            let buildFlags = opts.buildFlags;
            const buildParams = {};
            opts.packageManager = opts.packageManager || 'pnpm';
            console.log(`Using package manager - ${opts.packageManager}`);
            let destination = opts.destination || util_1.tmpdir();
            settings = yield this.validateSettings(settings);
            const hash = util_1.getHash(settings);
            const workspacePath = yield this._createTmpWorkspace(opts);
            if (opts.useHashDir) {
                buildParams.hash = hash;
                destination = path_1.join(destination, hash);
                if (opts.returnIfExists) {
                    const alreadyBuilt = yield util_1.exists(destination);
                    if (alreadyBuilt) {
                        buildPlan({ destination, alreadyBuilt, hash });
                        return destination;
                    }
                }
            }
            progress('Preparing workspace.', hash);
            buildPlan({ destination, hash, workspacePath, alreadyBuilt: false });
            if (opts.packageManager === 'npm') {
                let nodeModulesPath = yield this.dependencyManager.getNodeModulesPathForTemplate(this, settings.dependencies, { progress: progress }, hash);
                progress('Linking node modules with pnpm and back.', hash);
                nodeModulesPath = isWin ? path_1.resolve(nodeModulesPath) : nodeModulesPath;
                yield util_1.symlink(path_1.resolve(nodeModulesPath), path_1.join(workspacePath, 'node_modules'), 'junction');
            }
            progress('Exporting files to project.', hash);
            settings.files = settings.files || {};
            const toWrite = Object.keys(settings.files).map(key => [
                path_1.join(workspacePath, this.exportProjectTo, key),
                settings.files[key]
            ]);
            for (const args of toWrite) {
                yield util_1.writeFileForce(args[0], args[1]);
            }
            progress('Generating main html template', hash);
            const compiledHtmlTemplate = yield this.getHtmlTemplateData();
            util_1.writeFile(path_1.join(workspacePath, this.htmlTemplate), compiledHtmlTemplate(Object.assign({}, settings, { BLITZ_TEMPLATE: settings.files['index.html'] })));
            if (settings.dependencies) {
                progress('Update package dependecies', hash);
                const pkg = require(path_1.join(workspacePath, 'package.json'));
                pkg.dependencies = Object.assign(pkg.dependencies, settings.dependencies);
                yield util_1.writeFile(path_1.join(workspacePath, 'package.json'), JSON.stringify(pkg, null, ' '));
            }
            if (opts.templateChanges) {
                progress('Processing template changes', hash);
                yield util_1.changeJSONFiles(workspacePath, opts.templateChanges.merge);
                yield util_1.linkDependencies(workspacePath, opts.templateChanges.npmlink, hash);
            }
            if (opts.packageManager !== 'npm') {
                progress('Installing dependencies. This may take a while.', hash);
                yield execa(path_1.resolve(__dirname, '../node_modules/.bin/pnpm'), ['install'], {
                    cwd: workspacePath
                }).catch((npmErr) => {
                    progress('Package dependencies installation failed!', hash);
                    throw new util_1.DetailedError('Dependency installation failed', npmErr.message, hash);
                });
            }
            progress('Building project.', hash);
            let command = ['run', 'build'];
            if (buildFlags) {
                if (BUILD_ARG_REGEX.test(buildFlags)) {
                    buildFlags = buildFlags.replace(BUILD_ARG_REGEX, function (match, capture) {
                        return buildParams[capture];
                    });
                }
                command.push('--');
                command = command.concat(buildFlags.split(' '));
            }
            yield execa('npm', command, {
                cwd: workspacePath
            }).catch((npmErr) => {
                progress('Build failed!', hash);
                throw new util_1.DetailedError('Build failed', npmErr.message, hash);
            });
            progress('Build successful!', hash);
            progress('Copying to destination and cleanup.', hash);
            yield util_1.mkdir(destination);
            yield util_1.move(path_1.join(workspacePath, this.dist), destination, {
                overwrite: true
            });
            const assetFiles = Object.keys(settings.files).filter(name => name.startsWith(`${ASSETS_DIR}/`));
            if (assetFiles && assetFiles.length > 0) {
                for (const asset of assetFiles) {
                    const key = asset.substr(asset.indexOf(`${ASSETS_DIR}/`) + `${ASSETS_DIR}/`.length);
                    yield util_1.mkdir(`${destination}/${path_1.dirname(key)}`);
                    yield util_1.writeFile(`${destination}/${key}`, settings.files[asset]);
                }
            }
            yield util_1.writeFile(path_1.join(destination, 'ruf-example.json'), JSON.stringify(settings, null, 2));
            progress('Done', hash, true);
            if (!opts.keepWorkspace) {
                const rmProcess = child_process_1.spawn(path_1.resolve(__dirname, '../node_modules/.bin/rimraf'), [workspacePath], {
                    shell: true
                });
                rmProcess.stderr.on('data', data => {
                    console.error(`Error deleting ${workspacePath}: ${data}`);
                });
                rmProcess.stdout.on('data', data => {
                    console.log(`${workspacePath} deleted successfully: ${data}`);
                });
                rmProcess.on('close', code => {
                    console.log(`child process exited with code ${code}`);
                });
            }
            return destination;
        });
    }
}
exports.Template = Template;
//# sourceMappingURL=data:application/json;base64,