import { DependencyManager } from './dependency-manager';
export interface TemplateChanges {
    merge?: {
        [file: string]: any;
    };
    npmlink?: string[];
}
export interface TemplateBuildOptions {
    workspace?: string;
    progress?: (opts: [number, number, string, string | undefined, boolean]) => void;
    keepWorkspace?: boolean;
    buildPlan?: (plan: TemplateBuildPlan) => void;
    destination?: string;
    useHashDir?: boolean;
    returnIfExists?: boolean;
    templateChanges?: any;
    buildFlags?: string;
    packageManager?: string;
}
export interface TemplateBuildPlan {
    destination: string;
    hash?: string;
    alreadyBuilt: boolean;
    workspacePath?: string;
    [key: string]: string | boolean | undefined;
}
export interface TemplateBuildSettings {
    template: string;
    title: string;
    description?: string;
    tags?: string[];
    dependencies?: {
        [key: string]: string;
    };
    files: {
        'index.html': string;
        [name: string]: string;
    };
}
export declare class Template {
    name: string;
    private dependencyManager;
    templateSrc: string;
    dependencies: {
        [dep: string]: string;
    };
    devDependencies: {
        [dep: string]: string;
    };
    exportProjectTo: string;
    htmlTemplate: string;
    dist: string;
    private counter;
    private _htmlTemplateData?;
    static getTemplateNames(): Promise<string[]>;
    constructor(name: string, dependencyManager?: DependencyManager);
    private getHtmlTemplateData;
    private _createTmpWorkspace;
    validateSettings(settings: TemplateBuildSettings): Promise<{
        template: string;
        title: string;
        description: string;
        tags: string[];
        dependencies: {
            [key: string]: string;
        };
        files: {
            [name: string]: string;
            'index.html': string;
        };
    }>;
    getHash(obj: any): string;
    getTotalSteps(opts: TemplateBuildOptions, settings: TemplateBuildSettings): number;
    build(settings: TemplateBuildSettings, opts?: TemplateBuildOptions): Promise<string>;
}
