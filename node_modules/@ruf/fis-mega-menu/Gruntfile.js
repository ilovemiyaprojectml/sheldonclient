'use strict';

var path = require('path');
var html5Config = require('@ruf/html5-config');

module.exports = function (grunt) {

    // Load grunt tasks automatically
    require('load-grunt-tasks')(grunt);

    var yeomanConfig = {
        app: 'demo',
        dist: 'demo-dist',
        lib: 'src',
        libDist: 'dist'
    };

    var deps = [
        'node_modules/get-size/get-size.js',
        'node_modules/ev-emitter/ev-emitter.js',
        'node_modules/desandro-matches-selector/matches-selector.js',
        'node_modules/fizzy-ui-utils/utils.js',
        'node_modules/outlayer/item.js',
        'node_modules/outlayer/outlayer.js',
        'node_modules/masonry-layout/masonry.js'
    ];

    var releaseVersion = grunt.option('releaseVersion');
    grunt.initConfig({
        yeoman: yeomanConfig,
        express: {
            options: {
                port: 3000
            },
            dev: {
                options: {
                    script: 'server/app.js'
                }
            },
            dist: {
                options: {
                    script: 'server/app.js',
                    node_env: 'production'
                }
            }
        },
        watch: {
            options: {
                livereload: false
            },
            express: {
                options: {
                    spawn: false
                },
                files: [
                    '<%= yeoman.app %>/**/*.html',
                    'api/**/*.json',
                    '{.tmp,<%= yeoman.app %>}/styles/**/*.css',
                    '{.tmp,<%= yeoman.app %>}/scripts/**/*.js',
                    '<%= yeoman.app %>/images/**/*.{png,jpg,jpeg,gif,webp,svg}',
                    '<%= yeoman.lib %>/**/*',
                    'server/**/*.{js,json}',
					'node_modules/**/*.js'
                ],
                tasks: ['express:dev']
            }
        },
        open: {
            server: {
                url: 'http://localhost:<%= express.options.port %>'
            }
        },
        clean: {
            dist: {
                files: [
                    {
                        dot: true,
                        src: [
                            '.tmp',
                            '<%= yeoman.dist %>/*',
                            '!<%= yeoman.dist %>/.git*'
                        ]
                    }
                ]
            },
            server: '.tmp'
        },
        jshint: {
            options: {
                jshintrc: '.jshintrc'
            },
            all: [
                '<%= yeoman.app %>/scripts/**/*.js'
            ]
        },
        karma: {
            options: {
                configFile: 'karma.conf.js',
                singleRun: true,
                browsers: ['PhantomJS']
            },
            unit: {
                autoWatch: 'true',
                browsers: ['Chrome']
            },
            debug: {
                autoWatch: 'true',
                singleRun: false,
                browsers: ['Chrome']
            },
            once: {
                colors: false
            },
            coverage: {
                colors: false,
                reporters: ['dots', 'coverage', 'junit'],
                preprocessors: {
                    '**/src/scripts/**/*.js': ['coverage'],
                    '!**/src/scripts/**/*.spec.js': ['coverage']
                },
                coverageReporter: {
                    dir: 'coverage/',
                    type: 'html'
                }
            }
        },
        filerev: {
            dist: {
                src: [
                    '<%= yeoman.dist %>/scripts/{,*/}*.js',
                    '<%= yeoman.dist %>/styles/{,*/}*.css',
                ]
            }
        },
        useminPrepare: {
            html: html5Config.getHtmlFiles(),
            options: {
                dest: '<%= yeoman.dist %>',
                flow: {
                    steps: {
                        js: [
                            {
                                name: 'concat',
                                createConfig: function (context, block) {
                                    var config = require('grunt-usemin/lib/config/concat').createConfig(context, block);
                                    config.files.forEach(function (file) {
                                        file.src = file.src.map(function (item) {
                                            return item.substr(0, 16) === path.join('demo', 'src', 'scripts') ?
                                                item.substr(5) :
                                                item;
                                        });
                                    });
                                    return config;
                                }
                            },
                            'uglifyjs'
                        ],
                        css: ['concat', 'cssmin']
                    },
                    post: {}
                }
            }
        },
        usemin: {
            html: ['<%= yeoman.dist %>/{,*/}*.html'],
            css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],
            options: {
                dirs: ['<%= yeoman.dist %>']
            }
        },
        copy: {
            dist: {
                files: [
                    {
                        expand: true,
                        dot: true,
                        cwd: '<%= yeoman.app %>',
                        dest: '<%= yeoman.dist %>',
                        src: [
                            'api/**',
                            'images/**/*',
                            'vendor/**/*',
                            'styles-fmk/**/*',
                            '*.html',
                            'views/*.html'
                        ]
                    }
                ]
            }
        },
        concurrent: {
            server: [],
            test: [],
            dist: []
        },
        ngAnnotate: {
            dist: {
                files: [
                    {
                        expand: true,
                        src: '<%= yeoman.app %>/scripts/*.js',
                        dest: '.tmp/concat/scripts'
                    }
                ]
            },
            lib: {
                files: [
                    {
                        expand: true,
                        cwd: '.tmp/concat/libscripts/',
                        src: ['*.js'],
                        dest: '<%= yeoman.libDist %>'
                    }
                ]
            }
        },
        concat: {
            lib: {
                src: [
                    '<%= yeoman.lib %>/scripts/**/*.module.js',
                    '<%= yeoman.lib %>/scripts/**/*.js',
                    '!<%= yeoman.lib %>/scripts/**/*.spec.js',
                    '.tmp/templates.js'
                ],
                dest: '.tmp/concat/libscripts/fis-mega-menu.js'
            },
            templates: {
                src: [
                    '.tmp/concat/scripts/scripts.js',
                    '.tmp/templates.js'
                ],
                dest: '.tmp/concat/scripts/scripts.js'
            },
            deps: {
                src: deps,
                dest: '<%= yeoman.libDist %>/fis-mega-menu-deps.js'
            }
        },
        uglify: {
            options: {
                wrap: false
            },
            lib: {
                files: {
                    'dist/fis-mega-menu.min.js': [
                        ['<%= yeoman.libDist %>/fis-mega-menu.js']
                    ]
                }
            },
            deps: {
                src: deps,
                dest: '<%= yeoman.libDist %>/fis-mega-menu-deps.min.js'
            }
        },
        sg_release: {
            release: {
                options: {
                    files: ['package.json', 'README.md'],
                    commitMessagePrefix: 'JAVA-843: ',
                    pushTo: 'origin',
                    commitFiles: ['-a']
                }
            }
        },
        html2js: {
            options: {
                base: '<%= yeoman.lib %>',
                module: 'fis.megamenu',
                existingModule: true,
                singleModule: true,
                htmlmin: {
                    collapseBooleanAttributes: true,
                    collapseWhitespace: true,
                    removeAttributeQuotes: true,
                    removeComments: true,
                    removeEmptyAttributes: true,
                    removeRedundantAttributes: false,
                    removeScriptTypeAttributes: true,
                    removeStyleLinkTypeAttributes: true
                }
            },
            directives: {
                src: ['<%= yeoman.lib %>/scripts/**/*.directive.html',
                    '<%= yeoman.lib %>/scripts/**/*.decorator.html'],
                dest: '.tmp/templates.js'
            }
        },
        replace: {
            release: {
                src: ['bower.json'],
                options: {
                    persist: {
                        dest: 'replacementsTemp.json',
                        invert: true
                    }
                },
                overwrite: true,
                replacements: [
                    {
                        from: new RegExp('(https?\\S+git#)(develop)', 'g'),
                        to: function (matchedWord, index, fullText, regexMatches) {
                            return regexMatches[0] + releaseVersion;
                        }
                    }
                ]
            },
            develop: {
                src: ['bower.json'],
                options: {
                    restore: {
                        src: 'replacementsTemp.json',
                        remove: true
                    },
                },
                overwrite: true
            }
        },
        wiredep: {
            html: {
                src:  "demo/index.html",
                devDependencies: true,
                exclude:['angular-mocks','jasmine-jquery','fis-mocks', 'jasmine-core'],
                fileTypes: {
                    html: {
                        detect: {
                            js: /<script.*src=['"]([^'"]+)/gi,
                            'notmin.css': /<link.*href=['"]([^'"]+)/gi,
                            css: /<link.*href=['"]([^'"]+)/gi
                        },
                        replace: {
                            js: '<script src="{{filePath}}"></script>',
                            'notmin.css': '<link rel="stylesheet" href="{{filePath}}" />',
                            css: '<link rel="stylesheet" href="{{filePath}}" />'
                        }
                    }
                }
            },
            karma: {
                src: ['karma.conf.js'],
                devDependencies: true,
                fileTypes: {
                    js: {
                        block: /(([ \t]*)\/\/\s*bower:*(\S*))(\n|\r|.)*?(\/\/\s*endbower)/gi,
                        detect: {
                            js: /\"\"\,/gi,
                        },
                        replace: {
                            js: '"{{filePath}}",',
                        }
                    }
                }
            }
        },
        "ddescribe-iit": {
            files: [
                'src/scripts/**/*.spec.js'
            ],
            options: {
                disallowed: ['ddescribe', 'iit', 'fdescribe', 'fit']
            }
        },
        githooks: {
            all: {
                'pre-commit': 'ddescribe-iit'
            }
        }
    });

    grunt.registerTask('server', 'Runs a simple node.js server for testing your app', function (target) {

        if (target === 'dist') {
            return grunt.task.run([
                'clean:server',
                'build',
                'express:dist',
                'open',
                'watch'
            ]);
        }

        grunt.task.run([
            'clean:server',
            'express:dev',
            'open',
            'watch'
        ]);

    });

    grunt.registerTask('test', 'Run automated tests', [
        'clean:server',
        'concurrent:test',
        'karma'
    ]);

    grunt.registerTask('build', 'Create distribution files for your library', [
        'githooks',
        'html2js',
        'concat:lib',
        'concat:deps',
        'ngAnnotate:lib',
        'uglify:lib',
        'uglify:deps',
    ]);

    grunt.registerTask('lib', 'Create distribution files for your library', ['build']);

    grunt.registerTask('release', [
        'build',
        'sg_release'
    ]);

    grunt.registerTask('default', ['build']);

};
