#!/bin/sh

# Global variable that is used by the "checkCommandAvailable" function.
# DON'T TOUCH THIS!
preconditionsMet=1

# Checks whether a program is installed and available on the path.
#
# When the executable is not found on the path, two things will happen:
# * A message is printed, notifying the user that the requested command is not available.
# * The global variable "preconditionsMet" is set to 0.
#
# The global "preconditionsMet" variable can be used to determine whether all preconditions have been met
# after checking all of the preconditions. Calling the `checkPreconditionsMet` function will do this check
# and exit with a status code of 1 if the preconditions aren't met.
#
# Params:
# 1: The executable to check for, e.g. "svn"
# 2: A description of the program to check for, e.g. "Subversion"
function checkCommandAvailable() {
    local executable=$1
    local description=$2

    if ! $(command -v $executable &> /dev/null) ; then
        echo "You don't have the $description command ($executable) on your path."

        preconditionsMet=0
    else
        echo "Found $description command ($executable)"
    fi
}

function checkDirectoryDoesNotExist() {
    if [ -d "$1" ]; then
        echo "The $1 directory already exists"

        preconditionsMet=0
    fi
}

# Call this function after running checks with `checkCommandAvailable`. It will exit with a status code of 1
# if not all preconditions are met.
function checkPreconditionsMet() {
    if [ "$preconditionsMet" == 0 ] ; then
        echo "Preconditions not met, exiting"

        exit 1
    fi
}

# Call this function like this to check the exit status of the previously run command:
#
#     checkExitStatus $?
#
# If the exit status is 0, this function will not do anything.
# If the exit status is not 0, this function will print a message and exit with the provided exit status
#
# This function can be used to _fail fast_ after running a command without having to repeat _if_ statements.
function checkExitStatus() {
	local status=$1

	if [ "$status" -ne "0" ]
	then
		echo "Exiting with status $status"
		exit $status
	fi
}


# Runs a command in a provided directory.
#
#   runCommandInDirectory framework/fis-components mvn clean install
#
# Parameters:
# 1: The directory to run the command in
# 2 - n: The command to run and its parameters
function runCommandInDirectory() {
    # Save the current directory for later
    local curDir=$(pwd)
    # The first parameter contains the directory we want to run the command in
    local moduleDir="$1"
    # Get rid of the first parameter, since we've already stored that
    shift

    echo "*******************************************************"
    echo "*"
    echo "* $moduleDir"
    echo "*"
    echo "* Running: $@"
    echo "*"

    cd $moduleDir

    # Run the command, using any extra parameters provided
    "$@"

    checkExitStatus $?

    cd $curDir
}

# Runs a command in a provided directory.
#
#   runCommandInDirectory framework/fis-components mvn clean install
#
# Parameters:
# 1: The directory to run the command in
# 2 - n: The command to run and its parameters
function runCommandInDirectorySilent() {
    # Save the current directory for later
    local curDir=$(pwd)
    # The first parameter contains the directory we want to run the command in
    local moduleDir="$1"
    # Get rid of the first parameter, since we've already stored that
    shift

    cd $moduleDir

    # Run the command, using any extra parameters provided
    "$@"

    cd $curDir
}
