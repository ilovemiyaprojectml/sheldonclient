describe('app', function () {

    'use strict';

    beforeEach(function () {
        module('shell');
        module('fis.megamenu');
    });

    var $httpBackend;

    var nav = {
    'main': [{
        'closeable': false,
        'id': 'welcome1',
        'label': 'Welcome1',
        'module': 'desktop-ui',
        'partial': 'desktop-ui/partials/welcome1.html',
        'path': '/welcome1'
    }, {
        'closeable': false,
        'id': 'welcome2',
        'label': 'Welcome2',
        'module': 'desktop-ui',
        'partial': 'desktop-ui/partials/welcome2.html',
        'path': '/welcome2'
    }, {
        'id': 'demo',
        'label': 'Demo',
        'children': [{
            "label": "Demo Pages",
            "id": "demo-pages",
            "children": [{
                "label": "Account Search",
                "title": "Find account by name/number",
                "id": "accountSearch",
                "module": "desktop-ui",
                "partial": "desktop-ui/partials/accountSearch.html",
                "controller": "desktop-ui.AccountSearchCtrl",
                "tags": ["accountSearch", "Account Search"]
            }, {
                "label": "External Search",
                "title": "Open Google Search in new window ",
                "id": "googleSearch1",
                "module": "desktop-ui",
                "action": "openWindow('http://www.google.com')",
                "tags": ["googleSearch1", "External Search"]
            }]
        }, {
            "label": "Demo Pages",
            "id": "demo-pages2",
            "children": [{
                "label": "Account Search",
                "title": "Find account by name/number",
                "id": "accountSearch2",
                "module": "desktop-ui",
                "partial": "desktop-ui/partials/accountSearch.html",
                "controller": "desktop-ui.AccountSearchCtrl",
                "tags": ["accountSearch", "Account Search"]
            }, {
                "label": "External Search",
                "title": "Open Google Search in new window ",
                "id": "googleSearch2",
                "module": "desktop-ui",
                "action": "openWindow('http://www.google.com')",
                "tags": ["googleSearch1", "External Search"]
            }]
        }]
    }],
    hidden: []
};


    var navEmptyMainEmptyHidden = {main: [
        {closeable: false, id: 'welcome1', label: 'Welcome1', module: 'desktop-ui', partial: 'desktop-ui/partials/welcome1.html', path: '/welcome1'},
        {closeable: false, id: 'welcome2', label: 'Welcome2', module: 'desktop-ui', partial: 'desktop-ui/partials/welcome2.html', path: '/welcome2'}],
        hidden: []};

    var navEmptyMainWithHidden = {main: [
        {closeable: false, id: 'welcome1', label: 'Welcome1', module: 'desktop-ui', partial: 'desktop-ui/partials/welcome1.html', path: '/welcome1'},
        {closeable: false, id: 'welcome2', label: 'Welcome2', module: 'desktop-ui', partial: 'desktop-ui/partials/welcome2.html', path: '/welcome2'}
        ],
        hidden: [{children: [
            {children: [
                {children: [{id: 'demo-pages111', label: 'Demo Pages', path: '/demo/demo-pages11/demo-pages111', partial: 'dummy.html'}, {id: 'demo-pages112', label: 'Demo Pages', path: '/demo/demo-pages11/demo-pages112', partial: 'dummy.html'}], id: 'demo-pages11', label: 'Demo Pages', path: '/demo/demo-pages11'},
                {children: [{id: 'demo-pages121', label: 'Demo Pages', path: '/demo/demo-pages12/demo-pages121', partial: 'dummy.html'}, {id: 'demo-pages122', label: 'Demo Pages', path: '/demo/demo-pages12/demo-pages122', partial: 'dummy.html'}], id: 'demo-pages12', label: 'Demo Pages', path: '/demo/demo-pages12'}],
                id: 'demo-pages1', label: 'Demo Pages', path: '/demo/demo-pages'}], id: 'demo', label: 'Demo', path: '/demo'}]};

    function mockConfigService(settings){
		var fisConfig = {};
        angular.mock.module(function ($provide) {
			$provide.constant('fisConfig', fisConfig);
            angular.extend(fisConfig, settings);
        });
    }
    beforeEach(angular.mock.module(function() {
        return function(_$httpBackend_) {
            $httpBackend = _$httpBackend_;
            $httpBackend.when('GET', 'api/config').respond({});
        };
    }));

    beforeEach(angular.mock.module(function($provide) {
        $provide.factory('fisMegaMenuConfigurationService', function() {
            var service = {};
            service.menuApi = function () {
                return {
                    menuApi: {
                        navTimeout: 100,
                        "searchEnabled": false
                    }};
            };
            return service;
        });
        $provide.service('fisConfigService', function($q) {
            var deferred = $q.defer();
            deferred.resolve({});
            return deferred.promise;
        });
    }));

    it('should create a mega menu with search if menu is searchable and main section has entries', function(){
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchEnabled": true,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();
            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.navReady', nav);
            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                expect(startMenuList.length).toBe(1);
                // Two Top Level Menu entries (demo and search entry)
                expect(startMenuList.children('li').length).toBe(2);
                expect(startMenuList.find('input[type="search"]').length).toBe(1);
            }, 150);
            $timeout.flush();
        });
    });

    it('should create a mega menu without search if menu is not searchable and main section has entries', function(){
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchEnabled": false,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();
            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.configReady', menuSettings);
            fisPubSubService.publish('shell.navReady', nav);
            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                expect(startMenuList.length).toBe(1);
                // One Top Level Menu entry (demo entry)
                expect(startMenuList.children('li').length).toBe(1);
                // No Search Input Field should be visible
                expect(startMenuList.find('input[type="search"]').length).toBe(0);
            }, 150);
            $timeout.flush();
        });
    });

    it('should create a mega menu with search if menu is searchable, showEmptyMenu is true and main section has no entries', function(){
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchEnabled": true,
                "showEmptyMenu": true,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();
            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.configReady', menuSettings);
            fisPubSubService.publish('shell.navReady', nav);
            scope.$apply();
            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                expect(startMenuList.length).toBe(1);
                // Two Top Level Menu entries (demo and search entry)
                expect(startMenuList.children('li').length).toBe(2);
                // No Search Input Field should be visible
                expect(startMenuList.find('input[type="search"]').length).toBe(1);
            }, 150);
            $timeout.flush();
        });
    });

    it('should create a mega menu with search if menu is searchable, showEmptyMenu is true and main section has no entries but hidden does', function(){
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchEnabled": true,
                "showEmptyMenu": true,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();
            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.configReady', menuSettings);
            fisPubSubService.publish('shell.navReady', navEmptyMainWithHidden);
            scope.$apply();
            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                expect(startMenuList.length).toBe(1);
                // One Top Level Menu entry (the search entry)
                expect(startMenuList.children('li').length).toBe(1);
                // Search Input Field should be visible
                expect(startMenuList.find('input[type="search"]').length).toBe(1);
            }, 150);
            $timeout.flush();
        });
    });

    it('should create a mega menu with search input inside a form to satisfy IE', function(){
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchEnabled": true,
                "showEmptyMenu": true,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();
            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.configReady', menuSettings);
            fisPubSubService.publish('shell.navReady', navEmptyMainWithHidden);
            scope.$apply();
            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                var searchInput = startMenuList.find('input[type="search"]');
                // Search Input Field should be visible
                expect(searchInput.length).toBe(1);
                expect(searchInput.parent().prop('tagName').toLowerCase()).toBe('form');
            }, 150);
            $timeout.flush();
        });
    });

   it('should search the mega menu after timeout when entering a search term', function (done) {
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchTimeout" : 150,
                "searchEnabled": true,
                "showEmptyMenu": true,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();
            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.configReady', menuSettings);
            fisPubSubService.publish('shell.navReady', nav);
            scope.$apply();
            done();

            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                var sitemap = element.find('.fis-sitemap');
                var searchInput = startMenuList.find('input[type="search"]');
                searchInput.val('Account').trigger('keyup');
                // There should be no results yet
                expect(sitemap.find('[data-parent-path="SearchItem"] li').length).toBe(0);
                $timeout(function(){
                    // Wait for search timeout
                    expect(sitemap.text()).toContain('Account Search');
                }, 0);
                $timeout.flush();
            }, 0);
            $timeout.flush();
        });
    }, 100);

    it('should search the mega menu immediately if enter is pressed', function (done) {
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchTimeout" : 150,
                "searchEnabled": true,
                "showEmptyMenu": true,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();

            // Dummy opening function
            var openCalled = 0;
            scope.open = function(){
                openCalled++;
            };

            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.configReady', menuSettings);
            fisPubSubService.publish('shell.navReady', nav);
            scope.$apply();
            done();

            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                var sitemap = element.find('.fis-sitemap');
                var searchInput = startMenuList.find('input[type="search"]');
                searchInput.val('search').trigger('keyup');

                // There should be no results yet
                expect(sitemap.find('[data-parent-path="SearchItem"] li').length).toBe(0);

                // Trigger enter key press
                var e = $.Event('keyup');
                e.keyCode = 13; // Enter key
                e.which = 13; // Enter key
                searchInput.trigger(e);

                // Now the results should be visible
                expect(sitemap.find('[data-parent-path="SearchItem"] li.leaf').length).toBe(4); // 4 results
                expect(sitemap.text()).toContain('Account Search');

                // No page should have been opened
                expect(openCalled).toBe(0);
                $timeout.flush();
            }, 150);
            $timeout.flush();
        });
    }, 100);

    it('should search the mega menu immediately if enter is pressed and open the exact result page', function (done) {
        var menuSettings = {
            menuApi: {
                navTimeout: 100,
                "searchTimeout" : 150,
                "searchEnabled": true,
                "showEmptyMenu": true,
                "searchSections": ['main', 'hidden']
            }
        };
        mockConfigService(menuSettings);
        angular.mock.inject(function($compile, $rootScope, $timeout, fisPubSubService){
            var scope = $rootScope.$new();

            // Dummy opening function
            var openCalled = 0;
            scope.open = function(){
                openCalled++;
            };

            var element = $compile('<div fis-start-menu></div>')(scope);
            scope.$apply();
            fisPubSubService.publish('shell.configReady', menuSettings);
            fisPubSubService.publish('shell.navReady', nav);
            scope.$apply();
            done();

            $timeout(function(){
                // Wait for navTimeOut
                var startMenuList = element.find('.fis-start-menu-list');
                var sitemap = element.find('.fis-sitemap');
                var searchInput = startMenuList.find('input[type="search"]');
                searchInput.val('Account').trigger('keyup');

                // There should be no results yet
                expect(sitemap.find('[data-parent-path="SearchItem"] li').length).toBe(0);

                // Trigger enter key press
                var e = $.Event('keyup');
                e.keyCode = 13; // Enter key
                e.which = 13; // Enter key
                searchInput.trigger(e);

                // Now the results should be visible
                expect(sitemap.find('[data-parent-path="SearchItem"] li.leaf').length).toBe(2); // 2 results
                expect(sitemap.text()).toContain('Account Search');

                expect(openCalled).toBe(1);
                $timeout.flush();
            }, 150);
            $timeout.flush();
        });
    }, 100);

});
