/*jshint eqnull:true*/
/*jshint multistr:true */
/*jshint maxcomplexity:10*/
/**
 * @name fisWatchSuspend
 * @description Directive used to suspend watches in a $scope and it's subsequent child scopes
 *
 */

angular.module('fis.megamenu').directive('fisWatchSuspend', ['$timeout', 'fisPubSubService', function ($timeout, fisPubSubService) {
    'use strict';
    return {
        restrict: 'A',
        priority: -1,

        link: function (scope, elem, attrs) {


            function suspendWatches(currentScope) {
                var scopeId = currentScope.$id;
                if (_.isUndefined(currentScope.$$suspendedWatches)){
                    currentScope.$$suspendedWatches = {};
                }
                if (_.isUndefined(currentScope.$$suspendedWatches[scopeId])) {
                    if(!_.isNull(currentScope.$$watchers)){
                        currentScope.$$suspendedWatches[scopeId] = currentScope.$$watchers;
                        currentScope.$$watchers = null;
                    }
                }
            }

            function resumeWatches(currentScope) {
                var scopeId = currentScope.$id;
                if (!_.isUndefined(currentScope.$$suspendedWatches[scopeId])) {
                    if(_.isNull(currentScope.$$watchers)){
                        currentScope.$$watchers = currentScope.$$suspendedWatches[scopeId];
                        currentScope.$$suspendedWatches[scopeId] = undefined;
                    }
                }
            }

            /* OLD METHOD
              function traverseScopeSuspend(currentScope) {
                if (!_.isNull(currentScope)) {

                    //suspend the current scope
                    suspendWatches(currentScope);

                    //suspend the scope of the child head scope
                    traverseScopeSuspend(currentScope.$$childHead);

                    //suspend the scope of the child tail scope
                    traverseScopeSuspend(currentScope.$$childTail);
                }
            }*/

            function traverseScopeSuspend(scope) {
              	var root = scope;
              	var pendingChildHeads = [ root.$$childHead ];
              	var currentScope;
              	while (pendingChildHeads.length) {
                		currentScope = pendingChildHeads.shift();
                		while (currentScope) {
                  			suspendWatches(currentScope);
                  			pendingChildHeads.push(currentScope.$$childHead);
                  			currentScope = currentScope.$$nextSibling;
                		}
              	}
            }


            /* OLD METHOD
               function traverseScopeResume(currentScope) {
                if (!_.isNull(currentScope)) {

                    //resume the current scope
                    resumeWatches(currentScope);

                    //resume the scope of the child head scope
                    traverseScopeResume(currentScope.$$childHead);

                    //resume the scope of the child tail scope
                    traverseScopeResume(currentScope.$$childTail);
                }
            }*/

            function traverseScopeResume(scope) {
              	var root = scope;
              	var pendingChildHeads = [ root.$$childHead ];
              	var currentScope;
              	while (pendingChildHeads.length) {
                		currentScope = pendingChildHeads.shift();
                		while (currentScope) {
                			resumeWatches(currentScope);
                			pendingChildHeads.push(currentScope.$$childHead);
                			currentScope = currentScope.$$nextSibling;
                		}
              	}
            }


            fisPubSubService.subscribe('shell.suspendWatch', function (watchScope) {
                $timeout(function () {

                    if(!_.isUndefined(watchScope)){
                        if(_.isUndefined(watchScope.$$suspendedWatches)){
                            watchScope.$$suspendedWatches = {};
                        }
                        traverseScopeSuspend(watchScope);
                    }
                });

            });



            fisPubSubService.subscribe('shell.resumeWatch', function (watchScope) {

                if(!_.isUndefined(watchScope)){
                    if (!_.isUndefined(watchScope.$$suspendedWatches)) {
                        traverseScopeResume(watchScope);
                    }
                }
            });


        }
    };

}]);
