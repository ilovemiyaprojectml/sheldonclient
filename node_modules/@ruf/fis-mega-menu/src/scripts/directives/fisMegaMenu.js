/**
 * @name fisMegaMenu
 * @description Defining directive for  Mega Menu
 */
'use strict';
var fisMegamenuModule = angular.module('fis.megamenu');

var shellModule = angular.module('shell');

shellModule.config(['fisStartMenuServiceProvider',
    function(fisStartMenuServiceProvider) {
        fisStartMenuServiceProvider.menuDirectiveName = 'fis-mega-menu';
    }
]);

fisMegamenuModule.directive('fisMegaMenu', ['fisPubSubService', '$timeout', '$filter', 'fisMegaMenuSearchService', 'fisI18nService', 'fisResponsiveService',
    function(fisPubSubService, $timeout, $filter, fisMegaMenuSearchService, fisI18nService, fisResponsiveService) {

        var Masonry = null;

        var defineMasonry = function(value) {
            Masonry = value;
        };

        //<div fis-mega-menu ng-if="!isResponsive"></div>\

        //Change the sequence for check as deps file always loads the Masonary if the deps file is not loaded only then dynamic loading will required.
        //For dynamic loading requirejs.config should have the correct path for the masonary
        //https://www.csa.sungard.com/jira/browse/SDHTML-11978
        if (window.Masonry) {
            defineMasonry(window.Masonry);
        }   else if (typeof define === 'function' && define.amd) {
            // Initializes local Masonry reference when using AMD
            require(['masonry'], function (masonry) {
                defineMasonry(masonry);
            });
        }

        return {
            restrict: 'A',
            scope: true,
            require: '^fisStartMenu',
            template:
                '<div class="fis-mega-menu">' +
                    '<div class="fis-start-menu-left">' +
                        '<ul class="fis-start-menu-list">' +
                            '<li ng-repeat="item in startMenuModel.menuItems.children" ng-if="item.isPrimaryNav" ng-click="viewModel.menuListItemClicked(item)" class="{{item.view.cls}}" ng-class="{ \'fis-selected\': startMenuModel.selectedMenuItem === item, \'fis-search\': item.view.id === \'SearchItem\' }" fis-unique-id="menu_level_1_{{ item.view.id }}">' +
                                '<div ng-if="item.view.id !== \'SearchItem\'">{{ item.view.label }}</div>' +
                                '<div ng-if="item.view.id === \'SearchItem\' && startMenuModel.searchable">' +
                                    '<form>' +
                                        '<input class="fis-icon fis-i-b_lightsearch" type="search" placeholder="{{ getSearchLabel() }}" ng-keyup="searchKeyUp($event)" fis-unique-id="searchbox"  title="{{ getSearchLabel(true) }}"/>' +
                                    '</form>' +
                                '</div>' +
                            '</li>' +
                        '</ul>' +
                        '<div class="fis-start-menu-quick-links-area" ng-show="startMenuModel.selectedMenuItem.view.quickLinks.length > 0">' +
                            '<ul ng-repeat="links in startMenuModel.selectedMenuItem.view.quickLinks" class="fis-navitems">' +
                                '<li class="fis-navitem">' +
                                    '<span class="fis-title">{{ links.label }}</span>' +
                                    '<ul>' +
                                        '<li fis-unique-id ng-repeat="link in links.children" fis-apply-class-directive="link.cls">' +
                                            '<div fis-navigation-link fis-model="link"></div>' +
                                        '</li>' +
                                    '</ul>' +
                                '</li>' +
                            '</ul>' +
                        '</div>' +
                    '</div>' +
                    '<div class="fis-start-menu-content-area" fis-watch-suspend>' +
                    '<div>' +
                            '<div class="fis-sitemap">' +
                                '<p ng-if="tooShortTerm()" class="fis-notification">{{ getSearchLabel(true) }}</p>' +
                                '<ul class="fis-navitems" ng-repeat="tierOneItem in viewModel.flattenViews" ng-if="::tierOneItem.showMenu" data-parent-path="{{::tierOneItem.parent.id }}">' +
                                '<li class="branch {{::tierOneItem.view.cls }}" fis-unique-id="{{::tierOneItem.view.id }}">' +
                                    '<span class="fis-title">{{::tierOneItem.view.label }}</span>' +
                                    '<ul>' +
                                        '<li ng-repeat="tierTwoItem in ::tierOneItem.children" ng-if="::tierTwoItem.showMenu" ng-class="::{ \'leaf\': tierTwoItem.children.length === 0, \'branch\': tierTwoItem.children.length > 0 }" class="{{::tierTwoItem.view.cls }}" fis-unique-id="{{::tierTwoItem.view.id }}">' +
                                            '<span ng-value="::tierTwoItem.view.matched"></span>' +
                                            '<div ng-if="::(tierTwoItem.children.length === 0)" fis-navigation-link fis-model="::tierTwoItem.view"  ng-class="::{\'fis-search-matched\': tierTwoItem.view.matched === 100}"></div>' +
                                            '<div ng-if="::(tierTwoItem.children.length > 0)" >' +
                                                '<span class="fis-title">{{::tierTwoItem.view.label }}</span>' +
                                                '<ul>' +
                                                    '<li ng-repeat="tierThreeItem in ::tierTwoItem.children" ng-if="::tierThreeItem.showMenu"  ng-class="::{ \'leaf\': tierThreeItem.children.length === 0, \'branch\': tierThreeItem.children.length > 0 }" class="{{::tierThreeItem.view.cls }}" fis-unique-id="{{::tierThreeItem.view.id }}">' +
                                                        '<div ng-if="::(tierThreeItem.children.length === 0)" fis-navigation-link fis-model="::tierThreeItem.view" ng-class="::{\'fis-search-matched\': tierThreeItem.view.matched === 100}"></div>' +
                                                        '<div ng-if="::(tierThreeItem.children.length > 0)" ng-class="::{\'fis-search-matched\': tierThreeItem.view.matched === 100}">' +
                                                            '<span class="fis-title">{{::tierThreeItem.view.label }}</span>' +
                                                            '<ul>' +
                                                                '<li class="leaf {{::tierFourItem.view.cls }}" ng-repeat="tierFourItem in ::tierThreeItem.children" fis-unique-id="{{::tierFourItem.view.id }}" >' +
                                                                   '<div fis-navigation-link fis-model="::tierFourItem.view" ng-class="::{\'fis-search-matched\': tierFourItem.view.matched === 100}"></div>' +
                                                                        '<span class="fis-clear-float"></span>' +
                                                                    '</li>' +
                                                                '</ul>' +
                                                            '</div>' +
                                                            '<span class="fis-clear-float"></span>' +
                                                        '</li>' +
                                                    '</ul>' +
                                                '</div>' +
                                                '<span class="fis-clear-float"></span>' +
                                            '</li>' +
                                        '</ul>' +
                                    '</li>' +
                                '</ul>' +
                            '</div>' +
                        '</div>' +
                    '</div>' +
                '</div>',
            controller: ['$scope',
                function($scope) {
                    $scope.viewModel = {
                        'closingTimeout': null,
                        'navLinkClicked': function() {},
                        'searchTimeout': null,
                        'flattenViews': null,
                        'mason': null
                    };

                    var startMenuModel = $scope.$parent.startMenuModel;
                    var viewModel = $scope.viewModel;

                    $scope.IE = "Microsoft Internet Explorer";

                    $scope.hasHiddenChildren = function(children) {
                        return _.some(children, function(child) {
                            return (child.view.id.indexOf(':') > -1);
                        });
                    };

                    var layoutTimeout;
                    $scope.viewModel.menuListItemClicked = function(menuItem) {
                        if (startMenuModel.selectedMenuItem != menuItem) {
                            // User clicked another toplevel menu than the current active one
                            fisPubSubService.publish('shell.navLoading', true);
                            layoutTimeout = $timeout(function() {
                                startMenuModel.selectedMenuItem = menuItem;
                            });
                        }
                    };
                    $scope.$on('$destroy', function(destroy) {
                        if (layoutTimeout) {
                            $timeout.cancel(layoutTimeout);
                            layoutTimeout = null;
                        }
                    });

                    $scope.fisNavigationLinkClicked = function() {
                        $scope.$parent.startMenuModel.closed = true;
                    };

                    $scope.$watch('$parent.startMenuModel.closed', function(newValue) {
                        if (viewModel.searchTimeout) {
                            $timeout.cancel(viewModel.searchTimeout);
                            viewModel.searchTimeout = null;
                        }
                        if (newValue === true) {
                            if ($scope.alreadyRan === true) {
                                $scope.timeoutDelay = 10;
                            }
                            if (_.isUndefined($scope.timeoutDelay)) {
                                $scope.timeoutDelay = 2000;
                            }
                            $timeout(function() {
                                fisPubSubService.publish('shell.suspendWatch', $scope);
                                $scope.alreadyRan = true;
                            }, $scope.timeoutDelay);

                        } else {
                            $timeout(function() {
                                fisPubSubService.publish('shell.resumeWatch', $scope);
                            }, 500, false);
                        }
                    });

                    $scope.updateFlattenViews = function(views) {
                        var list = [];
                        _.each(views, function(item) {
                            list.push(item.children);
                        });
                        $scope.viewModel.flattenViews = _.flatten(list);
                    };

                    $scope.$watch('$parent.startMenuModel.menuItems.children', function(newValue) {
                        $scope.updateFlattenViews(newValue);
                    });

                }
            ],
            link: function(scope, element, attrs) {
                var startMenuModel = scope.$parent.startMenuModel;
                var searchInput = null;
                var searchText = '';

                var getSearchInput = function() {
                    // we need to verify if the search element is atleast still in the page(if new navigation is created)
                    if (!searchInput || searchInput.length > 0 && !$.contains(document.body,searchInput[0])) {
                        var temp = element.find('.fis-search input');

                        if (temp.length > 0) {
                            searchInput = temp;
                        }
                    }

                    return (searchInput);
                };

                function onLayoutComplete(msnryInstance, laidOutItems) {
                    fisPubSubService.publish('shell.navLoading', false);
                }

                function LoadMasonry() {
                    if (!Masonry) {
                        return;
                    }

                    var container = document.querySelector('.fis-sitemap');
                    var mason = scope.viewModel.mason;

                    if ((_.isNull(mason) || _.isUndefined(mason)) && !(_.isNull(container) || _.isUndefined(container))) {
                        scope.viewModel.mason = new Masonry(container, {
                            'columnWidth': 260,
                            'itemSelector': '.fis-navitems',
                            'transitionDuration': 0
                        });
                        scope.viewModel.mason.on('layoutComplete', onLayoutComplete);
                    }

                    return (scope.viewModel.mason);
                }

                function ResetMasonry() {
                    LayoutMasonry(undefined, true);
                }

                function LayoutMasonry(newValue, reload) {
                    if (!Masonry) {
                        return;
                    }

                    if (!newValue) {
                        if (scope.$parent.startMenuModel.selectedMenuItem) {
                            newValue = scope.$parent.startMenuModel.selectedMenuItem.view.id;
                        }
                    }

                    var mason = scope.viewModel.mason;

                    if (_.isNull(mason) || _.isUndefined(mason)) {
                        mason = LoadMasonry();
                    }

                    if (!_.isNull(mason) && !_.isUndefined(mason)) {
                        $timeout(function() {
                            if (reload) {
                                mason.reloadItems();
                            }
                            if (mason.items.length > 0) {
                                fisPubSubService.publish('shell.navLoading', true);
                                var hide = _.filter(mason.items, function(item) {
                                    return !angular.element(item.element).is('.fis-navitems[data-parent-path="' + newValue + '"]');
                                });

                                var reveal = _.filter(mason.items, function(item) {
                                    return angular.element(item.element).is('.fis-navitems[data-parent-path="' + newValue + '"]');
                                });

                                mason.hide(hide);
                                mason.reveal(reveal);
                                mason.reloadItems();
                                mason.layout();
                            }
                        }, 0, false);
                    }
                }

                scope.$watch('$parent.startMenuModel.closed', function(newValue) {
                    if (newValue === false) {
                        ResetMasonry();
                        ResizeMegaMenu();
                    }
                });

                angular.element(window).resize(function() {
                    if (!startMenuModel.closed && !fisResponsiveService.isResponsive()) {
                        ResizeMegaMenu();
                        LayoutMasonry();
                    }
                });

                var toggleMegaMenuHover = function(e) {
                    if ((!scope.$parent.startMenuModel.closed) && (scope.$parent.startMenuModel.closeOnMouseExit === true)) {
                        if (scope.viewModel.closingTimeout) {
                            $timeout.cancel(scope.viewModel.closingTimeout);
                            scope.viewModel.closingTimeout = null;
                        }

                        var eType = e.type;

                        if (startMenuModel.closeOnMouseExit) {
                            scope.viewModel.closingTimeout = $timeout(function() {
                                scope.$parent.startMenuModel.closed = (eType !== 'mouseenter');
                            }, 350);
                        }
                    }

                    e.stopPropagation();
                    scope.$apply();
                };

                var getPreviousMenuItem = function(menuItem) {
                    var menuItems = startMenuModel.menuItems.children;
                    var index = menuItems.indexOf(menuItem);

                    if (index > 0) {
                        return menuItems[index - 1];
                    } else {
                        return menuItem;
                    }
                };

                var getNextMenuItem = function(menuItem) {
                    var menuItems = startMenuModel.menuItems.children;
                    var index = menuItems.indexOf(menuItem);

                    if ((index + 1) < menuItems.length) {
                        return menuItems[index + 1];
                    } else {
                        return menuItem;
                    }
                };

                var retrieveFirstMatchedNav = function(filteredNavs) {
                    var matchedNav = undefined;
                    _.each(filteredNavs, function(nav) {
                        if (_.isUndefined(matchedNav)) {
                            matchedNav = searchNavForMatchedNav(nav);
                        }
                    });

                    return matchedNav;
                };

                function flattenNavigation(navs) {
                    var allnavs = [];
                    _.each(navs, function(nav) {
                        if (!_.isUndefined(nav.id) && !_.isUndefined(nav.matched)) {
                            allnavs.push(nav);
                        }
                        if (nav.children) {
                            var navsFromTheDeep = flattenNavigation(nav.children);
                            allnavs = _.union(allnavs, navsFromTheDeep);
                        }
                    });
                    return allnavs;
                }


                var checkAllResultsAreSame = function(filteredNavs) {
                    var matchedNav = undefined;
                    if (_.isUndefined(scope.filteredNavs[0])) {
                        return undefined;
                    }
                    var allnavs = flattenNavigation(scope.filteredNavs);
                    var foundMismatch = _.find(allnavs, function(nav, index) {
                        var foundMis = _.find(_.rest(allnavs, index), function(comparenav) {
                            return !compareNav(nav, comparenav);
                        });
                        return !_.isUndefined(foundMis);
                    });
                    if (!_.isUndefined(foundMismatch)) {
                        return undefined;
                    } else {
                        return allnavs[0];
                    }
                };

                /*
                 * Compares 2 nav items on basis of all criteria other than tags, id, label and title attribute
                 * DHTML-5172 thus do not modify for other uses without consideration.
                 **/

                function compareNav(nav1, nav2) {
                    if (!_.isUndefined(nav1.partial) && (nav1.partial !== nav2.partial)) {
                        return false;
                    }
                    if (!_.isUndefined(nav1.controller) && (nav1.controller !== nav2.controller)) {
                        return false;
                    }
                    if (!_.isUndefined(nav1.action) && (nav1.action !== nav2.action)) {
                        return false;
                    }
                    if (!_.isUndefined(nav1.actionController) && (nav1.actionController !== nav2.actionController)) {
                        return false;
                    }
                    if (!_.isUndefined(nav1.args) && !_.isEqual(nav1.args, nav2.args)) {
                        return false;
                    }
                    if (!_.isUndefined(nav1.module) && (nav1.module !== nav2.module)) {
                        return false;
                    }
                    // if none of the above fail return true.
                    return true;

                }

                var searchNavForMatchedNav = function(nav) {
                    var foundChild = undefined;
                    if (_.isUndefined(nav.children)) {
                        if (!_.isUndefined(nav.matched) && nav.matched === 100 && !containsPathParamter(nav)) {
                            return nav;
                        }
                    } else if (_.isArray(nav.children)) {
                        _.each(nav.children, function(child) {
                            if (_.isUndefined(foundChild)) {
                                foundChild = searchNavForMatchedNav(child);
                            }
                        });
                    }

                    return foundChild;
                };

                var containsPathParamter = function(nav) {
                    var flag = false;
                    if (nav.label.indexOf(':') !== -1) {
                        flag = true;
                    }
                    if (flag !== true) {
                        _.each(nav.tags, function(tag) {
                            if (tag.indexOf(':') !== -1) {
                                flag = true;
                            }
                        });
                    }

                    return flag;
                };

                var firstTime = true;

                var ResizeMegaMenu = function() {
                    var fisHeader = angular.element('.app > header');
                    var fisTabBar = angular.element('.app > nav');
                    var fisFooter = angular.element('.app > footer');
                    var fisMegaMenu = element;
                    var fisSiteMap = fisMegaMenu.find('.fis-sitemap');
                    var fisStartMenuLeft = fisMegaMenu.find('.fis-start-menu-left');
                    var fisStartMenuList = fisStartMenuLeft.find('.fis-start-menu-list');
                    var parents = fisSiteMap.parents().get();
                    var defaultMinHeight = 300;

                    var chromeToList, chromeToMegaMenu; // Maintains the height of the border, margin, and padding from the fis-sitemap element.
                    var foundChromeToList = false;

                    // Reset all at the moment applied special CSS hacks
                    // so we've got a consistent state to determine new values
                    fisStartMenuLeft.css('max-height', 'none');
                    fisSiteMap.css('max-height', 'none');
                    fisSiteMap.css('min-height', 'none');

                    chromeToList = chromeToMegaMenu = fisSiteMap.outerHeight(true) - fisSiteMap.height(); // Initialize at fis-sitemap.

                    _.find(parents, function(parent) {
                        var p = $(parent);

                        if (!foundChromeToList) {
                            chromeToList += p.outerHeight(true) - p.height();
                            foundChromeToList = p.hasClass('fis-mega-menu'); // chromeToList stops at this element.
                        }

                        chromeToMegaMenu += p.outerHeight(true) - p.height();

                        return (p.attr('fis-mega-menu') !== undefined); // chromeToMegaMenu stops at this element.
                    });

                    var windowHeight = fisResponsiveService.getHeight();
                    var headerAndTabHeight = fisHeader.outerHeight(true) + fisTabBar.outerHeight(true);
                    var footerHeight = fisFooter.outerHeight(true);
                    var bufferFromFooter = 20;

                    // Calculate the min and max heights.
                    var maxHeight = windowHeight - headerAndTabHeight - chromeToMegaMenu - footerHeight - bufferFromFooter;
                    var minHeight = fisStartMenuLeft.outerHeight(true) - chromeToList;

                    // If the calculated min-height is lower than the default min-height,
                    // assign the default min-height.
                    minHeight = (minHeight > defaultMinHeight) ? minHeight : defaultMinHeight;

                    // If the height of the viewport is so tight that it is below the min-height,
                    // make the site map list height the same as the content area so that scroll bars
                    // appear in the list.  Otherwise, content will be hidden.
                    if (maxHeight < minHeight) {
                        minHeight = maxHeight;
                        fisStartMenuLeft.css('max-height', minHeight + chromeToList);
                    } else {
                        fisStartMenuLeft.css('max-height', 'none');
                    }

                    fisSiteMap.css('max-height', maxHeight);
                    fisSiteMap.css('min-height', minHeight);
                };


                element.bind('mouseenter mouseleave', toggleMegaMenuHover);

                LoadMasonry();

                fisPubSubService.subscribe('fisMenuReset', function() {
                    ResetMasonry();
                    $timeout(function() {
                        ResizeMegaMenu();
                    }, 0, false);
                });

                scope.$watch('$parent.startMenuModel.closed', function(newValue) {
                    if (!newValue) {
                        $timeout(function() {
                            var search = getSearchInput();

                            if (search) {
                                search.select();
                            }
                        }, 0, false);
                    }
                });

                element.click(function(e) {
                    var search = getSearchInput();

                    if (search) {
                        search.select();
                    }
                });

                scope.$watch('$parent.startMenuModel.selectedMenuItem', function(newValue) {
                    if (newValue !== null) {
                        LayoutMasonry(newValue.view.id, true);

                        $timeout(function() {
                            ResizeMegaMenu();
                        }, 0, false);
                    }
                });

                /**
                 * Perform a search on the mega menu entries.
                 */
                function performSearch(){
                    var minSearchCharacters = fisMegaMenuSearchService.getMinSearchCharacters();

                    if (searchText.length >= minSearchCharacters && searchText.length !== 0) { //0 being the default
                        var nav = fisMegaMenuSearchService.strictExtendedSearch(searchText, startMenuModel.navMap);
                        var searchItem = _.last(startMenuModel.menuItems.children);
                        searchItem.children = scope.$parent.getViewsAsMenuItems(nav, _.last(startMenuModel.menuItems.children).view);
                        angular.forEach(searchItem.children, function (result) {
                            scope.$parent.isItemInViewToShow(result);
                        });
                        scope.filteredNavs = nav;
                        scope.$broadcast('fisViewsFiltered', nav);
                    } else {
                        scope.$parent.resetSearch();
                    }

                    scope.updateFlattenViews(startMenuModel.menuItems.children);
                    $timeout(function() {
                        LayoutMasonry(_.last(startMenuModel.menuItems.children).view.id, true);
                        $timeout(function() {
                            ResizeMegaMenu();
                        }, 0, false);
                    }, 0, false);
                }

                /**
                 * Trigger a mega menu search. Either sets a timeout or calls performSearch() directly
                 * @param immediately true if search should be performed immediately, false to use a timeout
                 */
                function triggerSearch(immediately){
                    startMenuModel.selectedMenuItem = _.last(startMenuModel.menuItems.children);
                    var searchTimeout = fisMegaMenuSearchService.getSearchTimeout(); //default timeout
                    if (startMenuModel.searchable && startMenuModel.enabled) {

                        if (scope.viewModel.searchTimeout) {
                            $timeout.cancel(scope.viewModel.searchTimeout);
                            scope.viewModel.searchTimeout = null;
                        }

                        if (immediately){
                            performSearch();
                        } else {
                            // Immediately clear existing results, as they are not valid any longer, because we changed the search term
                            scope.$parent.resetSearch();
                            scope.updateFlattenViews(startMenuModel.menuItems.children);
                            scope.filteredNavs = [];

                            // Set timeout to search for new results
                            scope.viewModel.searchTimeout = $timeout(function() {
                                performSearch();
                            }, searchTimeout);
                        }
                    }
                }

                /**
                 * Opens the exact search result match if there is one
                 * @param e Event that caused the opening
                 */
                function tryOpenExactMatch(e){
                    if (!_.isEmpty(scope.filteredNavs)){
                        var matchedNav = retrieveFirstMatchedNav(scope.filteredNavs);
                        if (_.isUndefined(matchedNav)) {
                            matchedNav = checkAllResultsAreSame(scope.filteredNavs);
                        }
                        if (!_.isUndefined(matchedNav)) {
                            scope.fisNavigationLinkClicked();
                            scope.open(matchedNav.path, e);
                        }
                    }
                }

                scope.searchKeyUp = function(event) {
                    searchText = $(event.currentTarget).val().trim();
                    switch (event.keyCode) {
                        case 37: // Arrow Left
                            return false;
                        case 38: // Arrow Up
                            var prevMenuItem = getPreviousMenuItem(startMenuModel.selectedMenuItem);

                            if (startMenuModel.selectedMenuItem !== prevMenuItem) {
                                startMenuModel.selectedMenuItem = prevMenuItem;
                            }
                            break;
                        case 39: // Arrow right
                            return false;
                        case 40: // Arrow down
                            var nextMenuItem = getNextMenuItem(startMenuModel.selectedMenuItem);

                            if (startMenuModel.selectedMenuItem !== nextMenuItem) {
                                startMenuModel.selectedMenuItem = nextMenuItem;
                            }
                            break;
                        case 27: // Esc
                            startMenuModel.closed = true;
                            break;
                        case 13: // Enter
                            if (_.isEmpty(scope.filteredNavs)){
                                // If no nav items present, perform an immediate search on enter press
                                triggerSearch(true);
                            }
                            // Try to open an exact match, if there is one
                            tryOpenExactMatch(event);
                            break;
                        default:
                            if ((event.keyCode !== 17) && (event.keyCode !== 18) && (event.keyCode !== 9)) { // No Ctrl, Alt or Tab Key
                                triggerSearch(false);
                            }
                            break;
                    }
                    //return false;
                };

                scope.tooShortTerm = function() {
                    var minSearchCharacters = fisMegaMenuSearchService.getMinSearchCharacters();

                    return (startMenuModel.selectedMenuItem == _.last(startMenuModel.menuItems.children) && searchText.length < minSearchCharacters);
                };

                scope.getSearchLabel = function(forceDescription) {
                    var minSearchCharacters = fisMegaMenuSearchService.getMinSearchCharacters();

                    if (forceDescription || minSearchCharacters !== 0) {
                        return $filter('interpolate')(fisI18nService.translate('fisMegaMenu.requiredSearchCharacters', 'Please enter at least {0} characters to start searching'), Math.max(1, minSearchCharacters));
                    } else {
                        return fisI18nService.translate('fisMegaMenu.search', 'Search...')
                    }
                };

                scope.isItemInViewToShow = function(itemInView) {
                    if (itemInView.view.id === 'SearchItem') {
                        return true;
                    }
                    if (itemInView.children && itemInView.children.length > 0 && !hasValidChildren(itemInView.children)) {
                        return false;
                    }
                    if (itemInView.parent && itemInView.parent.cls === 'hide') {
                        return false;
                    } else {
                        if (itemInView.children && itemInView.children.length > 0) {
                            var hiddenItem = _.filter(itemInView.children, function(item) {
                                if (item.view.cls === 'hide') {
                                    return item;
                                }
                            });
                            if (itemInView.children.length === hiddenItem.length) {
                                return false;
                            }
                        }
                    }
                    return true;
                };

                function hasValidChildren(children) {
                    var isValid = false;
                    for (var i = 0; i < children.length; i++) {
                        if ((children[i].view.secondaryNav || children[i].view.partial || children[i].view.action || (hasValidChildren(children[i].children))) && children[i].view.cls !== 'hide') {
                            isValid = true;
                            break;
                        }
                    }
                    return isValid;
                }
            }
        };
    }
]);
