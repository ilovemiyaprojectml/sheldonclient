/**
 * @name fisMegaMenuSearchService
 * @description fisMegaMenuSearchService will be responsible for search functionality on the Mega Menu.
 */
'use strict';
angular.module('fis.megamenu').provider('fisMegaMenuSearchService', function () {

    var self = this;
    self.searchSetting = {
        "searchTimeout": 250,
        "minSearchCharacters": 0
    } ;

    function hasChildren(node) {
        // some items in nav should not form part of the search - children of navItems that have an action
        // See "Open Modal Dialog" as example
        return (!_.isUndefined(node.children) && node.children.length > 0 && !node.action);
    }

    function hasQuickLinks(node) {
        return (!_.isUndefined(node.quickLinks) && node.quickLinks.length > 0);
    }

    function cloneNode(node) {
        var clone = _.clone(node);
        clone.children = undefined;
        clone.quickLinks = undefined;
        return clone;
    }

    // Parameterized child pages does not form part of the search results
    function nodeIdNotParameterized(node) {
        return (!_.isUndefined(node.id) && node.id.indexOf(':') === -1);
    }

    function labelSearchSuccessful(searchText, node, excludeParItems) {
        return (!_.isUndefined(node.label) && node.label.toLowerCase().indexOf(searchText) >= 0 && (!excludeParItems || nodeIdNotParameterized(node)));
    }

    function tagSearchSuccessful(searchText, node, excludeParItems) {
        // Search in the tag
        return  _.some(node.tags, function (tag) {
            if (excludeParItems) {
                return tag.toLowerCase().indexOf(searchText) >= 0 && nodeIdNotParameterized(node);
            } else {
                return tag.toLowerCase().indexOf(searchText) >= 0;
            }
        });
    }

    function calculateMatchedWeight(searchText,node){
        //set the default matched weight
        // this is set to default because this method is called under conditions, whereby the search text is present
        // in the node. i.e( this method is called after the labelSearchSuccessful or the tagSearchSuccessful methods have evaluated to true)
        node.matched = 50;

        //calculate the matched weight on the label
        if(node.label.toLowerCase() === searchText){
            node.matched = 100;
        }

        //calculate the matched weight on the tabs
        _.some(node.tags,function(tag){
            if(tag.toLowerCase() === searchText){
                node.matched = 100;
            }
        });

        return node;

    }

    self.$get = ['fisConfigService', function (fisConfigService) {
        var service = {};
        service.searchSettings = self.searchSetting;

        fisConfigService.then(function (conf) {
            if (conf.menuApi && conf.menuApi.searchTimeout) {
                service.searchSettings.searchTimeout = conf.menuApi.searchTimeout;
            }
            if (conf.menuApi && conf.menuApi.minSearchCharacters) {
                service.searchSettings.minSearchCharacters = conf.menuApi.minSearchCharacters;
            }
        });
        function filterChildren(searchText, node, excludeParItems, doStrictSearch) {
            var clone = {};

            // Check whether the current node satisfies the search criteria
            if (labelSearchSuccessful(searchText, node, excludeParItems) || tagSearchSuccessful(searchText, node, excludeParItems)) {
             // node = calculateMatchedWeight(searchText,node);
                clone = _.clone(node);
                clone = calculateMatchedWeight(searchText,clone);
                clone.children = undefined;
            }

            // Check whether the current node has children
            if (hasChildren(node)) {
                // Search for search matches in the children
                var children = [];
                _.each(node.children, function (child) {
                    var c = filterChildren(searchText, child, excludeParItems, doStrictSearch);
                    if (!_.isUndefined(c)) {
                        children.push(c);
                    }
                });

                // This if checks to see if any of the current node has children that satisfy the search,
                // in which case they will be included in clones
                if (children && children.length > 0) {
                    if (_.isEmpty(clone)) {
                        clone = cloneNode(node);
                    }
                    clone.children = children;

                // if strictSearch and no children - check if node is clickable - i.e. action or partial
                } else if (doStrictSearch) {
                    var hasPartial = !_.isUndefined(node.partial);
                    var hasAction = !_.isUndefined(node.action);
                    var hasSecondaryNav = !_.isUndefined(node.secondaryNav);

                    //If this is a leaf with no partial or action - then return undefined
                    // If this is a node (not leaf) that satisfies the labelSearch, but has no children that satisfies the labelSearch,
                    // then it must not display if it is not clickable, i.e. no partial and no action on it
                    if (!hasPartial && !hasAction && !hasSecondaryNav) {
                        return undefined;
                    }
                }
            }
            if (_.isEmpty(clone)) {
                return undefined;
            } else {
                return clone;
            }
        }

        service.search = function (searchText, nav, excludeParameterizedItems, strictSearch) {

            var excludeParItems = false;
            if (!_.isUndefined(excludeParameterizedItems)) {
                excludeParItems = excludeParameterizedItems;
            }

            var doStrictSearch = false;
            if (!_.isUndefined(strictSearch)) {
                doStrictSearch = strictSearch;
            }

            searchText = searchText.toLowerCase();
            var filteredNav = [];
            _.each(nav, function (node) {

                // Only search in menu items, not static pages - test for static pages => closeable="false"
                var nodeIsClosable = true;
                if (!_.isUndefined(node.closeable) && node.closeable === false) {
                    nodeIsClosable = false;
                }

                if (nodeIsClosable) {
                    var result  = filterChildren(searchText, node, excludeParItems, doStrictSearch);

                    if (hasQuickLinks(node)) {
                        _.each(node.quickLinks, function (quickLink) {
                            var quickLinks = filterChildren(searchText, quickLink, excludeParItems, doStrictSearch);

                            if (!_.isUndefined(quickLinks)) {
                                if (_.isUndefined(result)) {
                                    result = {};
                                }
                                if (_.isUndefined(result.quickLinks)) {
                                    result.quickLinks = [];
                                }
                                result.quickLinks.push(quickLinks);
                            }
                        });
                    }
                    if (!_.isUndefined(result)) {
                        filteredNav.push(result);
                    }
                }
            });
            return filteredNav;
        };

        service.strictExtendedSearch = function (searchText, navMap, excludeParameterizedItems) {
            return service.extendedSearch(searchText, navMap, excludeParameterizedItems, true);
        };

        service.extendedSearch = function(searchText, navMap, excludeParameterizedItems, strictSearch){
            var extFilteredNav = [];
            var fillNav;

            for (var key in navMap) {
                fillNav = service.search(searchText, navMap[key], excludeParameterizedItems, strictSearch);
                if(!_.isUndefined(fillNav) && fillNav.length > 0){
                    extFilteredNav = extFilteredNav.concat(fillNav);
                }
            }
            return extFilteredNav;
        }

        // This method used to search for text in the nav tree,
        // returning (in tree format) nodes that are clickable, i.e. has partials or actions on the leaves,
        // Typically this method is used to get results using the searchbox in the megamenu
        service.strictSearch = function (searchText, nav, excludeParameterizedItems) {
            return service.search(searchText, nav, excludeParameterizedItems, true);
        };

        service.setSearchTimeout  = function(searchTimeout){
            if(searchTimeout >= 0 )//must be able to set it to zero
            {
            service.searchSettings.searchTimeout = searchTimeout;
            }
        }
        service.setMinSearchCharacters  = function(minSearchCharacters){
            if(minSearchCharacters >= 0 )//must be able to set it to zero
            {
                service.searchSettings.minSearchCharacters = minSearchCharacters;
            }
        }
        service.getSearchTimeout = function(){

            return   service.searchSettings.searchTimeout;
        }
        service.getMinSearchCharacters = function(){

            return   service.searchSettings.minSearchCharacters;
        }
        return service;
    }];
});
