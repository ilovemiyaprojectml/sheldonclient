/*!
@ruf/fis-bootstrap-table
Version: 2.5.0

© 2016
Fidelity National Information Services, Inc. and/or its subsidiaries - All Rights Reserved worldwide.
This document is protected under the trade secret and copyright laws as the property of Fidelity National Information Services, Inc. and/or its subsidiaries.
Copying, reproduction or distribution should be limited and only to employees with a “need to know” to do their job. Any disclosure of this document to third parties is strictly prohibited.
*/
(function () {
  'use strict';
  // DO NOT change the name of following variable. It it being used by sub-generators to add new module names
  /* jshint camelcase: false */
  /* eslint-disable camelcase */
  var __lib_mod_deps = [
    'smart-table',
    'ui.bootstrap',
    'fis.bootstrap.table'
  ];
  angular.module('fis.bootstrap.table', __lib_mod_deps);
}());

(function () {
  'use strict';

  angular
    .module('fis.bootstrap.table')
    .directive('stRatio', columnRatio);

  function columnRatio() {
    'use strict';

    return {
      link: function (scope, element, attr) {
        var ratio = attr.stRatio;

        element.css('width', ratio + '%');
      }
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.table')
    .directive('fisBsDropdownMultiselect', dropdownMultiselect);

  function dropdownMultiselect() {
    'use strict';
    return {
      restrict: 'E',
      scope: {
        options: '='
      },
      templateUrl: 'table/dropdownMultiselect.directive.html',
      link: function (scope) {
        scope.setSelectedItem = function (e) {
          e.stopPropagation();
          var id = this.option.id;
          scope.showHide(id);
          return false;
        };

        scope.isChecked = function (val) {
          if (val) {
            return 'icon-ok';
          }
          return false;
        };

        scope.showHide = function (id) {
          var val = scope.$parent.roles[id].checkValue;
          if (val) {
            scope.$parent.roles[id].checkValue = false;
          } else {
            scope.$parent.roles[id].checkValue = true;
          }
        };
      }
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.table')
    .directive('fisBsPaginationLocal', paginationLocal);

  function paginationLocal() {
    'use strict';
    return {
      restrict: 'EA',
      require: '^stTable',
      scope: {
        stItemsByPage: '=?',
        stDisplayedPages: '=?',
        stPageTemplate: '=?'
      },
      templateUrl: 'table/paginationLocal.directive.html',
      link: function (scope, element, attrs, ctrl) {
        scope.stItemsByPage = scope.stItemsByPage ? scope.stItemsByPage : 10;
        scope.stDisplayedPages = scope.stDisplayedPages ? scope.stDisplayedPages : 5;

        scope.currentPage = 1;
        scope.pages = [];

        function redraw() {
          var paginationState = ctrl.tableState().pagination;
          var start = 1;
          var end;
          var i;

          scope.currentPage = Math.floor(paginationState.start / paginationState.number) + 1;
          scope.totalItemCount = paginationState.totalItemCount;
          start =
            Math.max(start, scope.currentPage - Math.abs(Math.floor(scope.stDisplayedPages / 2)));
          end = start + scope.stDisplayedPages;

          if (end > paginationState.numberOfPages) {
            end = paginationState.numberOfPages + 1;
            start = Math.max(1, end - scope.stDisplayedPages);
          }

          scope.pages = [];
          scope.numPages = paginationState.numberOfPages;

          for (i = start; i < end; i++) {
            scope.pages.push(i);
          }
        }

        // table state --> view
        scope.$watch(function () {
          return ctrl.tableState().pagination;
        }, redraw, true);

        // scope --> table state (--> view)
        scope.$watch('stItemsByPage', function () {
          scope.selectPage(1);
        });

        scope.$watch('stDisplayedPages', redraw);

        // view -> table state
        scope.selectPage = function (page) {
          if (page > 0 && page <= scope.numPages) {
            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
          }
        };

        scope.nextPage = function () {
          if (scope.numPages > scope.currentPage) {
            var page = scope.currentPage + 1;
            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
          }
        };

        scope.changePageCount =
          function () {
            if (scope.currentPage === 1) {
              return '1-' + scope.stItemsByPage;
            } else if (scope.currentPage < scope.numPages) {
              return (scope.stItemsByPage) * (scope.currentPage - 1) + 1 + '-' +
                scope.stItemsByPage * scope.currentPage;
            } else if (scope.currentPage === scope.numPages) {
              return (scope.stItemsByPage) * (scope.currentPage - 1) + 1 + '-' +
                scope.totalItemCount;
              //   + scope.$parent.tableDataArr.length;
            }
          };

        scope.totalRecords = function () {
          //	var id= attrs.tableid;
          //	console.log("Total number of records:"+ scope.totalItemCount +" for id" +   id);
          return scope.totalItemCount;
        };

        scope.previousPage = function () {
          if (scope.currentPage > 1) {
            var page = scope.currentPage - 1;
            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
          }
        };

        scope.lastPage = function () {
          if (scope.numPages > scope.currentPage) {
            var page = scope.numPages;
            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
          }
        };
        // select the first page
        ctrl.slice(0, scope.stItemsByPage);
      }

    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.table')
    .directive('fisBsPaginationServer', paginationServer);

  function paginationServer() {
    'use strict';
    return {
      restrict: 'EA',
      require: '^stTable',
      scope: {
        stItemsByPage: '=?',
        stDisplayedPages: '=?',
        stPageTemplate: '=?',
        stRetrieveTableData: '&'
      },
      templateUrl: 'table/paginationServer.directive.html',
      link: function (scope, element, attrs, ctrl) {
        scope.stItemsByPage = scope.stItemsByPage ? scope.stItemsByPage : 10;
        // scope.stItemsByPage = 1; // hard coded this value as we are
        // displaying two tables at same page with different values of
        // 'stItemsByPage'
        scope.stDisplayedPages = scope.stDisplayedPages ? scope.stDisplayedPages : 5;

        scope.currentPage = 1;
        scope.pages = [];

        function redraw() {
          var paginationState = ctrl.tableState().pagination;

          paginationState.numberOfPages = scope.$parent.numberOfPages;
          scope.totalItemCount = paginationState.totalItemCount;

          var start = 1;
          var end;
          // scope.currentPage =
          // Math.floor(paginationState.start / paginationState.number) + 1; //commented it for server side pagination

          start =
            Math.max(start, scope.currentPage -
            Math.abs(Math.floor(scope.stDisplayedPages / 2)));
          end = start + scope.stDisplayedPages;

          if (end > paginationState.numberOfPages) {
            end = paginationState.numberOfPages + 1;
            start = Math.max(1, end - scope.stDisplayedPages);
          }

          scope.pages = [];
          scope.numPages = paginationState.numberOfPages;
          /*  if (typeof scope.$parent.tableDataArr != 'undefined')
               generatePagesArray(scope.currentPage, scope.$parent.tableDataArr.length,
                  scope.stItemsByPage, scope.stDisplayedPages);	*/
          if (scope.totalItemCount > 0) {
            generatePagesArray(scope.currentPage, scope.totalItemCount,
              scope.stItemsByPage, scope.stDisplayedPages);
          }

          /*
          for (i = start; i < end; i++)
          {
             scope.pages.push(i);
          }
          */
        }

        function generatePagesArray(currentPage, collectionLength, rowsPerPage,
          paginationRange) {
          // var totalPages = Math.ceil(collectionLength / rowsPerPage);
          var totalPages = scope.$parent.numberOfPages;
          var halfWay = Math.ceil(paginationRange / 2);
          var position;

          if (currentPage <= halfWay) {
            position = 'start';
          } else if (totalPages - halfWay < currentPage) {
            position = 'end';
          } else {
            position = 'middle';
          }

          var ellipsesNeeded = paginationRange < totalPages;
          var i = 1;
          while (i <= totalPages && i <= paginationRange) {
            var pageNumber =
              calculatePageNumber(i, currentPage, paginationRange, totalPages);

            var openingEllipsesNeeded =
              (i === 2 && (position === 'middle' || position === 'end'));
            var closingEllipsesNeeded =
              (i === paginationRange - 1 && (position === 'middle' || position === 'start'));
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
              scope.pages.push('...');
            } else {
              scope.pages.push(pageNumber);
            }
            i++;
          }
          // return pages;
        }

        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {
          var halfWay = Math.ceil(paginationRange / 2);
          if (i === paginationRange) {
            return totalPages;
          } else if (i === 1) {
            return i;
          } else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
              return totalPages - paginationRange + i;
            } else if (halfWay < currentPage) {
              return currentPage - halfWay + i;
            }

            return i;
          }

          return i;
        }

        // table state --> view
        scope.$watch(function () {
          return ctrl.tableState().pagination;
        }, redraw, true);

        // scope --> table state (--> view)
        scope.$watch('stItemsByPage', function () {
          scope.selectPage(1);
        });

        scope.$watch('stDisplayedPages', redraw);

        // view -> table state
        scope.selectPage = function (page) {
          if (page > 0 && page <= scope.numPages) {
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        scope.nextPage = function () {
          if (scope.numPages > scope.currentPage) {
            var page = scope.currentPage + 1;
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        scope.previousPage = function () {
          if (scope.currentPage > 1) {
            var page = scope.currentPage - 1;
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        scope.lastPage = function () {
          if (scope.numPages > scope.currentPage) {
            var page = scope.numPages;
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        // select the first page
        ctrl.slice(0, scope.stItemsByPage);
      }
    };
  }
})();


(function () {
  'use strict';

  angular
    .module('fis.bootstrap.table')
    .directive('fisBsShowhideColumns', showhideColumns);

  function showhideColumns() {
    'use strict';

    return {
      link: function (scope, element, attrs) {
        scope.$watch(attrs.fisBsShowhideColumns, function (value) {
          if (value) {
            element.css('display', 'table-cell');
          } else {
            element.css('display', 'none');
          }
        });
      }
    };
  }
})();


angular.module('fis.bootstrap.table').run(['$templateCache', function($templateCache) {
  $templateCache.put("table/dropdownMultiselect.directive.html",
    "<div class=\"btn-group multiselect-dropdown\" is-open=status.isopen uib-dropdown><button type=button class=\"btn btn-default uib-dropdown-toggle\" uib-dropdown-toggle ng-disabled=disabled>Show <span class=caret></span></button><ul class=\"dropdown-menu dropdown-menu-custom\" role=menu aria-labelledby=dropdownMenu><li ng-repeat=\"option in options\"><a ng-click=setSelectedItem($event);$event.stopPropagation(); ng-model=option.checkValue><span ng-class=isChecked(option.checkValue)></span>{{option.name}}</a></li></ul></div>");
  $templateCache.put("table/paginationLocal.directive.html",
    "<div class=\"pagination fis-bs-pagination\" ng-if=\"pages.length >= 2\"><ul class=\"pagination fis-bs-pagination\"><li ng-class=\"{ disabled : currentPage == 1 }\"><a href=\"\" ng-click=selectPage(1)>&lt;&lt;</a></li><li ng-class=\"{ disabled : currentPage == 1 }\"><a href=\"\" ng-click=previousPage()>&lt;</a></li><li><a href=\"\"><b>{{changePageCount()}}</b> of {{totalRecords()}}</a></li><li ng-class=\"{ disabled : currentPage == numPages }\" class=ng-scope><a href=\"\" ng-click=nextPage()>&gt;</a></li><li ng-class=\"{ disabled : currentPage == numPages }\" class=ng-scope><a href=\"\" ng-click=lastPage()>&gt;&gt;</a></li></ul></div>");
  $templateCache.put("table/paginationServer.directive.html",
    "<div class=\"pagination fis-bs-pagination\" ng-if=\"pages.length >= 2\"><ul class=\"pagination fis-bs-pagination\"><li ng-class=\"{ disabled : currentPage == 1 }\"><a ng-click=selectPage(1)>&lt;&lt;</a></li><li ng-class=\"{ disabled : currentPage == 1 }\"><a ng-click=previousPage()>&lt;</a></li><li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page==currentPage, disabled : page== '...' }\"><a ng-click=selectPage(page)>{{page}}</a></li><li ng-class=\"{ disabled : currentPage == numPages }\" class=ng-scope><a ng-click=nextPage()>&gt;</a></li><li ng-class=\"{ disabled : currentPage == numPages }\" class=ng-scope><a ng-click=lastPage()>&gt;&gt;</a></li></ul></div>");
}]);
