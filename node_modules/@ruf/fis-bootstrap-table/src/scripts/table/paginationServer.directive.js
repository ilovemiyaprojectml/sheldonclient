(function () {
  'use strict';

  angular
    .module('fis.bootstrap.table')
    .directive('fisBsPaginationServer', paginationServer);

  function paginationServer() {
    'use strict';
    return {
      restrict: 'EA',
      require: '^stTable',
      scope: {
        stItemsByPage: '=?',
        stDisplayedPages: '=?',
        stPageTemplate: '=?',
        stRetrieveTableData: '&'
      },
      templateUrl: 'table/paginationServer.directive.html',
      link: function (scope, element, attrs, ctrl) {
        scope.stItemsByPage = scope.stItemsByPage ? scope.stItemsByPage : 10;
        // scope.stItemsByPage = 1; // hard coded this value as we are
        // displaying two tables at same page with different values of
        // 'stItemsByPage'
        scope.stDisplayedPages = scope.stDisplayedPages ? scope.stDisplayedPages : 5;

        scope.currentPage = 1;
        scope.pages = [];

        function redraw() {
          var paginationState = ctrl.tableState().pagination;

          paginationState.numberOfPages = scope.$parent.numberOfPages;
          scope.totalItemCount = paginationState.totalItemCount;

          var start = 1;
          var end;
          // scope.currentPage =
          // Math.floor(paginationState.start / paginationState.number) + 1; //commented it for server side pagination

          start =
            Math.max(start, scope.currentPage -
            Math.abs(Math.floor(scope.stDisplayedPages / 2)));
          end = start + scope.stDisplayedPages;

          if (end > paginationState.numberOfPages) {
            end = paginationState.numberOfPages + 1;
            start = Math.max(1, end - scope.stDisplayedPages);
          }

          scope.pages = [];
          scope.numPages = paginationState.numberOfPages;
          /*  if (typeof scope.$parent.tableDataArr != 'undefined')
               generatePagesArray(scope.currentPage, scope.$parent.tableDataArr.length,
                  scope.stItemsByPage, scope.stDisplayedPages);	*/
          if (scope.totalItemCount > 0) {
            generatePagesArray(scope.currentPage, scope.totalItemCount,
              scope.stItemsByPage, scope.stDisplayedPages);
          }

          /*
          for (i = start; i < end; i++)
          {
             scope.pages.push(i);
          }
          */
        }

        function generatePagesArray(currentPage, collectionLength, rowsPerPage,
          paginationRange) {
          // var totalPages = Math.ceil(collectionLength / rowsPerPage);
          var totalPages = scope.$parent.numberOfPages;
          var halfWay = Math.ceil(paginationRange / 2);
          var position;

          if (currentPage <= halfWay) {
            position = 'start';
          } else if (totalPages - halfWay < currentPage) {
            position = 'end';
          } else {
            position = 'middle';
          }

          var ellipsesNeeded = paginationRange < totalPages;
          var i = 1;
          while (i <= totalPages && i <= paginationRange) {
            var pageNumber =
              calculatePageNumber(i, currentPage, paginationRange, totalPages);

            var openingEllipsesNeeded =
              (i === 2 && (position === 'middle' || position === 'end'));
            var closingEllipsesNeeded =
              (i === paginationRange - 1 && (position === 'middle' || position === 'start'));
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
              scope.pages.push('...');
            } else {
              scope.pages.push(pageNumber);
            }
            i++;
          }
          // return pages;
        }

        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {
          var halfWay = Math.ceil(paginationRange / 2);
          if (i === paginationRange) {
            return totalPages;
          } else if (i === 1) {
            return i;
          } else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
              return totalPages - paginationRange + i;
            } else if (halfWay < currentPage) {
              return currentPage - halfWay + i;
            }

            return i;
          }

          return i;
        }

        // table state --> view
        scope.$watch(function () {
          return ctrl.tableState().pagination;
        }, redraw, true);

        // scope --> table state (--> view)
        scope.$watch('stItemsByPage', function () {
          scope.selectPage(1);
        });

        scope.$watch('stDisplayedPages', redraw);

        // view -> table state
        scope.selectPage = function (page) {
          if (page > 0 && page <= scope.numPages) {
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        scope.nextPage = function () {
          if (scope.numPages > scope.currentPage) {
            var page = scope.currentPage + 1;
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        scope.previousPage = function () {
          if (scope.currentPage > 1) {
            var page = scope.currentPage - 1;
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        scope.lastPage = function () {
          if (scope.numPages > scope.currentPage) {
            var page = scope.numPages;
            if (scope.stRetrieveTableData()) {
              scope.stRetrieveTableData()(page);
              ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
              scope.currentPage = page;
            }
          }
        };

        // select the first page
        ctrl.slice(0, scope.stItemsByPage);
      }
    };
  }
})();

