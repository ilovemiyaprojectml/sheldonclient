"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const exec = require("child_process");
const path = require("path");
const chalk_1 = require("chalk");
const templates = require("./files");
function migrateNavigation(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const routes = [];
        const lazyRoutes = [];
        let finalRoutes = [];
        const sidenavData = [];
        const unprocessedItems = [];
        const dasherize = (str = '') => str.replace(/([A-Z]+)/g, ' $1').replace(/([A-Z][a-z])/g, ' $1').replace(/\s+/g, '-').toLowerCase().substr(1);
        const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
        const replaceDotsAndDashesWithSpace = (str) => str.replace(/[-.]/g, ' ');
        const convertSpaceToUpperCase = (str) => str.replace(/(?:_| |\b)(\w)/g, (strg, p1) => p1.toUpperCase());
        console.log('RUF Navigation Accelerator Invoked!!!', options.flags);
        fs.readFile(options.flags.pathToNavigation, { encoding: 'utf8' }, (err, data) => {
            const mainNav = JSON.parse(data.toString()).main;
            writeFile('app.module.ts', templates.getAppModuleTs());
            exec.execSync(`ng g module test --project=${options.flags.project} --module=app --force`);
            exec.execSync(`ng g c test --project=${options.flags.project} --module=test --force`);
            writeFile('test/test.component.html', templates.getTestComponentHtml());
            writeFile('test/test.module.ts', templates.getTestModuleTs());
            mainNav.forEach((nav) => {
                readNavObj(nav);
            });
            writeFile('sidenav-item.ts', templates.getSideNavItemTs(sidenavData));
            writeFile('app.component.html', templates.getAppComponentHtml());
            writeFile('app.component.ts', templates.getAppComponentTs());
            writeFile('app-routing.module.ts', templates.getAppRoutingModuleTS(finalRoutes));
        });
        function readNavObj(nav) {
            console.log(chalk_1.default.green(nav.label));
            if (!nav.children && nav.partial) {
                routes.push(`{ path: "${nav.id}", component: TestComponent }`);
                sidenavData.push(`
      {
        label: '${nav.label}',
        path: '/${nav.id}'
      }`);
            }
            else if (nav.children) {
                const childRoutes = [];
                const childSideNavData = [];
                nav.children.forEach((child) => {
                    console.log(chalk_1.default.green('\t', child.label));
                    if (!child.children && child.partial) {
                        childRoutes.push(`
          { path: "${child.id}", component: TestComponent }`);
                        childSideNavData.push(`
          {
            label: '${child.label}',
            path: '/${nav.id}/${child.id}'
          }`);
                    }
                    else if (child.children) {
                        childSideNavData.push(`
          {
            label: '${child.label}',
            path: '/${nav.id}/${child.id}'
          }`);
                        const camelizedChildLabel = camelize(child.label);
                        const dasherizedChildLabel = dasherize(child.label);
                        exec.execSync(`ng g module ${camelizedChildLabel} --project=${options.flags.project} --module=app --routing=true --force`);
                        exec.execSync(`ng g class ${dasherizedChildLabel}/landing.component --skip-tests=true --project=${options.flags.project} --force
          `);
                        const tabRoutesFileName = `${dasherizedChildLabel}.tab-routes`;
                        exec.execSync(`ng g class ${dasherizedChildLabel}/${tabRoutesFileName} --skip-tests=true --project=${options.flags.project} --force
          `);
                        const tabRoutesImportName = convertSpaceToUpperCase(replaceDotsAndDashesWithSpace(tabRoutesFileName));
                        const finalRoutesName = tabRoutesImportName.charAt(0).toLowerCase() + tabRoutesImportName.slice(1);
                        const landingComponentTsContent = templates.getLandingComponentTs(finalRoutesName, dasherizedChildLabel, tabRoutesFileName);
                        const landingComponentFilePath = `${dasherizedChildLabel}/landing.component.ts`;
                        writeFile(landingComponentFilePath, landingComponentTsContent);
                        const innerChildRoutesArr = [];
                        child.children.forEach((innerChild) => {
                            console.log(chalk_1.default.green('\t\t', innerChild.label));
                            const innerChildName = convertSpaceToUpperCase(replaceDotsAndDashesWithSpace(innerChild.id));
                            const finalInnerChildName = innerChildName.charAt(0).toLowerCase() + innerChildName.slice(1);
                            innerChildRoutesArr.push(`
            ${finalInnerChildName}: {
              label: '${innerChild.label}',
              path: '${innerChild.id}'
            }`);
                            if (innerChild.children) {
                                innerChild.children.forEach((innerInnerChild) => {
                                    console.log((chalk_1.default.red('\t\t\t', innerInnerChild.label)));
                                    unprocessedItems.push(innerInnerChild);
                                });
                            }
                        });
                        const tabRouteNameConvertedToUC = convertSpaceToUpperCase(replaceDotsAndDashesWithSpace(tabRoutesFileName));
                        const finalTabRouteName = tabRouteNameConvertedToUC.charAt(0).toLowerCase() + tabRouteNameConvertedToUC.slice(1);
                        const tabRoutesContent = templates.getRouteTabsTs(innerChildRoutesArr, finalTabRouteName);
                        const routesTabFilePath = `${dasherizedChildLabel}/${dasherizedChildLabel}.tab-routes.ts`;
                        writeFile(routesTabFilePath, tabRoutesContent);
                        const innerChildRoutes = [];
                        child.children.forEach((innerChild) => {
                            const innerChildName = convertSpaceToUpperCase(replaceDotsAndDashesWithSpace(innerChild.id));
                            const finalInnerChildName = innerChildName.charAt(0).toLowerCase() + innerChildName.slice(1);
                            innerChildRoutes.push(`{
              path: ${finalTabRouteName}Metadata.${finalInnerChildName}.path,
              component: TestComponent
            }
            `);
                        });
                        const firstInnerChildName = convertSpaceToUpperCase(replaceDotsAndDashesWithSpace(child.children[0].id));
                        const finalFirstInnerChildName = firstInnerChildName.charAt(0).toLowerCase() + firstInnerChildName.slice(1);
                        const routingModuleName = `${capitalizeFirstLetter(replaceDotsAndDashesWithSpace(camelizedChildLabel))}RoutingModule`;
                        const routingFilePath = `${dasherizedChildLabel}/${dasherizedChildLabel}-routing.module`;
                        const routingFileName = `${dasherizedChildLabel}-routing.module`;
                        const moduleName = `${capitalizeFirstLetter(replaceDotsAndDashesWithSpace(camelizedChildLabel))}Module`;
                        const moduleFileName = `${dasherizedChildLabel}/${dasherizedChildLabel}.module`;
                        const routingChildren = templates.getChildRoutingModule(finalTabRouteName, tabRoutesFileName, finalFirstInnerChildName, innerChildRoutes, routingModuleName);
                        writeFile(`${routingFilePath}.ts`, routingChildren);
                        const moduleFileContent = templates.getChildModuleTs(routingModuleName, routingFileName, moduleName);
                        writeFile(`${moduleFileName}.ts`, moduleFileContent);
                    }
                });
                const lazyChildren = [];
                nav.children.forEach((child) => {
                    if (child.children) {
                        lazyChildren.push(`
          {
            "path": "${child.id}",
            loadChildren: () => import('./${dasherize(child.label)}/${dasherize(child.label)}.module').then(m => m.${capitalizeFirstLetter(camelize(child.label))}Module)
          }`);
                    }
                });
                lazyRoutes.push(`
      {
        "path": "${nav.id}",
        "children": [${lazyChildren}
        ]
      }`);
                if (childRoutes.length > 0) {
                    routes.push(`
      {
        path: "${nav.id}",
        component: TestComponent,
        children: [   ${childRoutes}
        ]
      }`);
                }
                else {
                    routes.push(`
      { path: "${nav.id}", component: TestComponent }`);
                }
                sidenavData.push(`
      {
        label: '${nav.label}',
        path: '/${nav.id}',
        children: [${childSideNavData}]
      }`);
            }
            finalRoutes = routes.concat(lazyRoutes);
            writeFile('unprocessed.json', JSON.stringify(unprocessedItems, null, 2));
        }
        function camelize(str) {
            if (str) {
                return str
                    .replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => {
                    return index === 0 ? word.toLowerCase() : word.toUpperCase();
                })
                    .replace(/\s+/g, '');
            }
            else {
                return '';
            }
        }
        function writeFile(filePath, content) {
            fs.writeFileSync(path.join(process.cwd(), 'apps', options.flags.path, 'src/app', filePath), content, { encoding: 'utf-8', flag: 'w' });
        }
    });
}
exports.migrateNavigation = migrateNavigation;
//# sourceMappingURL=data:application/json;base64,