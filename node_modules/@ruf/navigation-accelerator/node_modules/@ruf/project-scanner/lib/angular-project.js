"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const ts = require("typescript");
const path_1 = require("path");
const angularClassDecorators = [
    'Injectable',
    'Directive',
    'Pipe',
    'NgModule',
    'Component'
];
function getCompilerOptions(opts) {
    if (typeof opts === 'string') {
        const tsconf = JSON.parse(fs_1.readFileSync(opts).toString()).compilerOptions;
        tsconf.target = ts.ScriptTarget.ES5;
        tsconf.module = ts.ModuleKind.CommonJS;
        tsconf.moduleResolution = ts.ModuleResolutionKind.NodeJs;
        return tsconf;
    }
    return opts;
}
function traverseAngularProgram(fileNames, visitor, options = {
    compiler: {
        target: ts.ScriptTarget.ES5,
        module: ts.ModuleKind.CommonJS
    }
}) {
    const compilerOpts = getCompilerOptions(options.compiler);
    const program = ts.createProgram(fileNames, compilerOpts);
    const checker = program.getTypeChecker();
    for (const sourceFile of program.getSourceFiles()) {
        if (!sourceFile.isDeclarationFile) {
            ts.forEachChild(sourceFile, visit);
        }
    }
    return;
    function isNodeExported(node) {
        return ((ts.getCombinedModifierFlags(node) & ts.ModifierFlags.Export) !== 0 ||
            (!!node.parent && node.parent.kind === ts.SyntaxKind.SourceFile));
    }
    function visit(node) {
        if (!isNodeExported(node)) {
            return;
        }
        if (ts.isClassDeclaration(node) && node.name && node.decorators) {
            const symbol = checker.getSymbolAtLocation(node.name);
            const type = toAngularType(node.decorators);
            if (symbol && type) {
                visitor(buildEntry(node, symbol, type));
            }
        }
        else if (ts.isModuleDeclaration(node)) {
            ts.forEachChild(node, visit);
        }
    }
    function buildEntry(node, symbol, type) {
        const entry = Object.assign({ name: symbol.name, filePath: node.getSourceFile().fileName, dir: path_1.dirname(node.getSourceFile().fileName), jsDoc: ts.displayPartsToString(symbol.getDocumentationComment(checker)) }, type);
        return entry;
    }
    function propsToSettings(props) {
        return props.reduce((acc, prop) => {
            const init = prop.initializer;
            const name = prop.name.escapedText;
            if (!name.startsWith('style') &&
                !name.startsWith('template') &&
                !name.startsWith('animations')) {
                const val = (init.text && init.text.replace(/\s/g, '').replace(/,/g, ', ')) ||
                    (init.elements && init.elements.map((e) => e.getText()));
                if (val) {
                    acc[name] = val;
                }
            }
            return acc;
        }, {});
    }
    function toAngularType(decorators) {
        return decorators.reduce((acc, decorator) => {
            const symbol = checker.getSymbolAtLocation(decorator.expression.getFirstToken());
            if (symbol && angularClassDecorators.indexOf(symbol.name) !== -1) {
                const expr = decorator.expression;
                if (expr.arguments.length && expr.arguments[0].properties) {
                    const props = expr.arguments[0].properties;
                    return {
                        type: symbol.name,
                        settings: propsToSettings(props)
                    };
                }
                return {
                    type: symbol.name,
                    settings: {}
                };
            }
            return null;
        }, null);
    }
}
exports.traverseAngularProgram = traverseAngularProgram;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wcm9qZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FuZ3VsYXItcHJvamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUFrQztBQUNsQyxpQ0FBaUM7QUFDakMsK0JBQStCO0FBd0IvQixNQUFNLHNCQUFzQixHQUFHO0lBQzdCLFlBQVk7SUFDWixXQUFXO0lBQ1gsTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0NBQ1osQ0FBQztBQUVGLDRCQUNFLElBQWlDO0lBRWpDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztRQUN6RCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELGdDQUNFLFNBQW1CLEVBQ25CLE9BQXNDLEVBQ3RDLFVBQW1CO0lBQ2pCLFFBQVEsRUFBRTtRQUNSLE1BQU0sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUc7UUFDM0IsTUFBTSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUTtLQUMvQjtDQUNGO0lBRUQsTUFBTSxZQUFZLEdBQXVCLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUc5RSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFB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